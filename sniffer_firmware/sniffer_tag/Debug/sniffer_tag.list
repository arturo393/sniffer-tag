
sniffer_tag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009104  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08009214  08009214  0000a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f8  080099f8  0000b178  2**0
                  CONTENTS
  4 .ARM          00000008  080099f8  080099f8  0000a9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a00  08009a00  0000b178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a00  08009a00  0000aa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a04  08009a04  0000aa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08009a08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000178  08009b80  0000b178  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08009b80  0000b968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cbff  00000000  00000000  0000b1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e1  00000000  00000000  00057da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00048863  00000000  00000000  0005c681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  000a4ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000078e7  00000000  00000000  000a6308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f81a  00000000  00000000  000adbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034ec7  00000000  00000000  000cd409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a310e  00000000  00000000  001022d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a53de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005010  00000000  00000000  001a5424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001aa434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000178 	.word	0x20000178
 800012c:	00000000 	.word	0x00000000
 8000130:	080091fc 	.word	0x080091fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000017c 	.word	0x2000017c
 800014c:	080091fc 	.word	0x080091fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_frsub>:
 8000a0c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a10:	e002      	b.n	8000a18 <__addsf3>
 8000a12:	bf00      	nop

08000a14 <__aeabi_fsub>:
 8000a14:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a18 <__addsf3>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	bf1f      	itttt	ne
 8000a1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a20:	ea92 0f03 	teqne	r2, r3
 8000a24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2c:	d06a      	beq.n	8000b04 <__addsf3+0xec>
 8000a2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a36:	bfc1      	itttt	gt
 8000a38:	18d2      	addgt	r2, r2, r3
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	4048      	eorgt	r0, r1
 8000a3e:	4041      	eorgt	r1, r0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	2b19      	cmp	r3, #25
 8000a46:	bf88      	it	hi
 8000a48:	4770      	bxhi	lr
 8000a4a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a52:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a62:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4249      	negne	r1, r1
 8000a6a:	ea92 0f03 	teq	r2, r3
 8000a6e:	d03f      	beq.n	8000af0 <__addsf3+0xd8>
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	fa41 fc03 	asr.w	ip, r1, r3
 8000a78:	eb10 000c 	adds.w	r0, r0, ip
 8000a7c:	f1c3 0320 	rsb	r3, r3, #32
 8000a80:	fa01 f103 	lsl.w	r1, r1, r3
 8000a84:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__addsf3+0x78>
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a90:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a94:	d313      	bcc.n	8000abe <__addsf3+0xa6>
 8000a96:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a9a:	d306      	bcc.n	8000aaa <__addsf3+0x92>
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aa2:	f102 0201 	add.w	r2, r2, #1
 8000aa6:	2afe      	cmp	r2, #254	@ 0xfe
 8000aa8:	d251      	bcs.n	8000b4e <__addsf3+0x136>
 8000aaa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	4770      	bx	lr
 8000abe:	0049      	lsls	r1, r1, #1
 8000ac0:	eb40 0000 	adc.w	r0, r0, r0
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000acc:	d2ed      	bcs.n	8000aaa <__addsf3+0x92>
 8000ace:	fab0 fc80 	clz	ip, r0
 8000ad2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad6:	ebb2 020c 	subs.w	r2, r2, ip
 8000ada:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ade:	bfaa      	itet	ge
 8000ae0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae4:	4252      	neglt	r2, r2
 8000ae6:	4318      	orrge	r0, r3
 8000ae8:	bfbc      	itt	lt
 8000aea:	40d0      	lsrlt	r0, r2
 8000aec:	4318      	orrlt	r0, r3
 8000aee:	4770      	bx	lr
 8000af0:	f092 0f00 	teq	r2, #0
 8000af4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000af8:	bf06      	itte	eq
 8000afa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000afe:	3201      	addeq	r2, #1
 8000b00:	3b01      	subne	r3, #1
 8000b02:	e7b5      	b.n	8000a70 <__addsf3+0x58>
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d021      	beq.n	8000b58 <__addsf3+0x140>
 8000b14:	ea92 0f03 	teq	r2, r3
 8000b18:	d004      	beq.n	8000b24 <__addsf3+0x10c>
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	bf08      	it	eq
 8000b20:	4608      	moveq	r0, r1
 8000b22:	4770      	bx	lr
 8000b24:	ea90 0f01 	teq	r0, r1
 8000b28:	bf1c      	itt	ne
 8000b2a:	2000      	movne	r0, #0
 8000b2c:	4770      	bxne	lr
 8000b2e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b32:	d104      	bne.n	8000b3e <__addsf3+0x126>
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	bf28      	it	cs
 8000b38:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b3c:	4770      	bx	lr
 8000b3e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b42:	bf3c      	itt	cc
 8000b44:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bxcc	lr
 8000b4a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b4e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b5c:	bf16      	itet	ne
 8000b5e:	4608      	movne	r0, r1
 8000b60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b64:	4601      	movne	r1, r0
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	bf06      	itte	eq
 8000b6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6e:	ea90 0f01 	teqeq	r0, r1
 8000b72:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_ui2f>:
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e004      	b.n	8000b88 <__aeabi_i2f+0x8>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_i2f>:
 8000b80:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	bf48      	it	mi
 8000b86:	4240      	negmi	r0, r0
 8000b88:	ea5f 0c00 	movs.w	ip, r0
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b94:	4601      	mov	r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	e01c      	b.n	8000bd6 <__aeabi_l2f+0x2a>

08000b9c <__aeabi_ul2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e00a      	b.n	8000bc0 <__aeabi_l2f+0x14>
 8000baa:	bf00      	nop

08000bac <__aeabi_l2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__aeabi_l2f+0x14>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	ea5f 0c01 	movs.w	ip, r1
 8000bc4:	bf02      	ittt	eq
 8000bc6:	4684      	moveq	ip, r0
 8000bc8:	4601      	moveq	r1, r0
 8000bca:	2000      	moveq	r0, #0
 8000bcc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bda:	fabc f28c 	clz	r2, ip
 8000bde:	3a08      	subs	r2, #8
 8000be0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be4:	db10      	blt.n	8000c08 <__aeabi_l2f+0x5c>
 8000be6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f102 0220 	add.w	r2, r2, #32
 8000c0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c18:	fa21 f202 	lsr.w	r2, r1, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_fmul>:
 8000c28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c30:	bf1e      	ittt	ne
 8000c32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c36:	ea92 0f0c 	teqne	r2, ip
 8000c3a:	ea93 0f0c 	teqne	r3, ip
 8000c3e:	d06f      	beq.n	8000d20 <__aeabi_fmul+0xf8>
 8000c40:	441a      	add	r2, r3
 8000c42:	ea80 0c01 	eor.w	ip, r0, r1
 8000c46:	0240      	lsls	r0, r0, #9
 8000c48:	bf18      	it	ne
 8000c4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c4e:	d01e      	beq.n	8000c8e <__aeabi_fmul+0x66>
 8000c50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c68:	bf3e      	ittt	cc
 8000c6a:	0049      	lslcc	r1, r1, #1
 8000c6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c70:	005b      	lslcc	r3, r3, #1
 8000c72:	ea40 0001 	orr.w	r0, r0, r1
 8000c76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c7c:	d81d      	bhi.n	8000cba <__aeabi_fmul+0x92>
 8000c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	4770      	bx	lr
 8000c8e:	f090 0f00 	teq	r0, #0
 8000c92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c96:	bf08      	it	eq
 8000c98:	0249      	lsleq	r1, r1, #9
 8000c9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ca2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ca4:	bfc2      	ittt	gt
 8000ca6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000caa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cae:	4770      	bxgt	lr
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	dc5d      	bgt.n	8000d78 <__aeabi_fmul+0x150>
 8000cbc:	f112 0f19 	cmn.w	r2, #25
 8000cc0:	bfdc      	itt	le
 8000cc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000cc6:	4770      	bxle	lr
 8000cc8:	f1c2 0200 	rsb	r2, r2, #0
 8000ccc:	0041      	lsls	r1, r0, #1
 8000cce:	fa21 f102 	lsr.w	r1, r1, r2
 8000cd2:	f1c2 0220 	rsb	r2, r2, #32
 8000cd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cde:	f140 0000 	adc.w	r0, r0, #0
 8000ce2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ce6:	bf08      	it	eq
 8000ce8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cec:	4770      	bx	lr
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cf6:	bf02      	ittt	eq
 8000cf8:	0040      	lsleq	r0, r0, #1
 8000cfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cfe:	3a01      	subeq	r2, #1
 8000d00:	d0f9      	beq.n	8000cf6 <__aeabi_fmul+0xce>
 8000d02:	ea40 000c 	orr.w	r0, r0, ip
 8000d06:	f093 0f00 	teq	r3, #0
 8000d0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d0e:	bf02      	ittt	eq
 8000d10:	0049      	lsleq	r1, r1, #1
 8000d12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d16:	3b01      	subeq	r3, #1
 8000d18:	d0f9      	beq.n	8000d0e <__aeabi_fmul+0xe6>
 8000d1a:	ea41 010c 	orr.w	r1, r1, ip
 8000d1e:	e78f      	b.n	8000c40 <__aeabi_fmul+0x18>
 8000d20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d24:	ea92 0f0c 	teq	r2, ip
 8000d28:	bf18      	it	ne
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d00a      	beq.n	8000d46 <__aeabi_fmul+0x11e>
 8000d30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d34:	bf18      	it	ne
 8000d36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d3a:	d1d8      	bne.n	8000cee <__aeabi_fmul+0xc6>
 8000d3c:	ea80 0001 	eor.w	r0, r0, r1
 8000d40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	bf17      	itett	ne
 8000d4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d50:	4608      	moveq	r0, r1
 8000d52:	f091 0f00 	teqne	r1, #0
 8000d56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d5a:	d014      	beq.n	8000d86 <__aeabi_fmul+0x15e>
 8000d5c:	ea92 0f0c 	teq	r2, ip
 8000d60:	d101      	bne.n	8000d66 <__aeabi_fmul+0x13e>
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	d10f      	bne.n	8000d86 <__aeabi_fmul+0x15e>
 8000d66:	ea93 0f0c 	teq	r3, ip
 8000d6a:	d103      	bne.n	8000d74 <__aeabi_fmul+0x14c>
 8000d6c:	024b      	lsls	r3, r1, #9
 8000d6e:	bf18      	it	ne
 8000d70:	4608      	movne	r0, r1
 8000d72:	d108      	bne.n	8000d86 <__aeabi_fmul+0x15e>
 8000d74:	ea80 0001 	eor.w	r0, r0, r1
 8000d78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fdiv>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d069      	beq.n	8000e7c <__aeabi_fdiv+0xec>
 8000da8:	eba2 0203 	sub.w	r2, r2, r3
 8000dac:	ea80 0c01 	eor.w	ip, r0, r1
 8000db0:	0249      	lsls	r1, r1, #9
 8000db2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000db6:	d037      	beq.n	8000e28 <__aeabi_fdiv+0x98>
 8000db8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	bf38      	it	cc
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000dd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	bf24      	itt	cs
 8000dda:	1a5b      	subcs	r3, r3, r1
 8000ddc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000de0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000de4:	bf24      	itt	cs
 8000de6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000df2:	bf24      	itt	cs
 8000df4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	bf18      	it	ne
 8000e0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e12:	d1e0      	bne.n	8000dd6 <__aeabi_fdiv+0x46>
 8000e14:	2afd      	cmp	r2, #253	@ 0xfd
 8000e16:	f63f af50 	bhi.w	8000cba <__aeabi_fmul+0x92>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e20:	bf08      	it	eq
 8000e22:	f020 0001 	biceq.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e30:	327f      	adds	r2, #127	@ 0x7f
 8000e32:	bfc2      	ittt	gt
 8000e34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3c:	4770      	bxgt	lr
 8000e3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	3a01      	subs	r2, #1
 8000e48:	e737      	b.n	8000cba <__aeabi_fmul+0x92>
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fdiv+0xc2>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fdiv+0xda>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e795      	b.n	8000da8 <__aeabi_fdiv+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d108      	bne.n	8000e98 <__aeabi_fdiv+0x108>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	f47f af7d 	bne.w	8000d86 <__aeabi_fmul+0x15e>
 8000e8c:	ea93 0f0c 	teq	r3, ip
 8000e90:	f47f af70 	bne.w	8000d74 <__aeabi_fmul+0x14c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e776      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000e98:	ea93 0f0c 	teq	r3, ip
 8000e9c:	d104      	bne.n	8000ea8 <__aeabi_fdiv+0x118>
 8000e9e:	024b      	lsls	r3, r1, #9
 8000ea0:	f43f af4c 	beq.w	8000d3c <__aeabi_fmul+0x114>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e76e      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000ea8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000eac:	bf18      	it	ne
 8000eae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eb2:	d1ca      	bne.n	8000e4a <__aeabi_fdiv+0xba>
 8000eb4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000eb8:	f47f af5c 	bne.w	8000d74 <__aeabi_fmul+0x14c>
 8000ebc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ec0:	f47f af3c 	bne.w	8000d3c <__aeabi_fmul+0x114>
 8000ec4:	e75f      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_f2iz>:
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ed0:	d30f      	bcc.n	8000ef2 <__aeabi_f2iz+0x2a>
 8000ed2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ed6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eda:	d90d      	bls.n	8000ef8 <__aeabi_f2iz+0x30>
 8000edc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ee4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ee8:	fa23 f002 	lsr.w	r0, r3, r2
 8000eec:	bf18      	it	ne
 8000eee:	4240      	negne	r0, r0
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr
 8000ef8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000efc:	d101      	bne.n	8000f02 <__aeabi_f2iz+0x3a>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d105      	bne.n	8000f0e <__aeabi_f2iz+0x46>
 8000f02:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f06:	bf08      	it	eq
 8000f08:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_d2lz>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	2200      	movs	r2, #0
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	460d      	mov	r5, r1
 8000f1e:	f7ff fd4d 	bl	80009bc <__aeabi_dcmplt>
 8000f22:	b928      	cbnz	r0, 8000f30 <__aeabi_d2lz+0x1c>
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f2c:	f000 b80a 	b.w	8000f44 <__aeabi_d2ulz>
 8000f30:	4620      	mov	r0, r4
 8000f32:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f36:	f000 f805 	bl	8000f44 <__aeabi_d2ulz>
 8000f3a:	4240      	negs	r0, r0
 8000f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f40:	bd38      	pop	{r3, r4, r5, pc}
 8000f42:	bf00      	nop

08000f44 <__aeabi_d2ulz>:
 8000f44:	b5d0      	push	{r4, r6, r7, lr}
 8000f46:	2200      	movs	r2, #0
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <__aeabi_d2ulz+0x34>)
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	460f      	mov	r7, r1
 8000f4e:	f7ff fac3 	bl	80004d8 <__aeabi_dmul>
 8000f52:	f000 f815 	bl	8000f80 <__aeabi_d2uiz>
 8000f56:	4604      	mov	r4, r0
 8000f58:	f7ff fa44 	bl	80003e4 <__aeabi_ui2d>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <__aeabi_d2ulz+0x38>)
 8000f60:	f7ff faba 	bl	80004d8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4630      	mov	r0, r6
 8000f6a:	4639      	mov	r1, r7
 8000f6c:	f7ff f8fc 	bl	8000168 <__aeabi_dsub>
 8000f70:	f000 f806 	bl	8000f80 <__aeabi_d2uiz>
 8000f74:	4621      	mov	r1, r4
 8000f76:	bdd0      	pop	{r4, r6, r7, pc}
 8000f78:	3df00000 	.word	0x3df00000
 8000f7c:	41f00000 	.word	0x41f00000

08000f80 <__aeabi_d2uiz>:
 8000f80:	004a      	lsls	r2, r1, #1
 8000f82:	d211      	bcs.n	8000fa8 <__aeabi_d2uiz+0x28>
 8000f84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f88:	d211      	bcs.n	8000fae <__aeabi_d2uiz+0x2e>
 8000f8a:	d50d      	bpl.n	8000fa8 <__aeabi_d2uiz+0x28>
 8000f8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f94:	d40e      	bmi.n	8000fb4 <__aeabi_d2uiz+0x34>
 8000f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa6:	4770      	bx	lr
 8000fa8:	f04f 0000 	mov.w	r0, #0
 8000fac:	4770      	bx	lr
 8000fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fb2:	d102      	bne.n	8000fba <__aeabi_d2uiz+0x3a>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <hmi_recv>:
  * @brief Data from the HMI display is processed here
  * @param None
  * @retval None
  */
uint8_t hmi_recv(void)
{
 8000fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(flags.uart_recv)
 8000fc4:	4c9b      	ldr	r4, [pc, #620]	@ (8001234 <hmi_recv+0x274>)
{
 8000fc6:	b086      	sub	sp, #24
    if(flags.uart_recv)
 8000fc8:	79e0      	ldrb	r0, [r4, #7]
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d033      	beq.n	8001036 <hmi_recv+0x76>
    {
        if(recvBuf[recvBufLen-1] == 0xff && recvBuf[recvBufLen-2] == 0xff && recvBuf[recvBufLen-3] == 0xff)
 8000fce:	4d9a      	ldr	r5, [pc, #616]	@ (8001238 <hmi_recv+0x278>)
 8000fd0:	4e9a      	ldr	r6, [pc, #616]	@ (800123c <hmi_recv+0x27c>)
 8000fd2:	882a      	ldrh	r2, [r5, #0]
 8000fd4:	18b3      	adds	r3, r6, r2
 8000fd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000fda:	29ff      	cmp	r1, #255	@ 0xff
 8000fdc:	d127      	bne.n	800102e <hmi_recv+0x6e>
 8000fde:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8000fe2:	29ff      	cmp	r1, #255	@ 0xff
 8000fe4:	d123      	bne.n	800102e <hmi_recv+0x6e>
 8000fe6:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 8000fea:	2bff      	cmp	r3, #255	@ 0xff
 8000fec:	d11f      	bne.n	800102e <hmi_recv+0x6e>
        {
            if(recvBufLen == 5)
 8000fee:	2a05      	cmp	r2, #5
 8000ff0:	d024      	beq.n	800103c <hmi_recv+0x7c>
                        HMISends(settingstr);
                        HMISends("page setting\xff\xff\xff");
                    }
                } 
            }
            else if(recvBufLen == 10)
 8000ff2:	2a0a      	cmp	r2, #10
 8000ff4:	d07b      	beq.n	80010ee <hmi_recv+0x12e>
                            HMISends("page menu\xff\xff\xff");
                        }
                    }
                }
            }
            else if(recvBufLen == 6)
 8000ff6:	2a06      	cmp	r2, #6
 8000ff8:	d119      	bne.n	800102e <hmi_recv+0x6e>
            {
				/* Record the current page of the HMI display */
                if(recvBuf[0] == 0xaa && recvBuf[1] == 0xbb)
 8000ffa:	7833      	ldrb	r3, [r6, #0]
 8000ffc:	2baa      	cmp	r3, #170	@ 0xaa
 8000ffe:	d116      	bne.n	800102e <hmi_recv+0x6e>
 8001000:	7873      	ldrb	r3, [r6, #1]
 8001002:	2bbb      	cmp	r3, #187	@ 0xbb
 8001004:	d113      	bne.n	800102e <hmi_recv+0x6e>
                {
                    switch(recvBuf[2])
 8001006:	78b3      	ldrb	r3, [r6, #2]
 8001008:	3b01      	subs	r3, #1
 800100a:	2b0f      	cmp	r3, #15
 800100c:	d809      	bhi.n	8001022 <hmi_recv+0x62>
 800100e:	e8df f003 	tbb	[pc, r3]
 8001012:	5c61      	.short	0x5c61
 8001014:	08525708 	.word	0x08525708
 8001018:	08084b08 	.word	0x08084b08
 800101c:	31393e46 	.word	0x31393e46
 8001020:	272c      	.short	0x272c
 8001022:	4b87      	ldr	r3, [pc, #540]	@ (8001240 <hmi_recv+0x280>)
 8001024:	4a87      	ldr	r2, [pc, #540]	@ (8001244 <hmi_recv+0x284>)
                        case 0x10:
                            hmi_page = ABOUT;
                        break;
						default:break;
                    }
                    page_opts_sethighlight(hmi_page, cur_opt[hmi_page]);
 8001026:	7818      	ldrb	r0, [r3, #0]
 8001028:	5c11      	ldrb	r1, [r2, r0]
 800102a:	f003 fb4b 	bl	80046c4 <page_opts_sethighlight>
                }
            }
        }
        flags.uart_recv = 0; 
 800102e:	2300      	movs	r3, #0
        recvBufLen = 0;
        return 1;
 8001030:	2001      	movs	r0, #1
        flags.uart_recv = 0; 
 8001032:	71e3      	strb	r3, [r4, #7]
        recvBufLen = 0;
 8001034:	802b      	strh	r3, [r5, #0]
    }
    return 0;
}
 8001036:	b006      	add	sp, #24
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(recvBuf[0] == 0x00)
 800103c:	7837      	ldrb	r7, [r6, #0]
 800103e:	2f00      	cmp	r7, #0
 8001040:	d17e      	bne.n	8001140 <hmi_recv+0x180>
                    if(recvBuf[1] == 0xff || recvBuf[1] == 0x00)	
 8001042:	7873      	ldrb	r3, [r6, #1]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2bfd      	cmp	r3, #253	@ 0xfd
 800104a:	d9f0      	bls.n	800102e <hmi_recv+0x6e>
                        reset_DWIC();  	//Reset the module to stop working
 800104c:	f004 fe66 	bl	8005d1c <reset_DWIC>
                        HMISends("page menu\xff\xff\xff");//Send the command back to the menu to the HMI display
 8001050:	487d      	ldr	r0, [pc, #500]	@ (8001248 <hmi_recv+0x288>)
 8001052:	f003 f9a7 	bl	80043a4 <HMISends>
                        flags.function = NULL;
 8001056:	6167      	str	r7, [r4, #20]
                        flags.func_allow_run = 0;
 8001058:	7227      	strb	r7, [r4, #8]
                        flags.target_allow_run_time = 0;
 800105a:	f8c4 700a 	str.w	r7, [r4, #10]
 800105e:	e7e6      	b.n	800102e <hmi_recv+0x6e>
                            hmi_page = ABOUT;
 8001060:	2110      	movs	r1, #16
 8001062:	4b77      	ldr	r3, [pc, #476]	@ (8001240 <hmi_recv+0x280>)
 8001064:	4a77      	ldr	r2, [pc, #476]	@ (8001244 <hmi_recv+0x284>)
 8001066:	7019      	strb	r1, [r3, #0]
                        break;
 8001068:	e7dd      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = LOADING;
 800106a:	210f      	movs	r1, #15
 800106c:	4b74      	ldr	r3, [pc, #464]	@ (8001240 <hmi_recv+0x280>)
 800106e:	4a75      	ldr	r2, [pc, #468]	@ (8001244 <hmi_recv+0x284>)
 8001070:	7019      	strb	r1, [r3, #0]
                        break;
 8001072:	e7d8      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = RANGINGRESP;
 8001074:	210e      	movs	r1, #14
							flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 8001076:	4a75      	ldr	r2, [pc, #468]	@ (800124c <hmi_recv+0x28c>)
                            hmi_page = RANGINGRESP;
 8001078:	4b71      	ldr	r3, [pc, #452]	@ (8001240 <hmi_recv+0x280>)
							flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 800107a:	f8c4 200a 	str.w	r2, [r4, #10]
                            hmi_page = RANGINGRESP;
 800107e:	7019      	strb	r1, [r3, #0]
                        break;
 8001080:	4a70      	ldr	r2, [pc, #448]	@ (8001244 <hmi_recv+0x284>)
 8001082:	e7d0      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = RANGINGINIT;
 8001084:	210d      	movs	r1, #13
 8001086:	4b6e      	ldr	r3, [pc, #440]	@ (8001240 <hmi_recv+0x280>)
 8001088:	4a6e      	ldr	r2, [pc, #440]	@ (8001244 <hmi_recv+0x284>)
 800108a:	7019      	strb	r1, [r3, #0]
                        break;
 800108c:	e7cb      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = SIMGLERX;
 800108e:	210c      	movs	r1, #12
							flags.target_allow_run_time = SIMGLE_RX_RERUN_INTERVAL;
 8001090:	4a6f      	ldr	r2, [pc, #444]	@ (8001250 <hmi_recv+0x290>)
                            hmi_page = SIMGLERX;
 8001092:	4b6b      	ldr	r3, [pc, #428]	@ (8001240 <hmi_recv+0x280>)
							flags.target_allow_run_time = SIMGLE_RX_RERUN_INTERVAL;
 8001094:	f8c4 200a 	str.w	r2, [r4, #10]
                            hmi_page = SIMGLERX;
 8001098:	7019      	strb	r1, [r3, #0]
                        break;
 800109a:	4a6a      	ldr	r2, [pc, #424]	@ (8001244 <hmi_recv+0x284>)
 800109c:	e7c3      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = SIMGLETX;
 800109e:	210b      	movs	r1, #11
 80010a0:	4b67      	ldr	r3, [pc, #412]	@ (8001240 <hmi_recv+0x280>)
 80010a2:	4a68      	ldr	r2, [pc, #416]	@ (8001244 <hmi_recv+0x284>)
 80010a4:	7019      	strb	r1, [r3, #0]
                        break;
 80010a6:	e7be      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = SETTING;
 80010a8:	2108      	movs	r1, #8
							cur_opt[hmi_page] = 0;//It resets its highlight position each time you enter the screen
 80010aa:	2000      	movs	r0, #0
                            hmi_page = SETTING;
 80010ac:	4b64      	ldr	r3, [pc, #400]	@ (8001240 <hmi_recv+0x280>)
							cur_opt[hmi_page] = 0;//It resets its highlight position each time you enter the screen
 80010ae:	4a65      	ldr	r2, [pc, #404]	@ (8001244 <hmi_recv+0x284>)
                            hmi_page = SETTING;
 80010b0:	7019      	strb	r1, [r3, #0]
							cur_opt[hmi_page] = 0;//It resets its highlight position each time you enter the screen
 80010b2:	7210      	strb	r0, [r2, #8]
                        break;
 80010b4:	e7b7      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = RANGINGCHOOSE;
 80010b6:	2105      	movs	r1, #5
 80010b8:	4b61      	ldr	r3, [pc, #388]	@ (8001240 <hmi_recv+0x280>)
 80010ba:	4a62      	ldr	r2, [pc, #392]	@ (8001244 <hmi_recv+0x284>)
 80010bc:	7019      	strb	r1, [r3, #0]
                        break;
 80010be:	e7b2      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = SIMGLETXCHOOSE;
 80010c0:	2104      	movs	r1, #4
 80010c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001240 <hmi_recv+0x280>)
 80010c4:	4a5f      	ldr	r2, [pc, #380]	@ (8001244 <hmi_recv+0x284>)
 80010c6:	7019      	strb	r1, [r3, #0]
                        break;
 80010c8:	e7ad      	b.n	8001026 <hmi_recv+0x66>
                            hmi_page = MENU;
 80010ca:	2102      	movs	r1, #2
 80010cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <hmi_recv+0x280>)
 80010ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001244 <hmi_recv+0x284>)
 80010d0:	7019      	strb	r1, [r3, #0]
                        break;
 80010d2:	e7a8      	b.n	8001026 <hmi_recv+0x66>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010d8:	495e      	ldr	r1, [pc, #376]	@ (8001254 <hmi_recv+0x294>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010da:	4b5f      	ldr	r3, [pc, #380]	@ (8001258 <hmi_recv+0x298>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010dc:	68ca      	ldr	r2, [r1, #12]
 80010de:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
 80010e6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010ea:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80010ec:	e7fd      	b.n	80010ea <hmi_recv+0x12a>
                if(recvBuf[0] == 0x02)
 80010ee:	7833      	ldrb	r3, [r6, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d19c      	bne.n	800102e <hmi_recv+0x6e>
                    if(recvBuf[1] == 0xff)
 80010f4:	7873      	ldrb	r3, [r6, #1]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].channel = recvBuf[2];
 80010f6:	f8b6 c002 	ldrh.w	ip, [r6, #2]
                    if(recvBuf[1] == 0xff)
 80010fa:	2bff      	cmp	r3, #255	@ 0xff
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].data_rate = recvBuf[3];
 80010fc:	78f7      	ldrb	r7, [r6, #3]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].tx_power = recvBuf[4];
 80010fe:	7930      	ldrb	r0, [r6, #4]
						dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id = recvBuf[6];
 8001100:	79b1      	ldrb	r1, [r6, #6]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].channel = recvBuf[2];
 8001102:	f896 e002 	ldrb.w	lr, [r6, #2]
                    if(recvBuf[1] == 0xff)
 8001106:	d14d      	bne.n	80011a4 <hmi_recv+0x1e4>
 8001108:	2300      	movs	r3, #0
 800110a:	f361 0307 	bfi	r3, r1, #0, #8
                            dwt_setting_data.dwt_setting_value[i].channel = recvBuf[2];
 800110e:	4a53      	ldr	r2, [pc, #332]	@ (800125c <hmi_recv+0x29c>)
 8001110:	f36e 230f 	bfi	r3, lr, #8, #8
 8001114:	f367 4317 	bfi	r3, r7, #16, #8
 8001118:	f360 631f 	bfi	r3, r0, #24, #8
                            dwt_setting_data.dwt_setting_value[i].tx_power = recvBuf[4];
 800111c:	7250      	strb	r0, [r2, #9]
                        HMISends("page menu\xff\xff\xff");
 800111e:	484a      	ldr	r0, [pc, #296]	@ (8001248 <hmi_recv+0x288>)
                            dwt_setting_data.dwt_setting_value[i].channel = recvBuf[2];
 8001120:	f8a2 c007 	strh.w	ip, [r2, #7]
							dwt_setting_data.dwt_setting_value[i].dev_id = recvBuf[6];
 8001124:	f882 1024 	strb.w	r1, [r2, #36]	@ 0x24
 8001128:	f8c2 300b 	str.w	r3, [r2, #11]
 800112c:	6113      	str	r3, [r2, #16]
 800112e:	f8c2 3015 	str.w	r3, [r2, #21]
 8001132:	f8c2 301a 	str.w	r3, [r2, #26]
 8001136:	f8c2 301f 	str.w	r3, [r2, #31]
                        HMISends("page menu\xff\xff\xff");
 800113a:	f003 f933 	bl	80043a4 <HMISends>
 800113e:	e776      	b.n	800102e <hmi_recv+0x6e>
                    if(recvBuf[0] == 0x01)
 8001140:	2f01      	cmp	r7, #1
 8001142:	d051      	beq.n	80011e8 <hmi_recv+0x228>
                    else if(recvBuf[0] == 0x02)
 8001144:	2f02      	cmp	r7, #2
 8001146:	f47f af72 	bne.w	800102e <hmi_recv+0x6e>
						int dev_id = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 800114a:	7872      	ldrb	r2, [r6, #1]
                        int channel = dwt_setting_data.dwt_setting_value[recvBuf[1]].channel;
 800114c:	4b43      	ldr	r3, [pc, #268]	@ (800125c <hmi_recv+0x29c>)
 800114e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001152:	4413      	add	r3, r2
 8001154:	f893 8002 	ldrb.w	r8, [r3, #2]
						sprintf(settingstr, "deviceid=%d\xff\xff\xff", dev_id);
 8001158:	799a      	ldrb	r2, [r3, #6]
 800115a:	4941      	ldr	r1, [pc, #260]	@ (8001260 <hmi_recv+0x2a0>)
 800115c:	a801      	add	r0, sp, #4
                        int datarate = dwt_setting_data.dwt_setting_value[recvBuf[1]].data_rate;
 800115e:	78df      	ldrb	r7, [r3, #3]
                        int powgain = dwt_setting_data.dwt_setting_value[recvBuf[1]].tx_power;
 8001160:	791e      	ldrb	r6, [r3, #4]
						sprintf(settingstr, "deviceid=%d\xff\xff\xff", dev_id);
 8001162:	f006 ffb5 	bl	80080d0 <siprintf>
                        HMISends(settingstr);
 8001166:	a801      	add	r0, sp, #4
 8001168:	f003 f91c 	bl	80043a4 <HMISends>
                        sprintf(settingstr, "channel=%d\xff\xff\xff", channel);
 800116c:	4642      	mov	r2, r8
 800116e:	493d      	ldr	r1, [pc, #244]	@ (8001264 <hmi_recv+0x2a4>)
 8001170:	a801      	add	r0, sp, #4
 8001172:	f006 ffad 	bl	80080d0 <siprintf>
                        HMISends(settingstr);
 8001176:	a801      	add	r0, sp, #4
 8001178:	f003 f914 	bl	80043a4 <HMISends>
                        sprintf(settingstr, "datarage=%d\xff\xff\xff", datarate);
 800117c:	463a      	mov	r2, r7
 800117e:	493a      	ldr	r1, [pc, #232]	@ (8001268 <hmi_recv+0x2a8>)
 8001180:	a801      	add	r0, sp, #4
 8001182:	f006 ffa5 	bl	80080d0 <siprintf>
                        HMISends(settingstr);
 8001186:	a801      	add	r0, sp, #4
 8001188:	f003 f90c 	bl	80043a4 <HMISends>
                        sprintf(settingstr, "powgain=%d\xff\xff\xff", powgain);
 800118c:	4632      	mov	r2, r6
 800118e:	4937      	ldr	r1, [pc, #220]	@ (800126c <hmi_recv+0x2ac>)
 8001190:	a801      	add	r0, sp, #4
 8001192:	f006 ff9d 	bl	80080d0 <siprintf>
                        HMISends(settingstr);
 8001196:	a801      	add	r0, sp, #4
 8001198:	f003 f904 	bl	80043a4 <HMISends>
                        HMISends("page setting\xff\xff\xff");
 800119c:	4834      	ldr	r0, [pc, #208]	@ (8001270 <hmi_recv+0x2b0>)
 800119e:	f003 f901 	bl	80043a4 <HMISends>
 80011a2:	e744      	b.n	800102e <hmi_recv+0x6e>
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].channel = recvBuf[2];
 80011a4:	4f33      	ldr	r7, [pc, #204]	@ (8001274 <hmi_recv+0x2b4>)
 80011a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011aa:	f827 c003 	strh.w	ip, [r7, r3]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].tx_power = recvBuf[4];
 80011ae:	3f02      	subs	r7, #2
 80011b0:	443b      	add	r3, r7
 80011b2:	7118      	strb	r0, [r3, #4]
                        HMISends("page loading\xff\xff\xff");
 80011b4:	4830      	ldr	r0, [pc, #192]	@ (8001278 <hmi_recv+0x2b8>)
						dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id = recvBuf[6];
 80011b6:	7199      	strb	r1, [r3, #6]
                        HMISends("page loading\xff\xff\xff");
 80011b8:	f003 f8f4 	bl	80043a4 <HMISends>
                        reset_DWIC(); 
 80011bc:	f004 fdae 	bl	8005d1c <reset_DWIC>
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80011c0:	7873      	ldrb	r3, [r6, #1]
 80011c2:	492e      	ldr	r1, [pc, #184]	@ (800127c <hmi_recv+0x2bc>)
 80011c4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80011c8:	4407      	add	r7, r0
 80011ca:	79b8      	ldrb	r0, [r7, #6]
                        if(flags.function == example_func[recvBuf[1]].function)
 80011cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001280 <hmi_recv+0x2c0>)
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80011ce:	7008      	strb	r0, [r1, #0]
                        if(flags.function == example_func[recvBuf[1]].function)
 80011d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80011d4:	6849      	ldr	r1, [r1, #4]
 80011d6:	6960      	ldr	r0, [r4, #20]
 80011d8:	4288      	cmp	r0, r1
 80011da:	d021      	beq.n	8001220 <hmi_recv+0x260>
                            flags.function = NULL;
 80011dc:	2300      	movs	r3, #0
                            HMISends("page menu\xff\xff\xff");
 80011de:	481a      	ldr	r0, [pc, #104]	@ (8001248 <hmi_recv+0x288>)
                            flags.function = NULL;
 80011e0:	6163      	str	r3, [r4, #20]
                            HMISends("page menu\xff\xff\xff");
 80011e2:	f003 f8df 	bl	80043a4 <HMISends>
 80011e6:	e722      	b.n	800102e <hmi_recv+0x6e>
						HMISends("page loading\xff\xff\xff");
 80011e8:	4823      	ldr	r0, [pc, #140]	@ (8001278 <hmi_recv+0x2b8>)
 80011ea:	f003 f8db 	bl	80043a4 <HMISends>
                        reset_DWIC(); 
 80011ee:	f004 fd95 	bl	8005d1c <reset_DWIC>
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80011f2:	7872      	ldrb	r2, [r6, #1]
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <hmi_recv+0x29c>)
 80011f6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80011fa:	440b      	add	r3, r1
						if(example_func[recvBuf[1]].initfunction() == 0)
 80011fc:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8001280 <hmi_recv+0x2c0>
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 8001200:	7998      	ldrb	r0, [r3, #6]
 8001202:	491e      	ldr	r1, [pc, #120]	@ (800127c <hmi_recv+0x2bc>)
						if(example_func[recvBuf[1]].initfunction() == 0)
 8001204:	f858 2032 	ldr.w	r2, [r8, r2, lsl #3]
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 8001208:	7008      	strb	r0, [r1, #0]
						if(example_func[recvBuf[1]].initfunction() == 0)
 800120a:	4790      	blx	r2
 800120c:	2800      	cmp	r0, #0
 800120e:	f47f af0e 	bne.w	800102e <hmi_recv+0x6e>
                            flags.function = example_func[recvBuf[1]].function;
 8001212:	7872      	ldrb	r2, [r6, #1]
                            flags.func_allow_run = 1;
 8001214:	7227      	strb	r7, [r4, #8]
                            flags.function = example_func[recvBuf[1]].function;
 8001216:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	6163      	str	r3, [r4, #20]
                            flags.func_allow_run = 1;
 800121e:	e706      	b.n	800102e <hmi_recv+0x6e>
                            if(example_func[recvBuf[1]].initfunction() == 1)
 8001220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001224:	4798      	blx	r3
 8001226:	2801      	cmp	r0, #1
                                flags.function = NULL;
 8001228:	bf0a      	itet	eq
 800122a:	2300      	moveq	r3, #0
                                flags.func_allow_run = 1;
 800122c:	2301      	movne	r3, #1
                                flags.function = NULL;
 800122e:	6163      	streq	r3, [r4, #20]
                                flags.func_allow_run = 1;
 8001230:	7223      	strb	r3, [r4, #8]
 8001232:	e6fc      	b.n	800102e <hmi_recv+0x6e>
 8001234:	200006b0 	.word	0x200006b0
 8001238:	20000502 	.word	0x20000502
 800123c:	20000504 	.word	0x20000504
 8001240:	200000ac 	.word	0x200000ac
 8001244:	200006cc 	.word	0x200006cc
 8001248:	08009240 	.word	0x08009240
 800124c:	0001005a 	.word	0x0001005a
 8001250:	000103de 	.word	0x000103de
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	05fa0004 	.word	0x05fa0004
 800125c:	20000194 	.word	0x20000194
 8001260:	08009260 	.word	0x08009260
 8001264:	08009270 	.word	0x08009270
 8001268:	08009280 	.word	0x08009280
 800126c:	08009290 	.word	0x08009290
 8001270:	080092a0 	.word	0x080092a0
 8001274:	20000196 	.word	0x20000196
 8001278:	08009250 	.word	0x08009250
 800127c:	200001b9 	.word	0x200001b9
 8001280:	080092b0 	.word	0x080092b0

08001284 <dwt_structs_init>:


void dwt_structs_init(uint8_t func_idx, dwt_config_t* dwt_config, dwt_txconfig_t* dwt_txconfig)
{
 8001284:	b530      	push	{r4, r5, lr}
    if(dwt_setting_data.dwt_setting_value[func_idx].channel == 1)
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <dwt_structs_init+0x54>)
 8001288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800128c:	4418      	add	r0, r3
 800128e:	7883      	ldrb	r3, [r0, #2]
{
 8001290:	4615      	mov	r5, r2
        dwt_config->chan = 9;
 8001292:	2b01      	cmp	r3, #1
 8001294:	bf14      	ite	ne
 8001296:	2305      	movne	r3, #5
 8001298:	2309      	moveq	r3, #9
 800129a:	700b      	strb	r3, [r1, #0]
    else
        dwt_config->chan = 5;
    
    if(dwt_setting_data.dwt_setting_value[func_idx].data_rate == 1)
 800129c:	78c3      	ldrb	r3, [r0, #3]
{
 800129e:	b08d      	sub	sp, #52	@ 0x34
    if(dwt_setting_data.dwt_setting_value[func_idx].data_rate == 1)
 80012a0:	3b01      	subs	r3, #1
 80012a2:	bf18      	it	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	718b      	strb	r3, [r1, #6]
        [GAIN_9DB]  = 0x18181818,     //9db
        [GAIN_6DB]  = 0x06060606,     //6db      
        [GAIN_3DB]  = 0x04040404,     //3db
        [GAIN_0DB]  = 0x00000000      //0db
    };    
    dwt_txconfig->power = powervalue[dwt_setting_data.dwt_setting_value[func_idx].tx_power];
 80012a8:	f890 e004 	ldrb.w	lr, [r0, #4]
    uint32_t powervalue[11] = {
 80012ac:	4c0b      	ldr	r4, [pc, #44]	@ (80012dc <dwt_structs_init+0x58>)
    dwt_txconfig->power = powervalue[dwt_setting_data.dwt_setting_value[func_idx].tx_power];
 80012ae:	ab0c      	add	r3, sp, #48	@ 0x30
    uint32_t powervalue[11] = {
 80012b0:	f10d 0c04 	add.w	ip, sp, #4
    dwt_txconfig->power = powervalue[dwt_setting_data.dwt_setting_value[func_idx].tx_power];
 80012b4:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    uint32_t powervalue[11] = {
 80012b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    dwt_txconfig->power = powervalue[dwt_setting_data.dwt_setting_value[func_idx].tx_power];
 80012cc:	f85e 3c2c 	ldr.w	r3, [lr, #-44]
 80012d0:	606b      	str	r3, [r5, #4]
}
 80012d2:	b00d      	add	sp, #52	@ 0x34
 80012d4:	bd30      	pop	{r4, r5, pc}
 80012d6:	bf00      	nop
 80012d8:	20000194 	.word	0x20000194
 80012dc:	08009214 	.word	0x08009214

080012e0 <dwt_xfer3000.constprop.0>:
* @param rw            - DW3000_SPI_WR_BIT/DW3000_SPI_RD_BIT
*
* no return value
*/
static
void dwt_xfer3000
 80012e0:	b510      	push	{r4, lr}
    Sleep(10);
    */
    uint8_t  header[2];           // Buffer to compose header in
    uint16_t cnt = 0;             // Counter for length of a header

    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 80012e2:	eb01 0c00 	add.w	ip, r1, r0
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);

    assert(reg_file     <= 0x1F);
    assert(reg_offset   <= 0x7F);
    assert(length       < 0x3100);
 80012e6:	f5b2 5f44 	cmp.w	r2, #12544	@ 0x3100
void dwt_xfer3000
 80012ea:	b082      	sub	sp, #8
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 80012ec:	f3cc 4104 	ubfx	r1, ip, #16, #5
    assert(length       < 0x3100);
 80012f0:	d22a      	bcs.n	8001348 <dwt_xfer3000.constprop.0+0x68>
           mode == DW3000_SPI_AND_OR_16 ||\
           mode == DW3000_SPI_AND_OR_32);

    // Write message header selecting WRITE operation and addresses as appropriate
    uint16_t  addr;
    addr = (uint16_t)((reg_file << 9) | (reg_offset << 2));
 80012f2:	f00c 047f 	and.w	r4, ip, #127	@ 0x7f
 80012f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2

    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80012fa:	ea4c 2141 	orr.w	r1, ip, r1, lsl #9
 80012fe:	0a09      	lsrs	r1, r1, #8
 8001300:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8001304:	f88d c005 	strb.w	ip, [sp, #5]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001308:	f88d 1004 	strb.w	r1, [sp, #4]

    if (/*reg_offset == 0 && */length == 0)
 800130c:	b13a      	cbz	r2, 800131e <dwt_xfer3000.constprop.0+0x3e>
        assert(mode == DW3000_SPI_WR_BIT);

        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
        cnt = 1;
    }
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 800130e:	b964      	cbnz	r4, 800132a <dwt_xfer3000.constprop.0+0x4a>
    case    DW3000_SPI_AND_OR_16:
    case    DW3000_SPI_AND_OR_32:
    case    DW3000_SPI_WR_BIT:
    {
        uint8_t crc8 = 0;
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001310:	4910      	ldr	r1, [pc, #64]	@ (8001354 <dwt_xfer3000.constprop.0+0x74>)
        cnt = 1;
 8001312:	2001      	movs	r0, #1
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001314:	6809      	ldr	r1, [r1, #0]
 8001316:	7d09      	ldrb	r1, [r1, #20]
 8001318:	b189      	cbz	r1, 800133e <dwt_xfer3000.constprop.0+0x5e>
    default:
        while(1);
        break;
    }

} // end dwt_xfer3000()
 800131a:	b002      	add	sp, #8
 800131c:	bd10      	pop	{r4, pc}
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800131e:	0041      	lsls	r1, r0, #1
 8001320:	f061 017e 	orn	r1, r1, #126	@ 0x7e
 8001324:	f88d 1004 	strb.w	r1, [sp, #4]
        cnt = 1;
 8001328:	e7f2      	b.n	8001310 <dwt_xfer3000.constprop.0+0x30>
        header[0] |= DW3000_SPI_EAMRW;
 800132a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800132e:	f88d 1004 	strb.w	r1, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <dwt_xfer3000.constprop.0+0x74>)
        cnt = 2;
 8001334:	2002      	movs	r0, #2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001336:	6809      	ldr	r1, [r1, #0]
 8001338:	7d09      	ldrb	r1, [r1, #20]
 800133a:	2900      	cmp	r1, #0
 800133c:	d1ed      	bne.n	800131a <dwt_xfer3000.constprop.0+0x3a>
            writetospi(cnt, header, length, buffer);
 800133e:	a901      	add	r1, sp, #4
 8001340:	f004 fd50 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 8001344:	b002      	add	sp, #8
 8001346:	bd10      	pop	{r4, pc}
    assert(length       < 0x3100);
 8001348:	21db      	movs	r1, #219	@ 0xdb
 800134a:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <dwt_xfer3000.constprop.0+0x78>)
 800134c:	4a03      	ldr	r2, [pc, #12]	@ (800135c <dwt_xfer3000.constprop.0+0x7c>)
 800134e:	4804      	ldr	r0, [pc, #16]	@ (8001360 <dwt_xfer3000.constprop.0+0x80>)
 8001350:	f006 fdcc 	bl	8007eec <__assert_func>
 8001354:	20000000 	.word	0x20000000
 8001358:	080092e8 	.word	0x080092e8
 800135c:	0800934c 	.word	0x0800934c
 8001360:	080092f8 	.word	0x080092f8

08001364 <dwt_xfer3000.constprop.1>:
void dwt_xfer3000
 8001364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001368:	4614      	mov	r4, r2
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 800136a:	4401      	add	r1, r0
    assert(length       < 0x3100);
 800136c:	f5b4 5f44 	cmp.w	r4, #12544	@ 0x3100
void dwt_xfer3000
 8001370:	b082      	sub	sp, #8
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 8001372:	f3c1 4204 	ubfx	r2, r1, #16, #5
    assert(length       < 0x3100);
 8001376:	d252      	bcs.n	800141e <dwt_xfer3000.constprop.1+0xba>
    addr = (uint16_t)((reg_file << 9) | (reg_offset << 2));
 8001378:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800137c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8001380:	461e      	mov	r6, r3
 8001382:	ea4c 2342 	orr.w	r3, ip, r2, lsl #9
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001386:	469c      	mov	ip, r3
 8001388:	ba5b      	rev16	r3, r3
 800138a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800138e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    if (/*reg_offset == 0 && */length == 0)
 8001392:	b1ac      	cbz	r4, 80013c0 <dwt_xfer3000.constprop.1+0x5c>
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 8001394:	4605      	mov	r5, r0
 8001396:	b1c9      	cbz	r1, 80013cc <dwt_xfer3000.constprop.1+0x68>
        header[0] |= DW3000_SPI_EAMRW;
 8001398:	f04f 0802 	mov.w	r8, #2
        cnt = 2;
 800139c:	4640      	mov	r0, r8
        header[0] |= DW3000_SPI_EAMRW;
 800139e:	f04c 0c40 	orr.w	ip, ip, #64	@ 0x40
 80013a2:	f88d c004 	strb.w	ip, [sp, #4]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80013a6:	4f21      	ldr	r7, [pc, #132]	@ (800142c <dwt_xfer3000.constprop.1+0xc8>)
            readfromspi(cnt, header, length, buffer);
 80013a8:	4633      	mov	r3, r6
 80013aa:	4622      	mov	r2, r4
 80013ac:	a901      	add	r1, sp, #4
 80013ae:	f004 fd71 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7d1b      	ldrb	r3, [r3, #20]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d00c      	beq.n	80013d4 <dwt_xfer3000.constprop.1+0x70>
} // end dwt_xfer3000()
 80013ba:	b002      	add	sp, #8
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        assert(mode == DW3000_SPI_WR_BIT);
 80013c0:	21ee      	movs	r1, #238	@ 0xee
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <dwt_xfer3000.constprop.1+0xcc>)
 80013c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <dwt_xfer3000.constprop.1+0xd0>)
 80013c6:	481c      	ldr	r0, [pc, #112]	@ (8001438 <dwt_xfer3000.constprop.1+0xd4>)
 80013c8:	f006 fd90 	bl	8007eec <__assert_func>
 80013cc:	f04f 0801 	mov.w	r8, #1
        cnt = 1;
 80013d0:	4640      	mov	r0, r8
 80013d2:	e7e8      	b.n	80013a6 <dwt_xfer3000.constprop.1+0x42>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80013d4:	2d18      	cmp	r5, #24
 80013d6:	d0f0      	beq.n	80013ba <dwt_xfer3000.constprop.1+0x56>
    * Divide the message by the polynomial, a byte at a time.
    */
    for (byte = 0; byte < len; ++byte)
    {
        data = byteArray[byte] ^ crcRemainderInit;
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <dwt_xfer3000.constprop.1+0xd8>)
 80013da:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for (byte = 0; byte < len; ++byte)
 80013de:	f1b8 0f02 	cmp.w	r8, #2
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80013e2:	5cd5      	ldrb	r5, [r2, r3]
    for (byte = 0; byte < len; ++byte)
 80013e4:	d103      	bne.n	80013ee <dwt_xfer3000.constprop.1+0x8a>
        data = byteArray[byte] ^ crcRemainderInit;
 80013e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80013ea:	406b      	eors	r3, r5
 80013ec:	5cd5      	ldrb	r5, [r2, r3]
    for (byte = 0; byte < len; ++byte)
 80013ee:	4434      	add	r4, r6
        data = byteArray[byte] ^ crcRemainderInit;
 80013f0:	f816 3b01 	ldrb.w	r3, [r6], #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80013f4:	406b      	eors	r3, r5
    for (byte = 0; byte < len; ++byte)
 80013f6:	42a6      	cmp	r6, r4
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80013f8:	5cd5      	ldrb	r5, [r2, r3]
    for (byte = 0; byte < len; ++byte)
 80013fa:	d1f9      	bne.n	80013f0 <dwt_xfer3000.constprop.1+0x8c>
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80013fc:	f10d 0303 	add.w	r3, sp, #3
 8001400:	2201      	movs	r2, #1
 8001402:	2100      	movs	r1, #0
 8001404:	2018      	movs	r0, #24
 8001406:	f7ff ffad 	bl	8001364 <dwt_xfer3000.constprop.1>
    return regval ;
 800140a:	f89d 3003 	ldrb.w	r3, [sp, #3]
                if (crc8 != dwcrc8)
 800140e:	429d      	cmp	r5, r3
 8001410:	d0d3      	beq.n	80013ba <dwt_xfer3000.constprop.1+0x56>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0cf      	beq.n	80013ba <dwt_xfer3000.constprop.1+0x56>
                        pdw3000local->cbSPIRDErr();
 800141a:	4798      	blx	r3
} // end dwt_xfer3000()
 800141c:	e7cd      	b.n	80013ba <dwt_xfer3000.constprop.1+0x56>
    assert(length       < 0x3100);
 800141e:	21db      	movs	r1, #219	@ 0xdb
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <dwt_xfer3000.constprop.1+0xdc>)
 8001422:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <dwt_xfer3000.constprop.1+0xd0>)
 8001424:	4804      	ldr	r0, [pc, #16]	@ (8001438 <dwt_xfer3000.constprop.1+0xd4>)
 8001426:	f006 fd61 	bl	8007eec <__assert_func>
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	08009314 	.word	0x08009314
 8001434:	0800934c 	.word	0x0800934c
 8001438:	080092f8 	.word	0x080092f8
 800143c:	200001cc 	.word	0x200001cc
 8001440:	080092e8 	.word	0x080092e8

08001444 <_dwt_prog_ldo_and_bias_tune>:
        header[0] |= DW3000_SPI_EAMRW;
 8001444:	f242 22d6 	movw	r2, #8918	@ 0x22d6
    pdw3000local->spicrc = crc_mode;
}

static
void _dwt_prog_ldo_and_bias_tune(void)
{
 8001448:	b530      	push	{r4, r5, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800144a:	4d15      	ldr	r5, [pc, #84]	@ (80014a0 <_dwt_prog_ldo_and_bias_tune+0x5c>)
    buf[0] = (uint8_t)_and;//       &0xFF;
 800144c:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <_dwt_prog_ldo_and_bias_tune+0x60>)
{
 800144e:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001450:	682b      	ldr	r3, [r5, #0]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001452:	9101      	str	r1, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 8001454:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001458:	7d1c      	ldrb	r4, [r3, #20]
 800145a:	b10c      	cbz	r4, 8001460 <_dwt_prog_ldo_and_bias_tune+0x1c>
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
}
 800145c:	b003      	add	sp, #12
 800145e:	bd30      	pop	{r4, r5, pc}
            writetospi(cnt, header, length, buffer);
 8001460:	2204      	movs	r2, #4
 8001462:	4669      	mov	r1, sp
 8001464:	ab01      	add	r3, sp, #4
 8001466:	2002      	movs	r0, #2
 8001468:	f004 fcbc 	bl	8005de4 <writetospi_serial>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 800146c:	682b      	ldr	r3, [r5, #0]
        header[0] |= DW3000_SPI_EAMRW;
 800146e:	f647 61e2 	movw	r1, #32482	@ 0x7ee2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001472:	7d1a      	ldrb	r2, [r3, #20]
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 8001474:	7a1b      	ldrb	r3, [r3, #8]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 8001476:	f88d 4007 	strb.w	r4, [sp, #7]
    buf[2] = (uint8_t)_or;//        &0xFF;
 800147a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[0] = (uint8_t)_and;//       &0xFF;
 800147e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
        header[0] |= DW3000_SPI_EAMRW;
 8001482:	f8ad 1000 	strh.w	r1, [sp]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001486:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800148a:	2a00      	cmp	r2, #0
 800148c:	d1e6      	bne.n	800145c <_dwt_prog_ldo_and_bias_tune+0x18>
            writetospi(cnt, header, length, buffer);
 800148e:	2204      	movs	r2, #4
 8001490:	4669      	mov	r1, sp
 8001492:	ab01      	add	r3, sp, #4
 8001494:	2002      	movs	r0, #2
 8001496:	f004 fca5 	bl	8005de4 <writetospi_serial>
}
 800149a:	b003      	add	sp, #12
 800149c:	bd30      	pop	{r4, r5, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	0180ffff 	.word	0x0180ffff

080014a8 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32_t _dwt_otpread(uint16_t address)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer[0] = (uint8_t)regval;
 80014aa:	2201      	movs	r2, #1
        header[0] |= DW3000_SPI_EAMRW;
 80014ac:	f242 07d6 	movw	r7, #8406	@ 0x20d6
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80014b0:	4c3e      	ldr	r4, [pc, #248]	@ (80015ac <_dwt_otpread+0x104>)
{
 80014b2:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80014b4:	6823      	ldr	r3, [r4, #0]
    buffer[0] = (uint8_t)regval;
 80014b6:	f8ad 2008 	strh.w	r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80014ba:	f8ad 700c 	strh.w	r7, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80014be:	7d1b      	ldrb	r3, [r3, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d04b      	beq.n	800155c <_dwt_otpread+0xb4>
 80014c4:	ae03      	add	r6, sp, #12
            readfromspi(cnt, header, length, buffer);
 80014c6:	2204      	movs	r2, #4
        header[0] |= DW3000_SPI_EAMRW;
 80014c8:	f244 0556 	movw	r5, #16470	@ 0x4056
            readfromspi(cnt, header, length, buffer);
 80014cc:	4633      	mov	r3, r6
 80014ce:	2002      	movs	r0, #2
 80014d0:	eb0d 0102 	add.w	r1, sp, r2
        header[0] |= DW3000_SPI_EAMRW;
 80014d4:	f8ad 5004 	strh.w	r5, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 80014d8:	f004 fcdc 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	7d18      	ldrb	r0, [r3, #20]
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d00f      	beq.n	8001504 <_dwt_otpread+0x5c>
        regval = (regval << 8) + buffer[j] ;
 80014e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80014e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80014ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80014f0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80014f4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80014f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // attempt a read from OTP address
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);

    // Return the 32bit of read data
    return ret_data;
}
 80014fc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001500:	b005      	add	sp, #20
 8001502:	bdf0      	pop	{r4, r5, r6, r7, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8001504:	f246 0640 	movw	r6, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <_dwt_otpread+0x108>)
 800150a:	f89d 2004 	ldrb.w	r2, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 800150e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8001512:	5c9a      	ldrb	r2, [r3, r2]
        header[0] |= DW3000_SPI_EAMRW;
 8001514:	f8ad 6008 	strh.w	r6, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001518:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 800151a:	5c9a      	ldrb	r2, [r3, r2]
 800151c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001520:	404a      	eors	r2, r1
 8001522:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8001524:	f89d 100d 	ldrb.w	r1, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001528:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 800152a:	5c9a      	ldrb	r2, [r3, r2]
 800152c:	f89d 100e 	ldrb.w	r1, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001530:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001532:	5c9a      	ldrb	r2, [r3, r2]
 8001534:	f89d 100f 	ldrb.w	r1, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001538:	404a      	eors	r2, r1
 800153a:	5c9d      	ldrb	r5, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 800153c:	a902      	add	r1, sp, #8
 800153e:	2201      	movs	r2, #1
 8001540:	f10d 0303 	add.w	r3, sp, #3
 8001544:	f004 fca6 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001548:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800154c:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 800154e:	429d      	cmp	r5, r3
 8001550:	d0c8      	beq.n	80014e4 <_dwt_otpread+0x3c>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001552:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0c5      	beq.n	80014e4 <_dwt_otpread+0x3c>
                        pdw3000local->cbSPIRDErr();
 8001558:	4798      	blx	r3
 800155a:	e7c3      	b.n	80014e4 <_dwt_otpread+0x3c>
            writetospi(cnt, header, length, buffer);
 800155c:	2202      	movs	r2, #2
 800155e:	ae03      	add	r6, sp, #12
 8001560:	4605      	mov	r5, r0
 8001562:	ab02      	add	r3, sp, #8
 8001564:	4610      	mov	r0, r2
 8001566:	4631      	mov	r1, r6
 8001568:	f004 fc3c 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 800156c:	f241 02d6 	movw	r2, #4310	@ 0x10d6
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	7d1b      	ldrb	r3, [r3, #20]
    buffer[0] = (uint8_t)regval;
 8001574:	f8ad 5008 	strh.w	r5, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8001578:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1a2      	bne.n	80014c6 <_dwt_otpread+0x1e>
            writetospi(cnt, header, length, buffer);
 8001580:	2202      	movs	r2, #2
 8001582:	ab02      	add	r3, sp, #8
 8001584:	4610      	mov	r0, r2
 8001586:	4631      	mov	r1, r6
 8001588:	f004 fc2c 	bl	8005de4 <writetospi_serial>
    buffer[0] = (uint8_t)regval;
 800158c:	2202      	movs	r2, #2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8001592:	f8ad 700c 	strh.w	r7, [sp, #12]
    buffer[0] = (uint8_t)regval;
 8001596:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800159a:	2b00      	cmp	r3, #0
 800159c:	d193      	bne.n	80014c6 <_dwt_otpread+0x1e>
            writetospi(cnt, header, length, buffer);
 800159e:	4610      	mov	r0, r2
 80015a0:	4631      	mov	r1, r6
 80015a2:	ab02      	add	r3, sp, #8
 80015a4:	f004 fc1e 	bl	8005de4 <writetospi_serial>
 80015a8:	e78d      	b.n	80014c6 <_dwt_otpread+0x1e>
 80015aa:	bf00      	nop
 80015ac:	20000000 	.word	0x20000000
 80015b0:	200001cc 	.word	0x200001cc

080015b4 <dwt_read32bitoffsetreg>:
{
 80015b4:	b570      	push	{r4, r5, r6, lr}
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 80015b6:	4401      	add	r1, r0
{
 80015b8:	4604      	mov	r4, r0
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 80015ba:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
    addr = (uint16_t)((reg_file << 9) | (reg_offset << 2));
 80015be:	0083      	lsls	r3, r0, #2
 80015c0:	f3c1 4104 	ubfx	r1, r1, #16, #5
 80015c4:	ea43 2241 	orr.w	r2, r3, r1, lsl #9
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80015c8:	4613      	mov	r3, r2
{
 80015ca:	b084      	sub	sp, #16
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80015cc:	ba52      	rev16	r2, r2
 80015ce:	f8ad 2004 	strh.w	r2, [sp, #4]
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 80015d2:	b308      	cbz	r0, 8001618 <dwt_read32bitoffsetreg+0x64>
        header[0] |= DW3000_SPI_EAMRW;
 80015d4:	2602      	movs	r6, #2
        cnt = 2;
 80015d6:	4630      	mov	r0, r6
 80015d8:	0a1b      	lsrs	r3, r3, #8
        header[0] |= DW3000_SPI_EAMRW;
 80015da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015de:	f88d 3004 	strb.w	r3, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 80015e2:	2204      	movs	r2, #4
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80015e4:	4d26      	ldr	r5, [pc, #152]	@ (8001680 <dwt_read32bitoffsetreg+0xcc>)
            readfromspi(cnt, header, length, buffer);
 80015e6:	ab03      	add	r3, sp, #12
 80015e8:	eb0d 0102 	add.w	r1, sp, r2
 80015ec:	f004 fc52 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	7d1b      	ldrb	r3, [r3, #20]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d012      	beq.n	800161e <dwt_read32bitoffsetreg+0x6a>
        regval = (regval << 8) + buffer[j] ;
 80015f8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80015fc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001600:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001604:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001608:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800160c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
} // end dwt_read32bitoffsetreg()
 8001610:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001614:	b004      	add	sp, #16
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	2601      	movs	r6, #1
        cnt = 1;
 800161a:	4630      	mov	r0, r6
 800161c:	e7e1      	b.n	80015e2 <dwt_read32bitoffsetreg+0x2e>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800161e:	2c18      	cmp	r4, #24
 8001620:	d0ea      	beq.n	80015f8 <dwt_read32bitoffsetreg+0x44>
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001622:	4918      	ldr	r1, [pc, #96]	@ (8001684 <dwt_read32bitoffsetreg+0xd0>)
 8001624:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for (byte = 0; byte < len; ++byte)
 8001628:	2e02      	cmp	r6, #2
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800162a:	5ccb      	ldrb	r3, [r1, r3]
    for (byte = 0; byte < len; ++byte)
 800162c:	d103      	bne.n	8001636 <dwt_read32bitoffsetreg+0x82>
        data = byteArray[byte] ^ crcRemainderInit;
 800162e:	f89d 2005 	ldrb.w	r2, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001632:	4053      	eors	r3, r2
 8001634:	5ccb      	ldrb	r3, [r1, r3]
        header[0] |= DW3000_SPI_EAMRW;
 8001636:	f246 0640 	movw	r6, #24640	@ 0x6040
        data = byteArray[byte] ^ crcRemainderInit;
 800163a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800163e:	f89d 000f 	ldrb.w	r0, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001642:	4053      	eors	r3, r2
 8001644:	5cca      	ldrb	r2, [r1, r3]
        data = byteArray[byte] ^ crcRemainderInit;
 8001646:	f89d 300d 	ldrb.w	r3, [sp, #13]
        header[0] |= DW3000_SPI_EAMRW;
 800164a:	f8ad 6008 	strh.w	r6, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800164e:	405a      	eors	r2, r3
        data = byteArray[byte] ^ crcRemainderInit;
 8001650:	5c8a      	ldrb	r2, [r1, r2]
 8001652:	f89d 300e 	ldrb.w	r3, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001656:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8001658:	5ccb      	ldrb	r3, [r1, r3]
            readfromspi(cnt, header, length, buffer);
 800165a:	2201      	movs	r2, #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800165c:	4058      	eors	r0, r3
 800165e:	5c0c      	ldrb	r4, [r1, r0]
            readfromspi(cnt, header, length, buffer);
 8001660:	f10d 0303 	add.w	r3, sp, #3
 8001664:	2002      	movs	r0, #2
 8001666:	a902      	add	r1, sp, #8
 8001668:	f004 fc14 	bl	8005e94 <readfromspi_serial>
    return regval ;
 800166c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001670:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8001672:	429c      	cmp	r4, r3
 8001674:	d0c0      	beq.n	80015f8 <dwt_read32bitoffsetreg+0x44>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001676:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0bd      	beq.n	80015f8 <dwt_read32bitoffsetreg+0x44>
                        pdw3000local->cbSPIRDErr();
 800167c:	4798      	blx	r3
 800167e:	e7bb      	b.n	80015f8 <dwt_read32bitoffsetreg+0x44>
 8001680:	20000000 	.word	0x20000000
 8001684:	200001cc 	.word	0x200001cc

08001688 <dwt_write32bitoffsetreg>:
{
 8001688:	b500      	push	{lr}
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 800168a:	4401      	add	r1, r0
 800168c:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
    addr = (uint16_t)((reg_file << 9) | (reg_offset << 2));
 8001690:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8001694:	f3c1 4304 	ubfx	r3, r1, #16, #5
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001698:	ea4c 2343 	orr.w	r3, ip, r3, lsl #9
 800169c:	0a1b      	lsrs	r3, r3, #8
{
 800169e:	b083      	sub	sp, #12
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80016a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
        buffer[j] = (uint8_t)regval;
 80016a4:	9201      	str	r2, [sp, #4]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80016a6:	f88d 3000 	strb.w	r3, [sp]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 80016aa:	f88d c001 	strb.w	ip, [sp, #1]
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 80016ae:	b158      	cbz	r0, 80016c8 <dwt_write32bitoffsetreg+0x40>
        header[0] |= DW3000_SPI_EAMRW;
 80016b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016b4:	f88d 3000 	strb.w	r3, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <dwt_write32bitoffsetreg+0x60>)
        cnt = 2;
 80016ba:	2002      	movs	r0, #2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	7d1b      	ldrb	r3, [r3, #20]
 80016c0:	b143      	cbz	r3, 80016d4 <dwt_write32bitoffsetreg+0x4c>
} // end dwt_write32bitoffsetreg()
 80016c2:	b003      	add	sp, #12
 80016c4:	f85d fb04 	ldr.w	pc, [sp], #4
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <dwt_write32bitoffsetreg+0x60>)
        cnt = 1;
 80016ca:	2001      	movs	r0, #1
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	7d1b      	ldrb	r3, [r3, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f6      	bne.n	80016c2 <dwt_write32bitoffsetreg+0x3a>
            writetospi(cnt, header, length, buffer);
 80016d4:	2204      	movs	r2, #4
 80016d6:	4669      	mov	r1, sp
 80016d8:	eb0d 0302 	add.w	r3, sp, r2
 80016dc:	f004 fb82 	bl	8005de4 <writetospi_serial>
} // end dwt_write32bitoffsetreg()
 80016e0:	b003      	add	sp, #12
 80016e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80016e6:	bf00      	nop
 80016e8:	20000000 	.word	0x20000000

080016ec <dwt_initialise>:
{
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 80016ee:	f04f 0c02 	mov.w	ip, #2
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80016f2:	2400      	movs	r4, #0
            readfromspi(cnt, header, length, buffer);
 80016f4:	2204      	movs	r2, #4
{
 80016f6:	4607      	mov	r7, r0
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80016f8:	4e66      	ldr	r6, [pc, #408]	@ (8001894 <dwt_initialise+0x1a8>)
{
 80016fa:	b085      	sub	sp, #20
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80016fc:	6835      	ldr	r5, [r6, #0]
            readfromspi(cnt, header, length, buffer);
 80016fe:	ab03      	add	r3, sp, #12
    pdw3000local->cbRxOk = NULL;
 8001700:	e9c5 440a 	strd	r4, r4, [r5, #40]	@ 0x28
    pdw3000local->cbRxErr = NULL;
 8001704:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
    pdw3000local->cbSPIErr = NULL;
 8001708:	e9c5 440e 	strd	r4, r4, [r5, #56]	@ 0x38
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 800170c:	73ec      	strb	r4, [r5, #15]
    pdw3000local->spicrc = 0;
 800170e:	82ac      	strh	r4, [r5, #20]
    pdw3000local->vBatP = 0;
 8001710:	816c      	strh	r4, [r5, #10]
            readfromspi(cnt, header, length, buffer);
 8001712:	2001      	movs	r0, #1
 8001714:	eb0d 0102 	add.w	r1, sp, r2
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8001718:	f8a5 c010 	strh.w	ip, [r5, #16]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800171c:	f8ad 4004 	strh.w	r4, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 8001720:	f004 fbb8 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001724:	6833      	ldr	r3, [r6, #0]
{
 8001726:	463c      	mov	r4, r7
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001728:	7d18      	ldrb	r0, [r3, #20]
 800172a:	2802      	cmp	r0, #2
 800172c:	d065      	beq.n	80017fa <dwt_initialise+0x10e>
        regval = (regval << 8) + buffer[j] ;
 800172e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001732:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800173a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800173e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001742:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001746:	eb03 2302 	add.w	r3, r3, r2, lsl #8
int dwt_check_dev_id(void)
{
    uint32_t  dev_id;
    dev_id = dwt_readdevid();
    
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 800174a:	4a53      	ldr	r2, [pc, #332]	@ (8001898 <dwt_initialise+0x1ac>)
 800174c:	f023 0310 	bic.w	r3, r3, #16
 8001750:	4293      	cmp	r3, r2
 8001752:	d003      	beq.n	800175c <dwt_initialise+0x70>
        return DWT_ERROR;
 8001754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
} // end dwt_initialise()
 8001758:	b005      	add	sp, #20
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 800175c:	2004      	movs	r0, #4
 800175e:	f7ff fea3 	bl	80014a8 <_dwt_otpread>
 8001762:	4605      	mov	r5, r0
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 8001764:	2005      	movs	r0, #5
 8001766:	f7ff fe9f 	bl	80014a8 <_dwt_otpread>
 800176a:	4607      	mov	r7, r0
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 800176c:	200a      	movs	r0, #10
 800176e:	f7ff fe9b 	bl	80014a8 <_dwt_otpread>
 8001772:	6832      	ldr	r2, [r6, #0]
 8001774:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8001778:	7210      	strb	r0, [r2, #8]
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 800177a:	2d00      	cmp	r5, #0
 800177c:	d136      	bne.n	80017ec <dwt_initialise+0x100>
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 800177e:	2020      	movs	r0, #32
 8001780:	f7ff fe92 	bl	80014a8 <_dwt_otpread>
 8001784:	4b45      	ldr	r3, [pc, #276]	@ (800189c <dwt_initialise+0x1b0>)
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8001786:	6835      	ldr	r5, [r6, #0]
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 8001788:	4298      	cmp	r0, r3
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 800178e:	2300      	movne	r3, #0
    if(mode & DWT_READ_OTP_PID)
 8001790:	06e0      	lsls	r0, r4, #27
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8001792:	726b      	strb	r3, [r5, #9]
    if(mode & DWT_READ_OTP_PID)
 8001794:	d478      	bmi.n	8001888 <dwt_initialise+0x19c>
    if (mode & DWT_READ_OTP_LID)
 8001796:	06a1      	lsls	r1, r4, #26
 8001798:	d470      	bmi.n	800187c <dwt_initialise+0x190>
    if (mode & DWT_READ_OTP_BAT)
 800179a:	0662      	lsls	r2, r4, #25
 800179c:	d45e      	bmi.n	800185c <dwt_initialise+0x170>
    if (mode & DWT_READ_OTP_TMP)
 800179e:	0623      	lsls	r3, r4, #24
 80017a0:	d463      	bmi.n	800186a <dwt_initialise+0x17e>
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 80017a2:	6833      	ldr	r3, [r6, #0]
 80017a4:	7ad8      	ldrb	r0, [r3, #11]
 80017a6:	b908      	cbnz	r0, 80017ac <dwt_initialise+0xc0>
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 80017a8:	2285      	movs	r2, #133	@ 0x85
 80017aa:	72da      	strb	r2, [r3, #11]
    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 80017ac:	7a9a      	ldrb	r2, [r3, #10]
 80017ae:	b1d2      	cbz	r2, 80017e6 <dwt_initialise+0xfa>
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 80017b0:	201f      	movs	r0, #31
 80017b2:	f7ff fe79 	bl	80014a8 <_dwt_otpread>
 80017b6:	4602      	mov	r2, r0
 80017b8:	6833      	ldr	r3, [r6, #0]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 80017ba:	201e      	movs	r0, #30
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 80017bc:	735a      	strb	r2, [r3, #13]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 80017be:	f7ff fe73 	bl	80014a8 <_dwt_otpread>
        pdw3000local->init_xtrim = 0x2E ; //set default value
 80017c2:	f010 007f 	ands.w	r0, r0, #127	@ 0x7f
 80017c6:	bf08      	it	eq
 80017c8:	202e      	moveq	r0, #46	@ 0x2e
        header[0] |= DW3000_SPI_EAMRW;
 80017ca:	f245 02d2 	movw	r2, #20690	@ 0x50d2
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 80017ce:	6833      	ldr	r3, [r6, #0]
 80017d0:	7398      	strb	r0, [r3, #14]
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 80017d2:	f88d 0008 	strb.w	r0, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80017d6:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80017da:	7d1b      	ldrb	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d036      	beq.n	800184e <dwt_initialise+0x162>
    return DWT_SUCCESS ;
 80017e0:	2000      	movs	r0, #0
} // end dwt_initialise()
 80017e2:	b005      	add	sp, #20
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 80017e6:	2274      	movs	r2, #116	@ 0x74
 80017e8:	729a      	strb	r2, [r3, #10]
 80017ea:	e7e1      	b.n	80017b0 <dwt_initialise+0xc4>
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 80017ec:	2f00      	cmp	r7, #0
 80017ee:	d0c6      	beq.n	800177e <dwt_initialise+0x92>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d0c4      	beq.n	800177e <dwt_initialise+0x92>
        _dwt_prog_ldo_and_bias_tune();
 80017f4:	f7ff fe26 	bl	8001444 <_dwt_prog_ldo_and_bias_tune>
 80017f8:	e7c1      	b.n	800177e <dwt_initialise+0x92>
        header[0] |= DW3000_SPI_EAMRW;
 80017fa:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <dwt_initialise+0x1b4>)
        header[0] |= DW3000_SPI_EAMRW;
 8001800:	f8ad 2008 	strh.w	r2, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001804:	f89d 2004 	ldrb.w	r2, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 8001808:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800180c:	5c9a      	ldrb	r2, [r3, r2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800180e:	404a      	eors	r2, r1
 8001810:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8001812:	f89d 100d 	ldrb.w	r1, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001816:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001818:	5c9a      	ldrb	r2, [r3, r2]
 800181a:	f89d 100e 	ldrb.w	r1, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800181e:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001820:	5c99      	ldrb	r1, [r3, r2]
 8001822:	f89d 200f 	ldrb.w	r2, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001826:	404a      	eors	r2, r1
 8001828:	5c9d      	ldrb	r5, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 800182a:	a902      	add	r1, sp, #8
 800182c:	2201      	movs	r2, #1
 800182e:	f10d 0303 	add.w	r3, sp, #3
 8001832:	f004 fb2f 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001836:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800183a:	6832      	ldr	r2, [r6, #0]
                if (crc8 != dwcrc8)
 800183c:	429d      	cmp	r5, r3
 800183e:	f43f af76 	beq.w	800172e <dwt_initialise+0x42>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001842:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	f43f af72 	beq.w	800172e <dwt_initialise+0x42>
                        pdw3000local->cbSPIRDErr();
 800184a:	4798      	blx	r3
 800184c:	e76f      	b.n	800172e <dwt_initialise+0x42>
            writetospi(cnt, header, length, buffer);
 800184e:	2201      	movs	r2, #1
 8001850:	a903      	add	r1, sp, #12
 8001852:	ab02      	add	r3, sp, #8
 8001854:	2002      	movs	r0, #2
 8001856:	f004 fac5 	bl	8005de4 <writetospi_serial>
 800185a:	e7c1      	b.n	80017e0 <dwt_initialise+0xf4>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 800185c:	2008      	movs	r0, #8
 800185e:	f7ff fe23 	bl	80014a8 <_dwt_otpread>
 8001862:	6833      	ldr	r3, [r6, #0]
 8001864:	7298      	strb	r0, [r3, #10]
    if (mode & DWT_READ_OTP_TMP)
 8001866:	0623      	lsls	r3, r4, #24
 8001868:	d59b      	bpl.n	80017a2 <dwt_initialise+0xb6>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 800186a:	2009      	movs	r0, #9
 800186c:	f7ff fe1c 	bl	80014a8 <_dwt_otpread>
 8001870:	6833      	ldr	r3, [r6, #0]
 8001872:	b2c0      	uxtb	r0, r0
 8001874:	72d8      	strb	r0, [r3, #11]
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 8001876:	2800      	cmp	r0, #0
 8001878:	d198      	bne.n	80017ac <dwt_initialise+0xc0>
 800187a:	e795      	b.n	80017a8 <dwt_initialise+0xbc>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800187c:	2007      	movs	r0, #7
 800187e:	6835      	ldr	r5, [r6, #0]
 8001880:	f7ff fe12 	bl	80014a8 <_dwt_otpread>
 8001884:	6068      	str	r0, [r5, #4]
 8001886:	e788      	b.n	800179a <dwt_initialise+0xae>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001888:	2006      	movs	r0, #6
 800188a:	f7ff fe0d 	bl	80014a8 <_dwt_otpread>
 800188e:	6028      	str	r0, [r5, #0]
 8001890:	e781      	b.n	8001796 <dwt_initialise+0xaa>
 8001892:	bf00      	nop
 8001894:	20000000 	.word	0x20000000
 8001898:	deca0302 	.word	0xdeca0302
 800189c:	10000240 	.word	0x10000240
 80018a0:	200001cc 	.word	0x200001cc

080018a4 <dwt_setfinegraintxseq>:
{
 80018a4:	b500      	push	{lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <dwt_setfinegraintxseq+0x54>)
        header[0] |= DW3000_SPI_EAMRW;
 80018a8:	f644 02e2 	movw	r2, #18658	@ 0x48e2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80018ac:	681b      	ldr	r3, [r3, #0]
{
 80018ae:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80018b0:	7d1b      	ldrb	r3, [r3, #20]
    if (enable)
 80018b2:	b938      	cbnz	r0, 80018c4 <dwt_setfinegraintxseq+0x20>
        buffer[j] = (uint8_t)regval;
 80018b4:	4911      	ldr	r1, [pc, #68]	@ (80018fc <dwt_setfinegraintxseq+0x58>)
        header[0] |= DW3000_SPI_EAMRW;
 80018b6:	f8ad 2000 	strh.w	r2, [sp]
        buffer[j] = (uint8_t)regval;
 80018ba:	9101      	str	r1, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80018bc:	b193      	cbz	r3, 80018e4 <dwt_setfinegraintxseq+0x40>
}
 80018be:	b003      	add	sp, #12
 80018c0:	f85d fb04 	ldr.w	pc, [sp], #4
        buffer[j] = (uint8_t)regval;
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <dwt_setfinegraintxseq+0x5c>)
        header[0] |= DW3000_SPI_EAMRW;
 80018c6:	f8ad 2000 	strh.w	r2, [sp]
        buffer[j] = (uint8_t)regval;
 80018ca:	9101      	str	r1, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f6      	bne.n	80018be <dwt_setfinegraintxseq+0x1a>
            writetospi(cnt, header, length, buffer);
 80018d0:	2204      	movs	r2, #4
 80018d2:	4669      	mov	r1, sp
 80018d4:	eb0d 0302 	add.w	r3, sp, r2
 80018d8:	2002      	movs	r0, #2
 80018da:	f004 fa83 	bl	8005de4 <writetospi_serial>
}
 80018de:	b003      	add	sp, #12
 80018e0:	f85d fb04 	ldr.w	pc, [sp], #4
            writetospi(cnt, header, length, buffer);
 80018e4:	2204      	movs	r2, #4
 80018e6:	4669      	mov	r1, sp
 80018e8:	eb0d 0302 	add.w	r3, sp, r2
 80018ec:	2002      	movs	r0, #2
 80018ee:	f004 fa79 	bl	8005de4 <writetospi_serial>
}
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018f8:	20000000 	.word	0x20000000
 80018fc:	00d20010 	.word	0x00d20010
 8001900:	04d28874 	.word	0x04d28874

08001904 <dwt_setlnapamode>:
            readfromspi(cnt, header, length, buffer);
 8001904:	2204      	movs	r2, #4
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001906:	f04f 0c0a 	mov.w	ip, #10
{
 800190a:	b570      	push	{r4, r5, r6, lr}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800190c:	4d32      	ldr	r5, [pc, #200]	@ (80019d8 <dwt_setlnapamode+0xd4>)
{
 800190e:	b084      	sub	sp, #16
            readfromspi(cnt, header, length, buffer);
 8001910:	ab03      	add	r3, sp, #12
{
 8001912:	4604      	mov	r4, r0
            readfromspi(cnt, header, length, buffer);
 8001914:	eb0d 0102 	add.w	r1, sp, r2
 8001918:	2001      	movs	r0, #1
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800191a:	f8ad c004 	strh.w	ip, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 800191e:	f004 fab9 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	7d18      	ldrb	r0, [r3, #20]
 8001926:	2802      	cmp	r0, #2
 8001928:	d024      	beq.n	8001974 <dwt_setlnapamode+0x70>
        regval = (regval << 8) + buffer[j] ;
 800192a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800192e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    if (lna_pa & DWT_LNA_ENABLE)
 8001932:	07e5      	lsls	r5, r4, #31
        regval = (regval << 8) + buffer[j] ;
 8001934:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001938:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800193c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001940:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001944:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    gpio_mode &= (~(GPIO_MODE_MSGP0_MODE_BIT_MASK | GPIO_MODE_MSGP1_MODE_BIT_MASK
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <dwt_setlnapamode+0xd8>)
 800194a:	ea03 0302 	and.w	r3, r3, r2
        gpio_mode |= GPIO_PIN6_EXTRX;   
 800194e:	bf48      	it	mi
 8001950:	f443 2380 	orrmi.w	r3, r3, #262144	@ 0x40000
    if (lna_pa & DWT_PA_ENABLE)
 8001954:	07a1      	lsls	r1, r4, #30
        gpio_mode |= (GPIO_PIN4_EXTDA | GPIO_PIN5_EXTTX);
 8001956:	bf48      	it	mi
 8001958:	f443 4310 	orrmi.w	r3, r3, #36864	@ 0x9000
    if (lna_pa & DWT_TXRX_EN)
 800195c:	0762      	lsls	r2, r4, #29
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800195e:	f04f 028a 	mov.w	r2, #138	@ 0x8a
        gpio_mode |= (GPIO_PIN0_EXTTXE | GPIO_PIN1_EXTRXE);
 8001962:	bf48      	it	mi
 8001964:	f043 0312 	orrmi.w	r3, r3, #18
        buffer[j] = (uint8_t)regval;
 8001968:	9303      	str	r3, [sp, #12]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800196a:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800196e:	b350      	cbz	r0, 80019c6 <dwt_setlnapamode+0xc2>
}
 8001970:	b004      	add	sp, #16
 8001972:	bd70      	pop	{r4, r5, r6, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8001974:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <dwt_setlnapamode+0xdc>)
        header[0] |= DW3000_SPI_EAMRW;
 800197a:	f8ad 2008 	strh.w	r2, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800197e:	f89d 2004 	ldrb.w	r2, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 8001982:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001986:	5c9a      	ldrb	r2, [r3, r2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001988:	404a      	eors	r2, r1
 800198a:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 800198c:	f89d 100d 	ldrb.w	r1, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001990:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001992:	5c99      	ldrb	r1, [r3, r2]
 8001994:	f89d 200e 	ldrb.w	r2, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001998:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 800199a:	5c99      	ldrb	r1, [r3, r2]
 800199c:	f89d 200f 	ldrb.w	r2, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80019a0:	404a      	eors	r2, r1
 80019a2:	5c9e      	ldrb	r6, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 80019a4:	a902      	add	r1, sp, #8
 80019a6:	2201      	movs	r2, #1
 80019a8:	f10d 0303 	add.w	r3, sp, #3
 80019ac:	f004 fa72 	bl	8005e94 <readfromspi_serial>
    return regval ;
 80019b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80019b4:	682b      	ldr	r3, [r5, #0]
                if (crc8 != dwcrc8)
 80019b6:	4296      	cmp	r6, r2
 80019b8:	d003      	beq.n	80019c2 <dwt_setlnapamode+0xbe>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80019ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019bc:	b10a      	cbz	r2, 80019c2 <dwt_setlnapamode+0xbe>
                        pdw3000local->cbSPIRDErr();
 80019be:	4790      	blx	r2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	7d18      	ldrb	r0, [r3, #20]
 80019c4:	e7b1      	b.n	800192a <dwt_setlnapamode+0x26>
            writetospi(cnt, header, length, buffer);
 80019c6:	2204      	movs	r2, #4
 80019c8:	ab03      	add	r3, sp, #12
 80019ca:	a902      	add	r1, sp, #8
 80019cc:	2001      	movs	r0, #1
 80019ce:	f004 fa09 	bl	8005de4 <writetospi_serial>
}
 80019d2:	b004      	add	sp, #16
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000
 80019dc:	ffe00fc0 	.word	0xffe00fc0
 80019e0:	200001cc 	.word	0x200001cc

080019e4 <dwt_configmrxlut>:
{
 80019e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (channel == 5)
 80019e8:	2805      	cmp	r0, #5
{
 80019ea:	b085      	sub	sp, #20
    if (channel == 5)
 80019ec:	d020      	beq.n	8001a30 <dwt_configmrxlut+0x4c>
 80019ee:	22af      	movs	r2, #175	@ 0xaf
 80019f0:	f64a 7bb5 	movw	fp, #44981	@ 0xafb5
 80019f4:	f64a 787d 	movw	r8, #44925	@ 0xaf7d
 80019f8:	f64a 793e 	movw	r9, #44862	@ 0xaf3e
 80019fc:	f24a 57fe 	movw	r7, #42494	@ 0xa5fe
 8001a00:	f64a 4a36 	movw	sl, #44086	@ 0xac36
 8001a04:	f64a 03fe 	movw	r3, #43262	@ 0xa8fe
 8001a08:	2502      	movs	r5, #2
 8001a0a:	9200      	str	r2, [sp, #0]
        buffer[j] = (uint8_t)regval;
 8001a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	f88d 300f 	strb.w	r3, [sp, #15]
        header[0] |= DW3000_SPI_EAMRW;
 8001a16:	f24e 03c6 	movw	r3, #57542	@ 0xe0c6
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a1a:	4c63      	ldr	r4, [pc, #396]	@ (8001ba8 <dwt_configmrxlut+0x1c4>)
        header[0] |= DW3000_SPI_EAMRW;
 8001a1c:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a20:	6823      	ldr	r3, [r4, #0]
        buffer[j] = (uint8_t)regval;
 8001a22:	f88d 500e 	strb.w	r5, [sp, #14]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a26:	7d1e      	ldrb	r6, [r3, #20]
 8001a28:	b196      	cbz	r6, 8001a50 <dwt_configmrxlut+0x6c>
}
 8001a2a:	b005      	add	sp, #20
 8001a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (channel == 5)
 8001a30:	22cf      	movs	r2, #207	@ 0xcf
 8001a32:	f64c 7bf5 	movw	fp, #53237	@ 0xcff5
 8001a36:	f64c 7836 	movw	r8, #53046	@ 0xcf36
 8001a3a:	f24c 797e 	movw	r9, #51070	@ 0xc77e
 8001a3e:	f24c 67be 	movw	r7, #50878	@ 0xc6be
 8001a42:	f24c 4a3e 	movw	sl, #50238	@ 0xc43e
 8001a46:	f24c 03fd 	movw	r3, #49405	@ 0xc0fd
 8001a4a:	2501      	movs	r5, #1
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	e7dd      	b.n	8001a0c <dwt_configmrxlut+0x28>
            writetospi(cnt, header, length, buffer);
 8001a50:	2204      	movs	r2, #4
 8001a52:	ab03      	add	r3, sp, #12
 8001a54:	2002      	movs	r0, #2
 8001a56:	a902      	add	r1, sp, #8
 8001a58:	f004 f9c4 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001a5c:	f24f 03c6 	movw	r3, #61638	@ 0xf0c6
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	7d12      	ldrb	r2, [r2, #20]
        buffer[j] = (uint8_t)regval;
 8001a64:	f8ad a00c 	strh.w	sl, [sp, #12]
 8001a68:	f88d 600f 	strb.w	r6, [sp, #15]
 8001a6c:	f88d 500e 	strb.w	r5, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 8001a70:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d1d7      	bne.n	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	ab03      	add	r3, sp, #12
 8001a7e:	2002      	movs	r0, #2
 8001a80:	a902      	add	r1, sp, #8
 8001a82:	f004 f9af 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001a86:	23c7      	movs	r3, #199	@ 0xc7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	7d16      	ldrb	r6, [r2, #20]
        buffer[j] = (uint8_t)regval;
 8001a8c:	9a01      	ldr	r2, [sp, #4]
 8001a8e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8001a92:	f88d 200f 	strb.w	r2, [sp, #15]
 8001a96:	f88d 500e 	strb.w	r5, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 8001a9a:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001a9e:	2e00      	cmp	r6, #0
 8001aa0:	d1c3      	bne.n	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	ab03      	add	r3, sp, #12
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	a902      	add	r1, sp, #8
 8001aaa:	f004 f99b 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001aae:	f241 03c7 	movw	r3, #4295	@ 0x10c7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	7d17      	ldrb	r7, [r2, #20]
        buffer[j] = (uint8_t)regval;
 8001ab6:	f8ad 900c 	strh.w	r9, [sp, #12]
 8001aba:	f88d 600f 	strb.w	r6, [sp, #15]
 8001abe:	f88d 500e 	strb.w	r5, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 8001ac2:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001ac6:	2f00      	cmp	r7, #0
 8001ac8:	d1af      	bne.n	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001aca:	2204      	movs	r2, #4
 8001acc:	ab03      	add	r3, sp, #12
 8001ace:	2002      	movs	r0, #2
 8001ad0:	a902      	add	r1, sp, #8
 8001ad2:	f004 f987 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001ad6:	f242 03c7 	movw	r3, #8391	@ 0x20c7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	f892 9014 	ldrb.w	r9, [r2, #20]
        buffer[j] = (uint8_t)regval;
 8001ae0:	f8ad 800c 	strh.w	r8, [sp, #12]
 8001ae4:	f88d 700f 	strb.w	r7, [sp, #15]
 8001ae8:	f88d 500e 	strb.w	r5, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 8001aec:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001af0:	f1b9 0f00 	cmp.w	r9, #0
 8001af4:	d199      	bne.n	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001af6:	2204      	movs	r2, #4
 8001af8:	ab03      	add	r3, sp, #12
 8001afa:	a902      	add	r1, sp, #8
 8001afc:	2002      	movs	r0, #2
 8001afe:	f004 f971 	bl	8005de4 <writetospi_serial>
        buffer[j] = (uint8_t)regval;
 8001b02:	22b5      	movs	r2, #181	@ 0xb5
        header[0] |= DW3000_SPI_EAMRW;
 8001b04:	f243 03c7 	movw	r3, #12487	@ 0x30c7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b08:	6821      	ldr	r1, [r4, #0]
 8001b0a:	7d0e      	ldrb	r6, [r1, #20]
        buffer[j] = (uint8_t)regval;
 8001b0c:	9900      	ldr	r1, [sp, #0]
 8001b0e:	f88d 900f 	strb.w	r9, [sp, #15]
 8001b12:	f88d 100d 	strb.w	r1, [sp, #13]
 8001b16:	f88d 500e 	strb.w	r5, [sp, #14]
 8001b1a:	f88d 200c 	strb.w	r2, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8001b1e:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d181      	bne.n	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001b26:	2204      	movs	r2, #4
 8001b28:	ab03      	add	r3, sp, #12
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	a902      	add	r1, sp, #8
 8001b2e:	f004 f959 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001b32:	f244 02c7 	movw	r2, #16583	@ 0x40c7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 8001b3a:	f8ad b00c 	strh.w	fp, [sp, #12]
 8001b3e:	f88d 500e 	strb.w	r5, [sp, #14]
 8001b42:	f88d 600f 	strb.w	r6, [sp, #15]
        header[0] |= DW3000_SPI_EAMRW;
 8001b46:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f47f af6d 	bne.w	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001b50:	2204      	movs	r2, #4
 8001b52:	ab03      	add	r3, sp, #12
 8001b54:	2002      	movs	r0, #2
 8001b56:	a902      	add	r1, sp, #8
 8001b58:	f004 f944 	bl	8005de4 <writetospi_serial>
        buffer[j] = (uint8_t)regval;
 8001b5c:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <dwt_configmrxlut+0x1c8>)
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 8001b62:	9203      	str	r2, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8001b64:	f247 02c6 	movw	r2, #28870	@ 0x70c6
 8001b68:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f af5c 	bne.w	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001b72:	2204      	movs	r2, #4
 8001b74:	ab03      	add	r3, sp, #12
 8001b76:	a902      	add	r1, sp, #8
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f004 f933 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8001b7e:	f248 02c6 	movw	r2, #32966	@ 0x80c6
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b82:	6823      	ldr	r3, [r4, #0]
        buffer[j] = (uint8_t)regval;
 8001b84:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <dwt_configmrxlut+0x1cc>)
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b86:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 8001b88:	9103      	str	r1, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8001b8a:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f af4b 	bne.w	8001a2a <dwt_configmrxlut+0x46>
            writetospi(cnt, header, length, buffer);
 8001b94:	2204      	movs	r2, #4
 8001b96:	ab03      	add	r3, sp, #12
 8001b98:	a902      	add	r1, sp, #8
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f004 f922 	bl	8005de4 <writetospi_serial>
}
 8001ba0:	b005      	add	sp, #20
 8001ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	10000240 	.word	0x10000240
 8001bb0:	1b6da489 	.word	0x1b6da489

08001bb4 <dwt_run_pgfcal>:
        header[0] |= DW3000_SPI_EAMRW;
 8001bb4:	f243 02c8 	movw	r2, #12488	@ 0x30c8
{
 8001bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001bbc:	4da2      	ldr	r5, [pc, #648]	@ (8001e48 <dwt_run_pgfcal+0x294>)
        buffer[j] = (uint8_t)regval;
 8001bbe:	49a3      	ldr	r1, [pc, #652]	@ (8001e4c <dwt_run_pgfcal+0x298>)
{
 8001bc0:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001bc2:	682b      	ldr	r3, [r5, #0]
        buffer[j] = (uint8_t)regval;
 8001bc4:	9103      	str	r1, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8001bc6:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001bca:	7d1b      	ldrb	r3, [r3, #20]
 8001bcc:	af03      	add	r7, sp, #12
 8001bce:	ae02      	add	r6, sp, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 811f 	beq.w	8001e14 <dwt_run_pgfcal+0x260>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8001bd6:	2403      	movs	r4, #3
        header[0] |= DW3000_SPI_EAMRW;
 8001bd8:	f248 0848 	movw	r8, #32840	@ 0x8048
        deca_usleep(DELAY_20uUSec);
 8001bdc:	2014      	movs	r0, #20
 8001bde:	f004 f893 	bl	8005d08 <deca_usleep>
            readfromspi(cnt, header, length, buffer);
 8001be2:	f10d 0303 	add.w	r3, sp, #3
 8001be6:	2201      	movs	r2, #1
 8001be8:	4631      	mov	r1, r6
 8001bea:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 8001bec:	f8ad 8008 	strh.w	r8, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8001bf0:	f004 f950 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	7d18      	ldrb	r0, [r3, #20]
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	d05f      	beq.n	8001cbc <dwt_run_pgfcal+0x108>
    return regval ;
 8001bfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8001c00:	1e63      	subs	r3, r4, #1
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8001c02:	2a01      	cmp	r2, #1
 8001c04:	d07e      	beq.n	8001d04 <dwt_run_pgfcal+0x150>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8001c06:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8001c0a:	d1e7      	bne.n	8001bdc <dwt_run_pgfcal+0x28>
 8001c0c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 8001c10:	2300      	movs	r3, #0
 8001c12:	f88d 3008 	strb.w	r3, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8001c16:	f243 03c8 	movw	r3, #12488	@ 0x30c8
 8001c1a:	f8ad 300c 	strh.w	r3, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	7d1b      	ldrb	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80cb 	beq.w	8001dbe <dwt_run_pgfcal+0x20a>
        header[0] |= DW3000_SPI_EAMRW;
 8001c28:	f245 0348 	movw	r3, #20552	@ 0x5048
            readfromspi(cnt, header, length, buffer);
 8001c2c:	2204      	movs	r2, #4
        header[0] |= DW3000_SPI_EAMRW;
 8001c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 8001c32:	2002      	movs	r0, #2
 8001c34:	463b      	mov	r3, r7
 8001c36:	eb0d 0102 	add.w	r1, sp, r2
 8001c3a:	f004 f92b 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	7d18      	ldrb	r0, [r3, #20]
 8001c42:	2802      	cmp	r0, #2
 8001c44:	f000 808c 	beq.w	8001d60 <dwt_run_pgfcal+0x1ac>
        header[0] |= DW3000_SPI_EAMRW;
 8001c48:	f247 0248 	movw	r2, #28744	@ 0x7048
            readfromspi(cnt, header, length, buffer);
 8001c4c:	463b      	mov	r3, r7
    if (val == ERR_RX_CAL_FAIL)
 8001c4e:	f06f 4760 	mvn.w	r7, #3758096384	@ 0xe0000000
        regval = (regval << 8) + buffer[j] ;
 8001c52:	f89d 000f 	ldrb.w	r0, [sp, #15]
        header[0] |= DW3000_SPI_EAMRW;
 8001c56:	f8ad 2004 	strh.w	r2, [sp, #4]
        regval = (regval << 8) + buffer[j] ;
 8001c5a:	f89d 200e 	ldrb.w	r2, [sp, #14]
            readfromspi(cnt, header, length, buffer);
 8001c5e:	a901      	add	r1, sp, #4
        regval = (regval << 8) + buffer[j] ;
 8001c60:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8001c64:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001c68:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8001c6c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001c70:	eb02 2200 	add.w	r2, r2, r0, lsl #8
        result = DWT_ERROR;
 8001c74:	42ba      	cmp	r2, r7
 8001c76:	bf08      	it	eq
 8001c78:	f04f 34ff 	moveq.w	r4, #4294967295	@ 0xffffffff
            readfromspi(cnt, header, length, buffer);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	2204      	movs	r2, #4
 8001c80:	f004 f908 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	7d18      	ldrb	r0, [r3, #20]
 8001c88:	2802      	cmp	r0, #2
 8001c8a:	d03d      	beq.n	8001d08 <dwt_run_pgfcal+0x154>
    if (val == ERR_RX_CAL_FAIL)
 8001c8c:	f06f 4160 	mvn.w	r1, #3758096384	@ 0xe0000000
        regval = (regval << 8) + buffer[j] ;
 8001c90:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001c94:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001c98:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001c9c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8001ca0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001ca4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001ca8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 8001cac:	428b      	cmp	r3, r1
 8001cae:	bf14      	ite	ne
 8001cb0:	4620      	movne	r0, r4
 8001cb2:	f04f 30ff 	moveq.w	r0, #4294967295	@ 0xffffffff
 8001cb6:	b005      	add	sp, #20
 8001cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8001cbc:	f246 0340 	movw	r3, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001cc0:	4a63      	ldr	r2, [pc, #396]	@ (8001e50 <dwt_run_pgfcal+0x29c>)
        header[0] |= DW3000_SPI_EAMRW;
 8001cc2:	f8ad 300c 	strh.w	r3, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001cc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 8001cca:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001cd0:	404b      	eors	r3, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001cd2:	5cd1      	ldrb	r1, [r2, r3]
 8001cd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001cd8:	404b      	eors	r3, r1
 8001cda:	f812 9003 	ldrb.w	r9, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 8001cde:	4639      	mov	r1, r7
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	ab01      	add	r3, sp, #4
 8001ce4:	f004 f8d6 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001cec:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8001cee:	4599      	cmp	r9, r3
 8001cf0:	d084      	beq.n	8001bfc <dwt_run_pgfcal+0x48>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001cf2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d081      	beq.n	8001bfc <dwt_run_pgfcal+0x48>
                        pdw3000local->cbSPIRDErr();
 8001cf8:	4798      	blx	r3
    return regval ;
 8001cfa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8001cfe:	1e63      	subs	r3, r4, #1
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8001d00:	2a01      	cmp	r2, #1
 8001d02:	d180      	bne.n	8001c06 <dwt_run_pgfcal+0x52>
 8001d04:	2400      	movs	r4, #0
 8001d06:	e783      	b.n	8001c10 <dwt_run_pgfcal+0x5c>
        header[0] |= DW3000_SPI_EAMRW;
 8001d08:	f246 0240 	movw	r2, #24640	@ 0x6040
            readfromspi(cnt, header, length, buffer);
 8001d0c:	4631      	mov	r1, r6
        header[0] |= DW3000_SPI_EAMRW;
 8001d0e:	f8ad 2008 	strh.w	r2, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d12:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8001d16:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <dwt_run_pgfcal+0x29c>)
        data = byteArray[byte] ^ crcRemainderInit;
 8001d18:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8001d1c:	5d96      	ldrb	r6, [r2, r6]
            readfromspi(cnt, header, length, buffer);
 8001d1e:	f10d 0303 	add.w	r3, sp, #3
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d22:	407e      	eors	r6, r7
        data = byteArray[byte] ^ crcRemainderInit;
 8001d24:	5d96      	ldrb	r6, [r2, r6]
 8001d26:	f89d 700c 	ldrb.w	r7, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d2a:	407e      	eors	r6, r7
 8001d2c:	5d96      	ldrb	r6, [r2, r6]
        data = byteArray[byte] ^ crcRemainderInit;
 8001d2e:	f89d 700d 	ldrb.w	r7, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d32:	407e      	eors	r6, r7
        data = byteArray[byte] ^ crcRemainderInit;
 8001d34:	5d96      	ldrb	r6, [r2, r6]
 8001d36:	f89d 700e 	ldrb.w	r7, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d3a:	407e      	eors	r6, r7
        data = byteArray[byte] ^ crcRemainderInit;
 8001d3c:	5d96      	ldrb	r6, [r2, r6]
 8001d3e:	f89d 700f 	ldrb.w	r7, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d42:	407e      	eors	r6, r7
 8001d44:	5d96      	ldrb	r6, [r2, r6]
            readfromspi(cnt, header, length, buffer);
 8001d46:	2201      	movs	r2, #1
 8001d48:	f004 f8a4 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001d4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001d50:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8001d52:	429e      	cmp	r6, r3
 8001d54:	d09a      	beq.n	8001c8c <dwt_run_pgfcal+0xd8>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001d56:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d097      	beq.n	8001c8c <dwt_run_pgfcal+0xd8>
                        pdw3000local->cbSPIRDErr();
 8001d5c:	4798      	blx	r3
 8001d5e:	e795      	b.n	8001c8c <dwt_run_pgfcal+0xd8>
        header[0] |= DW3000_SPI_EAMRW;
 8001d60:	f246 0340 	movw	r3, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d64:	f89d 2004 	ldrb.w	r2, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 8001d68:	f8ad 3008 	strh.w	r3, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <dwt_run_pgfcal+0x29c>)
        data = byteArray[byte] ^ crcRemainderInit;
 8001d6e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8001d72:	5c9a      	ldrb	r2, [r3, r2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d74:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001d76:	5c9a      	ldrb	r2, [r3, r2]
 8001d78:	f89d 100c 	ldrb.w	r1, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d7c:	404a      	eors	r2, r1
 8001d7e:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8001d80:	f89d 100d 	ldrb.w	r1, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d84:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001d86:	5c9a      	ldrb	r2, [r3, r2]
 8001d88:	f89d 100e 	ldrb.w	r1, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d8c:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8001d8e:	5c9a      	ldrb	r2, [r3, r2]
 8001d90:	f89d 100f 	ldrb.w	r1, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001d94:	404a      	eors	r2, r1
 8001d96:	f813 8002 	ldrb.w	r8, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8001d9a:	4631      	mov	r1, r6
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f10d 0303 	add.w	r3, sp, #3
 8001da2:	f004 f877 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001da6:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001daa:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8001dac:	4598      	cmp	r8, r3
 8001dae:	f43f af4b 	beq.w	8001c48 <dwt_run_pgfcal+0x94>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001db2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f43f af47 	beq.w	8001c48 <dwt_run_pgfcal+0x94>
                        pdw3000local->cbSPIRDErr();
 8001dba:	4798      	blx	r3
 8001dbc:	e744      	b.n	8001c48 <dwt_run_pgfcal+0x94>
            writetospi(cnt, header, length, buffer);
 8001dbe:	4633      	mov	r3, r6
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4639      	mov	r1, r7
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f004 f80d 	bl	8005de4 <writetospi_serial>
 8001dca:	2201      	movs	r2, #1
        header[0] |= DW3000_SPI_EAMRW;
 8001dcc:	f248 01c8 	movw	r1, #32968	@ 0x80c8
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8001dd4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001dd8:	f88d 2008 	strb.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f af23 	bne.w	8001c28 <dwt_run_pgfcal+0x74>
            writetospi(cnt, header, length, buffer);
 8001de2:	4633      	mov	r3, r6
 8001de4:	4639      	mov	r1, r7
 8001de6:	2002      	movs	r0, #2
 8001de8:	f003 fffc 	bl	8005de4 <writetospi_serial>
    buf[0] = _and;
 8001dec:	f240 11ff 	movw	r1, #511	@ 0x1ff
        header[0] |= DW3000_SPI_EAMRW;
 8001df0:	f643 12c8 	movw	r2, #14792	@ 0x39c8
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = _and;
 8001df8:	f8ad 1008 	strh.w	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8001dfc:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f af11 	bne.w	8001c28 <dwt_run_pgfcal+0x74>
            writetospi(cnt, header, length, buffer);
 8001e06:	2202      	movs	r2, #2
 8001e08:	4633      	mov	r3, r6
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f003 ffe9 	bl	8005de4 <writetospi_serial>
 8001e12:	e709      	b.n	8001c28 <dwt_run_pgfcal+0x74>
 8001e14:	463b      	mov	r3, r7
 8001e16:	2204      	movs	r2, #4
 8001e18:	4631      	mov	r1, r6
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f003 ffe2 	bl	8005de4 <writetospi_serial>
    buf[0] = _and;
 8001e20:	f241 01ff 	movw	r1, #4351	@ 0x10ff
        header[0] |= DW3000_SPI_EAMRW;
 8001e24:	f243 12c8 	movw	r2, #12744	@ 0x31c8
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = _and;
 8001e2c:	f8ad 1008 	strh.w	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8001e30:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f47f aece 	bne.w	8001bd6 <dwt_run_pgfcal+0x22>
            writetospi(cnt, header, length, buffer);
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4633      	mov	r3, r6
 8001e3e:	4639      	mov	r1, r7
 8001e40:	4610      	mov	r0, r2
 8001e42:	f003 ffcf 	bl	8005de4 <writetospi_serial>
 8001e46:	e6c6      	b.n	8001bd6 <dwt_run_pgfcal+0x22>
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	00020001 	.word	0x00020001
 8001e50:	200001cc 	.word	0x200001cc

08001e54 <dwt_pgf_cal>:
    if (ldoen == 1)
 8001e54:	2801      	cmp	r0, #1
 8001e56:	d001      	beq.n	8001e5c <dwt_pgf_cal+0x8>
    temp = dwt_run_pgfcal();
 8001e58:	f7ff beac 	b.w	8001bb4 <dwt_run_pgfcal>
{
 8001e5c:	b530      	push	{r4, r5, lr}
            readfromspi(cnt, header, length, buffer);
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4604      	mov	r4, r0
        header[0] |= DW3000_SPI_EAMRW;
 8001e62:	f242 004f 	movw	r0, #8271	@ 0x204f
{
 8001e66:	b085      	sub	sp, #20
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001e68:	4d2d      	ldr	r5, [pc, #180]	@ (8001f20 <dwt_pgf_cal+0xcc>)
            readfromspi(cnt, header, length, buffer);
 8001e6a:	ab01      	add	r3, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 8001e6c:	f8ad 0008 	strh.w	r0, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8001e70:	a902      	add	r1, sp, #8
 8001e72:	4610      	mov	r0, r2
 8001e74:	f004 f80e 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	7d18      	ldrb	r0, [r3, #20]
 8001e7c:	2802      	cmp	r0, #2
 8001e7e:	d01b      	beq.n	8001eb8 <dwt_pgf_cal+0x64>
        header[0] |= DW3000_SPI_EAMRW;
 8001e80:	f242 23cf 	movw	r3, #8911	@ 0x22cf
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001e84:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <dwt_pgf_cal+0xd0>)
 8001e86:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8001e8a:	9203      	str	r2, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8001e8c:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d03d      	beq.n	8001f10 <dwt_pgf_cal+0xbc>
    temp = dwt_run_pgfcal();
 8001e94:	f7ff fe8e 	bl	8001bb4 <dwt_run_pgfcal>
    buf[2] = (uint8_t)_or;//        &0xFF;
 8001e98:	2100      	movs	r1, #0
        header[0] |= DW3000_SPI_EAMRW;
 8001e9a:	f242 22cf 	movw	r2, #8911	@ 0x22cf
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001e9e:	682b      	ldr	r3, [r5, #0]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001ea0:	f8ad 400c 	strh.w	r4, [sp, #12]
    buf[2] = (uint8_t)_or;//        &0xFF;
 8001ea4:	f8ad 100e 	strh.w	r1, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 8001ea8:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001eac:	7d1b      	ldrb	r3, [r3, #20]
    temp = dwt_run_pgfcal();
 8001eae:	4604      	mov	r4, r0
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001eb0:	b33b      	cbz	r3, 8001f02 <dwt_pgf_cal+0xae>
}
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	b005      	add	sp, #20
 8001eb6:	bd30      	pop	{r4, r5, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8001eb8:	f246 0140 	movw	r1, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <dwt_pgf_cal+0xd4>)
        header[0] |= DW3000_SPI_EAMRW;
 8001ebe:	f8ad 100c 	strh.w	r1, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001ec2:	f89d 1008 	ldrb.w	r1, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8001ec6:	4622      	mov	r2, r4
        data = byteArray[byte] ^ crcRemainderInit;
 8001ec8:	5c59      	ldrb	r1, [r3, r1]
 8001eca:	f89d 4009 	ldrb.w	r4, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001ece:	4061      	eors	r1, r4
        data = byteArray[byte] ^ crcRemainderInit;
 8001ed0:	5c5c      	ldrb	r4, [r3, r1]
 8001ed2:	f89d 1004 	ldrb.w	r1, [sp, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001ed6:	4061      	eors	r1, r4
 8001ed8:	5c59      	ldrb	r1, [r3, r1]
        data = byteArray[byte] ^ crcRemainderInit;
 8001eda:	f89d 4005 	ldrb.w	r4, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001ede:	4061      	eors	r1, r4
 8001ee0:	5c5c      	ldrb	r4, [r3, r1]
            readfromspi(cnt, header, length, buffer);
 8001ee2:	f10d 0303 	add.w	r3, sp, #3
 8001ee6:	a903      	add	r1, sp, #12
 8001ee8:	f003 ffd4 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8001eec:	f89d 2003 	ldrb.w	r2, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8001ef0:	682b      	ldr	r3, [r5, #0]
                if (crc8 != dwcrc8)
 8001ef2:	4294      	cmp	r4, r2
 8001ef4:	d003      	beq.n	8001efe <dwt_pgf_cal+0xaa>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8001ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef8:	b10a      	cbz	r2, 8001efe <dwt_pgf_cal+0xaa>
                        pdw3000local->cbSPIRDErr();
 8001efa:	4790      	blx	r2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	7d18      	ldrb	r0, [r3, #20]
 8001f00:	e7be      	b.n	8001e80 <dwt_pgf_cal+0x2c>
            writetospi(cnt, header, length, buffer);
 8001f02:	2204      	movs	r2, #4
 8001f04:	a902      	add	r1, sp, #8
 8001f06:	ab03      	add	r3, sp, #12
 8001f08:	2002      	movs	r0, #2
 8001f0a:	f003 ff6b 	bl	8005de4 <writetospi_serial>
    return temp;
 8001f0e:	e7d0      	b.n	8001eb2 <dwt_pgf_cal+0x5e>
            writetospi(cnt, header, length, buffer);
 8001f10:	2204      	movs	r2, #4
 8001f12:	a902      	add	r1, sp, #8
 8001f14:	ab03      	add	r3, sp, #12
 8001f16:	2002      	movs	r0, #2
 8001f18:	f003 ff64 	bl	8005de4 <writetospi_serial>
 8001f1c:	e7ba      	b.n	8001e94 <dwt_pgf_cal+0x40>
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000
 8001f24:	0105ffff 	.word	0x0105ffff
 8001f28:	200001cc 	.word	0x200001cc

08001f2c <dwt_configure>:
{
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8001f30:	7903      	ldrb	r3, [r0, #4]
    uint8_t chan = config->chan,cnt,flag;
 8001f32:	7801      	ldrb	r1, [r0, #0]
{
 8001f34:	b08b      	sub	sp, #44	@ 0x2c
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8001f36:	2b18      	cmp	r3, #24
{
 8001f38:	4602      	mov	r2, r0
 8001f3a:	9001      	str	r0, [sp, #4]
    uint8_t chan = config->chan,cnt,flag;
 8001f3c:	9102      	str	r1, [sp, #8]
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8001f3e:	f200 8096 	bhi.w	800206e <dwt_configure+0x142>
 8001f42:	78c3      	ldrb	r3, [r0, #3]
 8001f44:	2b18      	cmp	r3, #24
 8001f46:	bf94      	ite	ls
 8001f48:	2300      	movls	r3, #0
 8001f4a:	2301      	movhi	r3, #1
 8001f4c:	469b      	mov	fp, r3
 8001f4e:	4603      	mov	r3, r0
    sts_len=(uint16_t)GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8001f50:	2501      	movs	r5, #1
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8001f52:	79d9      	ldrb	r1, [r3, #7]
 8001f54:	785b      	ldrb	r3, [r3, #1]
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8001f56:	4eb7      	ldr	r6, [pc, #732]	@ (8002234 <dwt_configure+0x308>)
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	bf98      	it	ls
 8001f60:	4ab5      	ldrls	r2, [pc, #724]	@ (8002238 <dwt_configure+0x30c>)
    sts_len=(uint16_t)GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8001f62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001f66:	bf98      	it	ls
 8001f68:	f852 a023 	ldrls.w	sl, [r2, r3, lsl #2]
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8001f6c:	6832      	ldr	r2, [r6, #0]
    switch (config->txPreambLength)
 8001f6e:	bf88      	it	hi
 8001f70:	f44f 7a80 	movhi.w	sl, #256	@ 0x100
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8001f74:	8a13      	ldrh	r3, [r2, #16]
    pdw3000local->longFrames = config->phrMode ;
 8001f76:	7311      	strb	r1, [r2, #12]
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8001f78:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001f7c:	8213      	strh	r3, [r2, #16]
    sts_len=(uint16_t)GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8001f7e:	f898 400d 	ldrb.w	r4, [r8, #13]
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8001f82:	9203      	str	r2, [sp, #12]
    sts_len=(uint16_t)GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8001f84:	3402      	adds	r4, #2
 8001f86:	fa05 f404 	lsl.w	r4, r5, r4
 8001f8a:	fa1f f984 	uxth.w	r9, r4
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8001f8e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001f92:	4648      	mov	r0, r9
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8001f94:	f1a1 0701 	sub.w	r7, r1, #1
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8001f98:	f7fe fdee 	bl	8000b78 <__aeabi_ui2f>
 8001f9c:	49a7      	ldr	r1, [pc, #668]	@ (800223c <dwt_configure+0x310>)
 8001f9e:	f7fe fe43 	bl	8000c28 <__aeabi_fmul>
 8001fa2:	f7fe ff91 	bl	8000ec8 <__aeabi_f2iz>
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8001fa6:	fab7 f787 	clz	r7, r7
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8001faa:	9a03      	ldr	r2, [sp, #12]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8001fac:	f04f 0c00 	mov.w	ip, #0
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8001fb0:	8250      	strh	r0, [r2, #18]
        header[0] |= DW3000_SPI_EAMRW;
 8001fb2:	f244 30c0 	movw	r0, #17344	@ 0x43c0
    pdw3000local->stsconfig = config->stsMode;
 8001fb6:	f898 300c 	ldrb.w	r3, [r8, #12]
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8001fba:	097f      	lsrs	r7, r7, #5
    pdw3000local->stsconfig = config->stsMode;
 8001fbc:	7553      	strb	r3, [r2, #21]
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 8001fbe:	031b      	lsls	r3, r3, #12
 8001fc0:	f403 4130 	and.w	r1, r3, #45056	@ 0xb000
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 8001fc4:	f898 3008 	ldrb.w	r3, [r8, #8]
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8001fc8:	013f      	lsls	r7, r7, #4
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	430b      	orrs	r3, r1
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8001fd2:	f898 100e 	ldrb.w	r1, [r8, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8001fd6:	f88d c027 	strb.w	ip, [sp, #39]	@ 0x27
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 8001fda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 8001fde:	433b      	orrs	r3, r7
    buf[4] = (uint8_t)_or;//        &0xFF;
 8001fe0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001fea:	4b95      	ldr	r3, [pc, #596]	@ (8002240 <dwt_configure+0x314>)
        header[0] |= DW3000_SPI_EAMRW;
 8001fec:	f8ad 001c 	strh.w	r0, [sp, #28]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001ff0:	9308      	str	r3, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001ff2:	7d13      	ldrb	r3, [r2, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 81d8 	beq.w	80023aa <dwt_configure+0x47e>
    if (scp)
 8001ffa:	4659      	mov	r1, fp
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d13a      	bne.n	8002076 <dwt_configure+0x14a>
 8002000:	f10d 0820 	add.w	r8, sp, #32
 8002004:	af07      	add	r7, sp, #28
        if (config->stsMode != DWT_STS_MODE_OFF)
 8002006:	9d01      	ldr	r5, [sp, #4]
 8002008:	7b29      	ldrb	r1, [r5, #12]
 800200a:	2900      	cmp	r1, #0
 800200c:	f000 8128 	beq.w	8002260 <dwt_configure+0x334>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 8002010:	7b68      	ldrb	r0, [r5, #13]
 8002012:	498c      	ldr	r1, [pc, #560]	@ (8002244 <dwt_configure+0x318>)
    value = cipher* (uint32_t)threshold;
 8002014:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 8002018:	7ba8      	ldrb	r0, [r5, #14]
 800201a:	2801      	cmp	r0, #1
 800201c:	f240 8317 	bls.w	800264e <dwt_configure+0x722>
    value = cipher* (uint32_t)threshold;
 8002020:	0108      	lsls	r0, r1, #4
    mod_val = value % MOD_VALUE+ HALF_MOD;
 8002022:	f3c0 000a 	ubfx	r0, r0, #0, #11
    if (mod_val >= MOD_VALUE)
 8002026:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800202a:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
    value >>= SHIFT_VALUE;
 800202e:	ea4f 11d1 	mov.w	r1, r1, lsr #7
    if (mod_val >= MOD_VALUE)
 8002032:	d300      	bcc.n	8002036 <dwt_configure+0x10a>
        value += 1;
 8002034:	3101      	adds	r1, #1
    return (uint16_t)value;
 8002036:	b289      	uxth	r1, r1
            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8002038:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
    buf[2] = (uint8_t)_or;//        &0xFF;
 800203c:	f88d 1022 	strb.w	r1, [sp, #34]	@ 0x22
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002040:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8002044:	f8ad 1020 	strh.w	r1, [sp, #32]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 8002048:	2100      	movs	r1, #0
 800204a:	f88d 1023 	strb.w	r1, [sp, #35]	@ 0x23
        header[0] |= DW3000_SPI_EAMRW;
 800204e:	f245 21dc 	movw	r1, #21212	@ 0x52dc
            preamble_len += (sts_len) * 8;
 8002052:	44ca      	add	sl, r9
        header[0] |= DW3000_SPI_EAMRW;
 8002054:	f8ad 101c 	strh.w	r1, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80f9 	beq.w	8002250 <dwt_configure+0x324>
        if (preamble_len >= 256)
 800205e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8002062:	dd0f      	ble.n	8002084 <dwt_configure+0x158>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8002064:	8a13      	ldrh	r3, [r2, #16]
 8002066:	f043 0320 	orr.w	r3, r3, #32
 800206a:	8213      	strh	r3, [r2, #16]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800206c:	e00a      	b.n	8002084 <dwt_configure+0x158>
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 800206e:	2301      	movs	r3, #1
 8002070:	469b      	mov	fp, r3
 8002072:	4603      	mov	r3, r0
 8002074:	e76c      	b.n	8001f50 <dwt_configure+0x24>
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 8002076:	8a13      	ldrh	r3, [r2, #16]
 8002078:	f10d 0820 	add.w	r8, sp, #32
 800207c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002080:	8213      	strh	r3, [r2, #16]
    if (config->txPreambLength == DWT_PLEN_72)
 8002082:	af07      	add	r7, sp, #28
        header[0] |= DW3000_SPI_EAMRW;
 8002084:	f245 0342 	movw	r3, #20546	@ 0x5042
            readfromspi(cnt, header, length, buffer);
 8002088:	2204      	movs	r2, #4
        header[0] |= DW3000_SPI_EAMRW;
 800208a:	f8ad 3018 	strh.w	r3, [sp, #24]
            readfromspi(cnt, header, length, buffer);
 800208e:	2002      	movs	r0, #2
 8002090:	4643      	mov	r3, r8
 8002092:	a906      	add	r1, sp, #24
 8002094:	f003 fefe 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	7d18      	ldrb	r0, [r3, #20]
 800209c:	2802      	cmp	r0, #2
 800209e:	f000 8156 	beq.w	800234e <dwt_configure+0x422>
 80020a2:	f10d 0b17 	add.w	fp, sp, #23
        regval = (regval << 8) + buffer[j] ;
 80020a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80020aa:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 80020ae:	9c01      	ldr	r4, [sp, #4]
        regval = (regval << 8) + buffer[j] ;
 80020b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80020b4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 80020b8:	78e1      	ldrb	r1, [r4, #3]
        regval = (regval << 8) + buffer[j] ;
 80020ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80020be:	f89d 2020 	ldrb.w	r2, [sp, #32]
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 80020c2:	00c9      	lsls	r1, r1, #3
        regval = (regval << 8) + buffer[j] ;
 80020c4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80020c8:	9b02      	ldr	r3, [sp, #8]
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 80020ca:	b2c9      	uxtb	r1, r1
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80020cc:	2b09      	cmp	r3, #9
        header[0] |= DW3000_SPI_EAMRW;
 80020ce:	f245 03c2 	movw	r3, #20674	@ 0x50c2
 80020d2:	f8ad 301c 	strh.w	r3, [sp, #28]
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 80020d6:	7923      	ldrb	r3, [r4, #4]
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 80020d8:	f422 52ff 	bic.w	r2, r2, #8160	@ 0x1fe0
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 80020dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80020e0:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 80020e4:	ea43 0301 	orr.w	r3, r3, r1
 80020e8:	7961      	ldrb	r1, [r4, #5]
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 80020ea:	f022 021f 	bic.w	r2, r2, #31
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 80020ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80020f2:	f001 0106 	and.w	r1, r1, #6
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80020f6:	bf08      	it	eq
 80020f8:	f042 0201 	orreq.w	r2, r2, #1
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 80020fc:	430b      	orrs	r3, r1
 80020fe:	4313      	orrs	r3, r2
        buffer[j] = (uint8_t)regval;
 8002100:	9308      	str	r3, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002102:	2800      	cmp	r0, #0
 8002104:	f000 8268 	beq.w	80025d8 <dwt_configure+0x6ac>
    buf[4] = (uint8_t)_or;//        &0xFF;
 8002108:	2300      	movs	r3, #0
    buf[0] = (uint8_t)_and;//       &0xFF;
 800210a:	f46f 4274 	mvn.w	r2, #62464	@ 0xf400
    buf[4] = (uint8_t)_or;//        &0xFF;
 800210e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8002112:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
        header[0] |= DW3000_SPI_EAMRW;
 8002116:	f249 33c0 	movw	r3, #37824	@ 0x93c0
    buf[0] = (uint8_t)_and;//       &0xFF;
 800211a:	9208      	str	r2, [sp, #32]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 800211c:	9a01      	ldr	r2, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800211e:	f8ad 301c 	strh.w	r3, [sp, #28]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 8002122:	7853      	ldrb	r3, [r2, #1]
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 8002124:	7992      	ldrb	r2, [r2, #6]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 8002126:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 8002128:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 800212c:	0a1a      	lsrs	r2, r3, #8
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 800212e:	0c1b      	lsrs	r3, r3, #16
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 8002130:	f88d 2025 	strb.w	r2, [sp, #37]	@ 0x25
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8002134:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002138:	2800      	cmp	r0, #0
 800213a:	f000 8244 	beq.w	80025c6 <dwt_configure+0x69a>
    if (config->sfdTO == 0)
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	895b      	ldrh	r3, [r3, #10]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d072      	beq.n	800222c <dwt_configure+0x300>
    buffer[0] = (uint8_t)regval;
 8002146:	b2da      	uxtb	r2, r3
    buffer[1] = regval >> 8 ;
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f88d 301d 	strb.w	r3, [sp, #29]
        header[0] |= DW3000_SPI_EAMRW;
 800214e:	f640 03cc 	movw	r3, #2252	@ 0x8cc
    buffer[0] = (uint8_t)regval;
 8002152:	f88d 201c 	strb.w	r2, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 8002156:	f8ad 3020 	strh.w	r3, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800215a:	2800      	cmp	r0, #0
 800215c:	f000 8197 	beq.w	800248e <dwt_configure+0x562>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002160:	2406      	movs	r4, #6
        header[0] |= DW3000_SPI_EAMRW;
 8002162:	f241 0a41 	movw	sl, #4161	@ 0x1041
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002166:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8002248 <dwt_configure+0x31c>
 800216a:	e008      	b.n	800217e <dwt_configure+0x252>
    return regval ;
 800216c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002170:	3c01      	subs	r4, #1
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 8002172:	079b      	lsls	r3, r3, #30
 8002174:	d437      	bmi.n	80021e6 <dwt_configure+0x2ba>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002176:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800217a:	f000 82d4 	beq.w	8002726 <dwt_configure+0x7fa>
		Sleep(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f003 fdb8 	bl	8005cf4 <Sleep>
            readfromspi(cnt, header, length, buffer);
 8002184:	465b      	mov	r3, fp
 8002186:	2201      	movs	r2, #1
 8002188:	4639      	mov	r1, r7
 800218a:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 800218c:	f8ad a01c 	strh.w	sl, [sp, #28]
            readfromspi(cnt, header, length, buffer);
 8002190:	f003 fe80 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002194:	6833      	ldr	r3, [r6, #0]
 8002196:	7d18      	ldrb	r0, [r3, #20]
 8002198:	2802      	cmp	r0, #2
 800219a:	d1e7      	bne.n	800216c <dwt_configure+0x240>
        header[0] |= DW3000_SPI_EAMRW;
 800219c:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80021a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 80021a4:	f8ad 2020 	strh.w	r2, [sp, #32]
        data = byteArray[byte] ^ crcRemainderInit;
 80021a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80021ac:	f89d 201d 	ldrb.w	r2, [sp, #29]
            readfromspi(cnt, header, length, buffer);
 80021b0:	4641      	mov	r1, r8
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80021b2:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 80021b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80021b8:	f89d 2017 	ldrb.w	r2, [sp, #23]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80021bc:	4053      	eors	r3, r2
 80021be:	f819 5003 	ldrb.w	r5, [r9, r3]
            readfromspi(cnt, header, length, buffer);
 80021c2:	2201      	movs	r2, #1
 80021c4:	ab06      	add	r3, sp, #24
 80021c6:	f003 fe65 	bl	8005e94 <readfromspi_serial>
    return regval ;
 80021ca:	f89d 3018 	ldrb.w	r3, [sp, #24]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80021ce:	6832      	ldr	r2, [r6, #0]
                if (crc8 != dwcrc8)
 80021d0:	42ab      	cmp	r3, r5
 80021d2:	d0cb      	beq.n	800216c <dwt_configure+0x240>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80021d4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0c8      	beq.n	800216c <dwt_configure+0x240>
                        pdw3000local->cbSPIRDErr();
 80021da:	4798      	blx	r3
    return regval ;
 80021dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 80021e0:	3c01      	subs	r4, #1
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 80021e2:	079b      	lsls	r3, r3, #30
 80021e4:	d5c7      	bpl.n	8002176 <dwt_configure+0x24a>
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 80021e6:	9b01      	ldr	r3, [sp, #4]
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 80021e8:	6832      	ldr	r2, [r6, #0]
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	3b09      	subs	r3, #9
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	f200 81fb 	bhi.w	80025ea <dwt_configure+0x6be>
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 80021f4:	7a53      	ldrb	r3, [r2, #9]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f000 820e 	beq.w	8002618 <dwt_configure+0x6ec>
            dwt_configmrxlut(chan);
 80021fc:	9802      	ldr	r0, [sp, #8]
 80021fe:	f7ff fbf1 	bl	80019e4 <dwt_configmrxlut>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002202:	6833      	ldr	r3, [r6, #0]
 8002204:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8002206:	f246 22c6 	movw	r2, #25286	@ 0x62c6
    buf[0] = (uint8_t)_and;//       &0xFF;
 800220a:	4910      	ldr	r1, [pc, #64]	@ (800224c <dwt_configure+0x320>)
        header[0] |= DW3000_SPI_EAMRW;
 800220c:	f8ad 201c 	strh.w	r2, [sp, #28]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002210:	9108      	str	r1, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002212:	b92b      	cbnz	r3, 8002220 <dwt_configure+0x2f4>
            writetospi(cnt, header, length, buffer);
 8002214:	4643      	mov	r3, r8
 8002216:	2204      	movs	r2, #4
 8002218:	4639      	mov	r1, r7
 800221a:	2002      	movs	r0, #2
 800221c:	f003 fde2 	bl	8005de4 <writetospi_serial>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8002220:	2001      	movs	r0, #1
} // end dwt_configure()
 8002222:	b00b      	add	sp, #44	@ 0x2c
 8002224:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8002228:	f7ff be14 	b.w	8001e54 <dwt_pgf_cal>
        config->sfdTO = DWT_SFDTOC_DEF;
 800222c:	2281      	movs	r2, #129	@ 0x81
 800222e:	9901      	ldr	r1, [sp, #4]
 8002230:	814a      	strh	r2, [r1, #10]
 8002232:	e78a      	b.n	800214a <dwt_configure+0x21e>
 8002234:	20000000 	.word	0x20000000
 8002238:	08009330 	.word	0x08009330
 800223c:	3f666666 	.word	0x3f666666
 8002240:	fffc4fcf 	.word	0xfffc4fcf
 8002244:	0800935c 	.word	0x0800935c
 8002248:	200001cc 	.word	0x200001cc
 800224c:	640081ff 	.word	0x640081ff
            writetospi(cnt, header, length, buffer);
 8002250:	4643      	mov	r3, r8
 8002252:	2204      	movs	r2, #4
 8002254:	4639      	mov	r1, r7
 8002256:	2002      	movs	r0, #2
 8002258:	f003 fdc4 	bl	8005de4 <writetospi_serial>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 800225c:	6832      	ldr	r2, [r6, #0]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800225e:	7d13      	ldrb	r3, [r2, #20]
        if (preamble_len >= 256)
 8002260:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8002264:	f340 81e5 	ble.w	8002632 <dwt_configure+0x706>
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002268:	f46f 5ec0 	mvn.w	lr, #6144	@ 0x1800
 800226c:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
        header[0] |= DW3000_SPI_EAMRW;
 8002270:	f242 30d6 	movw	r0, #9174	@ 0x23d6
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8002274:	8a11      	ldrh	r1, [r2, #16]
 8002276:	f041 0120 	orr.w	r1, r1, #32
 800227a:	8211      	strh	r1, [r2, #16]
    buf[0] = (uint8_t)_and;//       &0xFF;
 800227c:	e9cd ec08 	strd	lr, ip, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 8002280:	f8ad 001c 	strh.w	r0, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002284:	2b00      	cmp	r3, #0
 8002286:	f47f aefd 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 800228a:	4643      	mov	r3, r8
 800228c:	2208      	movs	r2, #8
 800228e:	4639      	mov	r1, r7
 8002290:	2002      	movs	r0, #2
 8002292:	f003 fda7 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002296:	6833      	ldr	r3, [r6, #0]
 8002298:	f893 9014 	ldrb.w	r9, [r3, #20]
    buf[0] = _and;
 800229c:	23fc      	movs	r3, #252	@ 0xfc
 800229e:	f88d 301c 	strb.w	r3, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 80022a2:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 80022a6:	9d01      	ldr	r5, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 80022a8:	f8ad 3020 	strh.w	r3, [sp, #32]
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 80022ac:	78ab      	ldrb	r3, [r5, #2]
    buf[1] = _or;
 80022ae:	f88d 301d 	strb.w	r3, [sp, #29]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022b2:	f1b9 0f00 	cmp.w	r9, #0
 80022b6:	f47f aee5 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 80022ba:	2202      	movs	r2, #2
 80022bc:	463b      	mov	r3, r7
 80022be:	4610      	mov	r0, r2
 80022c0:	4641      	mov	r1, r8
 80022c2:	f003 fd8f 	bl	8005de4 <writetospi_serial>
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80022c6:	2284      	movs	r2, #132	@ 0x84
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022c8:	6833      	ldr	r3, [r6, #0]
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t)(sts_len-1));    /*Starts from 0 that is why -1*/
 80022ca:	3c01      	subs	r4, #1
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022cc:	7d1b      	ldrb	r3, [r3, #20]
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t)(sts_len-1));    /*Starts from 0 that is why -1*/
 80022ce:	f88d 401c 	strb.w	r4, [sp, #28]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80022d2:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f aed4 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 80022dc:	2201      	movs	r2, #1
 80022de:	463b      	mov	r3, r7
 80022e0:	4610      	mov	r0, r2
 80022e2:	4641      	mov	r1, r8
 80022e4:	f003 fd7e 	bl	8005de4 <writetospi_serial>
    if (config->txPreambLength == DWT_PLEN_72)
 80022e8:	786a      	ldrb	r2, [r5, #1]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022ea:	6833      	ldr	r3, [r6, #0]
    if (config->txPreambLength == DWT_PLEN_72)
 80022ec:	2a07      	cmp	r2, #7
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80022ee:	7d1b      	ldrb	r3, [r3, #20]
    if (config->txPreambLength == DWT_PLEN_72)
 80022f0:	f000 81f9 	beq.w	80026e6 <dwt_configure+0x7ba>
        header[0] |= DW3000_SPI_EAMRW;
 80022f4:	f24a 42c0 	movw	r2, #42176	@ 0xa4c0
 80022f8:	f88d 901c 	strb.w	r9, [sp, #28]
 80022fc:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aebf 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 8002306:	463b      	mov	r3, r7
 8002308:	2201      	movs	r2, #1
 800230a:	4641      	mov	r1, r8
 800230c:	2002      	movs	r0, #2
 800230e:	f003 fd69 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002312:	6833      	ldr	r3, [r6, #0]
 8002314:	7d1a      	ldrb	r2, [r3, #20]
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	7b1b      	ldrb	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
        header[0] |= DW3000_SPI_EAMRW;
 8002320:	f243 03cc 	movw	r3, #12492	@ 0x30cc
 8002324:	f8ad 301c 	strh.w	r3, [sp, #28]
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 8002328:	f000 81d7 	beq.w	80026da <dwt_configure+0x7ae>
        buffer[j] = (uint8_t)regval;
 800232c:	f103 432f 	add.w	r3, r3, #2936012800	@ 0xaf000000
 8002330:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 8002334:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 8002338:	9308      	str	r3, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800233a:	2a00      	cmp	r2, #0
 800233c:	f47f aea2 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 8002340:	4643      	mov	r3, r8
 8002342:	2204      	movs	r2, #4
 8002344:	4639      	mov	r1, r7
 8002346:	2002      	movs	r0, #2
 8002348:	f003 fd4c 	bl	8005de4 <writetospi_serial>
} // end dwt_write32bitoffsetreg()
 800234c:	e69a      	b.n	8002084 <dwt_configure+0x158>
        header[0] |= DW3000_SPI_EAMRW;
 800234e:	f246 0340 	movw	r3, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002352:	f89d 2018 	ldrb.w	r2, [sp, #24]
        header[0] |= DW3000_SPI_EAMRW;
 8002356:	f8ad 301c 	strh.w	r3, [sp, #28]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800235a:	4bc4      	ldr	r3, [pc, #784]	@ (800266c <dwt_configure+0x740>)
        data = byteArray[byte] ^ crcRemainderInit;
 800235c:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8002360:	5c9a      	ldrb	r2, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8002362:	f10d 0b17 	add.w	fp, sp, #23
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002366:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002368:	5c9a      	ldrb	r2, [r3, r2]
 800236a:	f89d 1020 	ldrb.w	r1, [sp, #32]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800236e:	404a      	eors	r2, r1
 8002370:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8002372:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002376:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002378:	5c99      	ldrb	r1, [r3, r2]
 800237a:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800237e:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002380:	5c99      	ldrb	r1, [r3, r2]
 8002382:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002386:	404a      	eors	r2, r1
 8002388:	5c9c      	ldrb	r4, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 800238a:	4639      	mov	r1, r7
 800238c:	465b      	mov	r3, fp
 800238e:	2201      	movs	r2, #1
 8002390:	f003 fd80 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002394:	f89d 2017 	ldrb.w	r2, [sp, #23]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002398:	6833      	ldr	r3, [r6, #0]
                if (crc8 != dwcrc8)
 800239a:	4294      	cmp	r4, r2
 800239c:	d003      	beq.n	80023a6 <dwt_configure+0x47a>
                    if (pdw3000local->cbSPIRDErr != NULL)
 800239e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a0:	b10a      	cbz	r2, 80023a6 <dwt_configure+0x47a>
                        pdw3000local->cbSPIRDErr();
 80023a2:	4790      	blx	r2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80023a4:	6833      	ldr	r3, [r6, #0]
 80023a6:	7d18      	ldrb	r0, [r3, #20]
 80023a8:	e67d      	b.n	80020a6 <dwt_configure+0x17a>
            writetospi(cnt, header, length, buffer);
 80023aa:	f10d 0820 	add.w	r8, sp, #32
 80023ae:	af07      	add	r7, sp, #28
 80023b0:	4643      	mov	r3, r8
 80023b2:	2208      	movs	r2, #8
 80023b4:	4639      	mov	r1, r7
 80023b6:	2002      	movs	r0, #2
 80023b8:	f003 fd14 	bl	8005de4 <writetospi_serial>
    if (scp)
 80023bc:	4659      	mov	r1, fp
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 80023be:	6832      	ldr	r2, [r6, #0]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80023c0:	7d13      	ldrb	r3, [r2, #20]
    if (scp)
 80023c2:	2900      	cmp	r1, #0
 80023c4:	f43f ae1f 	beq.w	8002006 <dwt_configure+0xda>
    buf[0] = (uint8_t)_and;//       &0xFF;
 80023c8:	f46f 5ec0 	mvn.w	lr, #6144	@ 0x1800
 80023cc:	f44f 6c40 	mov.w	ip, #3072	@ 0xc00
        header[0] |= DW3000_SPI_EAMRW;
 80023d0:	f242 30d6 	movw	r0, #9174	@ 0x23d6
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 80023d4:	8a11      	ldrh	r1, [r2, #16]
 80023d6:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 80023da:	8211      	strh	r1, [r2, #16]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80023dc:	e9cd ec08 	strd	lr, ip, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 80023e0:	f8ad 001c 	strh.w	r0, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae4d 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 80023ea:	4643      	mov	r3, r8
 80023ec:	2208      	movs	r2, #8
 80023ee:	4639      	mov	r1, r7
 80023f0:	2002      	movs	r0, #2
 80023f2:	f003 fcf7 	bl	8005de4 <writetospi_serial>
        buffer[j] = (uint8_t)regval;
 80023f6:	f240 3206 	movw	r2, #774	@ 0x306
        header[0] |= DW3000_SPI_EAMRW;
 80023fa:	f243 03dc 	movw	r3, #12508	@ 0x30dc
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80023fe:	6831      	ldr	r1, [r6, #0]
 8002400:	f891 9014 	ldrb.w	r9, [r1, #20]
        buffer[j] = (uint8_t)regval;
 8002404:	9208      	str	r2, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 8002406:	f8ad 301c 	strh.w	r3, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800240a:	f1b9 0f00 	cmp.w	r9, #0
 800240e:	f47f ae39 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 8002412:	4643      	mov	r3, r8
 8002414:	2204      	movs	r2, #4
 8002416:	4639      	mov	r1, r7
 8002418:	2002      	movs	r0, #2
 800241a:	f003 fce3 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 800241e:	f643 02dc 	movw	r2, #14556	@ 0x38dc
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002422:	6833      	ldr	r3, [r6, #0]
 8002424:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 8002426:	f8cd 9020 	str.w	r9, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 800242a:	f8ad 201c 	strh.w	r2, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae28 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 8002434:	4643      	mov	r3, r8
 8002436:	2204      	movs	r2, #4
 8002438:	4639      	mov	r1, r7
 800243a:	2002      	movs	r0, #2
 800243c:	f003 fcd2 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8002440:	f644 02dc 	movw	r2, #18652	@ 0x48dc
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002444:	6833      	ldr	r3, [r6, #0]
 8002446:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8002448:	f8ad 201c 	strh.w	r2, [sp, #28]
        buffer[j] = (uint8_t)regval;
 800244c:	4a88      	ldr	r2, [pc, #544]	@ (8002670 <dwt_configure+0x744>)
 800244e:	9208      	str	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f ae17 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 8002456:	4643      	mov	r3, r8
 8002458:	2204      	movs	r2, #4
 800245a:	4639      	mov	r1, r7
 800245c:	2002      	movs	r0, #2
 800245e:	f003 fcc1 	bl	8005de4 <writetospi_serial>
 8002462:	217d      	movs	r1, #125	@ 0x7d
        header[0] |= DW3000_SPI_EAMRW;
 8002464:	f645 02dc 	movw	r2, #22748	@ 0x58dc
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002468:	6833      	ldr	r3, [r6, #0]
 800246a:	7d1b      	ldrb	r3, [r3, #20]
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 800246c:	f88d 101c 	strb.w	r1, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 8002470:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002474:	2b00      	cmp	r3, #0
 8002476:	f47f ae05 	bne.w	8002084 <dwt_configure+0x158>
            writetospi(cnt, header, length, buffer);
 800247a:	463b      	mov	r3, r7
 800247c:	462a      	mov	r2, r5
 800247e:	4641      	mov	r1, r8
 8002480:	2002      	movs	r0, #2
 8002482:	f003 fcaf 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002486:	6833      	ldr	r3, [r6, #0]
 8002488:	f893 9014 	ldrb.w	r9, [r3, #20]
 800248c:	e706      	b.n	800229c <dwt_configure+0x370>
            writetospi(cnt, header, length, buffer);
 800248e:	2202      	movs	r2, #2
 8002490:	463b      	mov	r3, r7
 8002492:	4610      	mov	r0, r2
 8002494:	4641      	mov	r1, r8
 8002496:	f003 fca5 	bl	8005de4 <writetospi_serial>
    if (chan == 9)
 800249a:	9a02      	ldr	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800249c:	6833      	ldr	r3, [r6, #0]
    if (chan == 9)
 800249e:	2a09      	cmp	r2, #9
        header[0] |= DW3000_SPI_EAMRW;
 80024a0:	f247 02ce 	movw	r2, #28878	@ 0x70ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024a4:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 80024a6:	f8ad 201c 	strh.w	r2, [sp, #28]
    if (chan == 9)
 80024aa:	f000 80e5 	beq.w	8002678 <dwt_configure+0x74c>
        buffer[j] = (uint8_t)regval;
 80024ae:	4a71      	ldr	r2, [pc, #452]	@ (8002674 <dwt_configure+0x748>)
 80024b0:	9208      	str	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f47f ae54 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 80024b8:	4643      	mov	r3, r8
 80024ba:	2204      	movs	r2, #4
 80024bc:	4639      	mov	r1, r7
 80024be:	2002      	movs	r0, #2
 80024c0:	f003 fc90 	bl	8005de4 <writetospi_serial>
    buffer[0] = (uint8_t)regval;
 80024c4:	f641 713c 	movw	r1, #7996	@ 0x1f3c
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80024c8:	2292      	movs	r2, #146	@ 0x92
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024ca:	6833      	ldr	r3, [r6, #0]
 80024cc:	7d1b      	ldrb	r3, [r3, #20]
    buffer[0] = (uint8_t)regval;
 80024ce:	f8ad 101c 	strh.w	r1, [sp, #28]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80024d2:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f47f ae42 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 80024dc:	463b      	mov	r3, r7
 80024de:	2202      	movs	r2, #2
 80024e0:	4641      	mov	r1, r8
 80024e2:	2001      	movs	r0, #1
 80024e4:	f003 fc7e 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024e8:	6833      	ldr	r3, [r6, #0]
 80024ea:	7d1b      	ldrb	r3, [r3, #20]
    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 80024ec:	2214      	movs	r2, #20
 80024ee:	f88d 201c 	strb.w	r2, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 80024f2:	f244 42cf 	movw	r2, #17615	@ 0x44cf
 80024f6:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f47f ae30 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 8002500:	463b      	mov	r3, r7
 8002502:	2201      	movs	r2, #1
 8002504:	4641      	mov	r1, r8
 8002506:	2002      	movs	r0, #2
 8002508:	f003 fc6c 	bl	8005de4 <writetospi_serial>
 800250c:	210e      	movs	r1, #14
        header[0] |= DW3000_SPI_EAMRW;
 800250e:	f646 02ce 	movw	r2, #26830	@ 0x68ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002512:	6833      	ldr	r3, [r6, #0]
 8002514:	7d1b      	ldrb	r3, [r3, #20]
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8002516:	f88d 101c 	strb.w	r1, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 800251a:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f ae1e 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 8002524:	463b      	mov	r3, r7
 8002526:	2201      	movs	r2, #1
 8002528:	4641      	mov	r1, r8
 800252a:	2002      	movs	r0, #2
 800252c:	f003 fc5a 	bl	8005de4 <writetospi_serial>
 8002530:	2181      	movs	r1, #129	@ 0x81
        header[0] |= DW3000_SPI_EAMRW;
 8002532:	f242 02d2 	movw	r2, #8402	@ 0x20d2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002536:	6833      	ldr	r3, [r6, #0]
 8002538:	7d1b      	ldrb	r3, [r3, #20]
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 800253a:	f88d 101c 	strb.w	r1, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 800253e:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae0c 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 8002548:	463b      	mov	r3, r7
 800254a:	2201      	movs	r2, #1
 800254c:	4641      	mov	r1, r8
 800254e:	2002      	movs	r0, #2
 8002550:	f003 fc48 	bl	8005de4 <writetospi_serial>
 8002554:	2402      	movs	r4, #2
        header[0] |= DW3000_SPI_EAMRW;
 8002556:	f241 02c1 	movw	r2, #4289	@ 0x10c1
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 800255e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002562:	f88d 401c 	strb.w	r4, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002566:	2b00      	cmp	r3, #0
 8002568:	f47f adfa 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 800256c:	463b      	mov	r3, r7
 800256e:	2201      	movs	r2, #1
 8002570:	4641      	mov	r1, r8
 8002572:	4620      	mov	r0, r4
 8002574:	f003 fc36 	bl	8005de4 <writetospi_serial>
    buffer[0] = (uint8_t)regval;
 8002578:	f44f 7100 	mov.w	r1, #512	@ 0x200
        header[0] |= DW3000_SPI_EAMRW;
 800257c:	f241 02e2 	movw	r2, #4322	@ 0x10e2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002580:	6833      	ldr	r3, [r6, #0]
 8002582:	7d1b      	ldrb	r3, [r3, #20]
    buffer[0] = (uint8_t)regval;
 8002584:	f8ad 101c 	strh.w	r1, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 8002588:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ade7 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 8002592:	463b      	mov	r3, r7
 8002594:	4622      	mov	r2, r4
 8002596:	4641      	mov	r1, r8
 8002598:	4620      	mov	r0, r4
 800259a:	f003 fc23 	bl	8005de4 <writetospi_serial>
    buf[0] = _and;
 800259e:	f240 11ff 	movw	r1, #511	@ 0x1ff
        header[0] |= DW3000_SPI_EAMRW;
 80025a2:	f242 52e2 	movw	r2, #9698	@ 0x25e2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80025a6:	6833      	ldr	r3, [r6, #0]
 80025a8:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = _and;
 80025aa:	f8ad 101c 	strh.w	r1, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 80025ae:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f add4 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 80025b8:	463b      	mov	r3, r7
 80025ba:	4622      	mov	r2, r4
 80025bc:	4620      	mov	r0, r4
 80025be:	4641      	mov	r1, r8
 80025c0:	f003 fc10 	bl	8005de4 <writetospi_serial>
 80025c4:	e5cc      	b.n	8002160 <dwt_configure+0x234>
 80025c6:	4643      	mov	r3, r8
 80025c8:	2208      	movs	r2, #8
 80025ca:	4639      	mov	r1, r7
 80025cc:	2002      	movs	r0, #2
 80025ce:	f003 fc09 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80025d2:	6833      	ldr	r3, [r6, #0]
 80025d4:	7d18      	ldrb	r0, [r3, #20]
 80025d6:	e5b2      	b.n	800213e <dwt_configure+0x212>
            writetospi(cnt, header, length, buffer);
 80025d8:	4643      	mov	r3, r8
 80025da:	2204      	movs	r2, #4
 80025dc:	4639      	mov	r1, r7
 80025de:	2002      	movs	r0, #2
 80025e0:	f003 fc00 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80025e4:	6833      	ldr	r3, [r6, #0]
 80025e6:	7d18      	ldrb	r0, [r3, #20]
 80025e8:	e58e      	b.n	8002108 <dwt_configure+0x1dc>
        header[0] |= DW3000_SPI_EAMRW;
 80025ea:	f246 13c6 	movw	r3, #25030	@ 0x61c6
    buf[0] = _and;
 80025ee:	21fe      	movs	r1, #254	@ 0xfe
        header[0] |= DW3000_SPI_EAMRW;
 80025f0:	f8ad 3020 	strh.w	r3, [sp, #32]
    buf[0] = _and;
 80025f4:	f8ad 101c 	strh.w	r1, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80025f8:	7d13      	ldrb	r3, [r2, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f ae10 	bne.w	8002220 <dwt_configure+0x2f4>
            writetospi(cnt, header, length, buffer);
 8002600:	2202      	movs	r2, #2
 8002602:	463b      	mov	r3, r7
 8002604:	4641      	mov	r1, r8
 8002606:	4610      	mov	r0, r2
 8002608:	f003 fbec 	bl	8005de4 <writetospi_serial>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 800260c:	2001      	movs	r0, #1
} // end dwt_configure()
 800260e:	b00b      	add	sp, #44	@ 0x2c
 8002610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8002614:	f7ff bc1e 	b.w	8001e54 <dwt_pgf_cal>
            _dwt_kick_dgc_on_wakeup((int8_t)chan);
 8002618:	9902      	ldr	r1, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800261a:	7d13      	ldrb	r3, [r2, #20]
    if (channel == 5)
 800261c:	2905      	cmp	r1, #5
            _dwt_kick_dgc_on_wakeup((int8_t)chan);
 800261e:	b24a      	sxtb	r2, r1
    if (channel == 5)
 8002620:	d06c      	beq.n	80026fc <dwt_configure+0x7d0>
    else if (channel == 9)
 8002622:	2a09      	cmp	r2, #9
 8002624:	f47f adef 	bne.w	8002206 <dwt_configure+0x2da>
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002628:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 800262c:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8002630:	e067      	b.n	8002702 <dwt_configure+0x7d6>
 8002632:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8002636:	f46f 51c0 	mvn.w	r1, #6144	@ 0x1800
 800263a:	e9cd 1208 	strd	r1, r2, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 800263e:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 8002642:	f8ad 201c 	strh.w	r2, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002646:	2b00      	cmp	r3, #0
 8002648:	f43f ae1f 	beq.w	800228a <dwt_configure+0x35e>
 800264c:	e51a      	b.n	8002084 <dwt_configure+0x158>
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 800264e:	f44f 6035 	mov.w	r0, #2896	@ 0xb50
 8002652:	fb00 f101 	mul.w	r1, r0, r1
    mod_val = value % MOD_VALUE+ HALF_MOD;
 8002656:	f3c1 10ca 	ubfx	r0, r1, #7, #11
    if (mod_val >= MOD_VALUE)
 800265a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800265e:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
    value >>= SHIFT_VALUE;
 8002662:	ea4f 4191 	mov.w	r1, r1, lsr #18
    if (mod_val >= MOD_VALUE)
 8002666:	f4ff ace6 	bcc.w	8002036 <dwt_configure+0x10a>
 800266a:	e4e3      	b.n	8002034 <dwt_configure+0x108>
 800266c:	200001cc 	.word	0x200001cc
 8002670:	000c5a0a 	.word	0x000c5a0a
 8002674:	1c071134 	.word	0x1c071134
        buffer[j] = (uint8_t)regval;
 8002678:	4a2d      	ldr	r2, [pc, #180]	@ (8002730 <dwt_configure+0x804>)
 800267a:	9208      	str	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ad6f 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 8002682:	4643      	mov	r3, r8
 8002684:	2204      	movs	r2, #4
 8002686:	4639      	mov	r1, r7
 8002688:	2002      	movs	r0, #2
 800268a:	f003 fbab 	bl	8005de4 <writetospi_serial>
    buffer[0] = (uint8_t)regval;
 800268e:	f640 713c 	movw	r1, #3900	@ 0xf3c
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002692:	2292      	movs	r2, #146	@ 0x92
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	7d1b      	ldrb	r3, [r3, #20]
    buffer[0] = (uint8_t)regval;
 8002698:	f8ad 101c 	strh.w	r1, [sp, #28]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800269c:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f ad5d 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 80026a6:	463b      	mov	r3, r7
 80026a8:	2202      	movs	r2, #2
 80026aa:	4641      	mov	r1, r8
 80026ac:	2001      	movs	r0, #1
 80026ae:	f003 fb99 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 80026b2:	f244 02ce 	movw	r2, #16590	@ 0x40ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026b6:	6833      	ldr	r3, [r6, #0]
 80026b8:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 80026ba:	f8ad 201c 	strh.w	r2, [sp, #28]
        buffer[j] = (uint8_t)regval;
 80026be:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <dwt_configure+0x808>)
 80026c0:	9208      	str	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f47f ad4c 	bne.w	8002160 <dwt_configure+0x234>
            writetospi(cnt, header, length, buffer);
 80026c8:	4643      	mov	r3, r8
 80026ca:	2204      	movs	r2, #4
 80026cc:	4639      	mov	r1, r7
 80026ce:	2002      	movs	r0, #2
 80026d0:	f003 fb88 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026d4:	6833      	ldr	r3, [r6, #0]
 80026d6:	7d1b      	ldrb	r3, [r3, #20]
} // end dwt_write32bitoffsetreg()
 80026d8:	e708      	b.n	80024ec <dwt_configure+0x5c0>
        buffer[j] = (uint8_t)regval;
 80026da:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <dwt_configure+0x80c>)
 80026dc:	9308      	str	r3, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026de:	2a00      	cmp	r2, #0
 80026e0:	f43f ae2e 	beq.w	8002340 <dwt_configure+0x414>
 80026e4:	e4ce      	b.n	8002084 <dwt_configure+0x158>
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 80026e6:	2208      	movs	r2, #8
 80026e8:	f88d 201c 	strb.w	r2, [sp, #28]
        header[0] |= DW3000_SPI_EAMRW;
 80026ec:	f24a 42c0 	movw	r2, #42176	@ 0xa4c0
 80026f0:	f8ad 2020 	strh.w	r2, [sp, #32]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f43f ae06 	beq.w	8002306 <dwt_configure+0x3da>
 80026fa:	e4c3      	b.n	8002084 <dwt_configure+0x158>
    buf[0] = (uint8_t)_and;//       &0xFF;
 80026fc:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 8002700:	2140      	movs	r1, #64	@ 0x40
 8002702:	e9cd 2108 	strd	r2, r1, [sp, #32]
        header[0] |= DW3000_SPI_EAMRW;
 8002706:	f242 32d6 	movw	r2, #9174	@ 0x23d6
 800270a:	f8ad 201c 	strh.w	r2, [sp, #28]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f ad86 	bne.w	8002220 <dwt_configure+0x2f4>
            writetospi(cnt, header, length, buffer);
 8002714:	4643      	mov	r3, r8
 8002716:	2208      	movs	r2, #8
 8002718:	4639      	mov	r1, r7
 800271a:	2002      	movs	r0, #2
 800271c:	f003 fb62 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002720:	6833      	ldr	r3, [r6, #0]
 8002722:	7d1b      	ldrb	r3, [r3, #20]
}
 8002724:	e56f      	b.n	8002206 <dwt_configure+0x2da>
} // end dwt_configure()
 8002726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800272a:	b00b      	add	sp, #44	@ 0x2c
 800272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002730:	1c010034 	.word	0x1c010034
 8002734:	08b5a833 	.word	0x08b5a833
 8002738:	af5f35cc 	.word	0xaf5f35cc

0800273c <dwt_setrxantennadelay>:
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800273c:	229c      	movs	r2, #156	@ 0x9c
{
 800273e:	b500      	push	{lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <dwt_setrxantennadelay+0x30>)
{
 8002742:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002744:	681b      	ldr	r3, [r3, #0]
    buffer[0] = (uint8_t)regval;
 8002746:	f8ad 0000 	strh.w	r0, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800274a:	7d1b      	ldrb	r3, [r3, #20]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800274c:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002750:	b113      	cbz	r3, 8002758 <dwt_setrxantennadelay+0x1c>
}
 8002752:	b003      	add	sp, #12
 8002754:	f85d fb04 	ldr.w	pc, [sp], #4
            writetospi(cnt, header, length, buffer);
 8002758:	2202      	movs	r2, #2
 800275a:	466b      	mov	r3, sp
 800275c:	a901      	add	r1, sp, #4
 800275e:	2001      	movs	r0, #1
 8002760:	f003 fb40 	bl	8005de4 <writetospi_serial>
}
 8002764:	b003      	add	sp, #12
 8002766:	f85d fb04 	ldr.w	pc, [sp], #4
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <dwt_settxantennadelay>:
        header[0] |= DW3000_SPI_EAMRW;
 8002770:	f241 02c2 	movw	r2, #4290	@ 0x10c2
{
 8002774:	b500      	push	{lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <dwt_settxantennadelay+0x30>)
{
 8002778:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800277a:	681b      	ldr	r3, [r3, #0]
    buffer[0] = (uint8_t)regval;
 800277c:	f8ad 0000 	strh.w	r0, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002780:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8002782:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002786:	b113      	cbz	r3, 800278e <dwt_settxantennadelay+0x1e>
}
 8002788:	b003      	add	sp, #12
 800278a:	f85d fb04 	ldr.w	pc, [sp], #4
            writetospi(cnt, header, length, buffer);
 800278e:	2202      	movs	r2, #2
 8002790:	466b      	mov	r3, sp
 8002792:	4610      	mov	r0, r2
 8002794:	a901      	add	r1, sp, #4
 8002796:	f003 fb25 	bl	8005de4 <writetospi_serial>
}
 800279a:	b003      	add	sp, #12
 800279c:	f85d fb04 	ldr.w	pc, [sp], #4
 80027a0:	20000000 	.word	0x20000000

080027a4 <dwt_writetxdata>:
    if ((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN)
 80027a4:	eb02 0c00 	add.w	ip, r2, r0
 80027a8:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 80027ac:	da50      	bge.n	8002850 <dwt_writetxdata+0xac>
{
 80027ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80027b2:	2a7f      	cmp	r2, #127	@ 0x7f
 80027b4:	4606      	mov	r6, r0
 80027b6:	4614      	mov	r4, r2
 80027b8:	460d      	mov	r5, r1
{
 80027ba:	b083      	sub	sp, #12
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80027bc:	d910      	bls.n	80027e0 <dwt_writetxdata+0x3c>
        buffer[j] = (uint8_t)regval;
 80027be:	2114      	movs	r1, #20
        header[0] |= DW3000_SPI_EAMRW;
 80027c0:	f241 02fe 	movw	r2, #4350	@ 0x10fe
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80027c4:	4f24      	ldr	r7, [pc, #144]	@ (8002858 <dwt_writetxdata+0xb4>)
        buffer[j] = (uint8_t)regval;
 80027c6:	9101      	str	r1, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80027c8:	683b      	ldr	r3, [r7, #0]
        header[0] |= DW3000_SPI_EAMRW;
 80027ca:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80027ce:	f893 8014 	ldrb.w	r8, [r3, #20]
 80027d2:	f1b8 0f00 	cmp.w	r8, #0
 80027d6:	d00e      	beq.n	80027f6 <dwt_writetxdata+0x52>
        return DWT_SUCCESS;
 80027d8:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 80027da:	b003      	add	sp, #12
 80027dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80027e0:	460b      	mov	r3, r1
 80027e2:	4602      	mov	r2, r0
 80027e4:	4621      	mov	r1, r4
 80027e6:	f44f 10a0 	mov.w	r0, #1310720	@ 0x140000
 80027ea:	f7fe fd79 	bl	80012e0 <dwt_xfer3000.constprop.0>
        return DWT_SUCCESS;
 80027ee:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 80027f0:	b003      	add	sp, #12
 80027f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            writetospi(cnt, header, length, buffer);
 80027f6:	2204      	movs	r2, #4
 80027f8:	ab01      	add	r3, sp, #4
 80027fa:	4669      	mov	r1, sp
 80027fc:	2002      	movs	r0, #2
 80027fe:	f003 faf1 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8002802:	f242 03fe 	movw	r3, #8446	@ 0x20fe
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	f892 9014 	ldrb.w	r9, [r2, #20]
        buffer[j] = (uint8_t)regval;
 800280c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002810:	f8ad 8006 	strh.w	r8, [sp, #6]
        header[0] |= DW3000_SPI_EAMRW;
 8002814:	f8ad 3000 	strh.w	r3, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002818:	f1b9 0f00 	cmp.w	r9, #0
 800281c:	d1dc      	bne.n	80027d8 <dwt_writetxdata+0x34>
            writetospi(cnt, header, length, buffer);
 800281e:	2204      	movs	r2, #4
 8002820:	ab01      	add	r3, sp, #4
 8002822:	4669      	mov	r1, sp
 8002824:	2002      	movs	r0, #2
 8002826:	f003 fadd 	bl	8005de4 <writetospi_serial>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800282a:	2e00      	cmp	r6, #0
 800282c:	bf14      	ite	ne
 800282e:	22ba      	movne	r2, #186	@ 0xba
 8002830:	2281      	moveq	r2, #129	@ 0x81
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7d1b      	ldrb	r3, [r3, #20]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8002836:	f88d 9005 	strb.w	r9, [sp, #5]
    if (/*reg_offset == 0 && */length == 0)
 800283a:	f88d 2004 	strb.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ca      	bne.n	80027d8 <dwt_writetxdata+0x34>
            writetospi(cnt, header, length, buffer);
 8002842:	462b      	mov	r3, r5
 8002844:	4632      	mov	r2, r6
 8002846:	a901      	add	r1, sp, #4
 8002848:	2001      	movs	r0, #1
 800284a:	f003 facb 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 800284e:	e7c3      	b.n	80027d8 <dwt_writetxdata+0x34>
        return DWT_ERROR;
 8002850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
} // end dwt_writetxdata()
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <dwt_writetxfctrl>:
{
 800285c:	b530      	push	{r4, r5, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800285e:	4c31      	ldr	r4, [pc, #196]	@ (8002924 <dwt_writetxfctrl+0xc8>)
    if(txBufferOffset <= 127)
 8002860:	297f      	cmp	r1, #127	@ 0x7f
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002862:	6823      	ldr	r3, [r4, #0]
{
 8002864:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002866:	7d1b      	ldrb	r3, [r3, #20]
 8002868:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
    if(txBufferOffset <= 127)
 800286c:	d813      	bhi.n	8002896 <dwt_writetxfctrl+0x3a>
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 800286e:	2400      	movs	r4, #0
        header[0] |= DW3000_SPI_EAMRW;
 8002870:	f249 32c0 	movw	r2, #37824	@ 0x93c0
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 8002874:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002878:	492b      	ldr	r1, [pc, #172]	@ (8002928 <dwt_writetxfctrl+0xcc>)
    buf[4] = (uint8_t)_or;//        &0xFF;
 800287a:	f8ad 000c 	strh.w	r0, [sp, #12]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 800287e:	0c00      	lsrs	r0, r0, #16
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002880:	9102      	str	r1, [sp, #8]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8002882:	f88d 000e 	strb.w	r0, [sp, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8002886:	f88d 400f 	strb.w	r4, [sp, #15]
        header[0] |= DW3000_SPI_EAMRW;
 800288a:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800288e:	2b00      	cmp	r3, #0
 8002890:	d037      	beq.n	8002902 <dwt_writetxfctrl+0xa6>
} // end dwt_writetxfctrl()
 8002892:	b005      	add	sp, #20
 8002894:	bd30      	pop	{r4, r5, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002896:	f249 32c0 	movw	r2, #37824	@ 0x93c0
    buf[0] = (uint8_t)_and;//       &0xFF;
 800289a:	4d23      	ldr	r5, [pc, #140]	@ (8002928 <dwt_writetxfctrl+0xcc>)
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 800289c:	3180      	adds	r1, #128	@ 0x80
 800289e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    buf[4] = (uint8_t)_or;//        &0xFF;
 80028a2:	e9cd 5002 	strd	r5, r0, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80028a6:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80028aa:	ad01      	add	r5, sp, #4
 80028ac:	b393      	cbz	r3, 8002914 <dwt_writetxfctrl+0xb8>
            readfromspi(cnt, header, length, buffer);
 80028ae:	2201      	movs	r2, #1
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80028b0:	2010      	movs	r0, #16
            readfromspi(cnt, header, length, buffer);
 80028b2:	f10d 0302 	add.w	r3, sp, #2
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80028b6:	f8ad 0004 	strh.w	r0, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 80028ba:	4629      	mov	r1, r5
 80028bc:	4610      	mov	r0, r2
 80028be:	f003 fae9 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	7d18      	ldrb	r0, [r3, #20]
 80028c6:	2802      	cmp	r0, #2
 80028c8:	d1e3      	bne.n	8002892 <dwt_writetxfctrl+0x36>
        header[0] |= DW3000_SPI_EAMRW;
 80028ca:	f246 0c40 	movw	ip, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80028ce:	4a17      	ldr	r2, [pc, #92]	@ (800292c <dwt_writetxfctrl+0xd0>)
 80028d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 80028d4:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
        header[0] |= DW3000_SPI_EAMRW;
 80028da:	f8ad c008 	strh.w	ip, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80028de:	404b      	eors	r3, r1
 80028e0:	5cd5      	ldrb	r5, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 80028e2:	a902      	add	r1, sp, #8
 80028e4:	2201      	movs	r2, #1
 80028e6:	f10d 0303 	add.w	r3, sp, #3
 80028ea:	f003 fad3 	bl	8005e94 <readfromspi_serial>
    return regval ;
 80028ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80028f2:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 80028f4:	429d      	cmp	r5, r3
 80028f6:	d0cc      	beq.n	8002892 <dwt_writetxfctrl+0x36>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80028f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0c9      	beq.n	8002892 <dwt_writetxfctrl+0x36>
                        pdw3000local->cbSPIRDErr();
 80028fe:	4798      	blx	r3
} // end dwt_writetxfctrl()
 8002900:	e7c7      	b.n	8002892 <dwt_writetxfctrl+0x36>
            writetospi(cnt, header, length, buffer);
 8002902:	2208      	movs	r2, #8
 8002904:	a901      	add	r1, sp, #4
 8002906:	eb0d 0302 	add.w	r3, sp, r2
 800290a:	2002      	movs	r0, #2
 800290c:	f003 fa6a 	bl	8005de4 <writetospi_serial>
} // end dwt_writetxfctrl()
 8002910:	b005      	add	sp, #20
 8002912:	bd30      	pop	{r4, r5, pc}
            writetospi(cnt, header, length, buffer);
 8002914:	2208      	movs	r2, #8
 8002916:	4629      	mov	r1, r5
 8002918:	eb0d 0302 	add.w	r3, sp, r2
 800291c:	2002      	movs	r0, #2
 800291e:	f003 fa61 	bl	8005de4 <writetospi_serial>
 8002922:	e7c4      	b.n	80028ae <dwt_writetxfctrl+0x52>
 8002924:	20000000 	.word	0x20000000
 8002928:	fc00f400 	.word	0xfc00f400
 800292c:	200001cc 	.word	0x200001cc

08002930 <dwt_readrxdata>:
{
 8002930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8002934:	4f3d      	ldr	r7, [pc, #244]	@ (8002a2c <dwt_readrxdata+0xfc>)
{
 8002936:	4615      	mov	r5, r2
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8002938:	683e      	ldr	r6, [r7, #0]
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 800293a:	440a      	add	r2, r1
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 800293c:	7bf3      	ldrb	r3, [r6, #15]
{
 800293e:	b084      	sub	sp, #16
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8002940:	2b03      	cmp	r3, #3
 8002942:	bf15      	itete	ne
 8002944:	2312      	movne	r3, #18
 8002946:	2313      	moveq	r3, #19
 8002948:	f44f 1c90 	movne.w	ip, #1179648	@ 0x120000
 800294c:	f44f 1c98 	moveq.w	ip, #1245184	@ 0x130000
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 8002950:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002954:	da27      	bge.n	80029a6 <dwt_readrxdata+0x76>
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002956:	2d7f      	cmp	r5, #127	@ 0x7f
 8002958:	460c      	mov	r4, r1
 800295a:	4680      	mov	r8, r0
 800295c:	d808      	bhi.n	8002970 <dwt_readrxdata+0x40>
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	4660      	mov	r0, ip
 8002964:	4629      	mov	r1, r5
}
 8002966:	b004      	add	sp, #16
 8002968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800296c:	f7fe bcfa 	b.w	8001364 <dwt_xfer3000.constprop.1>
        buffer[j] = (uint8_t)regval;
 8002970:	f88d 300c 	strb.w	r3, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8002974:	f241 02fe 	movw	r2, #4350	@ 0x10fe
        buffer[j] = (uint8_t)regval;
 8002978:	2300      	movs	r3, #0
        header[0] |= DW3000_SPI_EAMRW;
 800297a:	f8ad 2008 	strh.w	r2, [sp, #8]
        buffer[j] = (uint8_t)regval;
 800297e:	f88d 300d 	strb.w	r3, [sp, #13]
 8002982:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002986:	7d36      	ldrb	r6, [r6, #20]
 8002988:	b1b6      	cbz	r6, 80029b8 <dwt_readrxdata+0x88>
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800298a:	233a      	movs	r3, #58	@ 0x3a
 800298c:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (/*reg_offset == 0 && */length == 0)
 8002990:	b164      	cbz	r4, 80029ac <dwt_readrxdata+0x7c>
            readfromspi(cnt, header, length, buffer);
 8002992:	4643      	mov	r3, r8
 8002994:	4622      	mov	r2, r4
 8002996:	2001      	movs	r0, #1
 8002998:	a902      	add	r1, sp, #8
 800299a:	f003 fa7b 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7d1b      	ldrb	r3, [r3, #20]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d021      	beq.n	80029ea <dwt_readrxdata+0xba>
}
 80029a6:	b004      	add	sp, #16
 80029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        assert(mode == DW3000_SPI_WR_BIT);
 80029ac:	21ee      	movs	r1, #238	@ 0xee
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <dwt_readrxdata+0x100>)
 80029b0:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <dwt_readrxdata+0x104>)
 80029b2:	4821      	ldr	r0, [pc, #132]	@ (8002a38 <dwt_readrxdata+0x108>)
 80029b4:	f005 fa9a 	bl	8007eec <__assert_func>
            writetospi(cnt, header, length, buffer);
 80029b8:	2204      	movs	r2, #4
 80029ba:	ab03      	add	r3, sp, #12
 80029bc:	2002      	movs	r0, #2
 80029be:	a902      	add	r1, sp, #8
 80029c0:	f003 fa10 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 80029c4:	f242 02fe 	movw	r2, #8446	@ 0x20fe
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 80029cc:	f8ad 500c 	strh.w	r5, [sp, #12]
 80029d0:	f8ad 600e 	strh.w	r6, [sp, #14]
        header[0] |= DW3000_SPI_EAMRW;
 80029d4:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1d6      	bne.n	800298a <dwt_readrxdata+0x5a>
            writetospi(cnt, header, length, buffer);
 80029dc:	2204      	movs	r2, #4
 80029de:	ab03      	add	r3, sp, #12
 80029e0:	a902      	add	r1, sp, #8
 80029e2:	2002      	movs	r0, #2
 80029e4:	f003 f9fe 	bl	8005de4 <writetospi_serial>
    assert(length       < 0x3100);
 80029e8:	e7cf      	b.n	800298a <dwt_readrxdata+0x5a>
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80029ea:	4640      	mov	r0, r8
 80029ec:	4a13      	ldr	r2, [pc, #76]	@ (8002a3c <dwt_readrxdata+0x10c>)
 80029ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80029f2:	4444      	add	r4, r8
 80029f4:	5cd5      	ldrb	r5, [r2, r3]
        data = byteArray[byte] ^ crcRemainderInit;
 80029f6:	f810 3b01 	ldrb.w	r3, [r0], #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80029fa:	406b      	eors	r3, r5
    for (byte = 0; byte < len; ++byte)
 80029fc:	42a0      	cmp	r0, r4
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80029fe:	5cd5      	ldrb	r5, [r2, r3]
    for (byte = 0; byte < len; ++byte)
 8002a00:	d1f9      	bne.n	80029f6 <dwt_readrxdata+0xc6>
        header[0] |= DW3000_SPI_EAMRW;
 8002a02:	f246 0440 	movw	r4, #24640	@ 0x6040
            readfromspi(cnt, header, length, buffer);
 8002a06:	2201      	movs	r2, #1
 8002a08:	f10d 0307 	add.w	r3, sp, #7
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	a903      	add	r1, sp, #12
        header[0] |= DW3000_SPI_EAMRW;
 8002a10:	f8ad 400c 	strh.w	r4, [sp, #12]
            readfromspi(cnt, header, length, buffer);
 8002a14:	f003 fa3e 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002a18:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002a1c:	683a      	ldr	r2, [r7, #0]
                if (crc8 != dwcrc8)
 8002a1e:	429d      	cmp	r5, r3
 8002a20:	d0c1      	beq.n	80029a6 <dwt_readrxdata+0x76>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002a22:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0be      	beq.n	80029a6 <dwt_readrxdata+0x76>
                        pdw3000local->cbSPIRDErr();
 8002a28:	4798      	blx	r3
}
 8002a2a:	e7bc      	b.n	80029a6 <dwt_readrxdata+0x76>
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	08009314 	.word	0x08009314
 8002a34:	0800934c 	.word	0x0800934c
 8002a38:	080092f8 	.word	0x080092f8
 8002a3c:	200001cc 	.word	0x200001cc

08002a40 <dwt_readclockoffset>:
{
 8002a40:	b530      	push	{r4, r5, lr}
    switch (pdw3000local->dblbuffon)  //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8002a42:	4c4c      	ldr	r4, [pc, #304]	@ (8002b74 <dwt_readclockoffset+0x134>)
            readfromspi(cnt, header, length, buffer);
 8002a44:	2202      	movs	r2, #2
    switch (pdw3000local->dblbuffon)  //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8002a46:	6823      	ldr	r3, [r4, #0]
{
 8002a48:	b085      	sub	sp, #20
    switch (pdw3000local->dblbuffon)  //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8002a4a:	7bdd      	ldrb	r5, [r3, #15]
 8002a4c:	2d01      	cmp	r5, #1
 8002a4e:	d019      	beq.n	8002a84 <dwt_readclockoffset+0x44>
 8002a50:	2d03      	cmp	r5, #3
 8002a52:	d13d      	bne.n	8002ad0 <dwt_readclockoffset+0x90>
        header[0] |= DW3000_SPI_EAMRW;
 8002a54:	f243 007c 	movw	r0, #12412	@ 0x307c
            readfromspi(cnt, header, length, buffer);
 8002a58:	ab01      	add	r3, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 8002a5a:	f8ad 0008 	strh.w	r0, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002a5e:	a902      	add	r1, sp, #8
 8002a60:	4610      	mov	r0, r2
 8002a62:	f003 fa17 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	7d18      	ldrb	r0, [r3, #20]
 8002a6a:	2802      	cmp	r0, #2
 8002a6c:	d061      	beq.n	8002b32 <dwt_readclockoffset+0xf2>
    regval = (uint16_t)((uint16_t)buffer[1] << 8) + buffer[0] ;
 8002a6e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
        regval = dwt_read16bitoffsetreg(CIA_DIAG_0_ID, 0) & CIA_DIAG_0_COE_PPM_BIT_MASK;
 8002a72:	f3c0 000c 	ubfx	r0, r0, #0, #13
    if (regval & B11_SIGN_EXTEND_TEST)
 8002a76:	04c3      	lsls	r3, r0, #19
        regval |= B11_SIGN_EXTEND_MASK;             // sign extend bit #12 to the whole short
 8002a78:	bf48      	it	mi
 8002a7a:	f440 4060 	orrmi.w	r0, r0, #57344	@ 0xe000
}
 8002a7e:	b200      	sxth	r0, r0
 8002a80:	b005      	add	sp, #20
 8002a82:	bd30      	pop	{r4, r5, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002a84:	f243 0070 	movw	r0, #12400	@ 0x3070
            readfromspi(cnt, header, length, buffer);
 8002a88:	ab01      	add	r3, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 8002a8a:	f8ad 0008 	strh.w	r0, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002a8e:	a902      	add	r1, sp, #8
 8002a90:	4610      	mov	r0, r2
 8002a92:	f003 f9ff 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	7d18      	ldrb	r0, [r3, #20]
 8002a9a:	2802      	cmp	r0, #2
 8002a9c:	d1e7      	bne.n	8002a6e <dwt_readclockoffset+0x2e>
            readfromspi(cnt, header, length, buffer);
 8002a9e:	462a      	mov	r2, r5
        header[0] |= DW3000_SPI_EAMRW;
 8002aa0:	f246 0540 	movw	r5, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002aa4:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <dwt_readclockoffset+0x138>)
 8002aa6:	f89d 1008 	ldrb.w	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002aaa:	f8ad 500c 	strh.w	r5, [sp, #12]
        data = byteArray[byte] ^ crcRemainderInit;
 8002aae:	5c59      	ldrb	r1, [r3, r1]
 8002ab0:	f89d 5009 	ldrb.w	r5, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002ab4:	4069      	eors	r1, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002ab6:	5c5d      	ldrb	r5, [r3, r1]
 8002ab8:	f89d 1004 	ldrb.w	r1, [sp, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002abc:	4069      	eors	r1, r5
 8002abe:	5c59      	ldrb	r1, [r3, r1]
        data = byteArray[byte] ^ crcRemainderInit;
 8002ac0:	f89d 5005 	ldrb.w	r5, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002ac4:	4069      	eors	r1, r5
 8002ac6:	5c5d      	ldrb	r5, [r3, r1]
            readfromspi(cnt, header, length, buffer);
 8002ac8:	f10d 0303 	add.w	r3, sp, #3
 8002acc:	a903      	add	r1, sp, #12
 8002ace:	e024      	b.n	8002b1a <dwt_readclockoffset+0xda>
        header[0] |= DW3000_SPI_EAMRW;
 8002ad0:	f248 0058 	movw	r0, #32856	@ 0x8058
            readfromspi(cnt, header, length, buffer);
 8002ad4:	ab01      	add	r3, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 8002ad6:	f8ad 0008 	strh.w	r0, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002ada:	a902      	add	r1, sp, #8
 8002adc:	4610      	mov	r0, r2
 8002ade:	f003 f9d9 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	7d18      	ldrb	r0, [r3, #20]
 8002ae6:	2802      	cmp	r0, #2
 8002ae8:	d1c1      	bne.n	8002a6e <dwt_readclockoffset+0x2e>
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002aea:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <dwt_readclockoffset+0x138>)
 8002aec:	f89d 2008 	ldrb.w	r2, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 8002af0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002af4:	5c9a      	ldrb	r2, [r3, r2]
        header[0] |= DW3000_SPI_EAMRW;
 8002af6:	f246 0c40 	movw	ip, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002afa:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002afc:	5c9a      	ldrb	r2, [r3, r2]
 8002afe:	f89d 1004 	ldrb.w	r1, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 8002b02:	f8ad c00c 	strh.w	ip, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b06:	404a      	eors	r2, r1
 8002b08:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8002b0a:	f89d 1005 	ldrb.w	r1, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b0e:	404a      	eors	r2, r1
 8002b10:	5c9d      	ldrb	r5, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8002b12:	2201      	movs	r2, #1
 8002b14:	f10d 0303 	add.w	r3, sp, #3
 8002b18:	a903      	add	r1, sp, #12
 8002b1a:	f003 f9bb 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002b1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002b22:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 8002b24:	429d      	cmp	r5, r3
 8002b26:	d0a2      	beq.n	8002a6e <dwt_readclockoffset+0x2e>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002b28:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d09f      	beq.n	8002a6e <dwt_readclockoffset+0x2e>
                        pdw3000local->cbSPIRDErr();
 8002b2e:	4798      	blx	r3
 8002b30:	e79d      	b.n	8002a6e <dwt_readclockoffset+0x2e>
        header[0] |= DW3000_SPI_EAMRW;
 8002b32:	f246 0c40 	movw	ip, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <dwt_readclockoffset+0x138>)
 8002b38:	f89d 2008 	ldrb.w	r2, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 8002b3c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002b40:	5c9a      	ldrb	r2, [r3, r2]
        header[0] |= DW3000_SPI_EAMRW;
 8002b42:	f8ad c00c 	strh.w	ip, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b46:	4051      	eors	r1, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002b48:	5c59      	ldrb	r1, [r3, r1]
 8002b4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b4e:	404a      	eors	r2, r1
 8002b50:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8002b52:	f89d 1005 	ldrb.w	r1, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002b56:	404a      	eors	r2, r1
 8002b58:	5c9d      	ldrb	r5, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8002b5a:	a903      	add	r1, sp, #12
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f10d 0303 	add.w	r3, sp, #3
 8002b62:	f003 f997 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002b66:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002b6a:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 8002b6c:	42ab      	cmp	r3, r5
 8002b6e:	d1db      	bne.n	8002b28 <dwt_readclockoffset+0xe8>
 8002b70:	e77d      	b.n	8002a6e <dwt_readclockoffset+0x2e>
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000
 8002b78:	200001cc 	.word	0x200001cc

08002b7c <dwt_readtxtimestamp>:
{
 8002b7c:	b530      	push	{r4, r5, lr}
        header[0] |= DW3000_SPI_EAMRW;
 8002b7e:	f24d 0341 	movw	r3, #53313	@ 0xd041
{
 8002b82:	4604      	mov	r4, r0
 8002b84:	b085      	sub	sp, #20
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002b86:	4d1d      	ldr	r5, [pc, #116]	@ (8002bfc <dwt_readtxtimestamp+0x80>)
        header[0] |= DW3000_SPI_EAMRW;
 8002b88:	f8ad 3008 	strh.w	r3, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	4623      	mov	r3, r4
 8002b90:	2002      	movs	r0, #2
 8002b92:	a902      	add	r1, sp, #8
 8002b94:	f003 f97e 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	7d18      	ldrb	r0, [r3, #20]
 8002b9c:	2802      	cmp	r0, #2
 8002b9e:	d001      	beq.n	8002ba4 <dwt_readtxtimestamp+0x28>
}
 8002ba0:	b005      	add	sp, #20
 8002ba2:	bd30      	pop	{r4, r5, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002ba4:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002ba8:	4915      	ldr	r1, [pc, #84]	@ (8002c00 <dwt_readtxtimestamp+0x84>)
 8002baa:	f89d 3008 	ldrb.w	r3, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002bae:	f8ad 200c 	strh.w	r2, [sp, #12]
        data = byteArray[byte] ^ crcRemainderInit;
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	f89d 2009 	ldrb.w	r2, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bb8:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	7822      	ldrb	r2, [r4, #0]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bbe:	4053      	eors	r3, r2
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
        data = byteArray[byte] ^ crcRemainderInit;
 8002bc2:	7862      	ldrb	r2, [r4, #1]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bc4:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002bc6:	5cca      	ldrb	r2, [r1, r3]
 8002bc8:	78a3      	ldrb	r3, [r4, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bca:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	78e2      	ldrb	r2, [r4, #3]
 8002bd0:	7924      	ldrb	r4, [r4, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bd2:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
            readfromspi(cnt, header, length, buffer);
 8002bd6:	2201      	movs	r2, #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002bd8:	405c      	eors	r4, r3
 8002bda:	5d0c      	ldrb	r4, [r1, r4]
            readfromspi(cnt, header, length, buffer);
 8002bdc:	f10d 0307 	add.w	r3, sp, #7
 8002be0:	a903      	add	r1, sp, #12
 8002be2:	f003 f957 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002bea:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8002bec:	429c      	cmp	r4, r3
 8002bee:	d0d7      	beq.n	8002ba0 <dwt_readtxtimestamp+0x24>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002bf0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0d4      	beq.n	8002ba0 <dwt_readtxtimestamp+0x24>
                        pdw3000local->cbSPIRDErr();
 8002bf6:	4798      	blx	r3
}
 8002bf8:	b005      	add	sp, #20
 8002bfa:	bd30      	pop	{r4, r5, pc}
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	200001cc 	.word	0x200001cc

08002c04 <dwt_readrxtimestamp>:
{
 8002c04:	b570      	push	{r4, r5, r6, lr}
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8002c06:	4e4e      	ldr	r6, [pc, #312]	@ (8002d40 <dwt_readrxtimestamp+0x13c>)
{
 8002c08:	4604      	mov	r4, r0
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8002c0a:	6833      	ldr	r3, [r6, #0]
{
 8002c0c:	b084      	sub	sp, #16
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8002c0e:	7bdd      	ldrb	r5, [r3, #15]
 8002c10:	2d01      	cmp	r5, #1
 8002c12:	d011      	beq.n	8002c38 <dwt_readrxtimestamp+0x34>
 8002c14:	2d03      	cmp	r5, #3
 8002c16:	d13c      	bne.n	8002c92 <dwt_readrxtimestamp+0x8e>
        header[0] |= DW3000_SPI_EAMRW;
 8002c18:	f241 057c 	movw	r5, #4220	@ 0x107c
            readfromspi(cnt, header, length, buffer);
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2205      	movs	r2, #5
 8002c20:	2002      	movs	r0, #2
 8002c22:	a902      	add	r1, sp, #8
        header[0] |= DW3000_SPI_EAMRW;
 8002c24:	f8ad 5008 	strh.w	r5, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002c28:	f003 f934 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002c2c:	6833      	ldr	r3, [r6, #0]
 8002c2e:	7d18      	ldrb	r0, [r3, #20]
 8002c30:	2802      	cmp	r0, #2
 8002c32:	d069      	beq.n	8002d08 <dwt_readrxtimestamp+0x104>
}
 8002c34:	b004      	add	sp, #16
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002c38:	f241 0c70 	movw	ip, #4208	@ 0x1070
            readfromspi(cnt, header, length, buffer);
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2205      	movs	r2, #5
 8002c40:	2002      	movs	r0, #2
 8002c42:	a902      	add	r1, sp, #8
        header[0] |= DW3000_SPI_EAMRW;
 8002c44:	f8ad c008 	strh.w	ip, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002c48:	f003 f924 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002c4c:	6833      	ldr	r3, [r6, #0]
 8002c4e:	7d18      	ldrb	r0, [r3, #20]
 8002c50:	2802      	cmp	r0, #2
 8002c52:	d1ef      	bne.n	8002c34 <dwt_readrxtimestamp+0x30>
        header[0] |= DW3000_SPI_EAMRW;
 8002c54:	f246 0140 	movw	r1, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c58:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <dwt_readrxtimestamp+0x140>)
        header[0] |= DW3000_SPI_EAMRW;
 8002c5a:	f8ad 100c 	strh.w	r1, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c5e:	f89d 1008 	ldrb.w	r1, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002c62:	462a      	mov	r2, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002c64:	5c59      	ldrb	r1, [r3, r1]
 8002c66:	f89d 5009 	ldrb.w	r5, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c6a:	4069      	eors	r1, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002c6c:	5c59      	ldrb	r1, [r3, r1]
 8002c6e:	7825      	ldrb	r5, [r4, #0]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c70:	4069      	eors	r1, r5
 8002c72:	5c59      	ldrb	r1, [r3, r1]
        data = byteArray[byte] ^ crcRemainderInit;
 8002c74:	7865      	ldrb	r5, [r4, #1]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c76:	4069      	eors	r1, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002c78:	5c5d      	ldrb	r5, [r3, r1]
 8002c7a:	78a1      	ldrb	r1, [r4, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c7c:	4069      	eors	r1, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002c7e:	5c59      	ldrb	r1, [r3, r1]
 8002c80:	78e5      	ldrb	r5, [r4, #3]
 8002c82:	7924      	ldrb	r4, [r4, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c84:	4069      	eors	r1, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8002c86:	5c59      	ldrb	r1, [r3, r1]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002c88:	4061      	eors	r1, r4
 8002c8a:	5c5c      	ldrb	r4, [r3, r1]
            readfromspi(cnt, header, length, buffer);
 8002c8c:	f10d 0307 	add.w	r3, sp, #7
 8002c90:	e02c      	b.n	8002cec <dwt_readrxtimestamp+0xe8>
        header[0] |= DW3000_SPI_EAMRW;
 8002c92:	f249 0541 	movw	r5, #36929	@ 0x9041
            readfromspi(cnt, header, length, buffer);
 8002c96:	4603      	mov	r3, r0
 8002c98:	2205      	movs	r2, #5
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	a902      	add	r1, sp, #8
        header[0] |= DW3000_SPI_EAMRW;
 8002c9e:	f8ad 5008 	strh.w	r5, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002ca2:	f003 f8f7 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002ca6:	6833      	ldr	r3, [r6, #0]
 8002ca8:	7d18      	ldrb	r0, [r3, #20]
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d1c2      	bne.n	8002c34 <dwt_readrxtimestamp+0x30>
        header[0] |= DW3000_SPI_EAMRW;
 8002cae:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cb2:	4924      	ldr	r1, [pc, #144]	@ (8002d44 <dwt_readrxtimestamp+0x140>)
 8002cb4:	f89d 3008 	ldrb.w	r3, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002cb8:	f8ad 200c 	strh.w	r2, [sp, #12]
        data = byteArray[byte] ^ crcRemainderInit;
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	f89d 2009 	ldrb.w	r2, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cc2:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	7822      	ldrb	r2, [r4, #0]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cc8:	4053      	eors	r3, r2
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
        data = byteArray[byte] ^ crcRemainderInit;
 8002ccc:	7862      	ldrb	r2, [r4, #1]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cce:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002cd0:	5cca      	ldrb	r2, [r1, r3]
 8002cd2:	78a3      	ldrb	r3, [r4, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cd4:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002cd6:	5cca      	ldrb	r2, [r1, r3]
 8002cd8:	78e3      	ldrb	r3, [r4, #3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002cda:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	7922      	ldrb	r2, [r4, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002ce0:	ea83 0402 	eor.w	r4, r3, r2
            readfromspi(cnt, header, length, buffer);
 8002ce4:	2201      	movs	r2, #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002ce6:	5d0c      	ldrb	r4, [r1, r4]
            readfromspi(cnt, header, length, buffer);
 8002ce8:	f10d 0307 	add.w	r3, sp, #7
 8002cec:	a903      	add	r1, sp, #12
 8002cee:	f003 f8d1 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002cf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002cf6:	6832      	ldr	r2, [r6, #0]
                if (crc8 != dwcrc8)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	d09b      	beq.n	8002c34 <dwt_readrxtimestamp+0x30>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002cfc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d098      	beq.n	8002c34 <dwt_readrxtimestamp+0x30>
                        pdw3000local->cbSPIRDErr();
 8002d02:	4798      	blx	r3
}
 8002d04:	b004      	add	sp, #16
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002d08:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d0c:	490d      	ldr	r1, [pc, #52]	@ (8002d44 <dwt_readrxtimestamp+0x140>)
 8002d0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002d12:	f8ad 200c 	strh.w	r2, [sp, #12]
        data = byteArray[byte] ^ crcRemainderInit;
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f89d 2009 	ldrb.w	r2, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d1c:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	7822      	ldrb	r2, [r4, #0]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d22:	4053      	eors	r3, r2
 8002d24:	5ccb      	ldrb	r3, [r1, r3]
        data = byteArray[byte] ^ crcRemainderInit;
 8002d26:	7862      	ldrb	r2, [r4, #1]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d28:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	78a2      	ldrb	r2, [r4, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d2e:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	78e2      	ldrb	r2, [r4, #3]
 8002d34:	7924      	ldrb	r4, [r4, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d36:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002d3a:	405c      	eors	r4, r3
 8002d3c:	e7d2      	b.n	8002ce4 <dwt_readrxtimestamp+0xe0>
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000
 8002d44:	200001cc 	.word	0x200001cc

08002d48 <dwt_setrxaftertxdelay>:
            readfromspi(cnt, header, length, buffer);
 8002d48:	2204      	movs	r2, #4
        header[0] |= DW3000_SPI_EAMRW;
 8002d4a:	f242 0c42 	movw	ip, #8258	@ 0x2042
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32_t rxDelayTime)
{
 8002d4e:	b570      	push	{r4, r5, r6, lr}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002d50:	4d2f      	ldr	r5, [pc, #188]	@ (8002e10 <dwt_setrxaftertxdelay+0xc8>)
{
 8002d52:	b084      	sub	sp, #16
            readfromspi(cnt, header, length, buffer);
 8002d54:	ab03      	add	r3, sp, #12
{
 8002d56:	4604      	mov	r4, r0
            readfromspi(cnt, header, length, buffer);
 8002d58:	eb0d 0102 	add.w	r1, sp, r2
 8002d5c:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 8002d5e:	f8ad c004 	strh.w	ip, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 8002d62:	f003 f897 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002d66:	682b      	ldr	r3, [r5, #0]
 8002d68:	7d18      	ldrb	r0, [r3, #20]
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d01a      	beq.n	8002da4 <dwt_setrxaftertxdelay+0x5c>
        regval = (regval << 8) + buffer[j] ;
 8002d6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002d72:	f89d 300e 	ldrb.w	r3, [sp, #14]
    uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register

    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)

    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8002d76:	f3c4 0413 	ubfx	r4, r4, #0, #20
        regval = (regval << 8) + buffer[j] ;
 8002d7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002d82:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002d86:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002d8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        header[0] |= DW3000_SPI_EAMRW;
 8002d8e:	f242 02c2 	movw	r2, #8386	@ 0x20c2
    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 8002d92:	0d1b      	lsrs	r3, r3, #20
 8002d94:	051b      	lsls	r3, r3, #20
    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8002d96:	431c      	orrs	r4, r3
        buffer[j] = (uint8_t)regval;
 8002d98:	9403      	str	r4, [sp, #12]
        header[0] |= DW3000_SPI_EAMRW;
 8002d9a:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002d9e:	b370      	cbz	r0, 8002dfe <dwt_setrxaftertxdelay+0xb6>

    dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
}
 8002da0:	b004      	add	sp, #16
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002da4:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002da8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <dwt_setrxaftertxdelay+0xcc>)
        header[0] |= DW3000_SPI_EAMRW;
 8002daa:	f8ad 2008 	strh.w	r2, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002dae:	f89d 2004 	ldrb.w	r2, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 8002db2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002db6:	5c9a      	ldrb	r2, [r3, r2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002db8:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002dba:	5c99      	ldrb	r1, [r3, r2]
 8002dbc:	f89d 200c 	ldrb.w	r2, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002dc0:	404a      	eors	r2, r1
 8002dc2:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8002dc4:	f89d 100d 	ldrb.w	r1, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002dc8:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002dca:	5c9a      	ldrb	r2, [r3, r2]
 8002dcc:	f89d 100e 	ldrb.w	r1, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002dd0:	404a      	eors	r2, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8002dd2:	5c99      	ldrb	r1, [r3, r2]
 8002dd4:	f89d 200f 	ldrb.w	r2, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002dd8:	404a      	eors	r2, r1
 8002dda:	5c9e      	ldrb	r6, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8002ddc:	a902      	add	r1, sp, #8
 8002dde:	2201      	movs	r2, #1
 8002de0:	f10d 0303 	add.w	r3, sp, #3
 8002de4:	f003 f856 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002de8:	f89d 2003 	ldrb.w	r2, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002dec:	682b      	ldr	r3, [r5, #0]
                if (crc8 != dwcrc8)
 8002dee:	4296      	cmp	r6, r2
 8002df0:	d003      	beq.n	8002dfa <dwt_setrxaftertxdelay+0xb2>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df4:	b10a      	cbz	r2, 8002dfa <dwt_setrxaftertxdelay+0xb2>
                        pdw3000local->cbSPIRDErr();
 8002df6:	4790      	blx	r2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	7d18      	ldrb	r0, [r3, #20]
 8002dfc:	e7b7      	b.n	8002d6e <dwt_setrxaftertxdelay+0x26>
            writetospi(cnt, header, length, buffer);
 8002dfe:	2204      	movs	r2, #4
 8002e00:	ab03      	add	r3, sp, #12
 8002e02:	a902      	add	r1, sp, #8
 8002e04:	2002      	movs	r0, #2
 8002e06:	f002 ffed 	bl	8005de4 <writetospi_serial>
}
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000000 	.word	0x20000000
 8002e14:	200001cc 	.word	0x200001cc

08002e18 <dwt_checkidlerc>:
            readfromspi(cnt, header, length, buffer);
 8002e18:	2202      	movs	r2, #2
        header[0] |= DW3000_SPI_EAMRW;
 8002e1a:	f641 0041 	movw	r0, #6209	@ 0x1841
 * output parameters
 *
 * return value is 1 if the IDLE_RC bit is set and 0 otherwise
 */
uint8_t dwt_checkidlerc(void)
{
 8002e1e:	b530      	push	{r4, r5, lr}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002e20:	4c1d      	ldr	r4, [pc, #116]	@ (8002e98 <dwt_checkidlerc+0x80>)
{
 8002e22:	b085      	sub	sp, #20
            readfromspi(cnt, header, length, buffer);
 8002e24:	ab01      	add	r3, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 8002e26:	f8ad 0008 	strh.w	r0, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8002e2a:	a902      	add	r1, sp, #8
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f003 f831 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	7d18      	ldrb	r0, [r3, #20]
 8002e36:	2802      	cmp	r0, #2
 8002e38:	d005      	beq.n	8002e46 <dwt_checkidlerc+0x2e>
    regval = (uint16_t)((uint16_t)buffer[1] << 8) + buffer[0] ;
 8002e3a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    /* Poll DW IC until IDLE_RC event set. This means that DW IC is in IDLE_RC state and ready */
    uint32_t reg = 0;
    reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
    
    return ( (reg & (SYS_STATUS_RCINIT_BIT_MASK)) == (SYS_STATUS_RCINIT_BIT_MASK));
}
 8002e3e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002e42:	b005      	add	sp, #20
 8002e44:	bd30      	pop	{r4, r5, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8002e46:	f246 0c40 	movw	ip, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <dwt_checkidlerc+0x84>)
 8002e4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 8002e50:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002e54:	5c9a      	ldrb	r2, [r3, r2]
        header[0] |= DW3000_SPI_EAMRW;
 8002e56:	f8ad c00c 	strh.w	ip, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002e5a:	4051      	eors	r1, r2
        data = byteArray[byte] ^ crcRemainderInit;
 8002e5c:	5c59      	ldrb	r1, [r3, r1]
 8002e5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002e62:	404a      	eors	r2, r1
 8002e64:	5c9a      	ldrb	r2, [r3, r2]
        data = byteArray[byte] ^ crcRemainderInit;
 8002e66:	f89d 1005 	ldrb.w	r1, [sp, #5]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002e6a:	404a      	eors	r2, r1
 8002e6c:	5c9d      	ldrb	r5, [r3, r2]
            readfromspi(cnt, header, length, buffer);
 8002e6e:	a903      	add	r1, sp, #12
 8002e70:	2201      	movs	r2, #1
 8002e72:	f10d 0303 	add.w	r3, sp, #3
 8002e76:	f003 f80d 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8002e7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002e7e:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 8002e80:	429d      	cmp	r5, r3
 8002e82:	d0da      	beq.n	8002e3a <dwt_checkidlerc+0x22>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002e84:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0d7      	beq.n	8002e3a <dwt_checkidlerc+0x22>
                        pdw3000local->cbSPIRDErr();
 8002e8a:	4798      	blx	r3
    regval = (uint16_t)((uint16_t)buffer[1] << 8) + buffer[0] ;
 8002e8c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 8002e90:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002e94:	b005      	add	sp, #20
 8002e96:	bd30      	pop	{r4, r5, pc}
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	200001cc 	.word	0x200001cc

08002ea0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8_t mode)
{
 8002ea0:	b530      	push	{r4, r5, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ea2:	4d42      	ldr	r5, [pc, #264]	@ (8002fac <dwt_setleds+0x10c>)
    uint32_t reg;
    if (mode & DWT_LEDS_ENABLE)
 8002ea4:	f010 0201 	ands.w	r2, r0, #1
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ea8:	682b      	ldr	r3, [r5, #0]
{
 8002eaa:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002eac:	7d1b      	ldrb	r3, [r3, #20]
    if (mode & DWT_LEDS_ENABLE)
 8002eae:	d00f      	beq.n	8002ed0 <dwt_setleds+0x30>
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8002eb0:	4604      	mov	r4, r0
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002eb2:	f46f 617c 	mvn.w	r1, #4032	@ 0xfc0
 8002eb6:	f44f 7210 	mov.w	r2, #576	@ 0x240
        header[0] |= DW3000_SPI_EAMRW;
 8002eba:	f240 30ca 	movw	r0, #970	@ 0x3ca
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002ebe:	e9cd 1202 	strd	r1, r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002ec2:	f8ad 0004 	strh.w	r0, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ec6:	b33b      	cbz	r3, 8002f18 <dwt_setleds+0x78>
        dwt_or32bitoffsetreg(CLK_CTRL_ID, 0, (CLK_CTRL_GPIO_DCLK_EN_BIT_MASK | CLK_CTRL_LP_CLK_EN_BIT_MASK));

        // Enable LEDs to blink and set default blink time.
        reg = LED_CTRL_BLINK_EN_BIT_MASK | DWT_LEDS_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002ec8:	07a3      	lsls	r3, r4, #30
 8002eca:	d451      	bmi.n	8002f70 <dwt_setleds+0xd0>
        // Clear the GPIO bits that are used for LED control.
        dwt_and32bitoffsetreg(GPIO_MODE_ID, 0, ~(GPIO_MODE_MSGP2_MODE_BIT_MASK | GPIO_MODE_MSGP3_MODE_BIT_MASK));
        dwt_and16bitoffsetreg(LED_CTRL_ID, 0, (uint16_t) ~LED_CTRL_BLINK_EN_BIT_MASK);
    }

}
 8002ecc:	b005      	add	sp, #20
 8002ece:	bd30      	pop	{r4, r5, pc}
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002ed0:	f46f 607c 	mvn.w	r0, #4032	@ 0xfc0
        header[0] |= DW3000_SPI_EAMRW;
 8002ed4:	f240 31ca 	movw	r1, #970	@ 0x3ca
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002ed8:	e9cd 0202 	strd	r0, r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002edc:	f8ad 1004 	strh.w	r1, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f3      	bne.n	8002ecc <dwt_setleds+0x2c>
            writetospi(cnt, header, length, buffer);
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	ab02      	add	r3, sp, #8
 8002ee8:	a901      	add	r1, sp, #4
 8002eea:	2002      	movs	r0, #2
 8002eec:	f002 ff7a 	bl	8005de4 <writetospi_serial>
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002ef0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
        header[0] |= DW3000_SPI_EAMRW;
 8002ef4:	f645 22e2 	movw	r2, #23266	@ 0x5ae2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002efc:	9102      	str	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002efe:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e2      	bne.n	8002ecc <dwt_setleds+0x2c>
            writetospi(cnt, header, length, buffer);
 8002f06:	2204      	movs	r2, #4
 8002f08:	ab02      	add	r3, sp, #8
 8002f0a:	eb0d 0102 	add.w	r1, sp, r2
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f002 ff68 	bl	8005de4 <writetospi_serial>
}
 8002f14:	b005      	add	sp, #20
 8002f16:	bd30      	pop	{r4, r5, pc}
            writetospi(cnt, header, length, buffer);
 8002f18:	2208      	movs	r2, #8
 8002f1a:	ab02      	add	r3, sp, #8
 8002f1c:	a901      	add	r1, sp, #4
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f002 ff60 	bl	8005de4 <writetospi_serial>
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002f24:	f44f 0204 	mov.w	r2, #8650752	@ 0x840000
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002f30:	e9cd 1202 	strd	r1, r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002f34:	f241 32e2 	movw	r2, #5090	@ 0x13e2
 8002f38:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1c3      	bne.n	8002ec8 <dwt_setleds+0x28>
            writetospi(cnt, header, length, buffer);
 8002f40:	2208      	movs	r2, #8
 8002f42:	ab02      	add	r3, sp, #8
 8002f44:	2002      	movs	r0, #2
 8002f46:	a901      	add	r1, sp, #4
 8002f48:	f002 ff4c 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f4c:	682b      	ldr	r3, [r5, #0]
        if (mode & DWT_LEDS_INIT_BLINK)
 8002f4e:	07a2      	lsls	r2, r4, #30
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f50:	7d1b      	ldrb	r3, [r3, #20]
        if (mode & DWT_LEDS_INIT_BLINK)
 8002f52:	d520      	bpl.n	8002f96 <dwt_setleds+0xf6>
        buffer[j] = (uint8_t)regval;
 8002f54:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <dwt_setleds+0x110>)
 8002f56:	9202      	str	r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002f58:	f645 02e2 	movw	r2, #22754	@ 0x58e2
 8002f5c:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f60:	b933      	cbnz	r3, 8002f70 <dwt_setleds+0xd0>
            writetospi(cnt, header, length, buffer);
 8002f62:	2204      	movs	r2, #4
 8002f64:	2002      	movs	r0, #2
 8002f66:	ab02      	add	r3, sp, #8
 8002f68:	eb0d 0102 	add.w	r1, sp, r2
 8002f6c:	f002 ff3a 	bl	8005de4 <writetospi_serial>
        buffer[j] = (uint8_t)regval;
 8002f70:	f44f 7188 	mov.w	r1, #272	@ 0x110
        header[0] |= DW3000_SPI_EAMRW;
 8002f74:	f645 02e2 	movw	r2, #22754	@ 0x58e2
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f78:	682b      	ldr	r3, [r5, #0]
        buffer[j] = (uint8_t)regval;
 8002f7a:	9102      	str	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002f7c:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002f80:	7d1b      	ldrb	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1a2      	bne.n	8002ecc <dwt_setleds+0x2c>
            writetospi(cnt, header, length, buffer);
 8002f86:	2204      	movs	r2, #4
 8002f88:	ab02      	add	r3, sp, #8
 8002f8a:	eb0d 0102 	add.w	r1, sp, r2
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f002 ff28 	bl	8005de4 <writetospi_serial>
} // end dwt_write32bitoffsetreg()
 8002f94:	e79a      	b.n	8002ecc <dwt_setleds+0x2c>
        buffer[j] = (uint8_t)regval;
 8002f96:	f44f 7188 	mov.w	r1, #272	@ 0x110
        header[0] |= DW3000_SPI_EAMRW;
 8002f9a:	f645 02e2 	movw	r2, #22754	@ 0x58e2
        buffer[j] = (uint8_t)regval;
 8002f9e:	9102      	str	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8002fa0:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ae      	beq.n	8002f06 <dwt_setleds+0x66>
 8002fa8:	e790      	b.n	8002ecc <dwt_setleds+0x2c>
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	000f0110 	.word	0x000f0110

08002fb4 <dwt_setdelayedtrxtime>:
        header[0] |= DW3000_SPI_EAMRW;
 8002fb4:	f24b 02c0 	movw	r2, #45248	@ 0xb0c0
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32_t starttime)
{
 8002fb8:	b500      	push	{lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <dwt_setdelayedtrxtime+0x30>)
{
 8002fbc:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fbe:	681b      	ldr	r3, [r3, #0]
        buffer[j] = (uint8_t)regval;
 8002fc0:	9001      	str	r0, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fc2:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8002fc4:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fc8:	b113      	cbz	r3, 8002fd0 <dwt_setdelayedtrxtime+0x1c>
    dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
} // end dwt_setdelayedtrxtime()
 8002fca:	b003      	add	sp, #12
 8002fcc:	f85d fb04 	ldr.w	pc, [sp], #4
            writetospi(cnt, header, length, buffer);
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	4669      	mov	r1, sp
 8002fd4:	eb0d 0302 	add.w	r3, sp, r2
 8002fd8:	2002      	movs	r0, #2
 8002fda:	f002 ff03 	bl	8005de4 <writetospi_serial>
} // end dwt_setdelayedtrxtime()
 8002fde:	b003      	add	sp, #12
 8002fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */
int dwt_starttx(uint8_t mode)
{
 8002fe8:	b530      	push	{r4, r5, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002fea:	4c92      	ldr	r4, [pc, #584]	@ (8003234 <dwt_starttx+0x24c>)
    int retval = DWT_SUCCESS ;
    uint16_t checkTxOK = 0 ;
    uint32_t sys_state;

    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 8002fec:	f010 0f1d 	tst.w	r0, #29
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ff0:	6823      	ldr	r3, [r4, #0]
{
 8002ff2:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002ff4:	7d1b      	ldrb	r3, [r3, #20]
 8002ff6:	f000 0202 	and.w	r2, r0, #2
    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 8002ffa:	d05a      	beq.n	80030b2 <dwt_starttx+0xca>
            || (mode & DWT_START_TX_DLY_RS) || (mode & DWT_START_TX_DLY_TS))
    {
        if(mode & DWT_START_TX_DELAYED) //delayed TX
 8002ffc:	07c5      	lsls	r5, r0, #31
 8002ffe:	d547      	bpl.n	8003090 <dwt_starttx+0xa8>
        {
            if(mode & DWT_RESPONSE_EXPECTED)
 8003000:	2a00      	cmp	r2, #0
 8003002:	f040 8081 	bne.w	8003108 <dwt_starttx+0x120>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003006:	f640 4287 	movw	r2, #3207	@ 0xc87
 800300a:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800300e:	2b00      	cmp	r3, #0
 8003010:	d049      	beq.n	80030a6 <dwt_starttx+0xbe>
        header[0] |= DW3000_SPI_EAMRW;
 8003012:	f641 4c41 	movw	ip, #7233	@ 0x1c41
            readfromspi(cnt, header, length, buffer);
 8003016:	f10d 0303 	add.w	r3, sp, #3
 800301a:	2201      	movs	r2, #1
 800301c:	2002      	movs	r0, #2
 800301e:	a902      	add	r1, sp, #8
        header[0] |= DW3000_SPI_EAMRW;
 8003020:	f8ad c008 	strh.w	ip, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8003024:	f002 ff36 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	7d18      	ldrb	r0, [r3, #20]
 800302c:	2802      	cmp	r0, #2
 800302e:	d07f      	beq.n	8003130 <dwt_starttx+0x148>
    return regval ;
 8003030:	f89d 3003 	ldrb.w	r3, [sp, #3]
                dwt_writefastCMD(CMD_DTX_REF);
            }
        }

        checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8003034:	0718      	lsls	r0, r3, #28
 8003036:	d420      	bmi.n	800307a <dwt_starttx+0x92>
            readfromspi(cnt, header, length, buffer);
 8003038:	2204      	movs	r2, #4
        header[0] |= DW3000_SPI_EAMRW;
 800303a:	f24c 0c5e 	movw	ip, #49246	@ 0xc05e
            readfromspi(cnt, header, length, buffer);
 800303e:	ab03      	add	r3, sp, #12
 8003040:	2002      	movs	r0, #2
 8003042:	eb0d 0102 	add.w	r1, sp, r2
        header[0] |= DW3000_SPI_EAMRW;
 8003046:	f8ad c004 	strh.w	ip, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 800304a:	f002 ff23 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	7d18      	ldrb	r0, [r3, #20]
 8003052:	2802      	cmp	r0, #2
 8003054:	f000 808d 	beq.w	8003172 <dwt_starttx+0x18a>
        regval = (regval << 8) + buffer[j] ;
 8003058:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800305c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003060:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003064:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003068:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800306c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003070:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        {
            sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
            if (sys_state == DW_SYS_STATE_TXERR)
 8003074:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8003078:	d130      	bne.n	80030dc <dwt_starttx+0xf4>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800307a:	2281      	movs	r2, #129	@ 0x81
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800307c:	6823      	ldr	r3, [r4, #0]
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800307e:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003082:	7d1b      	ldrb	r3, [r3, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80ce 	beq.w	8003226 <dwt_starttx+0x23e>
        }
        else
        {
            //uart_transmit("HPDWARN", 7);
            dwt_writefastCMD(CMD_TXRXOFF);
            retval = DWT_ERROR ; // Failed !
 800308a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
        {
            dwt_writefastCMD(CMD_TX);
        }
    }

    return retval;
 800308e:	e026      	b.n	80030de <dwt_starttx+0xf6>
        else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8003090:	0701      	lsls	r1, r0, #28
 8003092:	d541      	bpl.n	8003118 <dwt_starttx+0x130>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003094:	2a00      	cmp	r2, #0
 8003096:	f000 80ae 	beq.w	80031f6 <dwt_starttx+0x20e>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800309a:	f643 429f 	movw	r2, #15519	@ 0x3c9f
 800309e:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1b5      	bne.n	8003012 <dwt_starttx+0x2a>
            writetospi(cnt, header, length, buffer);
 80030a6:	461a      	mov	r2, r3
 80030a8:	a903      	add	r1, sp, #12
 80030aa:	2001      	movs	r0, #1
 80030ac:	f002 fe9a 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 80030b0:	e7af      	b.n	8003012 <dwt_starttx+0x2a>
    else if(mode & DWT_START_TX_CCA)
 80030b2:	0681      	lsls	r1, r0, #26
 80030b4:	d50b      	bpl.n	80030ce <dwt_starttx+0xe6>
        if(mode & DWT_RESPONSE_EXPECTED)
 80030b6:	b302      	cbz	r2, 80030fa <dwt_starttx+0x112>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80030b8:	f244 42a3 	movw	r2, #17571	@ 0x44a3
 80030bc:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80030c0:	b963      	cbnz	r3, 80030dc <dwt_starttx+0xf4>
            writetospi(cnt, header, length, buffer);
 80030c2:	461a      	mov	r2, r3
 80030c4:	a903      	add	r1, sp, #12
 80030c6:	2001      	movs	r0, #1
 80030c8:	f002 fe8c 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 80030cc:	e006      	b.n	80030dc <dwt_starttx+0xf4>
        if(mode & DWT_RESPONSE_EXPECTED)
 80030ce:	b942      	cbnz	r2, 80030e2 <dwt_starttx+0xfa>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80030d0:	f240 4283 	movw	r2, #1155	@ 0x483
 80030d4:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f2      	beq.n	80030c2 <dwt_starttx+0xda>
    int retval = DWT_SUCCESS ;
 80030dc:	2000      	movs	r0, #0

} // end dwt_starttx()
 80030de:	b005      	add	sp, #20
 80030e0:	bd30      	pop	{r4, r5, pc}
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80030e2:	f243 0299 	movw	r2, #12441	@ 0x3099
 80030e6:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f6      	bne.n	80030dc <dwt_starttx+0xf4>
            writetospi(cnt, header, length, buffer);
 80030ee:	461a      	mov	r2, r3
 80030f0:	a903      	add	r1, sp, #12
 80030f2:	2001      	movs	r0, #1
 80030f4:	f002 fe76 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 80030f8:	e7f0      	b.n	80030dc <dwt_starttx+0xf4>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80030fa:	f642 4297 	movw	r2, #11415	@ 0x2c97
 80030fe:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ea      	bne.n	80030dc <dwt_starttx+0xf4>
 8003106:	e7dc      	b.n	80030c2 <dwt_starttx+0xda>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003108:	f243 429b 	movw	r2, #13467	@ 0x349b
 800310c:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003110:	2b00      	cmp	r3, #0
 8003112:	f47f af7e 	bne.w	8003012 <dwt_starttx+0x2a>
 8003116:	e7c6      	b.n	80030a6 <dwt_starttx+0xbe>
        else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 8003118:	06c5      	lsls	r5, r0, #27
 800311a:	d563      	bpl.n	80031e4 <dwt_starttx+0x1fc>
            if(mode & DWT_RESPONSE_EXPECTED)
 800311c:	2a00      	cmp	r2, #0
 800311e:	d07a      	beq.n	8003216 <dwt_starttx+0x22e>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003120:	f643 029d 	movw	r2, #14493	@ 0x389d
 8003124:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f af72 	bne.w	8003012 <dwt_starttx+0x2a>
 800312e:	e7ba      	b.n	80030a6 <dwt_starttx+0xbe>
        header[0] |= DW3000_SPI_EAMRW;
 8003130:	f246 0340 	movw	r3, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003134:	4a40      	ldr	r2, [pc, #256]	@ (8003238 <dwt_starttx+0x250>)
        header[0] |= DW3000_SPI_EAMRW;
 8003136:	f8ad 300c 	strh.w	r3, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800313a:	f89d 3008 	ldrb.w	r3, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 800313e:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003142:	5cd3      	ldrb	r3, [r2, r3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003144:	404b      	eors	r3, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	f89d 1003 	ldrb.w	r1, [sp, #3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800314c:	404b      	eors	r3, r1
 800314e:	5cd5      	ldrb	r5, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 8003150:	a903      	add	r1, sp, #12
 8003152:	2201      	movs	r2, #1
 8003154:	ab01      	add	r3, sp, #4
 8003156:	f002 fe9d 	bl	8005e94 <readfromspi_serial>
    return regval ;
 800315a:	f89d 3004 	ldrb.w	r3, [sp, #4]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800315e:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 8003160:	42ab      	cmp	r3, r5
 8003162:	f43f af65 	beq.w	8003030 <dwt_starttx+0x48>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8003166:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	f43f af61 	beq.w	8003030 <dwt_starttx+0x48>
                        pdw3000local->cbSPIRDErr();
 800316e:	4798      	blx	r3
 8003170:	e75e      	b.n	8003030 <dwt_starttx+0x48>
        header[0] |= DW3000_SPI_EAMRW;
 8003172:	f246 0240 	movw	r2, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003176:	f89d 5004 	ldrb.w	r5, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800317a:	f8ad 2008 	strh.w	r2, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800317e:	4a2e      	ldr	r2, [pc, #184]	@ (8003238 <dwt_starttx+0x250>)
            readfromspi(cnt, header, length, buffer);
 8003180:	f10d 0303 	add.w	r3, sp, #3
        data = byteArray[byte] ^ crcRemainderInit;
 8003184:	f812 c005 	ldrb.w	ip, [r2, r5]
 8003188:	f89d 5005 	ldrb.w	r5, [sp, #5]
            readfromspi(cnt, header, length, buffer);
 800318c:	a902      	add	r1, sp, #8
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800318e:	ea8c 0c05 	eor.w	ip, ip, r5
        data = byteArray[byte] ^ crcRemainderInit;
 8003192:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8003196:	f89d 500c 	ldrb.w	r5, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800319a:	ea8c 0c05 	eor.w	ip, ip, r5
 800319e:	f812 c00c 	ldrb.w	ip, [r2, ip]
        data = byteArray[byte] ^ crcRemainderInit;
 80031a2:	f89d 500d 	ldrb.w	r5, [sp, #13]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80031a6:	ea8c 0c05 	eor.w	ip, ip, r5
        data = byteArray[byte] ^ crcRemainderInit;
 80031aa:	f812 500c 	ldrb.w	r5, [r2, ip]
 80031ae:	f89d c00e 	ldrb.w	ip, [sp, #14]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80031b2:	ea8c 0c05 	eor.w	ip, ip, r5
        data = byteArray[byte] ^ crcRemainderInit;
 80031b6:	f812 c00c 	ldrb.w	ip, [r2, ip]
 80031ba:	f89d 500f 	ldrb.w	r5, [sp, #15]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80031be:	ea8c 0c05 	eor.w	ip, ip, r5
 80031c2:	f812 500c 	ldrb.w	r5, [r2, ip]
            readfromspi(cnt, header, length, buffer);
 80031c6:	2201      	movs	r2, #1
 80031c8:	f002 fe64 	bl	8005e94 <readfromspi_serial>
    return regval ;
 80031cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80031d0:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 80031d2:	429d      	cmp	r5, r3
 80031d4:	f43f af40 	beq.w	8003058 <dwt_starttx+0x70>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80031d8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f43f af3c 	beq.w	8003058 <dwt_starttx+0x70>
                        pdw3000local->cbSPIRDErr();
 80031e0:	4798      	blx	r3
 80031e2:	e739      	b.n	8003058 <dwt_starttx+0x70>
            if(mode & DWT_RESPONSE_EXPECTED)
 80031e4:	b17a      	cbz	r2, 8003206 <dwt_starttx+0x21e>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80031e6:	f244 02a1 	movw	r2, #16545	@ 0x40a1
 80031ea:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f47f af0f 	bne.w	8003012 <dwt_starttx+0x2a>
 80031f4:	e757      	b.n	80030a6 <dwt_starttx+0xbe>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80031f6:	f641 428f 	movw	r2, #7311	@ 0x1c8f
 80031fa:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af07 	bne.w	8003012 <dwt_starttx+0x2a>
 8003204:	e74f      	b.n	80030a6 <dwt_starttx+0xbe>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003206:	f242 4293 	movw	r2, #9363	@ 0x2493
 800320a:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f aeff 	bne.w	8003012 <dwt_starttx+0x2a>
 8003214:	e747      	b.n	80030a6 <dwt_starttx+0xbe>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003216:	f241 428b 	movw	r2, #5259	@ 0x148b
 800321a:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f aef7 	bne.w	8003012 <dwt_starttx+0x2a>
 8003224:	e73f      	b.n	80030a6 <dwt_starttx+0xbe>
            writetospi(cnt, header, length, buffer);
 8003226:	461a      	mov	r2, r3
 8003228:	a903      	add	r1, sp, #12
 800322a:	2001      	movs	r0, #1
 800322c:	f002 fdda 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 8003230:	e72b      	b.n	800308a <dwt_starttx+0xa2>
 8003232:	bf00      	nop
 8003234:	20000000 	.word	0x20000000
 8003238:	200001cc 	.word	0x200001cc

0800323c <dwt_rxenable>:
 * (DWT_START_RX_DELAYED | DWT_IDLE_ON_DLY_ERR) 0x03 used to disable re-enabling of receiver if delayed RX failed due to "late" error
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	b084      	sub	sp, #16
    uint8_t temp1 ;

    if(mode == DWT_START_RX_IMMEDIATE)
 8003240:	b178      	cbz	r0, 8003262 <dwt_rxenable+0x26>
    {
        dwt_writefastCMD(CMD_RX);
    }
    else //delayed RX
    {
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8003242:	f020 0302 	bic.w	r3, r0, #2
 8003246:	3b01      	subs	r3, #1
 8003248:	4604      	mov	r4, r0
 800324a:	2b0f      	cmp	r3, #15
 800324c:	d840      	bhi.n	80032d0 <dwt_rxenable+0x94>
 800324e:	e8df f003 	tbb	[pc, r3]
 8003252:	3f14      	.short	0x3f14
 8003254:	3f3f423f 	.word	0x3f3f423f
 8003258:	3f3f453f 	.word	0x3f3f453f
 800325c:	3f3f3f3f 	.word	0x3f3f3f3f
 8003260:	483f      	.short	0x483f
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003262:	f640 0285 	movw	r2, #2181	@ 0x885
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003266:	4b3f      	ldr	r3, [pc, #252]	@ (8003364 <dwt_rxenable+0x128>)
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003268:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	7d1b      	ldrb	r3, [r3, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06b      	beq.n	800334c <dwt_rxenable+0x110>
            }
            return DWT_ERROR; // return warning indication
        }
    }

    return DWT_SUCCESS;
 8003274:	2000      	movs	r0, #0
} // end dwt_rxenable()
 8003276:	b004      	add	sp, #16
 8003278:	bd70      	pop	{r4, r5, r6, pc}
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800327a:	f241 0289 	movw	r2, #4233	@ 0x1089
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800327e:	4d39      	ldr	r5, [pc, #228]	@ (8003364 <dwt_rxenable+0x128>)
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8003280:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	7d1b      	ldrb	r3, [r3, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d059      	beq.n	8003340 <dwt_rxenable+0x104>
        header[0] |= DW3000_SPI_EAMRW;
 800328c:	f641 4c41 	movw	ip, #7233	@ 0x1c41
            readfromspi(cnt, header, length, buffer);
 8003290:	f10d 0306 	add.w	r3, sp, #6
 8003294:	2201      	movs	r2, #1
 8003296:	2002      	movs	r0, #2
 8003298:	a902      	add	r1, sp, #8
        header[0] |= DW3000_SPI_EAMRW;
 800329a:	f8ad c008 	strh.w	ip, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 800329e:	f002 fdf9 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	7d18      	ldrb	r0, [r3, #20]
 80032a6:	2802      	cmp	r0, #2
 80032a8:	d02a      	beq.n	8003300 <dwt_rxenable+0xc4>
    return regval ;
 80032aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
        if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80032ae:	071b      	lsls	r3, r3, #28
 80032b0:	d5e0      	bpl.n	8003274 <dwt_rxenable+0x38>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80032b2:	2281      	movs	r2, #129	@ 0x81
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80032b4:	682b      	ldr	r3, [r5, #0]
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80032b6:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80032ba:	7d1b      	ldrb	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d04b      	beq.n	8003358 <dwt_rxenable+0x11c>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80032c0:	f014 0302 	ands.w	r3, r4, #2
 80032c4:	d104      	bne.n	80032d0 <dwt_rxenable+0x94>
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80032c6:	461a      	mov	r2, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7fe f808 	bl	80012e0 <dwt_xfer3000.constprop.0>
                return DWT_ERROR; // return error
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032d4:	e7cf      	b.n	8003276 <dwt_rxenable+0x3a>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80032d6:	f642 0295 	movw	r2, #10389	@ 0x2895
 80032da:	e7d0      	b.n	800327e <dwt_rxenable+0x42>
 80032dc:	f242 0291 	movw	r2, #8337	@ 0x2091
 80032e0:	e7cd      	b.n	800327e <dwt_rxenable+0x42>
 80032e2:	f641 028d 	movw	r2, #6285	@ 0x188d
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80032e6:	4d1f      	ldr	r5, [pc, #124]	@ (8003364 <dwt_rxenable+0x128>)
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 80032e8:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	7d1b      	ldrb	r3, [r3, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1cb      	bne.n	800328c <dwt_rxenable+0x50>
            writetospi(cnt, header, length, buffer);
 80032f4:	461a      	mov	r2, r3
 80032f6:	a903      	add	r1, sp, #12
 80032f8:	2001      	movs	r0, #1
 80032fa:	f002 fd73 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 80032fe:	e7c5      	b.n	800328c <dwt_rxenable+0x50>
        header[0] |= DW3000_SPI_EAMRW;
 8003300:	f246 0140 	movw	r1, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003304:	4a18      	ldr	r2, [pc, #96]	@ (8003368 <dwt_rxenable+0x12c>)
 8003306:	f89d 3008 	ldrb.w	r3, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 800330a:	f8ad 100c 	strh.w	r1, [sp, #12]
        data = byteArray[byte] ^ crcRemainderInit;
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	f89d 1009 	ldrb.w	r1, [sp, #9]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003314:	404b      	eors	r3, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8003316:	5cd1      	ldrb	r1, [r2, r3]
 8003318:	f89d 3006 	ldrb.w	r3, [sp, #6]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800331c:	404b      	eors	r3, r1
 800331e:	5cd6      	ldrb	r6, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 8003320:	a903      	add	r1, sp, #12
 8003322:	2201      	movs	r2, #1
 8003324:	f10d 0307 	add.w	r3, sp, #7
 8003328:	f002 fdb4 	bl	8005e94 <readfromspi_serial>
    return regval ;
 800332c:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003330:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 8003332:	429e      	cmp	r6, r3
 8003334:	d0b9      	beq.n	80032aa <dwt_rxenable+0x6e>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8003336:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0b6      	beq.n	80032aa <dwt_rxenable+0x6e>
                        pdw3000local->cbSPIRDErr();
 800333c:	4798      	blx	r3
 800333e:	e7b4      	b.n	80032aa <dwt_rxenable+0x6e>
            writetospi(cnt, header, length, buffer);
 8003340:	461a      	mov	r2, r3
 8003342:	a903      	add	r1, sp, #12
 8003344:	2001      	movs	r0, #1
 8003346:	f002 fd4d 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 800334a:	e79f      	b.n	800328c <dwt_rxenable+0x50>
            writetospi(cnt, header, length, buffer);
 800334c:	461a      	mov	r2, r3
 800334e:	a903      	add	r1, sp, #12
 8003350:	2001      	movs	r0, #1
 8003352:	f002 fd47 	bl	8005de4 <writetospi_serial>
} // end dwt_xfer3000()
 8003356:	e78d      	b.n	8003274 <dwt_rxenable+0x38>
            writetospi(cnt, header, length, buffer);
 8003358:	461a      	mov	r2, r3
 800335a:	a903      	add	r1, sp, #12
 800335c:	2001      	movs	r0, #1
 800335e:	f002 fd41 	bl	8005de4 <writetospi_serial>
 8003362:	e7ad      	b.n	80032c0 <dwt_rxenable+0x84>
 8003364:	20000000 	.word	0x20000000
 8003368:	200001cc 	.word	0x200001cc

0800336c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint32_t time)
{
 800336c:	b510      	push	{r4, lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800336e:	4c1b      	ldr	r4, [pc, #108]	@ (80033dc <dwt_setrxtimeout+0x70>)
{
 8003370:	b082      	sub	sp, #8
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	7d1b      	ldrb	r3, [r3, #20]
    if(time > 0)
 8003376:	b138      	cbz	r0, 8003388 <dwt_setrxtimeout+0x1c>
        header[0] |= DW3000_SPI_EAMRW;
 8003378:	f24d 02c0 	movw	r2, #53440	@ 0xd0c0
        buffer[j] = (uint8_t)regval;
 800337c:	9001      	str	r0, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800337e:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003382:	b19b      	cbz	r3, 80033ac <dwt_setrxtimeout+0x40>
    }
    else
    {
        dwt_and16bitoffsetreg(SYS_CFG_ID, 0, (uint16_t)(~SYS_CFG_RXWTOE_BIT_MASK)); //clear the RX FWTO bit
    }
} // end dwt_setrxtimeout()
 8003384:	b002      	add	sp, #8
 8003386:	bd10      	pop	{r4, pc}
    buf[0] = (uint8_t)_and;//       &0xFF;
 8003388:	f64f 51ff 	movw	r1, #65023	@ 0xfdff
        header[0] |= DW3000_SPI_EAMRW;
 800338c:	f244 22c0 	movw	r2, #17088	@ 0x42c0
    buf[0] = (uint8_t)_and;//       &0xFF;
 8003390:	9101      	str	r1, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 8003392:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f4      	bne.n	8003384 <dwt_setrxtimeout+0x18>
            writetospi(cnt, header, length, buffer);
 800339a:	2204      	movs	r2, #4
 800339c:	4669      	mov	r1, sp
 800339e:	eb0d 0302 	add.w	r3, sp, r2
 80033a2:	2002      	movs	r0, #2
 80033a4:	f002 fd1e 	bl	8005de4 <writetospi_serial>
} // end dwt_setrxtimeout()
 80033a8:	b002      	add	sp, #8
 80033aa:	bd10      	pop	{r4, pc}
            writetospi(cnt, header, length, buffer);
 80033ac:	2204      	movs	r2, #4
 80033ae:	4669      	mov	r1, sp
 80033b0:	ab01      	add	r3, sp, #4
 80033b2:	2002      	movs	r0, #2
 80033b4:	f002 fd16 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 80033b8:	f244 22c0 	movw	r2, #17088	@ 0x42c0
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033bc:	6823      	ldr	r3, [r4, #0]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80033be:	4908      	ldr	r1, [pc, #32]	@ (80033e0 <dwt_setrxtimeout+0x74>)
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033c0:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80033c2:	9101      	str	r1, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 80033c4:	f8ad 2000 	strh.w	r2, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1db      	bne.n	8003384 <dwt_setrxtimeout+0x18>
            writetospi(cnt, header, length, buffer);
 80033cc:	2204      	movs	r2, #4
 80033ce:	4669      	mov	r1, sp
 80033d0:	ab01      	add	r3, sp, #4
 80033d2:	2002      	movs	r0, #2
 80033d4:	f002 fd06 	bl	8005de4 <writetospi_serial>
} // end dwt_setrxtimeout()
 80033d8:	b002      	add	sp, #8
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	20000000 	.word	0x20000000
 80033e0:	0200ffff 	.word	0x0200ffff

080033e4 <dwt_setpreambledetecttimeout>:
        header[0] |= DW3000_SPI_EAMRW;
 80033e4:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16_t timeout)
{
 80033e8:	b500      	push	{lr}
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <dwt_setpreambledetecttimeout+0x30>)
{
 80033ec:	b083      	sub	sp, #12
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033ee:	681b      	ldr	r3, [r3, #0]
    buffer[0] = (uint8_t)regval;
 80033f0:	f8ad 0000 	strh.w	r0, [sp]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033f4:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 80033f6:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80033fa:	b113      	cbz	r3, 8003402 <dwt_setpreambledetecttimeout+0x1e>
    dwt_write16bitoffsetreg(DTUNE1_ID, 0, timeout);
}
 80033fc:	b003      	add	sp, #12
 80033fe:	f85d fb04 	ldr.w	pc, [sp], #4
            writetospi(cnt, header, length, buffer);
 8003402:	2202      	movs	r2, #2
 8003404:	466b      	mov	r3, sp
 8003406:	4610      	mov	r0, r2
 8003408:	a901      	add	r1, sp, #4
 800340a:	f002 fceb 	bl	8005de4 <writetospi_serial>
}
 800340e:	b003      	add	sp, #12
 8003410:	f85d fb04 	ldr.w	pc, [sp], #4
 8003414:	20000000 	.word	0x20000000

08003418 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 8003418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        header[0] |= DW3000_SPI_EAMRW;
 800341c:	f241 02e2 	movw	r2, #4322	@ 0x10e2
    buffer[0] = (uint8_t)regval;
 8003420:	f641 0522 	movw	r5, #6178	@ 0x1822
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003424:	4cac      	ldr	r4, [pc, #688]	@ (80036d8 <dwt_calcbandwidthadj+0x2c0>)
{
 8003426:	b085      	sub	sp, #20
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003428:	6823      	ldr	r3, [r4, #0]
    buffer[0] = (uint8_t)regval;
 800342a:	f8ad 5004 	strh.w	r5, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800342e:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003432:	7d1b      	ldrb	r3, [r3, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80b7 	beq.w	80035a8 <dwt_calcbandwidthadj+0x190>
 800343a:	ad01      	add	r5, sp, #4
        header[0] |= DW3000_SPI_EAMRW;
 800343c:	f244 0750 	movw	r7, #16464	@ 0x4050
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003440:	4ea6      	ldr	r6, [pc, #664]	@ (80036dc <dwt_calcbandwidthadj+0x2c4>)
}
 8003442:	e004      	b.n	800344e <dwt_calcbandwidthadj+0x36>
    return regval ;
 8003444:	f89d 3002 	ldrb.w	r3, [sp, #2]
    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 8003448:	f013 0301 	ands.w	r3, r3, #1
 800344c:	d031      	beq.n	80034b2 <dwt_calcbandwidthadj+0x9a>
            readfromspi(cnt, header, length, buffer);
 800344e:	f10d 0302 	add.w	r3, sp, #2
 8003452:	2201      	movs	r2, #1
 8003454:	4629      	mov	r1, r5
 8003456:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 8003458:	f8ad 7004 	strh.w	r7, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 800345c:	f002 fd1a 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	7d18      	ldrb	r0, [r3, #20]
 8003464:	2802      	cmp	r0, #2
 8003466:	d1ed      	bne.n	8003444 <dwt_calcbandwidthadj+0x2c>
        header[0] |= DW3000_SPI_EAMRW;
 8003468:	f246 0e40 	movw	lr, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800346c:	f89d 3004 	ldrb.w	r3, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 8003470:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003474:	5cf3      	ldrb	r3, [r6, r3]
 8003476:	f89d c002 	ldrb.w	ip, [sp, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800347a:	4053      	eors	r3, r2
        data = byteArray[byte] ^ crcRemainderInit;
 800347c:	5cf3      	ldrb	r3, [r6, r3]
            readfromspi(cnt, header, length, buffer);
 800347e:	2201      	movs	r2, #1
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003480:	ea8c 0c03 	eor.w	ip, ip, r3
            readfromspi(cnt, header, length, buffer);
 8003484:	a902      	add	r1, sp, #8
 8003486:	f10d 0303 	add.w	r3, sp, #3
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800348a:	f816 800c 	ldrb.w	r8, [r6, ip]
        header[0] |= DW3000_SPI_EAMRW;
 800348e:	f8ad e008 	strh.w	lr, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8003492:	f002 fcff 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8003496:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 800349a:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 800349c:	4598      	cmp	r8, r3
 800349e:	d0d1      	beq.n	8003444 <dwt_calcbandwidthadj+0x2c>
                    if (pdw3000local->cbSPIRDErr != NULL)
 80034a0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0ce      	beq.n	8003444 <dwt_calcbandwidthadj+0x2c>
                        pdw3000local->cbSPIRDErr();
 80034a6:	4798      	blx	r3
    return regval ;
 80034a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 80034ac:	f013 0301 	ands.w	r3, r3, #1
 80034b0:	d1cd      	bne.n	800344e <dwt_calcbandwidthadj+0x36>
        header[0] |= DW3000_SPI_EAMRW;
 80034b2:	f241 02ce 	movw	r2, #4302	@ 0x10ce
        buffer[j] = (uint8_t)regval;
 80034b6:	9302      	str	r3, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80034b8:	6823      	ldr	r3, [r4, #0]
        header[0] |= DW3000_SPI_EAMRW;
 80034ba:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80034be:	7d1e      	ldrb	r6, [r3, #20]
 80034c0:	2e00      	cmp	r6, #0
 80034c2:	d03b      	beq.n	800353c <dwt_calcbandwidthadj+0x124>
        header[0] |= DW3000_SPI_EAMRW;
 80034c4:	f247 064e 	movw	r6, #28750	@ 0x704e
            readfromspi(cnt, header, length, buffer);
 80034c8:	f10d 0302 	add.w	r3, sp, #2
 80034cc:	2201      	movs	r2, #1
 80034ce:	4629      	mov	r1, r5
 80034d0:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 80034d2:	f8ad 6004 	strh.w	r6, [sp, #4]
            readfromspi(cnt, header, length, buffer);
 80034d6:	f002 fcdd 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	7d18      	ldrb	r0, [r3, #20]
 80034de:	2802      	cmp	r0, #2
 80034e0:	d006      	beq.n	80034f0 <dwt_calcbandwidthadj+0xd8>
    return regval ;
 80034e2:	f89d 0002 	ldrb.w	r0, [sp, #2]
    dwt_disable_rftx_blocks();
    dwt_disable_rf_tx(0);
    dwt_force_clocks(FORCE_CLK_AUTO);

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
}
 80034e6:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80034ea:	b005      	add	sp, #20
 80034ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        header[0] |= DW3000_SPI_EAMRW;
 80034f0:	f246 0640 	movw	r6, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80034f4:	4a79      	ldr	r2, [pc, #484]	@ (80036dc <dwt_calcbandwidthadj+0x2c4>)
 80034f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
        data = byteArray[byte] ^ crcRemainderInit;
 80034fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
        header[0] |= DW3000_SPI_EAMRW;
 8003500:	f8ad 6008 	strh.w	r6, [sp, #8]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003504:	404b      	eors	r3, r1
        data = byteArray[byte] ^ crcRemainderInit;
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	f89d 1002 	ldrb.w	r1, [sp, #2]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800350c:	404b      	eors	r3, r1
 800350e:	5cd5      	ldrb	r5, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 8003510:	a902      	add	r1, sp, #8
 8003512:	2201      	movs	r2, #1
 8003514:	f10d 0303 	add.w	r3, sp, #3
 8003518:	f002 fcbc 	bl	8005e94 <readfromspi_serial>
    return regval ;
 800351c:	f89d 3003 	ldrb.w	r3, [sp, #3]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003520:	6822      	ldr	r2, [r4, #0]
                if (crc8 != dwcrc8)
 8003522:	42ab      	cmp	r3, r5
 8003524:	d0dd      	beq.n	80034e2 <dwt_calcbandwidthadj+0xca>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8003526:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0da      	beq.n	80034e2 <dwt_calcbandwidthadj+0xca>
                        pdw3000local->cbSPIRDErr();
 800352c:	4798      	blx	r3
    return regval ;
 800352e:	f89d 0002 	ldrb.w	r0, [sp, #2]
}
 8003532:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8003536:	b005      	add	sp, #20
 8003538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            writetospi(cnt, header, length, buffer);
 800353c:	2204      	movs	r2, #4
 800353e:	ab02      	add	r3, sp, #8
 8003540:	4629      	mov	r1, r5
 8003542:	2002      	movs	r0, #2
 8003544:	f002 fc4e 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8003548:	f242 03cf 	movw	r3, #8399	@ 0x20cf
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	7d17      	ldrb	r7, [r2, #20]
        buffer[j] = (uint8_t)regval;
 8003550:	9602      	str	r6, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8003552:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003556:	2f00      	cmp	r7, #0
 8003558:	d1b4      	bne.n	80034c4 <dwt_calcbandwidthadj+0xac>
            writetospi(cnt, header, length, buffer);
 800355a:	2204      	movs	r2, #4
 800355c:	ab02      	add	r3, sp, #8
 800355e:	4629      	mov	r1, r5
 8003560:	2002      	movs	r0, #2
 8003562:	f002 fc3f 	bl	8005de4 <writetospi_serial>
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003566:	228e      	movs	r2, #142	@ 0x8e
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	7d1b      	ldrb	r3, [r3, #20]
        buffer[j] = (uint8_t)regval;
 800356c:	9702      	str	r7, [sp, #8]
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800356e:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1a6      	bne.n	80034c4 <dwt_calcbandwidthadj+0xac>
            writetospi(cnt, header, length, buffer);
 8003576:	2204      	movs	r2, #4
 8003578:	ab02      	add	r3, sp, #8
 800357a:	4629      	mov	r1, r5
 800357c:	2001      	movs	r0, #1
 800357e:	f002 fc31 	bl	8005de4 <writetospi_serial>
    buffer[0] = (uint8_t)regval;
 8003582:	f44f 7200 	mov.w	r2, #512	@ 0x200
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	7d1b      	ldrb	r3, [r3, #20]
    buffer[0] = (uint8_t)regval;
 800358a:	f8ad 2004 	strh.w	r2, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800358e:	f241 02e2 	movw	r2, #4322	@ 0x10e2
 8003592:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003596:	2b00      	cmp	r3, #0
 8003598:	d194      	bne.n	80034c4 <dwt_calcbandwidthadj+0xac>
            writetospi(cnt, header, length, buffer);
 800359a:	2202      	movs	r2, #2
 800359c:	462b      	mov	r3, r5
 800359e:	4610      	mov	r0, r2
 80035a0:	a902      	add	r1, sp, #8
 80035a2:	f002 fc1f 	bl	8005de4 <writetospi_serial>
 80035a6:	e78d      	b.n	80034c4 <dwt_calcbandwidthadj+0xac>
 80035a8:	2202      	movs	r2, #2
 80035aa:	ad01      	add	r5, sp, #4
 80035ac:	462b      	mov	r3, r5
 80035ae:	4607      	mov	r7, r0
 80035b0:	460e      	mov	r6, r1
 80035b2:	4610      	mov	r0, r2
 80035b4:	a902      	add	r1, sp, #8
 80035b6:	f002 fc15 	bl	8005de4 <writetospi_serial>
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035ba:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        header[0] |= DW3000_SPI_EAMRW;
 80035be:	f242 39cf 	movw	r9, #9167	@ 0x23cf
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035c2:	f04f 2208 	mov.w	r2, #134219776	@ 0x8000800
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035ca:	f8cd 8008 	str.w	r8, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80035ce:	f8ad 9004 	strh.w	r9, [sp, #4]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035d2:	9203      	str	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f af31 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 80035da:	2208      	movs	r2, #8
 80035dc:	ab02      	add	r3, sp, #8
 80035de:	4629      	mov	r1, r5
 80035e0:	2002      	movs	r0, #2
 80035e2:	f002 fbff 	bl	8005de4 <writetospi_serial>
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035e6:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80035ee:	e9cd 8202 	strd	r8, r2, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80035f2:	f8ad 9004 	strh.w	r9, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f47f af20 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 80035fc:	2208      	movs	r2, #8
 80035fe:	ab02      	add	r3, sp, #8
 8003600:	4629      	mov	r1, r5
 8003602:	2002      	movs	r0, #2
 8003604:	f002 fbee 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 8003608:	f240 32ce 	movw	r2, #974	@ 0x3ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800360c:	6823      	ldr	r3, [r4, #0]
    if (channel == SEL_CHANNEL5)
 800360e:	2e05      	cmp	r6, #5
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003610:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 8003612:	f8cd 8008 	str.w	r8, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8003616:	f8ad 2004 	strh.w	r2, [sp, #4]
    if (channel == SEL_CHANNEL5)
 800361a:	d035      	beq.n	8003688 <dwt_calcbandwidthadj+0x270>
    buf[0] = (uint8_t)_and;//       &0xFF;
 800361c:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 80036e0 <dwt_calcbandwidthadj+0x2c8>
 8003620:	f8cd 900c 	str.w	r9, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af09 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 800362a:	ab02      	add	r3, sp, #8
 800362c:	2208      	movs	r2, #8
 800362e:	4629      	mov	r1, r5
 8003630:	2002      	movs	r0, #2
 8003632:	f002 fbd7 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003636:	6823      	ldr	r3, [r4, #0]
    else if (channel == SEL_CHANNEL9)
 8003638:	2e09      	cmp	r6, #9
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800363a:	7d1b      	ldrb	r3, [r3, #20]
    else if (channel == SEL_CHANNEL9)
 800363c:	d043      	beq.n	80036c6 <dwt_calcbandwidthadj+0x2ae>
        header[0] |= DW3000_SPI_EAMRW;
 800363e:	f247 02d0 	movw	r2, #28880	@ 0x70d0
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 8003642:	f3c7 000b 	ubfx	r0, r7, #0, #12
    buffer[0] = (uint8_t)regval;
 8003646:	f8ad 0004 	strh.w	r0, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800364a:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f aef4 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 8003654:	2202      	movs	r2, #2
 8003656:	462b      	mov	r3, r5
 8003658:	4610      	mov	r0, r2
 800365a:	a902      	add	r1, sp, #8
 800365c:	f002 fbc2 	bl	8005de4 <writetospi_serial>
    buf[0] = _and;
 8003660:	f240 31ff 	movw	r1, #1023	@ 0x3ff
        header[0] |= DW3000_SPI_EAMRW;
 8003664:	f244 12d0 	movw	r2, #16848	@ 0x41d0
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = _and;
 800366c:	f8ad 1004 	strh.w	r1, [sp, #4]
        header[0] |= DW3000_SPI_EAMRW;
 8003670:	f8ad 2008 	strh.w	r2, [sp, #8]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f aee1 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 800367a:	2202      	movs	r2, #2
 800367c:	462b      	mov	r3, r5
 800367e:	4610      	mov	r0, r2
 8003680:	a902      	add	r1, sp, #8
 8003682:	f002 fbaf 	bl	8005de4 <writetospi_serial>
 8003686:	e6d9      	b.n	800343c <dwt_calcbandwidthadj+0x24>
    buf[0] = (uint8_t)_and;//       &0xFF;
 8003688:	4e16      	ldr	r6, [pc, #88]	@ (80036e4 <dwt_calcbandwidthadj+0x2cc>)
 800368a:	9603      	str	r6, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800368c:	2b00      	cmp	r3, #0
 800368e:	f47f aed5 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 8003692:	2208      	movs	r2, #8
 8003694:	ab02      	add	r3, sp, #8
 8003696:	4629      	mov	r1, r5
 8003698:	2002      	movs	r0, #2
 800369a:	f002 fba3 	bl	8005de4 <writetospi_serial>
        header[0] |= DW3000_SPI_EAMRW;
 800369e:	f241 32ce 	movw	r2, #5070	@ 0x13ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	7d1b      	ldrb	r3, [r3, #20]
    buf[0] = (uint8_t)_and;//       &0xFF;
 80036a6:	e9cd 8602 	strd	r8, r6, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80036aa:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f47f aec4 	bne.w	800343c <dwt_calcbandwidthadj+0x24>
            writetospi(cnt, header, length, buffer);
 80036b4:	ab02      	add	r3, sp, #8
 80036b6:	2208      	movs	r2, #8
 80036b8:	4629      	mov	r1, r5
 80036ba:	2002      	movs	r0, #2
 80036bc:	f002 fb92 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	7d1b      	ldrb	r3, [r3, #20]
}
 80036c4:	e7bb      	b.n	800363e <dwt_calcbandwidthadj+0x226>
        header[0] |= DW3000_SPI_EAMRW;
 80036c6:	f241 32ce 	movw	r2, #5070	@ 0x13ce
    buf[0] = (uint8_t)_and;//       &0xFF;
 80036ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 80036ce:	f8ad 2004 	strh.w	r2, [sp, #4]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0ee      	beq.n	80036b4 <dwt_calcbandwidthadj+0x29c>
 80036d6:	e6b1      	b.n	800343c <dwt_calcbandwidthadj+0x24>
 80036d8:	20000000 	.word	0x20000000
 80036dc:	200001cc 	.word	0x200001cc
 80036e0:	02001c00 	.word	0x02001c00
 80036e4:	02003c00 	.word	0x02003c00

080036e8 <dwt_configuretxrf>:
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (config->PGcount == 0) {
 80036ea:	8903      	ldrh	r3, [r0, #8]
{
 80036ec:	4604      	mov	r4, r0
 80036ee:	b085      	sub	sp, #20
    if (config->PGcount == 0) {
 80036f0:	b96b      	cbnz	r3, 800370e <dwt_configuretxrf+0x26>
        header[0] |= DW3000_SPI_EAMRW;
 80036f2:	f247 02ce 	movw	r2, #28878	@ 0x70ce
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80036f6:	4d31      	ldr	r5, [pc, #196]	@ (80037bc <dwt_configuretxrf+0xd4>)
 80036f8:	7801      	ldrb	r1, [r0, #0]
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	f88d 1008 	strb.w	r1, [sp, #8]
        header[0] |= DW3000_SPI_EAMRW;
 8003700:	f8ad 200c 	strh.w	r2, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003704:	7d1b      	ldrb	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d04e      	beq.n	80037a8 <dwt_configuretxrf+0xc0>
}
 800370a:	b005      	add	sp, #20
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        header[0] |= DW3000_SPI_EAMRW;
 800370e:	f245 0c42 	movw	ip, #20546	@ 0x5042
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003712:	4d2a      	ldr	r5, [pc, #168]	@ (80037bc <dwt_configuretxrf+0xd4>)
            readfromspi(cnt, header, length, buffer);
 8003714:	ae02      	add	r6, sp, #8
 8003716:	f10d 0306 	add.w	r3, sp, #6
 800371a:	2201      	movs	r2, #1
 800371c:	4631      	mov	r1, r6
 800371e:	2002      	movs	r0, #2
        header[0] |= DW3000_SPI_EAMRW;
 8003720:	f8ad c008 	strh.w	ip, [sp, #8]
            readfromspi(cnt, header, length, buffer);
 8003724:	f002 fbb6 	bl	8005e94 <readfromspi_serial>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	7d18      	ldrb	r0, [r3, #20]
 800372c:	2802      	cmp	r0, #2
 800372e:	d01b      	beq.n	8003768 <dwt_configuretxrf+0x80>
    return regval ;
 8003730:	f89d 3006 	ldrb.w	r3, [sp, #6]
        dwt_calcbandwidthadj(config->PGcount, channel);
 8003734:	8920      	ldrh	r0, [r4, #8]
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 8003736:	f013 0f01 	tst.w	r3, #1
        dwt_calcbandwidthadj(config->PGcount, channel);
 800373a:	bf14      	ite	ne
 800373c:	2109      	movne	r1, #9
 800373e:	2105      	moveq	r1, #5
 8003740:	f7ff fe6a 	bl	8003418 <dwt_calcbandwidthadj>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	7d1b      	ldrb	r3, [r3, #20]
        header[0] |= DW3000_SPI_EAMRW;
 8003748:	f243 02c2 	movw	r2, #12482	@ 0x30c2
        buffer[j] = (uint8_t)regval;
 800374c:	6861      	ldr	r1, [r4, #4]
        header[0] |= DW3000_SPI_EAMRW;
 800374e:	f8ad 2008 	strh.w	r2, [sp, #8]
        buffer[j] = (uint8_t)regval;
 8003752:	9103      	str	r1, [sp, #12]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1d8      	bne.n	800370a <dwt_configuretxrf+0x22>
            writetospi(cnt, header, length, buffer);
 8003758:	2204      	movs	r2, #4
 800375a:	4631      	mov	r1, r6
 800375c:	ab03      	add	r3, sp, #12
 800375e:	2002      	movs	r0, #2
 8003760:	f002 fb40 	bl	8005de4 <writetospi_serial>
}
 8003764:	b005      	add	sp, #20
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
        header[0] |= DW3000_SPI_EAMRW;
 8003768:	f246 0340 	movw	r3, #24640	@ 0x6040
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800376c:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <dwt_configuretxrf+0xd8>)
        header[0] |= DW3000_SPI_EAMRW;
 800376e:	f8ad 300c 	strh.w	r3, [sp, #12]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003772:	f89d 3008 	ldrb.w	r3, [sp, #8]
        data = byteArray[byte] ^ crcRemainderInit;
 8003776:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800377a:	5cd3      	ldrb	r3, [r2, r3]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800377c:	404b      	eors	r3, r1
        data = byteArray[byte] ^ crcRemainderInit;
 800377e:	5cd1      	ldrb	r1, [r2, r3]
 8003780:	f89d 3006 	ldrb.w	r3, [sp, #6]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8003784:	404b      	eors	r3, r1
 8003786:	5cd7      	ldrb	r7, [r2, r3]
            readfromspi(cnt, header, length, buffer);
 8003788:	a903      	add	r1, sp, #12
 800378a:	2201      	movs	r2, #1
 800378c:	f10d 0307 	add.w	r3, sp, #7
 8003790:	f002 fb80 	bl	8005e94 <readfromspi_serial>
    return regval ;
 8003794:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8003798:	682a      	ldr	r2, [r5, #0]
                if (crc8 != dwcrc8)
 800379a:	42bb      	cmp	r3, r7
 800379c:	d0c8      	beq.n	8003730 <dwt_configuretxrf+0x48>
                    if (pdw3000local->cbSPIRDErr != NULL)
 800379e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0c5      	beq.n	8003730 <dwt_configuretxrf+0x48>
                        pdw3000local->cbSPIRDErr();
 80037a4:	4798      	blx	r3
 80037a6:	e7c3      	b.n	8003730 <dwt_configuretxrf+0x48>
            writetospi(cnt, header, length, buffer);
 80037a8:	ae02      	add	r6, sp, #8
 80037aa:	4633      	mov	r3, r6
 80037ac:	2201      	movs	r2, #1
 80037ae:	2002      	movs	r0, #2
 80037b0:	a903      	add	r1, sp, #12
 80037b2:	f002 fb17 	bl	8005de4 <writetospi_serial>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	7d1b      	ldrb	r3, [r3, #20]
 80037ba:	e7c5      	b.n	8003748 <dwt_configuretxrf+0x60>
 80037bc:	20000000 	.word	0x20000000
 80037c0:	200001cc 	.word	0x200001cc

080037c4 <ds_twr_initiator_init>:
};
extern dwt_txconfig_t txconfig_options_ch9;


uint8_t ds_twr_initiator_init(void)
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80037c6:	f002 faa9 	bl	8005d1c <reset_DWIC>
    
    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 80037ca:	2002      	movs	r0, #2
 80037cc:	f002 fa92 	bl	8005cf4 <Sleep>
    flags.option_timeout = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	4c3a      	ldr	r4, [pc, #232]	@ (80038bc <ds_twr_initiator_init+0xf8>)
 80037d4:	8223      	strh	r3, [r4, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80037d6:	e003      	b.n	80037e0 <ds_twr_initiator_init+0x1c>
    { 
        if(flags.option_timeout > 300)
 80037d8:	8a22      	ldrh	r2, [r4, #16]
 80037da:	f5b2 7f96 	cmp.w	r2, #300	@ 0x12c
 80037de:	d846      	bhi.n	800386e <ds_twr_initiator_init+0xaa>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80037e0:	f7ff fb1a 	bl	8002e18 <dwt_checkidlerc>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d0f6      	beq.n	80037d8 <ds_twr_initiator_init+0x14>
            Sleep(1000);
            HMISends("page menu\xff\xff\xff"); 
            return 1;
        }
    };
    flags.option_timeout = 0;
 80037ea:	2000      	movs	r0, #0
 80037ec:	8220      	strh	r0, [r4, #16]
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80037ee:	f7fd ff7d 	bl	80016ec <dwt_initialise>
 80037f2:	3001      	adds	r0, #1
 80037f4:	d05e      	beq.n	80038b4 <ds_twr_initiator_init+0xf0>
        Sleep(1000); 
        HMISends("page menu\xff\xff\xff");
        return 1;
    }    
    
    dwt_structs_init(DS_TWR_INITIATOR, &config, &Config_options);
 80037f6:	2005      	movs	r0, #5
 80037f8:	4a31      	ldr	r2, [pc, #196]	@ (80038c0 <ds_twr_initiator_init+0xfc>)
 80037fa:	4932      	ldr	r1, [pc, #200]	@ (80038c4 <ds_twr_initiator_init+0x100>)
 80037fc:	f7fd fd42 	bl	8001284 <dwt_structs_init>
    
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8003800:	4830      	ldr	r0, [pc, #192]	@ (80038c4 <ds_twr_initiator_init+0x100>)
 8003802:	f7fe fb93 	bl	8001f2c <dwt_configure>
 8003806:	2800      	cmp	r0, #0
 8003808:	d156      	bne.n	80038b8 <ds_twr_initiator_init+0xf4>
        return 1;
    }
    dwt_configuretxrf(&Config_options);

	/* Set the antenna delay. Modify the parameters to adjust the distance error */
    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 800380a:	4d2f      	ldr	r5, [pc, #188]	@ (80038c8 <ds_twr_initiator_init+0x104>)
    dwt_configuretxrf(&Config_options);
 800380c:	482c      	ldr	r0, [pc, #176]	@ (80038c0 <ds_twr_initiator_init+0xfc>)
 800380e:	f7ff ff6b 	bl	80036e8 <dwt_configuretxrf>
    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 8003812:	7feb      	ldrb	r3, [r5, #31]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d037      	beq.n	8003888 <ds_twr_initiator_init+0xc4>
        dwt_settxantennadelay(TX_ANT_DLY_HP);
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
    }
    else
    {
        dwt_settxantennadelay(TX_ANT_DLY_LP);
 8003818:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 800381c:	f7fe ffa8 	bl	8002770 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_LP);
 8003820:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8003824:	f7fe ff8a 	bl	800273c <dwt_setrxantennadelay>
    }

    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 8003828:	7f2b      	ldrb	r3, [r5, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d137      	bne.n	800389e <ds_twr_initiator_init+0xda>
    {
        dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_6M8);
 800382e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003832:	f7ff fa89 	bl	8002d48 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_6M8);
 8003836:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800383a:	f7ff fd97 	bl	800336c <dwt_setrxtimeout>
        dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 800383e:	2005      	movs	r0, #5
 8003840:	f7ff fdd0 	bl	80033e4 <dwt_setpreambledetecttimeout>
        dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_850K);
        dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
    }
	
    /* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 8003844:	2007      	movs	r0, #7
 8003846:	f7fe f85d 	bl	8001904 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 800384a:	2000      	movs	r0, #0
 800384c:	f7fe f82a 	bl	80018a4 <dwt_setfinegraintxseq>
    
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8003850:	2003      	movs	r0, #3
 8003852:	f7ff fb25 	bl	8002ea0 <dwt_setleds>
	d_len = 0;
 8003856:	2500      	movs	r5, #0
	error_times = 0;
    flags.ds_twr_timeout = 1;
 8003858:	2301      	movs	r3, #1
	d_len = 0;
 800385a:	491c      	ldr	r1, [pc, #112]	@ (80038cc <ds_twr_initiator_init+0x108>)
	error_times = 0;
 800385c:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <ds_twr_initiator_init+0x10c>)
    HMISends("page ranginginit\xff\xff\xff");
 800385e:	481d      	ldr	r0, [pc, #116]	@ (80038d4 <ds_twr_initiator_init+0x110>)
	d_len = 0;
 8003860:	700d      	strb	r5, [r1, #0]
	error_times = 0;
 8003862:	7015      	strb	r5, [r2, #0]
    flags.ds_twr_timeout = 1;
 8003864:	81e3      	strh	r3, [r4, #14]
    HMISends("page ranginginit\xff\xff\xff");
 8003866:	f000 fd9d 	bl	80043a4 <HMISends>
    
    return 0;
 800386a:	4628      	mov	r0, r5
}
 800386c:	bd38      	pop	{r3, r4, r5, pc}
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 800386e:	481a      	ldr	r0, [pc, #104]	@ (80038d8 <ds_twr_initiator_init+0x114>)
            flags.option_timeout = 0;
 8003870:	8223      	strh	r3, [r4, #16]
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8003872:	f000 fd97 	bl	80043a4 <HMISends>
        Sleep(1000); 
 8003876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800387a:	f002 fa3b 	bl	8005cf4 <Sleep>
        HMISends("page menu\xff\xff\xff");
 800387e:	4817      	ldr	r0, [pc, #92]	@ (80038dc <ds_twr_initiator_init+0x118>)
 8003880:	f000 fd90 	bl	80043a4 <HMISends>
            return 1;
 8003884:	2001      	movs	r0, #1
}
 8003886:	bd38      	pop	{r3, r4, r5, pc}
        dwt_settxantennadelay(TX_ANT_DLY_HP);
 8003888:	f244 001a 	movw	r0, #16410	@ 0x401a
 800388c:	f7fe ff70 	bl	8002770 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
 8003890:	f244 001a 	movw	r0, #16410	@ 0x401a
 8003894:	f7fe ff52 	bl	800273c <dwt_setrxantennadelay>
    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 8003898:	7f2b      	ldrb	r3, [r5, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0c7      	beq.n	800382e <ds_twr_initiator_init+0x6a>
        dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_850K);
 800389e:	203c      	movs	r0, #60	@ 0x3c
 80038a0:	f7ff fa52 	bl	8002d48 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_850K);
 80038a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80038a8:	f7ff fd60 	bl	800336c <dwt_setrxtimeout>
        dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7ff fd99 	bl	80033e4 <dwt_setpreambledetecttimeout>
 80038b2:	e7c7      	b.n	8003844 <ds_twr_initiator_init+0x80>
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 80038b4:	480a      	ldr	r0, [pc, #40]	@ (80038e0 <ds_twr_initiator_init+0x11c>)
 80038b6:	e7dc      	b.n	8003872 <ds_twr_initiator_init+0xae>
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 80038b8:	480a      	ldr	r0, [pc, #40]	@ (80038e4 <ds_twr_initiator_init+0x120>)
 80038ba:	e7da      	b.n	8003872 <ds_twr_initiator_init+0xae>
 80038bc:	200006b0 	.word	0x200006b0
 80038c0:	20000004 	.word	0x20000004
 80038c4:	20000048 	.word	0x20000048
 80038c8:	20000194 	.word	0x20000194
 80038cc:	20000370 	.word	0x20000370
 80038d0:	2000030c 	.word	0x2000030c
 80038d4:	080093e4 	.word	0x080093e4
 80038d8:	0800936c 	.word	0x0800936c
 80038dc:	08009240 	.word	0x08009240
 80038e0:	08009394 	.word	0x08009394
 80038e4:	080093bc 	.word	0x080093bc

080038e8 <ds_twr_initiator>:
 * @param  none
 *
 * @return none
 */
void ds_twr_initiator(void) 
{
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int rets;
	/* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80038ec:	4db6      	ldr	r5, [pc, #728]	@ (8003bc8 <ds_twr_initiator+0x2e0>)
 80038ee:	49b7      	ldr	r1, [pc, #732]	@ (8003bcc <ds_twr_initiator+0x2e4>)
 80038f0:	782b      	ldrb	r3, [r5, #0]
{
 80038f2:	b08d      	sub	sp, #52	@ 0x34
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 80038f4:	2200      	movs	r2, #0
 80038f6:	200a      	movs	r0, #10
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80038f8:	708b      	strb	r3, [r1, #2]
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 80038fa:	f7fe ff53 	bl	80027a4 <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_poll_msg)+FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */
 80038fe:	200c      	movs	r0, #12
 8003900:	2201      	movs	r2, #1
 8003902:	2100      	movs	r1, #0
 8003904:	f7fe ffaa 	bl	800285c <dwt_writetxfctrl>
		   
	/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
	 * set by dwt_setrxaftertxdelay() has elapsed. */
	rets = dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8003908:	2002      	movs	r0, #2
 800390a:	f7ff fb6d 	bl	8002fe8 <dwt_starttx>
	if(rets != DWT_SUCCESS)
 800390e:	2800      	cmp	r0, #0
 8003910:	f040 8136 	bne.w	8003b80 <ds_twr_initiator+0x298>
		flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
		flags.time_to_allow_run = 1;
		return;
	}
	/* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */        
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003914:	4cae      	ldr	r4, [pc, #696]	@ (8003bd0 <ds_twr_initiator+0x2e8>)
 8003916:	2100      	movs	r1, #0
 8003918:	2044      	movs	r0, #68	@ 0x44
 800391a:	f7fd fe4b 	bl	80015b4 <dwt_read32bitoffsetreg>
 800391e:	4220      	tst	r0, r4
 8003920:	d0f9      	beq.n	8003916 <ds_twr_initiator+0x2e>
	{ };
	/* Increment frame sequence number after transmission of the poll message (modulo 256). */
	frame_seq_nb++;
 8003922:	782b      	ldrb	r3, [r5, #0]

	if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003924:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
	frame_seq_nb++;
 8003928:	f103 0301 	add.w	r3, r3, #1
 800392c:	702b      	strb	r3, [r5, #0]
	if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 800392e:	d114      	bne.n	800395a <ds_twr_initiator+0x72>
		}
	}
	else
	{
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXFRS_BIT_MASK);
 8003930:	2044      	movs	r0, #68	@ 0x44
 8003932:	4aa8      	ldr	r2, [pc, #672]	@ (8003bd4 <ds_twr_initiator+0x2ec>)
 8003934:	f7fd fea8 	bl	8001688 <dwt_write32bitoffsetreg>
	}
	
	/* Data is sent to the HMI display due to a long period of time without updating the ranging data */
	if(flags.ds_twr_timeout > 3000)
 8003938:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800393c:	4ca6      	ldr	r4, [pc, #664]	@ (8003bd8 <ds_twr_initiator+0x2f0>)
 800393e:	89e2      	ldrh	r2, [r4, #14]
 8003940:	429a      	cmp	r2, r3
 8003942:	d904      	bls.n	800394e <ds_twr_initiator+0x66>
	{
		flags.ds_twr_timeout = 1;
 8003944:	2301      	movs	r3, #1
		HMISends("ranginginit.t1.txt=\"???\"\xff\xff\xff");
 8003946:	48a5      	ldr	r0, [pc, #660]	@ (8003bdc <ds_twr_initiator+0x2f4>)
		flags.ds_twr_timeout = 1;
 8003948:	81e3      	strh	r3, [r4, #14]
		HMISends("ranginginit.t1.txt=\"???\"\xff\xff\xff");
 800394a:	f000 fd2b 	bl	80043a4 <HMISends>
		flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
 800394e:	4ba4      	ldr	r3, [pc, #656]	@ (8003be0 <ds_twr_initiator+0x2f8>)
 8003950:	f8c4 300a 	str.w	r3, [r4, #10]
	}

	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
    flags.time_to_allow_run = 1;
}
 8003954:	b00d      	add	sp, #52	@ 0x34
 8003956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);
 800395a:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 800395e:	2100      	movs	r1, #0
 8003960:	2044      	movs	r0, #68	@ 0x44
 8003962:	f7fd fe91 	bl	8001688 <dwt_write32bitoffsetreg>
		frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8003966:	2100      	movs	r1, #0
 8003968:	204c      	movs	r0, #76	@ 0x4c
 800396a:	f7fd fe23 	bl	80015b4 <dwt_read32bitoffsetreg>
 800396e:	f3c0 0109 	ubfx	r1, r0, #0, #10
		if (frame_len <= RX_BUF_LEN)
 8003972:	2914      	cmp	r1, #20
 8003974:	f240 811a 	bls.w	8003bac <ds_twr_initiator+0x2c4>
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	489a      	ldr	r0, [pc, #616]	@ (8003be4 <ds_twr_initiator+0x2fc>)
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 800397c:	220a      	movs	r2, #10
 800397e:	499a      	ldr	r1, [pc, #616]	@ (8003be8 <ds_twr_initiator+0x300>)
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003980:	7083      	strb	r3, [r0, #2]
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8003982:	f004 fc08 	bl	8008196 <memcmp>
 8003986:	2800      	cmp	r0, #0
 8003988:	d1d6      	bne.n	8003938 <ds_twr_initiator+0x50>
			poll_tx_ts = get_tx_timestamp_u64();
 800398a:	f001 fdd9 	bl	8005540 <get_tx_timestamp_u64>
 800398e:	4f97      	ldr	r7, [pc, #604]	@ (8003bec <ds_twr_initiator+0x304>)
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 8003990:	f8df 825c 	ldr.w	r8, [pc, #604]	@ 8003bf0 <ds_twr_initiator+0x308>
			poll_tx_ts = get_tx_timestamp_u64();
 8003994:	e9c7 0100 	strd	r0, r1, [r7]
			resp_rx_ts = get_rx_timestamp_u64();
 8003998:	f001 fdee 	bl	8005578 <get_rx_timestamp_u64>
 800399c:	4e95      	ldr	r6, [pc, #596]	@ (8003bf4 <ds_twr_initiator+0x30c>)
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 800399e:	f898 301c 	ldrb.w	r3, [r8, #28]
			resp_rx_ts = get_rx_timestamp_u64();
 80039a2:	e9c6 0100 	strd	r0, r1, [r6]
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 81c3 	bne.w	8003d32 <ds_twr_initiator+0x44a>
				final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 80039ac:	4c92      	ldr	r4, [pc, #584]	@ (8003bf8 <ds_twr_initiator+0x310>)
 80039ae:	1904      	adds	r4, r0, r4
 80039b0:	f141 0100 	adc.w	r1, r1, #0
 80039b4:	0a24      	lsrs	r4, r4, #8
 80039b6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
			dwt_setdelayedtrxtime(final_tx_time);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fafa 	bl	8002fb4 <dwt_setdelayedtrxtime>
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80039c0:	0223      	lsls	r3, r4, #8
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 80039c2:	f898 201f 	ldrb.w	r2, [r8, #31]
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80039c6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	0e24      	lsrs	r4, r4, #24
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	f040 81a8 	bne.w	8003d26 <ds_twr_initiator+0x43e>
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80039d6:	f244 021a 	movw	r2, #16410	@ 0x401a
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f144 0400 	adc.w	r4, r4, #0
 80039e0:	f8df 8218 	ldr.w	r8, [pc, #536]	@ 8003bfc <ds_twr_initiator+0x314>
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 80039e4:	4886      	ldr	r0, [pc, #536]	@ (8003c00 <ds_twr_initiator+0x318>)
 80039e6:	e9c8 3400 	strd	r3, r4, [r8]
 80039ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ee:	f001 fdf1 	bl	80055d4 <final_msg_set_ts>
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 80039f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039f6:	4883      	ldr	r0, [pc, #524]	@ (8003c04 <ds_twr_initiator+0x31c>)
 80039f8:	f001 fdec 	bl	80055d4 <final_msg_set_ts>
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 80039fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003a00:	4881      	ldr	r0, [pc, #516]	@ (8003c08 <ds_twr_initiator+0x320>)
 8003a02:	f001 fde7 	bl	80055d4 <final_msg_set_ts>
			tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003a06:	4981      	ldr	r1, [pc, #516]	@ (8003c0c <ds_twr_initiator+0x324>)
 8003a08:	782b      	ldrb	r3, [r5, #0]
			dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2016      	movs	r0, #22
			tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003a0e:	708b      	strb	r3, [r1, #2]
			dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8003a10:	f7fe fec8 	bl	80027a4 <dwt_writetxdata>
			dwt_writetxfctrl(sizeof(tx_final_msg)+FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */                
 8003a14:	2018      	movs	r0, #24
 8003a16:	2201      	movs	r2, #1
 8003a18:	2100      	movs	r1, #0
 8003a1a:	f7fe ff1f 	bl	800285c <dwt_writetxfctrl>
			ret = dwt_starttx(DWT_START_TX_DELAYED);
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f7ff fae2 	bl	8002fe8 <dwt_starttx>
			if (ret == DWT_SUCCESS)
 8003a24:	2800      	cmp	r0, #0
 8003a26:	f000 80b2 	beq.w	8003b8e <ds_twr_initiator+0x2a6>
			clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1<<26);
 8003a2a:	f7ff f809 	bl	8002a40 <dwt_readclockoffset>
 8003a2e:	f7fd f8a7 	bl	8000b80 <__aeabi_i2f>
 8003a32:	f04f 514a 	mov.w	r1, #847249408	@ 0x32800000
 8003a36:	f7fd f8f7 	bl	8000c28 <__aeabi_fmul>
			resp_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_rx_ts);
 8003a3a:	a90a      	add	r1, sp, #40	@ 0x28
			clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1<<26);
 8003a3c:	4681      	mov	r9, r0
			resp_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_rx_ts);
 8003a3e:	4874      	ldr	r0, [pc, #464]	@ (8003c10 <ds_twr_initiator+0x328>)
 8003a40:	f001 fd6c 	bl	800551c <resp_msg_get_ts>
			resp_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_tx_ts);
 8003a44:	a90b      	add	r1, sp, #44	@ 0x2c
 8003a46:	4873      	ldr	r0, [pc, #460]	@ (8003c14 <ds_twr_initiator+0x32c>)
 8003a48:	f001 fd68 	bl	800551c <resp_msg_get_ts>
			rtd_init = resp_rx_ts - poll_tx_ts;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6830      	ldr	r0, [r6, #0]
			if(d_len < 10)
 8003a50:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8003c18 <ds_twr_initiator+0x330>
			tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 8003a54:	1ac0      	subs	r0, r0, r3
 8003a56:	f7fd f893 	bl	8000b80 <__aeabi_i2f>
 8003a5a:	4604      	mov	r4, r0
			rtd_resp = resp_tx_ts - poll_rx_ts;
 8003a5c:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	@ 0x28
			tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	f7fd f88d 	bl	8000b80 <__aeabi_i2f>
 8003a66:	4649      	mov	r1, r9
 8003a68:	4605      	mov	r5, r0
 8003a6a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003a6e:	f7fc ffd1 	bl	8000a14 <__aeabi_fsub>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fd f8d7 	bl	8000c28 <__aeabi_fmul>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fc ffc9 	bl	8000a14 <__aeabi_fsub>
 8003a82:	f7fc fcd1 	bl	8000428 <__aeabi_f2d>
 8003a86:	2200      	movs	r2, #0
 8003a88:	4b64      	ldr	r3, [pc, #400]	@ (8003c1c <ds_twr_initiator+0x334>)
 8003a8a:	f7fc fd25 	bl	80004d8 <__aeabi_dmul>
 8003a8e:	a34a      	add	r3, pc, #296	@ (adr r3, 8003bb8 <ds_twr_initiator+0x2d0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fd20 	bl	80004d8 <__aeabi_dmul>
			distance = tof * SPEED_OF_LIGHT;
 8003a98:	a349      	add	r3, pc, #292	@ (adr r3, 8003bc0 <ds_twr_initiator+0x2d8>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fd1b 	bl	80004d8 <__aeabi_dmul>
			if(d_len < 10)
 8003aa2:	f898 7000 	ldrb.w	r7, [r8]
			distance = tof * SPEED_OF_LIGHT;
 8003aa6:	4604      	mov	r4, r0
			if(d_len < 10)
 8003aa8:	2f09      	cmp	r7, #9
			distance = tof * SPEED_OF_LIGHT;
 8003aaa:	460d      	mov	r5, r1
			if(d_len < 10)
 8003aac:	f200 80be 	bhi.w	8003c2c <ds_twr_initiator+0x344>
				distances[d_len] = distance;
 8003ab0:	4e5b      	ldr	r6, [pc, #364]	@ (8003c20 <ds_twr_initiator+0x338>)
				d_len++;
 8003ab2:	1c7b      	adds	r3, r7, #1
				distances[d_len] = distance;
 8003ab4:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
 8003ab8:	e9c7 4500 	strd	r4, r5, [r7]
				d_len++;
 8003abc:	b2dc      	uxtb	r4, r3
					distances_sum += distances[i];
 8003abe:	2200      	movs	r2, #0
 8003ac0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003ac4:	2300      	movs	r3, #0
				d_len++;
 8003ac6:	f888 4000 	strb.w	r4, [r8]
					distances_sum += distances[i];
 8003aca:	f7fc fb4f 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003ace:	2c01      	cmp	r4, #1
					distances_sum += distances[i];
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003ad4:	d045      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003ad6:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8003ada:	f7fc fb47 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003ade:	2c02      	cmp	r4, #2
					distances_sum += distances[i];
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003ae4:	d03d      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003ae6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8003aea:	f7fc fb3f 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003aee:	2c03      	cmp	r4, #3
					distances_sum += distances[i];
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003af4:	d035      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003af6:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8003afa:	f7fc fb37 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003afe:	2c04      	cmp	r4, #4
					distances_sum += distances[i];
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b04:	d02d      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b06:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8003b0a:	f7fc fb2f 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003b0e:	2c05      	cmp	r4, #5
					distances_sum += distances[i];
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b14:	d025      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b16:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	@ 0x28
 8003b1a:	f7fc fb27 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003b1e:	2c06      	cmp	r4, #6
					distances_sum += distances[i];
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b24:	d01d      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b26:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	@ 0x30
 8003b2a:	f7fc fb1f 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003b2e:	2c07      	cmp	r4, #7
					distances_sum += distances[i];
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b34:	d015      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b36:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	@ 0x38
 8003b3a:	f7fc fb17 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003b3e:	2c08      	cmp	r4, #8
					distances_sum += distances[i];
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b44:	d00d      	beq.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b46:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	@ 0x40
 8003b4a:	f7fc fb0f 	bl	800016c <__adddf3>
				for(int i = 0; i < d_len; i++)
 8003b4e:	2c0a      	cmp	r4, #10
					distances_sum += distances[i];
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b54:	d105      	bne.n	8003b62 <ds_twr_initiator+0x27a>
					distances_sum += distances[i];
 8003b56:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	@ 0x48
 8003b5a:	f7fc fb07 	bl	800016c <__adddf3>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
				for(int i = 0; i < d_len; i++)
 8003b62:	4930      	ldr	r1, [pc, #192]	@ (8003c24 <ds_twr_initiator+0x33c>)
 8003b64:	e9c1 2300 	strd	r2, r3, [r1]
			HMISends(dist_str);
 8003b68:	482f      	ldr	r0, [pc, #188]	@ (8003c28 <ds_twr_initiator+0x340>)
 8003b6a:	f000 fc1b 	bl	80043a4 <HMISends>
			flags.ds_twr_timeout = 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4c19      	ldr	r4, [pc, #100]	@ (8003bd8 <ds_twr_initiator+0x2f0>)
 8003b72:	81e3      	strh	r3, [r4, #14]
		flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <ds_twr_initiator+0x2f8>)
 8003b76:	f8c4 300a 	str.w	r3, [r4, #10]
}
 8003b7a:	b00d      	add	sp, #52	@ 0x34
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b80:	4c15      	ldr	r4, [pc, #84]	@ (8003bd8 <ds_twr_initiator+0x2f0>)
		flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <ds_twr_initiator+0x2f8>)
 8003b84:	f8c4 300a 	str.w	r3, [r4, #10]
}
 8003b88:	b00d      	add	sp, #52	@ 0x34
 8003b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8003b8e:	2100      	movs	r1, #0
 8003b90:	2044      	movs	r0, #68	@ 0x44
 8003b92:	f7fd fd0f 	bl	80015b4 <dwt_read32bitoffsetreg>
 8003b96:	0603      	lsls	r3, r0, #24
 8003b98:	d5f9      	bpl.n	8003b8e <ds_twr_initiator+0x2a6>
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2044      	movs	r0, #68	@ 0x44
 8003ba0:	f7fd fd72 	bl	8001688 <dwt_write32bitoffsetreg>
				frame_seq_nb++;
 8003ba4:	782b      	ldrb	r3, [r5, #0]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	702b      	strb	r3, [r5, #0]
 8003baa:	e73e      	b.n	8003a2a <ds_twr_initiator+0x142>
			dwt_readrxdata(rx_buffer, frame_len, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	480d      	ldr	r0, [pc, #52]	@ (8003be4 <ds_twr_initiator+0x2fc>)
 8003bb0:	f7fe febe 	bl	8002930 <dwt_readrxdata>
 8003bb4:	e6e0      	b.n	8003978 <ds_twr_initiator+0x90>
 8003bb6:	bf00      	nop
 8003bb8:	3bce48fa 	.word	0x3bce48fa
 8003bbc:	3db13518 	.word	0x3db13518
 8003bc0:	13000000 	.word	0x13000000
 8003bc4:	41b1dd19 	.word	0x41b1dd19
 8003bc8:	200003f4 	.word	0x200003f4
 8003bcc:	2000003c 	.word	0x2000003c
 8003bd0:	2427d000 	.word	0x2427d000
 8003bd4:	24279080 	.word	0x24279080
 8003bd8:	200006b0 	.word	0x200006b0
 8003bdc:	080093f8 	.word	0x080093f8
 8003be0:	00010064 	.word	0x00010064
 8003be4:	200003e0 	.word	0x200003e0
 8003be8:	20000028 	.word	0x20000028
 8003bec:	200003d8 	.word	0x200003d8
 8003bf0:	20000194 	.word	0x20000194
 8003bf4:	200003d0 	.word	0x200003d0
 8003bf8:	02aa8118 	.word	0x02aa8118
 8003bfc:	200003c8 	.word	0x200003c8
 8003c00:	2000001a 	.word	0x2000001a
 8003c04:	2000001e 	.word	0x2000001e
 8003c08:	20000022 	.word	0x20000022
 8003c0c:	20000010 	.word	0x20000010
 8003c10:	200003ea 	.word	0x200003ea
 8003c14:	200003ee 	.word	0x200003ee
 8003c18:	20000370 	.word	0x20000370
 8003c1c:	3fe00000 	.word	0x3fe00000
 8003c20:	20000378 	.word	0x20000378
 8003c24:	20000318 	.word	0x20000318
 8003c28:	200001bc 	.word	0x200001bc
				if(fabs(distance-last_distance) < MAX_DISTANCE_ERROR)
 8003c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <ds_twr_initiator+0x470>)
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f7fc fa99 	bl	8000168 <__aeabi_dsub>
 8003c36:	2200      	movs	r2, #0
 8003c38:	4b48      	ldr	r3, [pc, #288]	@ (8003d5c <ds_twr_initiator+0x474>)
 8003c3a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003c3e:	f7fc febd 	bl	80009bc <__aeabi_dcmplt>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d07d      	beq.n	8003d42 <ds_twr_initiator+0x45a>
					error_times = 0;
 8003c46:	2100      	movs	r1, #0
						new_distances[i] = distances[i+1];
 8003c48:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8003d60 <ds_twr_initiator+0x478>
 8003c4c:	4e45      	ldr	r6, [pc, #276]	@ (8003d64 <ds_twr_initiator+0x47c>)
					error_times = 0;
 8003c4e:	4b46      	ldr	r3, [pc, #280]	@ (8003d68 <ds_twr_initiator+0x480>)
						new_distances[i] = distances[i+1];
 8003c50:	1e7a      	subs	r2, r7, #1
					error_times = 0;
 8003c52:	7019      	strb	r1, [r3, #0]
						new_distances[i] = distances[i+1];
 8003c54:	4650      	mov	r0, sl
 8003c56:	4631      	mov	r1, r6
 8003c58:	00d2      	lsls	r2, r2, #3
 8003c5a:	f004 fb28 	bl	80082ae <memcpy>
						distances_sum += new_distances[i];
 8003c5e:	e9da 8902 	ldrd	r8, r9, [sl, #8]
 8003c62:	e9da bc06 	ldrd	fp, ip, [sl, #24]
 8003c66:	e9da 0100 	ldrd	r0, r1, [sl]
						distances[i] = new_distances[i];
 8003c6a:	46b6      	mov	lr, r6
 8003c6c:	e86e 8902 	strd	r8, r9, [lr], #-8
						distances_sum += new_distances[i];
 8003c70:	2200      	movs	r2, #0
						distances[i] = new_distances[i];
 8003c72:	e9ce bc06 	strd	fp, ip, [lr, #24]
 8003c76:	e9ce 4512 	strd	r4, r5, [lr, #72]	@ 0x48
						distances_sum += new_distances[i];
 8003c7a:	2300      	movs	r3, #0
					new_distances[d_len-1] = distance;
 8003c7c:	e9ca 4512 	strd	r4, r5, [sl, #72]	@ 0x48
						distances[i] = new_distances[i];
 8003c80:	e946 0102 	strd	r0, r1, [r6, #-8]
						distances_sum += new_distances[i];
 8003c84:	e9da 6704 	ldrd	r6, r7, [sl, #16]
						distances[i] = new_distances[i];
 8003c88:	e9cd bc00 	strd	fp, ip, [sp]
						distances_sum += new_distances[i];
 8003c8c:	e9da bc08 	ldrd	fp, ip, [sl, #32]
						distances[i] = new_distances[i];
 8003c90:	e9ce 6704 	strd	r6, r7, [lr, #16]
 8003c94:	e9ce bc08 	strd	fp, ip, [lr, #32]
 8003c98:	e9cd bc02 	strd	fp, ip, [sp, #8]
						distances_sum += new_distances[i];
 8003c9c:	e9da bc0a 	ldrd	fp, ip, [sl, #40]	@ 0x28
						distances[i] = new_distances[i];
 8003ca0:	e9ce bc0a 	strd	fp, ip, [lr, #40]	@ 0x28
 8003ca4:	e9cd bc04 	strd	fp, ip, [sp, #16]
						distances_sum += new_distances[i];
 8003ca8:	e9da bc0c 	ldrd	fp, ip, [sl, #48]	@ 0x30
						distances[i] = new_distances[i];
 8003cac:	e9ce bc0c 	strd	fp, ip, [lr, #48]	@ 0x30
 8003cb0:	e9cd bc06 	strd	fp, ip, [sp, #24]
						distances_sum += new_distances[i];
 8003cb4:	e9da bc0e 	ldrd	fp, ip, [sl, #56]	@ 0x38
						distances[i] = new_distances[i];
 8003cb8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003cbc:	e9ce bc0e 	strd	fp, ip, [lr, #56]	@ 0x38
						distances_sum += new_distances[i];
 8003cc0:	f10a 0b40 	add.w	fp, sl, #64	@ 0x40
 8003cc4:	e9db ab00 	ldrd	sl, fp, [fp]
						distances[i] = new_distances[i];
 8003cc8:	e9ce ab10 	strd	sl, fp, [lr, #64]	@ 0x40
						distances_sum += new_distances[i];
 8003ccc:	f7fc fa4e 	bl	800016c <__adddf3>
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	f7fc fa4a 	bl	800016c <__adddf3>
 8003cd8:	4632      	mov	r2, r6
 8003cda:	463b      	mov	r3, r7
 8003cdc:	f7fc fa46 	bl	800016c <__adddf3>
 8003ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ce4:	f7fc fa42 	bl	800016c <__adddf3>
 8003ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cec:	f7fc fa3e 	bl	800016c <__adddf3>
 8003cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf4:	f7fc fa3a 	bl	800016c <__adddf3>
 8003cf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cfc:	f7fc fa36 	bl	800016c <__adddf3>
 8003d00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d04:	f7fc fa32 	bl	800016c <__adddf3>
 8003d08:	4652      	mov	r2, sl
 8003d0a:	465b      	mov	r3, fp
 8003d0c:	f7fc fa2e 	bl	800016c <__adddf3>
 8003d10:	462b      	mov	r3, r5
 8003d12:	4622      	mov	r2, r4
 8003d14:	f7fc fa2a 	bl	800016c <__adddf3>
					last_distance = distance;
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <ds_twr_initiator+0x470>)
 8003d1a:	e9c3 4500 	strd	r4, r5, [r3]
 8003d1e:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <ds_twr_initiator+0x484>)
 8003d20:	e9c3 0100 	strd	r0, r1, [r3]
					distance = distances_sum / (double)d_len;
 8003d24:	e720      	b.n	8003b68 <ds_twr_initiator+0x280>
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_LP;
 8003d26:	f643 72f2 	movw	r2, #16370	@ 0x3ff2
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	f144 0400 	adc.w	r4, r4, #0
 8003d30:	e656      	b.n	80039e0 <ds_twr_initiator+0xf8>
				final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS_850K * UUS_TO_DWT_TIME)) >> 8;
 8003d32:	4c0f      	ldr	r4, [pc, #60]	@ (8003d70 <ds_twr_initiator+0x488>)
 8003d34:	1904      	adds	r4, r0, r4
 8003d36:	f141 0100 	adc.w	r1, r1, #0
 8003d3a:	0a24      	lsrs	r4, r4, #8
 8003d3c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8003d40:	e63b      	b.n	80039ba <ds_twr_initiator+0xd2>
					error_times++;
 8003d42:	4a09      	ldr	r2, [pc, #36]	@ (8003d68 <ds_twr_initiator+0x480>)
 8003d44:	7813      	ldrb	r3, [r2, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	b2db      	uxtb	r3, r3
					if(error_times > 20)
 8003d4a:	2b14      	cmp	r3, #20
					error_times++;
 8003d4c:	bf92      	itee	ls
 8003d4e:	7013      	strbls	r3, [r2, #0]
						error_times = 0;
 8003d50:	7010      	strbhi	r0, [r2, #0]
						d_len = 0;
 8003d52:	f888 0000 	strbhi.w	r0, [r8]
 8003d56:	e707      	b.n	8003b68 <ds_twr_initiator+0x280>
 8003d58:	20000310 	.word	0x20000310
 8003d5c:	40340000 	.word	0x40340000
 8003d60:	20000320 	.word	0x20000320
 8003d64:	20000380 	.word	0x20000380
 8003d68:	2000030c 	.word	0x2000030c
 8003d6c:	20000318 	.word	0x20000318
 8003d70:	05b68258 	.word	0x05b68258

08003d74 <ds_twr_responder_init>:
};
extern dwt_txconfig_t txconfig_options_ch9;


uint8_t ds_twr_responder_init(void)
{
 8003d74:	b538      	push	{r3, r4, r5, lr}
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8003d76:	f001 ffd1 	bl	8005d1c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f001 ffba 	bl	8005cf4 <Sleep>

    flags.option_timeout = 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	4c2c      	ldr	r4, [pc, #176]	@ (8003e34 <ds_twr_responder_init+0xc0>)
 8003d84:	8223      	strh	r3, [r4, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003d86:	e003      	b.n	8003d90 <ds_twr_responder_init+0x1c>
    { 
        if(flags.option_timeout > 300)
 8003d88:	8a22      	ldrh	r2, [r4, #16]
 8003d8a:	f5b2 7f96 	cmp.w	r2, #300	@ 0x12c
 8003d8e:	d837      	bhi.n	8003e00 <ds_twr_responder_init+0x8c>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003d90:	f7ff f842 	bl	8002e18 <dwt_checkidlerc>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d0f6      	beq.n	8003d88 <ds_twr_responder_init+0x14>
            HMISends("page menu\xff\xff\xff"); 
            return 1;
        }
    };

    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fd fca6 	bl	80016ec <dwt_initialise>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d043      	beq.n	8003e2c <ds_twr_responder_init+0xb8>
        Sleep(1000); 
        HMISends("page menu\xff\xff\xff");
        return 1;
    }    
    
    dwt_structs_init(DS_TWR_RESPINDER, &config, &Config_options);
 8003da4:	2006      	movs	r0, #6
 8003da6:	4a24      	ldr	r2, [pc, #144]	@ (8003e38 <ds_twr_responder_init+0xc4>)
 8003da8:	4924      	ldr	r1, [pc, #144]	@ (8003e3c <ds_twr_responder_init+0xc8>)
 8003daa:	f7fd fa6b 	bl	8001284 <dwt_structs_init>
    
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8003dae:	4823      	ldr	r0, [pc, #140]	@ (8003e3c <ds_twr_responder_init+0xc8>)
 8003db0:	f7fe f8bc 	bl	8001f2c <dwt_configure>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d13b      	bne.n	8003e30 <ds_twr_responder_init+0xbc>
        Sleep(1000);
        HMISends("page menu\xff\xff\xff");
        return 1;
    }

    dwt_configuretxrf(&Config_options);
 8003db8:	481f      	ldr	r0, [pc, #124]	@ (8003e38 <ds_twr_responder_init+0xc4>)
 8003dba:	f7ff fc95 	bl	80036e8 <dwt_configuretxrf>
    
	/* Set the antenna delay. Modify the parameters to adjust the distance error */
    if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <ds_twr_responder_init+0xcc>)
 8003dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dc4:	b34b      	cbz	r3, 8003e1a <ds_twr_responder_init+0xa6>
        dwt_settxantennadelay(TX_ANT_DLY_HP);
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
    }
    else
    {
        dwt_settxantennadelay(TX_ANT_DLY_LP);
 8003dc6:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8003dca:	f7fe fcd1 	bl	8002770 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_LP);
 8003dce:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8003dd2:	f7fe fcb3 	bl	800273c <dwt_setrxantennadelay>
    }
	
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 8003dd6:	2007      	movs	r0, #7
 8003dd8:	f7fd fd94 	bl	8001904 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fd fd61 	bl	80018a4 <dwt_setfinegraintxseq>
	
    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8003de2:	2003      	movs	r0, #3
 8003de4:	f7ff f85c 	bl	8002ea0 <dwt_setleds>
	d_len = 0;
 8003de8:	2500      	movs	r5, #0
	error_times = 0;
    flags.ds_twr_timeout = 1;
 8003dea:	2301      	movs	r3, #1
	d_len = 0;
 8003dec:	4915      	ldr	r1, [pc, #84]	@ (8003e44 <ds_twr_responder_init+0xd0>)
	error_times = 0;
 8003dee:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <ds_twr_responder_init+0xd4>)
    HMISends("page rangingresp\xff\xff\xff");
 8003df0:	4816      	ldr	r0, [pc, #88]	@ (8003e4c <ds_twr_responder_init+0xd8>)
	d_len = 0;
 8003df2:	700d      	strb	r5, [r1, #0]
	error_times = 0;
 8003df4:	7015      	strb	r5, [r2, #0]
    flags.ds_twr_timeout = 1;
 8003df6:	81e3      	strh	r3, [r4, #14]
    HMISends("page rangingresp\xff\xff\xff");
 8003df8:	f000 fad4 	bl	80043a4 <HMISends>
    return 0;
 8003dfc:	4628      	mov	r0, r5
}
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 8003e00:	4813      	ldr	r0, [pc, #76]	@ (8003e50 <ds_twr_responder_init+0xdc>)
            flags.option_timeout = 0;
 8003e02:	8223      	strh	r3, [r4, #16]
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8003e04:	f000 face 	bl	80043a4 <HMISends>
        Sleep(1000); 
 8003e08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e0c:	f001 ff72 	bl	8005cf4 <Sleep>
        HMISends("page menu\xff\xff\xff");
 8003e10:	4810      	ldr	r0, [pc, #64]	@ (8003e54 <ds_twr_responder_init+0xe0>)
 8003e12:	f000 fac7 	bl	80043a4 <HMISends>
            return 1;
 8003e16:	2001      	movs	r0, #1
}
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
        dwt_settxantennadelay(TX_ANT_DLY_HP);
 8003e1a:	f244 001a 	movw	r0, #16410	@ 0x401a
 8003e1e:	f7fe fca7 	bl	8002770 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
 8003e22:	f244 001a 	movw	r0, #16410	@ 0x401a
 8003e26:	f7fe fc89 	bl	800273c <dwt_setrxantennadelay>
 8003e2a:	e7d4      	b.n	8003dd6 <ds_twr_responder_init+0x62>
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8003e2c:	480a      	ldr	r0, [pc, #40]	@ (8003e58 <ds_twr_responder_init+0xe4>)
 8003e2e:	e7e9      	b.n	8003e04 <ds_twr_responder_init+0x90>
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 8003e30:	480a      	ldr	r0, [pc, #40]	@ (8003e5c <ds_twr_responder_init+0xe8>)
 8003e32:	e7e7      	b.n	8003e04 <ds_twr_responder_init+0x90>
 8003e34:	200006b0 	.word	0x200006b0
 8003e38:	20000058 	.word	0x20000058
 8003e3c:	2000009c 	.word	0x2000009c
 8003e40:	20000194 	.word	0x20000194
 8003e44:	20000458 	.word	0x20000458
 8003e48:	200003f5 	.word	0x200003f5
 8003e4c:	08009414 	.word	0x08009414
 8003e50:	0800936c 	.word	0x0800936c
 8003e54:	08009240 	.word	0x08009240
 8003e58:	08009394 	.word	0x08009394
 8003e5c:	080093bc 	.word	0x080093bc

08003e60 <ds_twr_responder>:
 * @param  none
 *
 * @return none
 */
void ds_twr_responder(void)
{
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Loop forever responding to ranging requests. */
	dwt_setpreambledetecttimeout(0);
 8003e64:	2000      	movs	r0, #0
{
 8003e66:	b08f      	sub	sp, #60	@ 0x3c
	dwt_setpreambledetecttimeout(0);
 8003e68:	f7ff fabc 	bl	80033e4 <dwt_setpreambledetecttimeout>
	
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7ff fa7d 	bl	800336c <dwt_setrxtimeout>
	
	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7ff f9e2 	bl	800323c <dwt_rxenable>
	/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003e78:	4d1d      	ldr	r5, [pc, #116]	@ (8003ef0 <ds_twr_responder+0x90>)
	{
		if(hmi_recv() == 1)
			return;
		if(flags.opt_1ms_flag == 10)
 8003e7a:	4c1e      	ldr	r4, [pc, #120]	@ (8003ef4 <ds_twr_responder+0x94>)
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2044      	movs	r0, #68	@ 0x44
 8003e80:	f7fd fb98 	bl	80015b4 <dwt_read32bitoffsetreg>
 8003e84:	ea10 0605 	ands.w	r6, r0, r5
 8003e88:	d11a      	bne.n	8003ec0 <ds_twr_responder+0x60>
		if(hmi_recv() == 1)
 8003e8a:	f7fd f899 	bl	8000fc0 <hmi_recv>
 8003e8e:	2801      	cmp	r0, #1
 8003e90:	d02b      	beq.n	8003eea <ds_twr_responder+0x8a>
		if(flags.opt_1ms_flag == 10)
 8003e92:	7823      	ldrb	r3, [r4, #0]
 8003e94:	2b0a      	cmp	r3, #10
 8003e96:	d00a      	beq.n	8003eae <ds_twr_responder+0x4e>
		{
			flags.opt_1ms_flag = 0;
			key_scan();
		}
		if(flags.ds_twr_timeout > 3000)
 8003e98:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003e9c:	89e2      	ldrh	r2, [r4, #14]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d9ec      	bls.n	8003e7c <ds_twr_responder+0x1c>
		{
			flags.ds_twr_timeout = 1;
 8003ea2:	2301      	movs	r3, #1
			HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003ea4:	4814      	ldr	r0, [pc, #80]	@ (8003ef8 <ds_twr_responder+0x98>)
			flags.ds_twr_timeout = 1;
 8003ea6:	81e3      	strh	r3, [r4, #14]
			HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003ea8:	f000 fa7c 	bl	80043a4 <HMISends>
 8003eac:	e7e6      	b.n	8003e7c <ds_twr_responder+0x1c>
			flags.opt_1ms_flag = 0;
 8003eae:	7026      	strb	r6, [r4, #0]
			key_scan();
 8003eb0:	f000 faae 	bl	8004410 <key_scan>
		if(flags.ds_twr_timeout > 3000)
 8003eb4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003eb8:	89e2      	ldrh	r2, [r4, #14]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d9de      	bls.n	8003e7c <ds_twr_responder+0x1c>
 8003ebe:	e7f0      	b.n	8003ea2 <ds_twr_responder+0x42>
		}
	};
	if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003ec0:	0442      	lsls	r2, r0, #17
 8003ec2:	d41f      	bmi.n	8003f04 <ds_twr_responder+0xa4>
				}
			}
			else
			{           
				/* Clear RX error/timeout events in the DW IC status register. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	2044      	movs	r0, #68	@ 0x44
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8003efc <ds_twr_responder+0x9c>)
 8003eca:	f7fd fbdd 	bl	8001688 <dwt_write32bitoffsetreg>
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
	}
	
	/* Data is sent to the HMI display due to a long period of time without updating the ranging data */
	if(flags.ds_twr_timeout > 3000)
 8003ece:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003ed2:	4c08      	ldr	r4, [pc, #32]	@ (8003ef4 <ds_twr_responder+0x94>)
 8003ed4:	89e2      	ldrh	r2, [r4, #14]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d904      	bls.n	8003ee4 <ds_twr_responder+0x84>
	{
		flags.ds_twr_timeout = 1;
 8003eda:	2301      	movs	r3, #1
		HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003edc:	4806      	ldr	r0, [pc, #24]	@ (8003ef8 <ds_twr_responder+0x98>)
		flags.ds_twr_timeout = 1;
 8003ede:	81e3      	strh	r3, [r4, #14]
		HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003ee0:	f000 fa60 	bl	80043a4 <HMISends>
				flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <ds_twr_responder+0xa0>)
 8003ee6:	f8c4 300a 	str.w	r3, [r4, #10]
	}

	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
    flags.time_to_allow_run = 1;
}
 8003eea:	b00f      	add	sp, #60	@ 0x3c
 8003eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef0:	2427d000 	.word	0x2427d000
 8003ef4:	200006b0 	.word	0x200006b0
 8003ef8:	08009428 	.word	0x08009428
 8003efc:	24279000 	.word	0x24279000
 8003f00:	0001005a 	.word	0x0001005a
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8003f04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2044      	movs	r0, #68	@ 0x44
 8003f0c:	f7fd fbbc 	bl	8001688 <dwt_write32bitoffsetreg>
		frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8003f10:	2100      	movs	r1, #0
 8003f12:	204c      	movs	r0, #76	@ 0x4c
 8003f14:	f7fd fb4e 	bl	80015b4 <dwt_read32bitoffsetreg>
 8003f18:	f3c0 0109 	ubfx	r1, r0, #0, #10
		if (frame_len <= RX_BUF_LEN)
 8003f1c:	2918      	cmp	r1, #24
 8003f1e:	f240 815d 	bls.w	80041dc <ds_twr_responder+0x37c>
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	4dc0      	ldr	r5, [pc, #768]	@ (8004228 <ds_twr_responder+0x3c8>)
		if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8003f26:	220a      	movs	r2, #10
 8003f28:	4628      	mov	r0, r5
 8003f2a:	49c0      	ldr	r1, [pc, #768]	@ (800422c <ds_twr_responder+0x3cc>)
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003f2c:	70ab      	strb	r3, [r5, #2]
		if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8003f2e:	f004 f932 	bl	8008196 <memcmp>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1cb      	bne.n	8003ece <ds_twr_responder+0x6e>
			poll_rx_ts = get_rx_timestamp_u64();
 8003f36:	f001 fb1f 	bl	8005578 <get_rx_timestamp_u64>
				resp_tx_time = (uint32_t)((poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS_850K) * UUS_TO_DWT_TIME)) >> 8);
 8003f3a:	4bbd      	ldr	r3, [pc, #756]	@ (8004230 <ds_twr_responder+0x3d0>)
			poll_rx_ts = get_rx_timestamp_u64();
 8003f3c:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 8004234 <ds_twr_responder+0x3d4>
				resp_tx_time = (uint32_t)((poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS_850K) * UUS_TO_DWT_TIME)) >> 8);
 8003f40:	18c3      	adds	r3, r0, r3
			poll_rx_ts = get_rx_timestamp_u64();
 8003f42:	e9ca 0100 	strd	r0, r1, [sl]
				resp_tx_time = (uint32_t)((poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS_850K) * UUS_TO_DWT_TIME)) >> 8);
 8003f46:	ea4f 2413 	mov.w	r4, r3, lsr #8
 8003f4a:	f141 0100 	adc.w	r1, r1, #0
 8003f4e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 8003f52:	4fb9      	ldr	r7, [pc, #740]	@ (8004238 <ds_twr_responder+0x3d8>)
			dwt_setdelayedtrxtime(resp_tx_time);
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff f82d 	bl	8002fb4 <dwt_setdelayedtrxtime>
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 8003f5a:	0223      	lsls	r3, r4, #8
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 8003f5c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 8003f60:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	0e24      	lsrs	r4, r4, #24
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	f000 813b 	beq.w	80041e6 <ds_twr_responder+0x386>
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_LP;
 8003f70:	f643 72f2 	movw	r2, #16370	@ 0x3ff2
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	f144 0400 	adc.w	r4, r4, #0
 8003f7a:	4eb0      	ldr	r6, [pc, #704]	@ (800423c <ds_twr_responder+0x3dc>)
			resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_rx_ts);
 8003f7c:	48b0      	ldr	r0, [pc, #704]	@ (8004240 <ds_twr_responder+0x3e0>)
 8003f7e:	e9c6 3400 	strd	r3, r4, [r6]
 8003f82:	e9da 2300 	ldrd	r2, r3, [sl]
 8003f86:	f001 fb27 	bl	80055d8 <resp_msg_set_ts>
			resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_tx_ts);
 8003f8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f8e:	48ad      	ldr	r0, [pc, #692]	@ (8004244 <ds_twr_responder+0x3e4>)
 8003f90:	f001 fb22 	bl	80055d8 <resp_msg_set_ts>
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].data_rate == RATE_6M8)
 8003f94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 812a 	bne.w	80041f2 <ds_twr_responder+0x392>
				dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS_6M8); 
 8003f9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fa2:	f7fe fed1 	bl	8002d48 <dwt_setrxaftertxdelay>
				dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS_6M8);                
 8003fa6:	20dc      	movs	r0, #220	@ 0xdc
 8003fa8:	f7ff f9e0 	bl	800336c <dwt_setrxtimeout>
				dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 8003fac:	2005      	movs	r0, #5
 8003fae:	f7ff fa19 	bl	80033e4 <dwt_setpreambledetecttimeout>
			tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003fb2:	4fa5      	ldr	r7, [pc, #660]	@ (8004248 <ds_twr_responder+0x3e8>)
 8003fb4:	49a5      	ldr	r1, [pc, #660]	@ (800424c <ds_twr_responder+0x3ec>)
 8003fb6:	783b      	ldrb	r3, [r7, #0]
			dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2014      	movs	r0, #20
			tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003fbc:	708b      	strb	r3, [r1, #2]
			dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8003fbe:	f7fe fbf1 	bl	80027a4 <dwt_writetxdata>
			dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2014      	movs	r0, #20
 8003fc8:	f7fe fc48 	bl	800285c <dwt_writetxfctrl>
			ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);//DWT_START_TX_DELAYED DWT_START_TX_IMMEDIATE
 8003fcc:	2003      	movs	r0, #3
 8003fce:	f7ff f80b 	bl	8002fe8 <dwt_starttx>
			if (ret == DWT_ERROR)
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	f000 8118 	beq.w	8004208 <ds_twr_responder+0x3a8>
			while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003fd8:	4c9d      	ldr	r4, [pc, #628]	@ (8004250 <ds_twr_responder+0x3f0>)
 8003fda:	2100      	movs	r1, #0
 8003fdc:	2044      	movs	r0, #68	@ 0x44
 8003fde:	f7fd fae9 	bl	80015b4 <dwt_read32bitoffsetreg>
 8003fe2:	4220      	tst	r0, r4
 8003fe4:	d0f9      	beq.n	8003fda <ds_twr_responder+0x17a>
			frame_seq_nb++;
 8003fe6:	783b      	ldrb	r3, [r7, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	703b      	strb	r3, [r7, #0]
			if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003fec:	0443      	lsls	r3, r0, #17
 8003fee:	f57f af69 	bpl.w	8003ec4 <ds_twr_responder+0x64>
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);
 8003ff2:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	2044      	movs	r0, #68	@ 0x44
 8003ffa:	f7fd fb45 	bl	8001688 <dwt_write32bitoffsetreg>
				frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8003ffe:	2100      	movs	r1, #0
 8004000:	204c      	movs	r0, #76	@ 0x4c
 8004002:	f7fd fad7 	bl	80015b4 <dwt_read32bitoffsetreg>
 8004006:	f3c0 0109 	ubfx	r1, r0, #0, #10
				if (frame_len <= RX_BUF_LEN)
 800400a:	2918      	cmp	r1, #24
 800400c:	f240 80fe 	bls.w	800420c <ds_twr_responder+0x3ac>
				rx_buffer[ALL_MSG_SN_IDX] = 0;
 8004010:	2300      	movs	r3, #0
				if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8004012:	220a      	movs	r2, #10
 8004014:	498f      	ldr	r1, [pc, #572]	@ (8004254 <ds_twr_responder+0x3f4>)
 8004016:	4884      	ldr	r0, [pc, #528]	@ (8004228 <ds_twr_responder+0x3c8>)
				rx_buffer[ALL_MSG_SN_IDX] = 0;
 8004018:	70ab      	strb	r3, [r5, #2]
				if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800401a:	f004 f8bc 	bl	8008196 <memcmp>
 800401e:	4680      	mov	r8, r0
 8004020:	2800      	cmp	r0, #0
 8004022:	f47f af54 	bne.w	8003ece <ds_twr_responder+0x6e>
					resp_tx_ts = get_tx_timestamp_u64();
 8004026:	f001 fa8b 	bl	8005540 <get_tx_timestamp_u64>
 800402a:	e9c6 0100 	strd	r0, r1, [r6]
					final_rx_ts = get_rx_timestamp_u64();
 800402e:	f001 faa3 	bl	8005578 <get_rx_timestamp_u64>
 8004032:	4d89      	ldr	r5, [pc, #548]	@ (8004258 <ds_twr_responder+0x3f8>)
					if(d_len < 10)
 8004034:	f8df 9224 	ldr.w	r9, [pc, #548]	@ 800425c <ds_twr_responder+0x3fc>
					final_rx_ts = get_rx_timestamp_u64();
 8004038:	e9c5 0100 	strd	r0, r1, [r5]
					final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 800403c:	4888      	ldr	r0, [pc, #544]	@ (8004260 <ds_twr_responder+0x400>)
 800403e:	a90b      	add	r1, sp, #44	@ 0x2c
 8004040:	f001 fab6 	bl	80055b0 <final_msg_get_ts>
					final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8004044:	4887      	ldr	r0, [pc, #540]	@ (8004264 <ds_twr_responder+0x404>)
 8004046:	a90c      	add	r1, sp, #48	@ 0x30
 8004048:	f001 fab2 	bl	80055b0 <final_msg_get_ts>
					final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 800404c:	4886      	ldr	r0, [pc, #536]	@ (8004268 <ds_twr_responder+0x408>)
 800404e:	a90d      	add	r1, sp, #52	@ 0x34
 8004050:	f001 faae 	bl	80055b0 <final_msg_get_ts>
					Ra = (double)(resp_rx_ts - poll_tx_ts);
 8004054:	e9dd 070b 	ldrd	r0, r7, [sp, #44]	@ 0x2c
 8004058:	1a38      	subs	r0, r7, r0
 800405a:	f7fc f9c3 	bl	80003e4 <__aeabi_ui2d>
 800405e:	4602      	mov	r2, r0
					resp_tx_ts_32 = (uint32_t)resp_tx_ts;
 8004060:	f8d6 b000 	ldr.w	fp, [r6]
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8004064:	6828      	ldr	r0, [r5, #0]
					Ra = (double)(resp_rx_ts - poll_tx_ts);
 8004066:	4614      	mov	r4, r2
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8004068:	eba0 000b 	sub.w	r0, r0, fp
					Ra = (double)(resp_rx_ts - poll_tx_ts);
 800406c:	460d      	mov	r5, r1
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800406e:	f7fc f9b9 	bl	80003e4 <__aeabi_ui2d>
 8004072:	4602      	mov	r2, r0
					Da = (double)(final_tx_ts - resp_rx_ts);
 8004074:	980d      	ldr	r0, [sp, #52]	@ 0x34
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8004076:	4616      	mov	r6, r2
					Da = (double)(final_tx_ts - resp_rx_ts);
 8004078:	1bc0      	subs	r0, r0, r7
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800407a:	460f      	mov	r7, r1
					Da = (double)(final_tx_ts - resp_rx_ts);
 800407c:	f7fc f9b2 	bl	80003e4 <__aeabi_ui2d>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
					Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8004084:	f8da 0000 	ldr.w	r0, [sl]
					Da = (double)(final_tx_ts - resp_rx_ts);
 8004088:	e9cd 2300 	strd	r2, r3, [sp]
					Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 800408c:	ebab 0000 	sub.w	r0, fp, r0
 8004090:	f7fc f9a8 	bl	80003e4 <__aeabi_ui2d>
					tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8004094:	463b      	mov	r3, r7
					Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8004096:	e9cd 0102 	strd	r0, r1, [sp, #8]
					tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 800409a:	4632      	mov	r2, r6
 800409c:	4620      	mov	r0, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	f7fc fa1a 	bl	80004d8 <__aeabi_dmul>
 80040a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040a8:	4682      	mov	sl, r0
 80040aa:	468b      	mov	fp, r1
 80040ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b0:	f7fc fa12 	bl	80004d8 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4650      	mov	r0, sl
 80040ba:	4659      	mov	r1, fp
 80040bc:	f7fc f854 	bl	8000168 <__aeabi_dsub>
 80040c0:	463b      	mov	r3, r7
 80040c2:	4682      	mov	sl, r0
 80040c4:	468b      	mov	fp, r1
 80040c6:	4632      	mov	r2, r6
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc f84e 	bl	800016c <__adddf3>
 80040d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040d4:	f7fc f84a 	bl	800016c <__adddf3>
 80040d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040dc:	f7fc f846 	bl	800016c <__adddf3>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4650      	mov	r0, sl
 80040e6:	4659      	mov	r1, fp
 80040e8:	f7fc fb20 	bl	800072c <__aeabi_ddiv>
 80040ec:	f7fc ff12 	bl	8000f14 <__aeabi_d2lz>
					tof = tof_dtu * DWT_TIME_UNITS;
 80040f0:	f7fc f9c4 	bl	800047c <__aeabi_l2d>
 80040f4:	a348      	add	r3, pc, #288	@ (adr r3, 8004218 <ds_twr_responder+0x3b8>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f7fc f9ed 	bl	80004d8 <__aeabi_dmul>
					distance = tof * SPEED_OF_LIGHT;
 80040fe:	a348      	add	r3, pc, #288	@ (adr r3, 8004220 <ds_twr_responder+0x3c0>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f7fc f9e8 	bl	80004d8 <__aeabi_dmul>
					if(d_len < 10)
 8004108:	f899 7000 	ldrb.w	r7, [r9]
					distance = tof * SPEED_OF_LIGHT;
 800410c:	4604      	mov	r4, r0
					if(d_len < 10)
 800410e:	2f09      	cmp	r7, #9
					distance = tof * SPEED_OF_LIGHT;
 8004110:	460d      	mov	r5, r1
					if(d_len < 10)
 8004112:	f200 80b3 	bhi.w	800427c <ds_twr_responder+0x41c>
						distances[d_len] = distance;
 8004116:	4e55      	ldr	r6, [pc, #340]	@ (800426c <ds_twr_responder+0x40c>)
						d_len++;
 8004118:	1c7b      	adds	r3, r7, #1
						distances[d_len] = distance;
 800411a:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
 800411e:	e9c7 4500 	strd	r4, r5, [r7]
						d_len++;
 8004122:	b2dc      	uxtb	r4, r3
							distances_sum += distances[i];
 8004124:	2200      	movs	r2, #0
 8004126:	e9d6 0100 	ldrd	r0, r1, [r6]
 800412a:	2300      	movs	r3, #0
						d_len++;
 800412c:	f889 4000 	strb.w	r4, [r9]
							distances_sum += distances[i];
 8004130:	f7fc f81c 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004134:	2c01      	cmp	r4, #1
							distances_sum += distances[i];
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800413a:	d045      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800413c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8004140:	f7fc f814 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004144:	2c02      	cmp	r4, #2
							distances_sum += distances[i];
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800414a:	d03d      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800414c:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8004150:	f7fc f80c 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004154:	2c03      	cmp	r4, #3
							distances_sum += distances[i];
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800415a:	d035      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800415c:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8004160:	f7fc f804 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004164:	2c04      	cmp	r4, #4
							distances_sum += distances[i];
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800416a:	d02d      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800416c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8004170:	f7fb fffc 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004174:	2c05      	cmp	r4, #5
							distances_sum += distances[i];
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800417a:	d025      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800417c:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	@ 0x28
 8004180:	f7fb fff4 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004184:	2c06      	cmp	r4, #6
							distances_sum += distances[i];
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800418a:	d01d      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800418c:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	@ 0x30
 8004190:	f7fb ffec 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 8004194:	2c07      	cmp	r4, #7
							distances_sum += distances[i];
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 800419a:	d015      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 800419c:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	@ 0x38
 80041a0:	f7fb ffe4 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 80041a4:	2c08      	cmp	r4, #8
							distances_sum += distances[i];
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 80041aa:	d00d      	beq.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 80041ac:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	@ 0x40
 80041b0:	f7fb ffdc 	bl	800016c <__adddf3>
						for(int i = 0; i < d_len; i++)
 80041b4:	2c0a      	cmp	r4, #10
							distances_sum += distances[i];
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 80041ba:	d105      	bne.n	80041c8 <ds_twr_responder+0x368>
							distances_sum += distances[i];
 80041bc:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	@ 0x48
 80041c0:	f7fb ffd4 	bl	800016c <__adddf3>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
						for(int i = 0; i < d_len; i++)
 80041c8:	4929      	ldr	r1, [pc, #164]	@ (8004270 <ds_twr_responder+0x410>)
 80041ca:	e9c1 2300 	strd	r2, r3, [r1]
					HMISends(dist_str);
 80041ce:	4829      	ldr	r0, [pc, #164]	@ (8004274 <ds_twr_responder+0x414>)
 80041d0:	f000 f8e8 	bl	80043a4 <HMISends>
					flags.ds_twr_timeout = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	4c28      	ldr	r4, [pc, #160]	@ (8004278 <ds_twr_responder+0x418>)
 80041d8:	81e3      	strh	r3, [r4, #14]
	if(flags.ds_twr_timeout > 3000)
 80041da:	e683      	b.n	8003ee4 <ds_twr_responder+0x84>
			dwt_readrxdata(rx_buffer, frame_len, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	4812      	ldr	r0, [pc, #72]	@ (8004228 <ds_twr_responder+0x3c8>)
 80041e0:	f7fe fba6 	bl	8002930 <dwt_readrxdata>
 80041e4:	e69d      	b.n	8003f22 <ds_twr_responder+0xc2>
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80041e6:	f244 021a 	movw	r2, #16410	@ 0x401a
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	f144 0400 	adc.w	r4, r4, #0
 80041f0:	e6c3      	b.n	8003f7a <ds_twr_responder+0x11a>
				dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS_850K); 
 80041f2:	203c      	movs	r0, #60	@ 0x3c
 80041f4:	f7fe fda8 	bl	8002d48 <dwt_setrxaftertxdelay>
				dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS_850K);                
 80041f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80041fc:	f7ff f8b6 	bl	800336c <dwt_setrxtimeout>
				dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff f8ef 	bl	80033e4 <dwt_setpreambledetecttimeout>
 8004206:	e6d4      	b.n	8003fb2 <ds_twr_responder+0x152>
 8004208:	4c1b      	ldr	r4, [pc, #108]	@ (8004278 <ds_twr_responder+0x418>)
 800420a:	e66b      	b.n	8003ee4 <ds_twr_responder+0x84>
					dwt_readrxdata(rx_buffer, frame_len, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	4806      	ldr	r0, [pc, #24]	@ (8004228 <ds_twr_responder+0x3c8>)
 8004210:	f7fe fb8e 	bl	8002930 <dwt_readrxdata>
 8004214:	e6fc      	b.n	8004010 <ds_twr_responder+0x1b0>
 8004216:	bf00      	nop
 8004218:	3bce48fa 	.word	0x3bce48fa
 800421c:	3db13518 	.word	0x3db13518
 8004220:	13000000 	.word	0x13000000
 8004224:	41b1dd19 	.word	0x41b1dd19
 8004228:	200004e8 	.word	0x200004e8
 800422c:	20000090 	.word	0x20000090
 8004230:	036d8168 	.word	0x036d8168
 8004234:	200004e0 	.word	0x200004e0
 8004238:	20000194 	.word	0x20000194
 800423c:	200004d8 	.word	0x200004d8
 8004240:	20000086 	.word	0x20000086
 8004244:	2000008a 	.word	0x2000008a
 8004248:	20000500 	.word	0x20000500
 800424c:	2000007c 	.word	0x2000007c
 8004250:	2427d000 	.word	0x2427d000
 8004254:	20000064 	.word	0x20000064
 8004258:	200004d0 	.word	0x200004d0
 800425c:	20000458 	.word	0x20000458
 8004260:	200004f2 	.word	0x200004f2
 8004264:	200004f6 	.word	0x200004f6
 8004268:	200004fa 	.word	0x200004fa
 800426c:	20000460 	.word	0x20000460
 8004270:	20000400 	.word	0x20000400
 8004274:	200004b0 	.word	0x200004b0
 8004278:	200006b0 	.word	0x200006b0
						if(fabs(distance-last_distance) < MAX_DISTANCE_ERROR)
 800427c:	4b43      	ldr	r3, [pc, #268]	@ (800438c <ds_twr_responder+0x52c>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fb ff71 	bl	8000168 <__aeabi_dsub>
 8004286:	2200      	movs	r2, #0
 8004288:	4b41      	ldr	r3, [pc, #260]	@ (8004390 <ds_twr_responder+0x530>)
 800428a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800428e:	f7fc fb95 	bl	80009bc <__aeabi_dcmplt>
 8004292:	2800      	cmp	r0, #0
 8004294:	d06f      	beq.n	8004376 <ds_twr_responder+0x516>
								new_distances[i] = distances[i+1];
 8004296:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 8004394 <ds_twr_responder+0x534>
 800429a:	4e3f      	ldr	r6, [pc, #252]	@ (8004398 <ds_twr_responder+0x538>)
							error_times = 0;
 800429c:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <ds_twr_responder+0x53c>)
								new_distances[i] = distances[i+1];
 800429e:	1e7a      	subs	r2, r7, #1
 80042a0:	4631      	mov	r1, r6
 80042a2:	4650      	mov	r0, sl
 80042a4:	00d2      	lsls	r2, r2, #3
							error_times = 0;
 80042a6:	f883 8000 	strb.w	r8, [r3]
								new_distances[i] = distances[i+1];
 80042aa:	f004 f800 	bl	80082ae <memcpy>
								distances_sum += new_distances[i];
 80042ae:	e9da 8902 	ldrd	r8, r9, [sl, #8]
 80042b2:	e9da bc06 	ldrd	fp, ip, [sl, #24]
 80042b6:	e9da 0100 	ldrd	r0, r1, [sl]
								distances[i] = new_distances[i];
 80042ba:	46b6      	mov	lr, r6
 80042bc:	e86e 8902 	strd	r8, r9, [lr], #-8
								distances_sum += new_distances[i];
 80042c0:	2200      	movs	r2, #0
								distances[i] = new_distances[i];
 80042c2:	e9ce bc06 	strd	fp, ip, [lr, #24]
 80042c6:	e9ce 4512 	strd	r4, r5, [lr, #72]	@ 0x48
								distances_sum += new_distances[i];
 80042ca:	2300      	movs	r3, #0
							new_distances[d_len-1] = distance;
 80042cc:	e9ca 4512 	strd	r4, r5, [sl, #72]	@ 0x48
								distances[i] = new_distances[i];
 80042d0:	e946 0102 	strd	r0, r1, [r6, #-8]
								distances_sum += new_distances[i];
 80042d4:	e9da 6704 	ldrd	r6, r7, [sl, #16]
								distances[i] = new_distances[i];
 80042d8:	e9cd bc00 	strd	fp, ip, [sp]
								distances_sum += new_distances[i];
 80042dc:	e9da bc08 	ldrd	fp, ip, [sl, #32]
								distances[i] = new_distances[i];
 80042e0:	e9ce 6704 	strd	r6, r7, [lr, #16]
 80042e4:	e9ce bc08 	strd	fp, ip, [lr, #32]
 80042e8:	e9cd bc02 	strd	fp, ip, [sp, #8]
								distances_sum += new_distances[i];
 80042ec:	e9da bc0a 	ldrd	fp, ip, [sl, #40]	@ 0x28
								distances[i] = new_distances[i];
 80042f0:	e9ce bc0a 	strd	fp, ip, [lr, #40]	@ 0x28
 80042f4:	e9cd bc04 	strd	fp, ip, [sp, #16]
								distances_sum += new_distances[i];
 80042f8:	e9da bc0c 	ldrd	fp, ip, [sl, #48]	@ 0x30
								distances[i] = new_distances[i];
 80042fc:	e9ce bc0c 	strd	fp, ip, [lr, #48]	@ 0x30
 8004300:	e9cd bc06 	strd	fp, ip, [sp, #24]
								distances_sum += new_distances[i];
 8004304:	e9da bc0e 	ldrd	fp, ip, [sl, #56]	@ 0x38
								distances[i] = new_distances[i];
 8004308:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800430c:	e9ce bc0e 	strd	fp, ip, [lr, #56]	@ 0x38
								distances_sum += new_distances[i];
 8004310:	f10a 0b40 	add.w	fp, sl, #64	@ 0x40
 8004314:	e9db ab00 	ldrd	sl, fp, [fp]
								distances[i] = new_distances[i];
 8004318:	e9ce ab10 	strd	sl, fp, [lr, #64]	@ 0x40
								distances_sum += new_distances[i];
 800431c:	f7fb ff26 	bl	800016c <__adddf3>
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	f7fb ff22 	bl	800016c <__adddf3>
 8004328:	4632      	mov	r2, r6
 800432a:	463b      	mov	r3, r7
 800432c:	f7fb ff1e 	bl	800016c <__adddf3>
 8004330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004334:	f7fb ff1a 	bl	800016c <__adddf3>
 8004338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800433c:	f7fb ff16 	bl	800016c <__adddf3>
 8004340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004344:	f7fb ff12 	bl	800016c <__adddf3>
 8004348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800434c:	f7fb ff0e 	bl	800016c <__adddf3>
 8004350:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004354:	f7fb ff0a 	bl	800016c <__adddf3>
 8004358:	4652      	mov	r2, sl
 800435a:	465b      	mov	r3, fp
 800435c:	f7fb ff06 	bl	800016c <__adddf3>
 8004360:	462b      	mov	r3, r5
 8004362:	4622      	mov	r2, r4
 8004364:	f7fb ff02 	bl	800016c <__adddf3>
							last_distance = distance;
 8004368:	4b08      	ldr	r3, [pc, #32]	@ (800438c <ds_twr_responder+0x52c>)
 800436a:	e9c3 4500 	strd	r4, r5, [r3]
 800436e:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <ds_twr_responder+0x540>)
 8004370:	e9c3 0100 	strd	r0, r1, [r3]
							distance = distances_sum / (double)d_len;
 8004374:	e72b      	b.n	80041ce <ds_twr_responder+0x36e>
							error_times++;
 8004376:	4909      	ldr	r1, [pc, #36]	@ (800439c <ds_twr_responder+0x53c>)
 8004378:	780b      	ldrb	r3, [r1, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	b2db      	uxtb	r3, r3
							if(error_times > 20)
 800437e:	2b14      	cmp	r3, #20
							error_times++;
 8004380:	bf92      	itee	ls
 8004382:	700b      	strbls	r3, [r1, #0]
								error_times = 0;
 8004384:	7008      	strbhi	r0, [r1, #0]
								d_len = 0;
 8004386:	f889 0000 	strbhi.w	r0, [r9]
 800438a:	e720      	b.n	80041ce <ds_twr_responder+0x36e>
 800438c:	200003f8 	.word	0x200003f8
 8004390:	40340000 	.word	0x40340000
 8004394:	20000408 	.word	0x20000408
 8004398:	20000468 	.word	0x20000468
 800439c:	200003f5 	.word	0x200003f5
 80043a0:	20000400 	.word	0x20000400

080043a4 <HMISends>:
/**
  *	HMISends
  * @brief Send data to the HMI display
  */
void HMISends(uint8_t *buf1)
{
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart1, buf1, strlen((char*)buf1), 0xffff);
 80043a8:	f7fb fed2 	bl	8000150 <strlen>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4621      	mov	r1, r4
}
 80043b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart1, buf1, strlen((char*)buf1), 0xffff);
 80043b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043b8:	4801      	ldr	r0, [pc, #4]	@ (80043c0 <HMISends+0x1c>)
 80043ba:	b292      	uxth	r2, r2
 80043bc:	f003 bab2 	b.w	8007924 <HAL_UART_Transmit>
 80043c0:	20000570 	.word	0x20000570

080043c4 <HAL_UART_RxCpltCallback>:
 * HAL_UART_RxCpltCallback
 * Serial port receive interrupt callback
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1)
 80043c4:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <HAL_UART_RxCpltCallback+0x34>)
 80043c6:	6802      	ldr	r2, [r0, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d000      	beq.n	80043ce <HAL_UART_RxCpltCallback+0xa>
        if(flags.uart_recv_time == 0)
            flags.uart_recv_time = 1;
		
        HAL_UART_Receive_IT(&huart1, &recvChar, 1);
    }
}
 80043cc:	4770      	bx	lr
        recvBuf[recvBufLen++] = recvChar;
 80043ce:	4a0b      	ldr	r2, [pc, #44]	@ (80043fc <HAL_UART_RxCpltCallback+0x38>)
 80043d0:	480b      	ldr	r0, [pc, #44]	@ (8004400 <HAL_UART_RxCpltCallback+0x3c>)
 80043d2:	8813      	ldrh	r3, [r2, #0]
        if(flags.uart_recv_time == 0)
 80043d4:	490b      	ldr	r1, [pc, #44]	@ (8004404 <HAL_UART_RxCpltCallback+0x40>)
        recvBuf[recvBufLen++] = recvChar;
 80043d6:	f103 0c01 	add.w	ip, r3, #1
 80043da:	7800      	ldrb	r0, [r0, #0]
 80043dc:	f8a2 c000 	strh.w	ip, [r2]
 80043e0:	4a09      	ldr	r2, [pc, #36]	@ (8004408 <HAL_UART_RxCpltCallback+0x44>)
 80043e2:	54d0      	strb	r0, [r2, r3]
        if(flags.uart_recv_time == 0)
 80043e4:	798b      	ldrb	r3, [r1, #6]
 80043e6:	b90b      	cbnz	r3, 80043ec <HAL_UART_RxCpltCallback+0x28>
            flags.uart_recv_time = 1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	718b      	strb	r3, [r1, #6]
        HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 80043ec:	2201      	movs	r2, #1
 80043ee:	4904      	ldr	r1, [pc, #16]	@ (8004400 <HAL_UART_RxCpltCallback+0x3c>)
 80043f0:	4806      	ldr	r0, [pc, #24]	@ (800440c <HAL_UART_RxCpltCallback+0x48>)
 80043f2:	f003 bb3b 	b.w	8007a6c <HAL_UART_Receive_IT>
 80043f6:	bf00      	nop
 80043f8:	40013800 	.word	0x40013800
 80043fc:	20000502 	.word	0x20000502
 8004400:	20000568 	.word	0x20000568
 8004404:	200006b0 	.word	0x200006b0
 8004408:	20000504 	.word	0x20000504
 800440c:	20000570 	.word	0x20000570

08004410 <key_scan>:
  *  Key BACK 	------> PB11
  */
void key_scan(void)
{
    uint16_t key_value;
    key_value = (KEY_PORT->IDR)&KEY_UNKNOWN;
 8004410:	f640 4306 	movw	r3, #3078	@ 0xc06
 8004414:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <key_scan+0x44>)
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	ea03 0002 	and.w	r0, r3, r2
    if(key_value == KEY_UNKNOWN)
 800441c:	4393      	bics	r3, r2
    {
        flags.key_ispress = 0;
 800441e:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <key_scan+0x48>)
    if(key_value == KEY_UNKNOWN)
 8004420:	d00d      	beq.n	800443e <key_scan+0x2e>
        flags.key_presstime = 0;
        flags.key_value = KEY_UNKNOWN;
    }
    else
    {
        if(!flags.key_ispress)
 8004422:	785a      	ldrb	r2, [r3, #1]
 8004424:	07d1      	lsls	r1, r2, #31
 8004426:	d409      	bmi.n	800443c <key_scan+0x2c>
        {
            if(flags.key_presstime == 0)
 8004428:	8859      	ldrh	r1, [r3, #2]
 800442a:	b181      	cbz	r1, 800444e <key_scan+0x3e>
                flags.key_presstime = 1;
            if(flags.key_presstime >= 20)
 800442c:	2913      	cmp	r1, #19
 800442e:	d905      	bls.n	800443c <key_scan+0x2c>
            {
                flags.key_ispress = 1;
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	705a      	strb	r2, [r3, #1]
                flags.key_value = key_value;
 8004436:	8098      	strh	r0, [r3, #4]
                key_options(flags.key_value);
 8004438:	f001 b80e 	b.w	8005458 <key_options>
            }
        }
    }
}
 800443c:	4770      	bx	lr
        flags.key_ispress = 0;
 800443e:	785a      	ldrb	r2, [r3, #1]
        flags.key_presstime = 0;
 8004440:	4906      	ldr	r1, [pc, #24]	@ (800445c <key_scan+0x4c>)
        flags.key_ispress = 0;
 8004442:	f36f 0200 	bfc	r2, #0, #1
        flags.key_presstime = 0;
 8004446:	f8c3 1002 	str.w	r1, [r3, #2]
        flags.key_ispress = 0;
 800444a:	705a      	strb	r2, [r3, #1]
        flags.key_value = KEY_UNKNOWN;
 800444c:	4770      	bx	lr
                flags.key_presstime = 1;
 800444e:	2201      	movs	r2, #1
 8004450:	805a      	strh	r2, [r3, #2]
            if(flags.key_presstime >= 20)
 8004452:	4770      	bx	lr
 8004454:	40010c00 	.word	0x40010c00
 8004458:	200006b0 	.word	0x200006b0
 800445c:	0c060000 	.word	0x0c060000

08004460 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004460:	2300      	movs	r3, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004462:	2201      	movs	r2, #1
{
 8004464:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004466:	2001      	movs	r0, #1
{
 8004468:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800446a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800446e:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004470:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004474:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004478:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800447c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800447e:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004480:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004482:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004484:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8004488:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800448c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004490:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8004492:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004496:	940d      	str	r4, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004498:	f002 f8ca 	bl	8006630 <HAL_RCC_OscConfig>
 800449c:	b108      	cbz	r0, 80044a2 <SystemClock_Config+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 800449e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044a2:	4603      	mov	r3, r0
 80044a4:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044aa:	4621      	mov	r1, r4
 80044ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044ae:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044b2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044b4:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044b6:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044b8:	f002 faa8 	bl	8006a0c <HAL_RCC_ClockConfig>
 80044bc:	b108      	cbz	r0, 80044c2 <SystemClock_Config+0x62>
 80044be:	b672      	cpsid	i
  while (1)
 80044c0:	e7fe      	b.n	80044c0 <SystemClock_Config+0x60>
}
 80044c2:	b011      	add	sp, #68	@ 0x44
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <main>:
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	@ 0x28
  HAL_DeInit();
 80044cc:	f001 fd56 	bl	8005f7c <HAL_DeInit>
  HAL_RCC_DeInit();
 80044d0:	f002 f83e 	bl	8006550 <HAL_RCC_DeInit>
  HAL_Init();
 80044d4:	f001 fd86 	bl	8005fe4 <HAL_Init>
  SystemClock_Config();
 80044d8:	f7ff ffc2 	bl	8004460 <SystemClock_Config>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80044dc:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044de:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e0:	4615      	mov	r5, r2
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80044e2:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80044ea:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ee:	4b68      	ldr	r3, [pc, #416]	@ (8004690 <main+0x1c8>)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80044f0:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044f2:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80044f4:	4867      	ldr	r0, [pc, #412]	@ (8004694 <main+0x1cc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044f6:	f046 0620 	orr.w	r6, r6, #32
 80044fa:	619e      	str	r6, [r3, #24]
 80044fc:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fe:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004502:	f006 0620 	and.w	r6, r6, #32
 8004506:	9601      	str	r6, [sp, #4]
 8004508:	9e01      	ldr	r6, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	699e      	ldr	r6, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800450c:	f44f 7982 	mov.w	r9, #260	@ 0x104
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004510:	f046 0604 	orr.w	r6, r6, #4
 8004514:	619e      	str	r6, [r3, #24]
 8004516:	699e      	ldr	r6, [r3, #24]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004518:	f44f 7700 	mov.w	r7, #512	@ 0x200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800451c:	f006 0604 	and.w	r6, r6, #4
 8004520:	9602      	str	r6, [sp, #8]
 8004522:	9e02      	ldr	r6, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004524:	699e      	ldr	r6, [r3, #24]
 8004526:	f046 0608 	orr.w	r6, r6, #8
 800452a:	619e      	str	r6, [r3, #24]
 800452c:	699b      	ldr	r3, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 800452e:	260a      	movs	r6, #10
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	9303      	str	r3, [sp, #12]
 8004536:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004538:	f002 f806 	bl	8006548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800453c:	462a      	mov	r2, r5
 800453e:	4641      	mov	r1, r8
 8004540:	4855      	ldr	r0, [pc, #340]	@ (8004698 <main+0x1d0>)
 8004542:	f002 f801 	bl	8006548 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004546:	2310      	movs	r3, #16
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004548:	4852      	ldr	r0, [pc, #328]	@ (8004694 <main+0x1cc>)
 800454a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800454c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800454e:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004552:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004556:	f001 fe4b 	bl	80061f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DEVICE_SELECT_Pin|KEY_UP_Pin|KEY_DOWN_Pin|KEY_OK_Pin
 800455a:	2300      	movs	r3, #0
 800455c:	f640 4207 	movw	r2, #3079	@ 0xc07
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004560:	484d      	ldr	r0, [pc, #308]	@ (8004698 <main+0x1d0>)
 8004562:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = DEVICE_SELECT_Pin|KEY_UP_Pin|KEY_DOWN_Pin|KEY_OK_Pin
 8004564:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004568:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456a:	f001 fe41 	bl	80061f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800456e:	484a      	ldr	r0, [pc, #296]	@ (8004698 <main+0x1d0>)
 8004570:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004572:	e9cd 8506 	strd	r8, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004576:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800457a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800457c:	f001 fe38 	bl	80061f0 <HAL_GPIO_Init>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004580:	2308      	movs	r3, #8
  hspi1.Instance = SPI1;
 8004582:	4846      	ldr	r0, [pc, #280]	@ (800469c <main+0x1d4>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004584:	61c3      	str	r3, [r0, #28]
  hspi1.Instance = SPI1;
 8004586:	4b46      	ldr	r3, [pc, #280]	@ (80046a0 <main+0x1d8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004588:	e9c0 9401 	strd	r9, r4, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800458c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004590:	e9c0 4705 	strd	r4, r7, [r0, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004594:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8004598:	e9c0 460a 	strd	r4, r6, [r0, #40]	@ 0x28
  hspi1.Instance = SPI1;
 800459c:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800459e:	f002 fb83 	bl	8006ca8 <HAL_SPI_Init>
 80045a2:	b108      	cbz	r0, 80045a8 <main+0xe0>
 80045a4:	b672      	cpsid	i
  while (1)
 80045a6:	e7fe      	b.n	80045a6 <main+0xde>
  hspi2.Instance = SPI2;
 80045a8:	4603      	mov	r3, r0
 80045aa:	483e      	ldr	r0, [pc, #248]	@ (80046a4 <main+0x1dc>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045b4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80045b8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi2.Instance = SPI2;
 80045bc:	4b3a      	ldr	r3, [pc, #232]	@ (80046a8 <main+0x1e0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045be:	f8c0 9004 	str.w	r9, [r0, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80045c2:	6187      	str	r7, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80045c4:	62c6      	str	r6, [r0, #44]	@ 0x2c
  hspi2.Instance = SPI2;
 80045c6:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80045c8:	f002 fb6e 	bl	8006ca8 <HAL_SPI_Init>
 80045cc:	b108      	cbz	r0, 80045d2 <main+0x10a>
 80045ce:	b672      	cpsid	i
  while (1)
 80045d0:	e7fe      	b.n	80045d0 <main+0x108>
  htim4.Init.Period = 320-1;
 80045d2:	f240 133f 	movw	r3, #319	@ 0x13f
  htim4.Init.Prescaler = 160-1;
 80045d6:	229f      	movs	r2, #159	@ 0x9f
  htim4.Instance = TIM4;
 80045d8:	4c34      	ldr	r4, [pc, #208]	@ (80046ac <main+0x1e4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045da:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim4.Init.Period = 320-1;
 80045de:	60e3      	str	r3, [r4, #12]
  htim4.Instance = TIM4;
 80045e0:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <main+0x1e8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045e2:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e6:	e9cd 0004 	strd	r0, r0, [sp, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ea:	60a0      	str	r0, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ec:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ee:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045f0:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 160-1;
 80045f2:	6062      	str	r2, [r4, #4]
  htim4.Instance = TIM4;
 80045f4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045f6:	f002 ff03 	bl	8007400 <HAL_TIM_Base_Init>
 80045fa:	b108      	cbz	r0, 8004600 <main+0x138>
 80045fc:	b672      	cpsid	i
  while (1)
 80045fe:	e7fe      	b.n	80045fe <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004600:	4620      	mov	r0, r4
 8004602:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004604:	f8cd 8018 	str.w	r8, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004608:	f002 ff8c 	bl	8007524 <HAL_TIM_ConfigClockSource>
 800460c:	b108      	cbz	r0, 8004612 <main+0x14a>
 800460e:	b672      	cpsid	i
  while (1)
 8004610:	e7fe      	b.n	8004610 <main+0x148>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004612:	2200      	movs	r2, #0
 8004614:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004616:	4620      	mov	r0, r4
 8004618:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800461e:	f003 f8dd 	bl	80077dc <HAL_TIMEx_MasterConfigSynchronization>
 8004622:	4606      	mov	r6, r0
 8004624:	b108      	cbz	r0, 800462a <main+0x162>
 8004626:	b672      	cpsid	i
  while (1)
 8004628:	e7fe      	b.n	8004628 <main+0x160>
  HAL_TIM_Base_Start_IT(&htim4);
 800462a:	4620      	mov	r0, r4
 800462c:	f002 ff50 	bl	80074d0 <HAL_TIM_Base_Start_IT>
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004630:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 115200;
 8004632:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart1.Instance = USART1;
 8004636:	4c1f      	ldr	r4, [pc, #124]	@ (80046b4 <main+0x1ec>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004638:	6163      	str	r3, [r4, #20]
  huart1.Instance = USART1;
 800463a:	4b1f      	ldr	r3, [pc, #124]	@ (80046b8 <main+0x1f0>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800463c:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 800463e:	e9c4 6602 	strd	r6, r6, [r4, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004642:	e9c4 6606 	strd	r6, r6, [r4, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004646:	6126      	str	r6, [r4, #16]
  huart1.Init.BaudRate = 115200;
 8004648:	6062      	str	r2, [r4, #4]
  huart1.Instance = USART1;
 800464a:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800464c:	f003 f8fc 	bl	8007848 <HAL_UART_Init>
 8004650:	4606      	mov	r6, r0
 8004652:	b108      	cbz	r0, 8004658 <main+0x190>
 8004654:	b672      	cpsid	i
  while (1)
 8004656:	e7fe      	b.n	8004656 <main+0x18e>
  HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 8004658:	4620      	mov	r0, r4
 800465a:	462a      	mov	r2, r5
 800465c:	4917      	ldr	r1, [pc, #92]	@ (80046bc <main+0x1f4>)
 800465e:	f003 fa05 	bl	8007a6c <HAL_UART_Receive_IT>
 8004662:	4c17      	ldr	r4, [pc, #92]	@ (80046c0 <main+0x1f8>)
}
 8004664:	e00c      	b.n	8004680 <main+0x1b8>
		hmi_recv();
 8004666:	f7fc fcab 	bl	8000fc0 <hmi_recv>
		if(flags.func_allow_run == 1)
 800466a:	7a23      	ldrb	r3, [r4, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d103      	bne.n	8004678 <main+0x1b0>
			if(flags.function != NULL)
 8004670:	6963      	ldr	r3, [r4, #20]
			flags.func_allow_run = 0;
 8004672:	7226      	strb	r6, [r4, #8]
			if(flags.function != NULL)
 8004674:	b103      	cbz	r3, 8004678 <main+0x1b0>
			    flags.function();	//Run sample program
 8004676:	4798      	blx	r3
        ds_twr_initiator_init();
 8004678:	f7ff f8a4 	bl	80037c4 <ds_twr_initiator_init>
        ds_twr_initiator();
 800467c:	f7ff f934 	bl	80038e8 <ds_twr_initiator>
		if(flags.opt_1ms_flag == 10)
 8004680:	7823      	ldrb	r3, [r4, #0]
 8004682:	2b0a      	cmp	r3, #10
 8004684:	d1ef      	bne.n	8004666 <main+0x19e>
			flags.opt_1ms_flag = 0;
 8004686:	7026      	strb	r6, [r4, #0]
			key_scan();
 8004688:	f7ff fec2 	bl	8004410 <key_scan>
 800468c:	e7eb      	b.n	8004666 <main+0x19e>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	40010800 	.word	0x40010800
 8004698:	40010c00 	.word	0x40010c00
 800469c:	20000658 	.word	0x20000658
 80046a0:	40013000 	.word	0x40013000
 80046a4:	20000600 	.word	0x20000600
 80046a8:	40003800 	.word	0x40003800
 80046ac:	200005b8 	.word	0x200005b8
 80046b0:	40000800 	.word	0x40000800
 80046b4:	20000570 	.word	0x20000570
 80046b8:	40013800 	.word	0x40013800
 80046bc:	20000568 	.word	0x20000568
 80046c0:	200006b0 	.word	0x200006b0

080046c4 <page_opts_sethighlight>:
#define CHINESE 1
uint8_t language = ENGLISH;

void page_opts_sethighlight(enum hmi_pages page, uint8_t opt_value)
{
    switch(page)
 80046c4:	3802      	subs	r0, #2
{
 80046c6:	b508      	push	{r3, lr}
    switch(page)
 80046c8:	280e      	cmp	r0, #14
 80046ca:	d80f      	bhi.n	80046ec <page_opts_sethighlight+0x28>
 80046cc:	e8df f000 	tbb	[pc, r0]
 80046d0:	4736240f 	.word	0x4736240f
 80046d4:	0e7c586b 	.word	0x0e7c586b
 80046d8:	0e0e0e0e 	.word	0x0e0e0e0e
 80046dc:	0e0e      	.short	0x0e0e
 80046de:	08          	.byte	0x08
 80046df:	00          	.byte	0x00
                HMISends("click b16,0\xff\xff\xff");
        }
        break;
        case ABOUT:
        {
            if(opt_value == 0)
 80046e0:	2900      	cmp	r1, #0
 80046e2:	f000 8160 	beq.w	80049a6 <page_opts_sethighlight+0x2e2>
                HMISends("click b3,0\xff\xff\xff");
            else if(opt_value == 1)
 80046e6:	2901      	cmp	r1, #1
 80046e8:	f000 8130 	beq.w	800494c <page_opts_sethighlight+0x288>
                HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 80046ec:	bd08      	pop	{r3, pc}
            if(opt_value == 0)
 80046ee:	2900      	cmp	r1, #0
 80046f0:	f040 8086 	bne.w	8004800 <page_opts_sethighlight+0x13c>
                if(language == ENGLISH)
 80046f4:	4bb1      	ldr	r3, [pc, #708]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 811c 	beq.w	8004936 <page_opts_sethighlight+0x272>
                else if(language == CHINESE)
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d1f4      	bne.n	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b5.picc=1\xff\xff\xff");
 8004702:	48af      	ldr	r0, [pc, #700]	@ (80049c0 <page_opts_sethighlight+0x2fc>)
 8004704:	f7ff fe4e 	bl	80043a4 <HMISends>
                    HMISends("b1.picc=30\xff\xff\xff");
 8004708:	48ae      	ldr	r0, [pc, #696]	@ (80049c4 <page_opts_sethighlight+0x300>)
 800470a:	f7ff fe4b 	bl	80043a4 <HMISends>
}
 800470e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b2.picc=1\xff\xff\xff");
 8004712:	48ad      	ldr	r0, [pc, #692]	@ (80049c8 <page_opts_sethighlight+0x304>)
 8004714:	f7ff be46 	b.w	80043a4 <HMISends>
            if(opt_value == 0)
 8004718:	2900      	cmp	r1, #0
 800471a:	f040 808c 	bne.w	8004836 <page_opts_sethighlight+0x172>
                if(language == ENGLISH)
 800471e:	4ba7      	ldr	r3, [pc, #668]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80ff 	beq.w	8004926 <page_opts_sethighlight+0x262>
                else if(language == CHINESE)
 8004728:	2b01      	cmp	r3, #1
 800472a:	d1df      	bne.n	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=32\xff\xff\xff");
 800472c:	48a7      	ldr	r0, [pc, #668]	@ (80049cc <page_opts_sethighlight+0x308>)
 800472e:	f7ff fe39 	bl	80043a4 <HMISends>
}
 8004732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=2\xff\xff\xff");
 8004736:	48a6      	ldr	r0, [pc, #664]	@ (80049d0 <page_opts_sethighlight+0x30c>)
 8004738:	f7ff be34 	b.w	80043a4 <HMISends>
            if(opt_value == 0)
 800473c:	2900      	cmp	r1, #0
 800473e:	d14d      	bne.n	80047dc <page_opts_sethighlight+0x118>
                if(language == ENGLISH)
 8004740:	4b9e      	ldr	r3, [pc, #632]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80e6 	beq.w	8004916 <page_opts_sethighlight+0x252>
                else if(language == CHINESE)
 800474a:	2b01      	cmp	r3, #1
 800474c:	d1ce      	bne.n	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=34\xff\xff\xff");
 800474e:	48a1      	ldr	r0, [pc, #644]	@ (80049d4 <page_opts_sethighlight+0x310>)
 8004750:	f7ff fe28 	bl	80043a4 <HMISends>
}
 8004754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=3\xff\xff\xff");
 8004758:	489f      	ldr	r0, [pc, #636]	@ (80049d8 <page_opts_sethighlight+0x314>)
 800475a:	f7ff be23 	b.w	80043a4 <HMISends>
            if(opt_value == 0)
 800475e:	2900      	cmp	r1, #0
 8004760:	d17c      	bne.n	800485c <page_opts_sethighlight+0x198>
                if(language == ENGLISH)
 8004762:	4b96      	ldr	r3, [pc, #600]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80c5 	beq.w	80048f6 <page_opts_sethighlight+0x232>
                else if(language == CHINESE)
 800476c:	2b01      	cmp	r3, #1
 800476e:	d1bd      	bne.n	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=36\xff\xff\xff");
 8004770:	489a      	ldr	r0, [pc, #616]	@ (80049dc <page_opts_sethighlight+0x318>)
 8004772:	f7ff fe17 	bl	80043a4 <HMISends>
}
 8004776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=4\xff\xff\xff");
 800477a:	4899      	ldr	r0, [pc, #612]	@ (80049e0 <page_opts_sethighlight+0x31c>)
 800477c:	f7ff be12 	b.w	80043a4 <HMISends>
            if(opt_value == 0)
 8004780:	2900      	cmp	r1, #0
 8004782:	f000 8115 	beq.w	80049b0 <page_opts_sethighlight+0x2ec>
            else if(opt_value == 1)
 8004786:	3901      	subs	r1, #1
 8004788:	290a      	cmp	r1, #10
 800478a:	d8af      	bhi.n	80046ec <page_opts_sethighlight+0x28>
 800478c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004790:	00ed00f2 	.word	0x00ed00f2
 8004794:	01010106 	.word	0x01010106
 8004798:	00f700fc 	.word	0x00f700fc
 800479c:	00e300e8 	.word	0x00e300e8
 80047a0:	00a400a9 	.word	0x00a400a9
 80047a4:	009f      	.short	0x009f
            if(opt_value == 0)
 80047a6:	2900      	cmp	r1, #0
 80047a8:	d16b      	bne.n	8004882 <page_opts_sethighlight+0x1be>
                if(language == ENGLISH)
 80047aa:	4b84      	ldr	r3, [pc, #528]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80a9 	beq.w	8004906 <page_opts_sethighlight+0x242>
                else if(language == CHINESE)
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d199      	bne.n	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=5\xff\xff\xff");
 80047b8:	488a      	ldr	r0, [pc, #552]	@ (80049e4 <page_opts_sethighlight+0x320>)
 80047ba:	f7ff fdf3 	bl	80043a4 <HMISends>
}
 80047be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=38\xff\xff\xff");
 80047c2:	4889      	ldr	r0, [pc, #548]	@ (80049e8 <page_opts_sethighlight+0x324>)
 80047c4:	f7ff bdee 	b.w	80043a4 <HMISends>
			if(opt_value == 0)
 80047c8:	2900      	cmp	r1, #0
 80047ca:	f000 80c4 	beq.w	8004956 <page_opts_sethighlight+0x292>
            else if(opt_value == 1)
 80047ce:	3901      	subs	r1, #1
 80047d0:	2903      	cmp	r1, #3
 80047d2:	d88b      	bhi.n	80046ec <page_opts_sethighlight+0x28>
 80047d4:	e8df f001 	tbb	[pc, r1]
 80047d8:	8a7b8085 	.word	0x8a7b8085
            else if(opt_value == 1)
 80047dc:	2901      	cmp	r1, #1
 80047de:	d185      	bne.n	80046ec <page_opts_sethighlight+0x28>
                if(language == ENGLISH)
 80047e0:	4b76      	ldr	r3, [pc, #472]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8172 	beq.w	8004ace <page_opts_sethighlight+0x40a>
                else if(language == CHINESE)
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f47f af7e 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=3\xff\xff\xff");
 80047f0:	487e      	ldr	r0, [pc, #504]	@ (80049ec <page_opts_sethighlight+0x328>)
 80047f2:	f7ff fdd7 	bl	80043a4 <HMISends>
}
 80047f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=34\xff\xff\xff");
 80047fa:	487d      	ldr	r0, [pc, #500]	@ (80049f0 <page_opts_sethighlight+0x32c>)
 80047fc:	f7ff bdd2 	b.w	80043a4 <HMISends>
            else if(opt_value == 1)
 8004800:	2901      	cmp	r1, #1
 8004802:	d051      	beq.n	80048a8 <page_opts_sethighlight+0x1e4>
            else if(opt_value == 2)
 8004804:	2902      	cmp	r1, #2
 8004806:	f000 813d 	beq.w	8004a84 <page_opts_sethighlight+0x3c0>
            else if(opt_value == 3)
 800480a:	2903      	cmp	r1, #3
 800480c:	f47f af6e 	bne.w	80046ec <page_opts_sethighlight+0x28>
                if(language == ENGLISH)
 8004810:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 817d 	beq.w	8004b14 <page_opts_sethighlight+0x450>
                else if(language == CHINESE)
 800481a:	2b01      	cmp	r3, #1
 800481c:	f47f af66 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b4.picc=1\xff\xff\xff");
 8004820:	4874      	ldr	r0, [pc, #464]	@ (80049f4 <page_opts_sethighlight+0x330>)
 8004822:	f7ff fdbf 	bl	80043a4 <HMISends>
                    HMISends("b5.picc=30\xff\xff\xff");
 8004826:	4874      	ldr	r0, [pc, #464]	@ (80049f8 <page_opts_sethighlight+0x334>)
 8004828:	f7ff fdbc 	bl	80043a4 <HMISends>
}
 800482c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=1\xff\xff\xff");
 8004830:	4872      	ldr	r0, [pc, #456]	@ (80049fc <page_opts_sethighlight+0x338>)
 8004832:	f7ff bdb7 	b.w	80043a4 <HMISends>
            else if(opt_value == 1)
 8004836:	2901      	cmp	r1, #1
 8004838:	f47f af58 	bne.w	80046ec <page_opts_sethighlight+0x28>
                if(language == ENGLISH)
 800483c:	4b5f      	ldr	r3, [pc, #380]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 813c 	beq.w	8004abe <page_opts_sethighlight+0x3fa>
                else if(language == CHINESE)
 8004846:	2b01      	cmp	r3, #1
 8004848:	f47f af50 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=2\xff\xff\xff");
 800484c:	486c      	ldr	r0, [pc, #432]	@ (8004a00 <page_opts_sethighlight+0x33c>)
 800484e:	f7ff fda9 	bl	80043a4 <HMISends>
}
 8004852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=32\xff\xff\xff");
 8004856:	486b      	ldr	r0, [pc, #428]	@ (8004a04 <page_opts_sethighlight+0x340>)
 8004858:	f7ff bda4 	b.w	80043a4 <HMISends>
            else if(opt_value == 1)
 800485c:	2901      	cmp	r1, #1
 800485e:	f47f af45 	bne.w	80046ec <page_opts_sethighlight+0x28>
                if(language == ENGLISH)
 8004862:	4b56      	ldr	r3, [pc, #344]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8141 	beq.w	8004aee <page_opts_sethighlight+0x42a>
                else if(language == CHINESE)
 800486c:	2b01      	cmp	r3, #1
 800486e:	f47f af3d 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=4\xff\xff\xff");
 8004872:	4865      	ldr	r0, [pc, #404]	@ (8004a08 <page_opts_sethighlight+0x344>)
 8004874:	f7ff fd96 	bl	80043a4 <HMISends>
}
 8004878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=36\xff\xff\xff");
 800487c:	4863      	ldr	r0, [pc, #396]	@ (8004a0c <page_opts_sethighlight+0x348>)
 800487e:	f7ff bd91 	b.w	80043a4 <HMISends>
            else if(opt_value == 1)
 8004882:	2901      	cmp	r1, #1
 8004884:	f47f af32 	bne.w	80046ec <page_opts_sethighlight+0x28>
                if(language == ENGLISH)
 8004888:	4b4c      	ldr	r3, [pc, #304]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8126 	beq.w	8004ade <page_opts_sethighlight+0x41a>
                else if(language == CHINESE)
 8004892:	2b01      	cmp	r3, #1
 8004894:	f47f af2a 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b0.picc=38\xff\xff\xff");
 8004898:	485d      	ldr	r0, [pc, #372]	@ (8004a10 <page_opts_sethighlight+0x34c>)
 800489a:	f7ff fd83 	bl	80043a4 <HMISends>
}
 800489e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=5\xff\xff\xff");
 80048a2:	485c      	ldr	r0, [pc, #368]	@ (8004a14 <page_opts_sethighlight+0x350>)
 80048a4:	f7ff bd7e 	b.w	80043a4 <HMISends>
                if(language == ENGLISH)
 80048a8:	4b44      	ldr	r3, [pc, #272]	@ (80049bc <page_opts_sethighlight+0x2f8>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80fb 	beq.w	8004aa8 <page_opts_sethighlight+0x3e4>
                else if(language == CHINESE)
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f47f af1a 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b1.picc=1\xff\xff\xff");
 80048b8:	4850      	ldr	r0, [pc, #320]	@ (80049fc <page_opts_sethighlight+0x338>)
 80048ba:	f7ff fd73 	bl	80043a4 <HMISends>
                    HMISends("b2.picc=30\xff\xff\xff");
 80048be:	4856      	ldr	r0, [pc, #344]	@ (8004a18 <page_opts_sethighlight+0x354>)
 80048c0:	f7ff fd70 	bl	80043a4 <HMISends>
}
 80048c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b4.picc=1\xff\xff\xff");
 80048c8:	484a      	ldr	r0, [pc, #296]	@ (80049f4 <page_opts_sethighlight+0x330>)
 80048ca:	f7ff bd6b 	b.w	80043a4 <HMISends>
                HMISends("click b15,0\xff\xff\xff");
 80048ce:	4853      	ldr	r0, [pc, #332]	@ (8004a1c <page_opts_sethighlight+0x358>)
}
 80048d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b15,0\xff\xff\xff");
 80048d4:	f7ff bd66 	b.w	80043a4 <HMISends>
                HMISends("click b14,0\xff\xff\xff");
 80048d8:	4851      	ldr	r0, [pc, #324]	@ (8004a20 <page_opts_sethighlight+0x35c>)
}
 80048da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b14,0\xff\xff\xff");
 80048de:	f7ff bd61 	b.w	80043a4 <HMISends>
                HMISends("click b13,0\xff\xff\xff");
 80048e2:	4850      	ldr	r0, [pc, #320]	@ (8004a24 <page_opts_sethighlight+0x360>)
}
 80048e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b13,0\xff\xff\xff");
 80048e8:	f7ff bd5c 	b.w	80043a4 <HMISends>
                HMISends("click b16,0\xff\xff\xff");
 80048ec:	484e      	ldr	r0, [pc, #312]	@ (8004a28 <page_opts_sethighlight+0x364>)
}
 80048ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b16,0\xff\xff\xff");
 80048f2:	f7ff bd57 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=37\xff\xff\xff");
 80048f6:	484d      	ldr	r0, [pc, #308]	@ (8004a2c <page_opts_sethighlight+0x368>)
 80048f8:	f7ff fd54 	bl	80043a4 <HMISends>
}
 80048fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=20\xff\xff\xff");
 8004900:	484b      	ldr	r0, [pc, #300]	@ (8004a30 <page_opts_sethighlight+0x36c>)
 8004902:	f7ff bd4f 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=21\xff\xff\xff");
 8004906:	484b      	ldr	r0, [pc, #300]	@ (8004a34 <page_opts_sethighlight+0x370>)
 8004908:	f7ff fd4c 	bl	80043a4 <HMISends>
}
 800490c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=39\xff\xff\xff");
 8004910:	4849      	ldr	r0, [pc, #292]	@ (8004a38 <page_opts_sethighlight+0x374>)
 8004912:	f7ff bd47 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=35\xff\xff\xff");
 8004916:	4849      	ldr	r0, [pc, #292]	@ (8004a3c <page_opts_sethighlight+0x378>)
 8004918:	f7ff fd44 	bl	80043a4 <HMISends>
}
 800491c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=19\xff\xff\xff");
 8004920:	4847      	ldr	r0, [pc, #284]	@ (8004a40 <page_opts_sethighlight+0x37c>)
 8004922:	f7ff bd3f 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=33\xff\xff\xff");
 8004926:	4847      	ldr	r0, [pc, #284]	@ (8004a44 <page_opts_sethighlight+0x380>)
 8004928:	f7ff fd3c 	bl	80043a4 <HMISends>
}
 800492c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=18\xff\xff\xff");
 8004930:	4845      	ldr	r0, [pc, #276]	@ (8004a48 <page_opts_sethighlight+0x384>)
 8004932:	f7ff bd37 	b.w	80043a4 <HMISends>
                    HMISends("b5.picc=17\xff\xff\xff");
 8004936:	4845      	ldr	r0, [pc, #276]	@ (8004a4c <page_opts_sethighlight+0x388>)
 8004938:	f7ff fd34 	bl	80043a4 <HMISends>
                    HMISends("b1.picc=31\xff\xff\xff");
 800493c:	4844      	ldr	r0, [pc, #272]	@ (8004a50 <page_opts_sethighlight+0x38c>)
 800493e:	f7ff fd31 	bl	80043a4 <HMISends>
}
 8004942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b2.picc=17\xff\xff\xff");
 8004946:	4843      	ldr	r0, [pc, #268]	@ (8004a54 <page_opts_sethighlight+0x390>)
 8004948:	f7ff bd2c 	b.w	80043a4 <HMISends>
                HMISends("click b2,0\xff\xff\xff");
 800494c:	4842      	ldr	r0, [pc, #264]	@ (8004a58 <page_opts_sethighlight+0x394>)
}
 800494e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b2,0\xff\xff\xff");
 8004952:	f7ff bd27 	b.w	80043a4 <HMISends>
                HMISends("click b12,0\xff\xff\xff");
 8004956:	4841      	ldr	r0, [pc, #260]	@ (8004a5c <page_opts_sethighlight+0x398>)
}
 8004958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b12,0\xff\xff\xff");
 800495c:	f7ff bd22 	b.w	80043a4 <HMISends>
                HMISends("click b11,0\xff\xff\xff");
 8004960:	483f      	ldr	r0, [pc, #252]	@ (8004a60 <page_opts_sethighlight+0x39c>)
}
 8004962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b11,0\xff\xff\xff");
 8004966:	f7ff bd1d 	b.w	80043a4 <HMISends>
                HMISends("click b6,0\xff\xff\xff");
 800496a:	483e      	ldr	r0, [pc, #248]	@ (8004a64 <page_opts_sethighlight+0x3a0>)
}
 800496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b6,0\xff\xff\xff");
 8004970:	f7ff bd18 	b.w	80043a4 <HMISends>
                HMISends("click b5,0\xff\xff\xff");
 8004974:	483c      	ldr	r0, [pc, #240]	@ (8004a68 <page_opts_sethighlight+0x3a4>)
}
 8004976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b5,0\xff\xff\xff");
 800497a:	f7ff bd13 	b.w	80043a4 <HMISends>
                HMISends("click b10,0\xff\xff\xff");
 800497e:	483b      	ldr	r0, [pc, #236]	@ (8004a6c <page_opts_sethighlight+0x3a8>)
}
 8004980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b10,0\xff\xff\xff");
 8004984:	f7ff bd0e 	b.w	80043a4 <HMISends>
                HMISends("click b9,0\xff\xff\xff");
 8004988:	4839      	ldr	r0, [pc, #228]	@ (8004a70 <page_opts_sethighlight+0x3ac>)
}
 800498a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b9,0\xff\xff\xff");
 800498e:	f7ff bd09 	b.w	80043a4 <HMISends>
                HMISends("click b8,0\xff\xff\xff");
 8004992:	4838      	ldr	r0, [pc, #224]	@ (8004a74 <page_opts_sethighlight+0x3b0>)
}
 8004994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b8,0\xff\xff\xff");
 8004998:	f7ff bd04 	b.w	80043a4 <HMISends>
                HMISends("click b7,0\xff\xff\xff");
 800499c:	4836      	ldr	r0, [pc, #216]	@ (8004a78 <page_opts_sethighlight+0x3b4>)
}
 800499e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b7,0\xff\xff\xff");
 80049a2:	f7ff bcff 	b.w	80043a4 <HMISends>
                HMISends("click b3,0\xff\xff\xff");
 80049a6:	4835      	ldr	r0, [pc, #212]	@ (8004a7c <page_opts_sethighlight+0x3b8>)
}
 80049a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b3,0\xff\xff\xff");
 80049ac:	f7ff bcfa 	b.w	80043a4 <HMISends>
                HMISends("click b4,0\xff\xff\xff");
 80049b0:	4833      	ldr	r0, [pc, #204]	@ (8004a80 <page_opts_sethighlight+0x3bc>)
}
 80049b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b4,0\xff\xff\xff");
 80049b6:	f7ff bcf5 	b.w	80043a4 <HMISends>
 80049ba:	bf00      	nop
 80049bc:	200006c8 	.word	0x200006c8
 80049c0:	08009474 	.word	0x08009474
 80049c4:	08009484 	.word	0x08009484
 80049c8:	08009494 	.word	0x08009494
 80049cc:	08009564 	.word	0x08009564
 80049d0:	08009574 	.word	0x08009574
 80049d4:	080095e4 	.word	0x080095e4
 80049d8:	080095f4 	.word	0x080095f4
 80049dc:	08009664 	.word	0x08009664
 80049e0:	08009674 	.word	0x08009674
 80049e4:	080096e4 	.word	0x080096e4
 80049e8:	080096f4 	.word	0x080096f4
 80049ec:	08009624 	.word	0x08009624
 80049f0:	08009634 	.word	0x08009634
 80049f4:	080094f4 	.word	0x080094f4
 80049f8:	08009534 	.word	0x08009534
 80049fc:	080094d4 	.word	0x080094d4
 8004a00:	080095a4 	.word	0x080095a4
 8004a04:	080095b4 	.word	0x080095b4
 8004a08:	080096a4 	.word	0x080096a4
 8004a0c:	080096b4 	.word	0x080096b4
 8004a10:	08009724 	.word	0x08009724
 8004a14:	08009734 	.word	0x08009734
 8004a18:	080094e4 	.word	0x080094e4
 8004a1c:	080097f4 	.word	0x080097f4
 8004a20:	080097e4 	.word	0x080097e4
 8004a24:	080097d4 	.word	0x080097d4
 8004a28:	08009804 	.word	0x08009804
 8004a2c:	08009644 	.word	0x08009644
 8004a30:	08009654 	.word	0x08009654
 8004a34:	080096c4 	.word	0x080096c4
 8004a38:	080096d4 	.word	0x080096d4
 8004a3c:	080095c4 	.word	0x080095c4
 8004a40:	080095d4 	.word	0x080095d4
 8004a44:	08009544 	.word	0x08009544
 8004a48:	08009554 	.word	0x08009554
 8004a4c:	08009444 	.word	0x08009444
 8004a50:	08009454 	.word	0x08009454
 8004a54:	08009464 	.word	0x08009464
 8004a58:	08009824 	.word	0x08009824
 8004a5c:	080097c4 	.word	0x080097c4
 8004a60:	080097b4 	.word	0x080097b4
 8004a64:	08009764 	.word	0x08009764
 8004a68:	08009754 	.word	0x08009754
 8004a6c:	080097a4 	.word	0x080097a4
 8004a70:	08009794 	.word	0x08009794
 8004a74:	08009784 	.word	0x08009784
 8004a78:	08009774 	.word	0x08009774
 8004a7c:	08009814 	.word	0x08009814
 8004a80:	08009744 	.word	0x08009744
                if(language == ENGLISH)
 8004a84:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <page_opts_sethighlight+0x468>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d038      	beq.n	8004afe <page_opts_sethighlight+0x43a>
                else if(language == CHINESE)
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	f47f ae2d 	bne.w	80046ec <page_opts_sethighlight+0x28>
                    HMISends("b2.picc=1\xff\xff\xff");
 8004a92:	4827      	ldr	r0, [pc, #156]	@ (8004b30 <page_opts_sethighlight+0x46c>)
 8004a94:	f7ff fc86 	bl	80043a4 <HMISends>
                    HMISends("b4.picc=30\xff\xff\xff");
 8004a98:	4826      	ldr	r0, [pc, #152]	@ (8004b34 <page_opts_sethighlight+0x470>)
 8004a9a:	f7ff fc83 	bl	80043a4 <HMISends>
}
 8004a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b5.picc=1\xff\xff\xff");
 8004aa2:	4825      	ldr	r0, [pc, #148]	@ (8004b38 <page_opts_sethighlight+0x474>)
 8004aa4:	f7ff bc7e 	b.w	80043a4 <HMISends>
                    HMISends("b1.picc=17\xff\xff\xff");
 8004aa8:	4824      	ldr	r0, [pc, #144]	@ (8004b3c <page_opts_sethighlight+0x478>)
 8004aaa:	f7ff fc7b 	bl	80043a4 <HMISends>
                    HMISends("b2.picc=31\xff\xff\xff");
 8004aae:	4824      	ldr	r0, [pc, #144]	@ (8004b40 <page_opts_sethighlight+0x47c>)
 8004ab0:	f7ff fc78 	bl	80043a4 <HMISends>
}
 8004ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b4.picc=17\xff\xff\xff");
 8004ab8:	4822      	ldr	r0, [pc, #136]	@ (8004b44 <page_opts_sethighlight+0x480>)
 8004aba:	f7ff bc73 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=18\xff\xff\xff");
 8004abe:	4822      	ldr	r0, [pc, #136]	@ (8004b48 <page_opts_sethighlight+0x484>)
 8004ac0:	f7ff fc70 	bl	80043a4 <HMISends>
}
 8004ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=33\xff\xff\xff");
 8004ac8:	4820      	ldr	r0, [pc, #128]	@ (8004b4c <page_opts_sethighlight+0x488>)
 8004aca:	f7ff bc6b 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=19\xff\xff\xff");
 8004ace:	4820      	ldr	r0, [pc, #128]	@ (8004b50 <page_opts_sethighlight+0x48c>)
 8004ad0:	f7ff fc68 	bl	80043a4 <HMISends>
}
 8004ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=35\xff\xff\xff");
 8004ad8:	481e      	ldr	r0, [pc, #120]	@ (8004b54 <page_opts_sethighlight+0x490>)
 8004ada:	f7ff bc63 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=39\xff\xff\xff");
 8004ade:	481e      	ldr	r0, [pc, #120]	@ (8004b58 <page_opts_sethighlight+0x494>)
 8004ae0:	f7ff fc60 	bl	80043a4 <HMISends>
}
 8004ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=21\xff\xff\xff");
 8004ae8:	481c      	ldr	r0, [pc, #112]	@ (8004b5c <page_opts_sethighlight+0x498>)
 8004aea:	f7ff bc5b 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=20\xff\xff\xff");
 8004aee:	481c      	ldr	r0, [pc, #112]	@ (8004b60 <page_opts_sethighlight+0x49c>)
 8004af0:	f7ff fc58 	bl	80043a4 <HMISends>
}
 8004af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=37\xff\xff\xff");
 8004af8:	481a      	ldr	r0, [pc, #104]	@ (8004b64 <page_opts_sethighlight+0x4a0>)
 8004afa:	f7ff bc53 	b.w	80043a4 <HMISends>
                    HMISends("b2.picc=17\xff\xff\xff");
 8004afe:	481a      	ldr	r0, [pc, #104]	@ (8004b68 <page_opts_sethighlight+0x4a4>)
 8004b00:	f7ff fc50 	bl	80043a4 <HMISends>
                    HMISends("b4.picc=31\xff\xff\xff");
 8004b04:	4819      	ldr	r0, [pc, #100]	@ (8004b6c <page_opts_sethighlight+0x4a8>)
 8004b06:	f7ff fc4d 	bl	80043a4 <HMISends>
}
 8004b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b5.picc=17\xff\xff\xff");
 8004b0e:	4818      	ldr	r0, [pc, #96]	@ (8004b70 <page_opts_sethighlight+0x4ac>)
 8004b10:	f7ff bc48 	b.w	80043a4 <HMISends>
                    HMISends("b4.picc=17\xff\xff\xff");
 8004b14:	480b      	ldr	r0, [pc, #44]	@ (8004b44 <page_opts_sethighlight+0x480>)
 8004b16:	f7ff fc45 	bl	80043a4 <HMISends>
                    HMISends("b5.picc=31\xff\xff\xff");
 8004b1a:	4816      	ldr	r0, [pc, #88]	@ (8004b74 <page_opts_sethighlight+0x4b0>)
 8004b1c:	f7ff fc42 	bl	80043a4 <HMISends>
}
 8004b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=17\xff\xff\xff");
 8004b24:	4805      	ldr	r0, [pc, #20]	@ (8004b3c <page_opts_sethighlight+0x478>)
 8004b26:	f7ff bc3d 	b.w	80043a4 <HMISends>
 8004b2a:	bf00      	nop
 8004b2c:	200006c8 	.word	0x200006c8
 8004b30:	08009494 	.word	0x08009494
 8004b34:	08009514 	.word	0x08009514
 8004b38:	08009474 	.word	0x08009474
 8004b3c:	080094a4 	.word	0x080094a4
 8004b40:	080094b4 	.word	0x080094b4
 8004b44:	080094c4 	.word	0x080094c4
 8004b48:	08009584 	.word	0x08009584
 8004b4c:	08009594 	.word	0x08009594
 8004b50:	08009604 	.word	0x08009604
 8004b54:	08009614 	.word	0x08009614
 8004b58:	08009704 	.word	0x08009704
 8004b5c:	08009714 	.word	0x08009714
 8004b60:	08009684 	.word	0x08009684
 8004b64:	08009694 	.word	0x08009694
 8004b68:	08009464 	.word	0x08009464
 8004b6c:	08009504 	.word	0x08009504
 8004b70:	08009444 	.word	0x08009444
 8004b74:	08009524 	.word	0x08009524

08004b78 <menu_key_options>:



void menu_key_options(uint16_t key_value)
{
 8004b78:	b508      	push	{r3, lr}
    switch(key_value)
 8004b7a:	f640 4302 	movw	r3, #3074	@ 0xc02
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	d027      	beq.n	8004bd2 <menu_key_options+0x5a>
 8004b82:	f640 4304 	movw	r3, #3076	@ 0xc04
 8004b86:	4298      	cmp	r0, r3
 8004b88:	d014      	beq.n	8004bb4 <menu_key_options+0x3c>
 8004b8a:	f640 0306 	movw	r3, #2054	@ 0x806
 8004b8e:	4298      	cmp	r0, r3
 8004b90:	d000      	beq.n	8004b94 <menu_key_options+0x1c>
        break;
        case KEY_BACK:
        break;
        default:break;
    }
}
 8004b92:	bd08      	pop	{r3, pc}
            if(cur_opt[MENU] == 0)
 8004b94:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <menu_key_options+0x168>)
 8004b96:	789b      	ldrb	r3, [r3, #2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04f      	beq.n	8004c3c <menu_key_options+0xc4>
            else if(cur_opt[MENU] == 1)
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d07f      	beq.n	8004ca0 <menu_key_options+0x128>
            else if(cur_opt[MENU] == 2)
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	f000 808d 	beq.w	8004cc0 <menu_key_options+0x148>
            else if(cur_opt[MENU] == 3)
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d1f3      	bne.n	8004b92 <menu_key_options+0x1a>
}
 8004baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b5,0\xff\xff\xff");
 8004bae:	484d      	ldr	r0, [pc, #308]	@ (8004ce4 <menu_key_options+0x16c>)
 8004bb0:	f7ff bbf8 	b.w	80043a4 <HMISends>
            cur_opt[MENU]--;
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ce0 <menu_key_options+0x168>)
 8004bb6:	7893      	ldrb	r3, [r2, #2]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b2db      	uxtb	r3, r3
            if(cur_opt[MENU] == 0xff)
 8004bbc:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[MENU]--;
 8004bbe:	7093      	strb	r3, [r2, #2]
            if(cur_opt[MENU] == 0xff)
 8004bc0:	d051      	beq.n	8004c66 <menu_key_options+0xee>
            if(opt_value == 0)
 8004bc2:	b17b      	cbz	r3, 8004be4 <menu_key_options+0x6c>
            else if(opt_value == 1)
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d01d      	beq.n	8004c04 <menu_key_options+0x8c>
            else if(opt_value == 2)
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d03c      	beq.n	8004c46 <menu_key_options+0xce>
            else if(opt_value == 3)
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d04c      	beq.n	8004c6a <menu_key_options+0xf2>
}
 8004bd0:	bd08      	pop	{r3, pc}
            cur_opt[MENU]++;
 8004bd2:	4a43      	ldr	r2, [pc, #268]	@ (8004ce0 <menu_key_options+0x168>)
 8004bd4:	7893      	ldrb	r3, [r2, #2]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
            if(cur_opt[MENU] == 4)
 8004bda:	2b04      	cmp	r3, #4
            cur_opt[MENU]++;
 8004bdc:	7093      	strb	r3, [r2, #2]
            if(cur_opt[MENU] == 4)
 8004bde:	d1f0      	bne.n	8004bc2 <menu_key_options+0x4a>
 8004be0:	2300      	movs	r3, #0
 8004be2:	7093      	strb	r3, [r2, #2]
                if(language == ENGLISH)
 8004be4:	4b40      	ldr	r3, [pc, #256]	@ (8004ce8 <menu_key_options+0x170>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b1eb      	cbz	r3, 8004c26 <menu_key_options+0xae>
                else if(language == CHINESE)
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d1d1      	bne.n	8004b92 <menu_key_options+0x1a>
                    HMISends("b5.picc=1\xff\xff\xff");
 8004bee:	483f      	ldr	r0, [pc, #252]	@ (8004cec <menu_key_options+0x174>)
 8004bf0:	f7ff fbd8 	bl	80043a4 <HMISends>
                    HMISends("b1.picc=30\xff\xff\xff");
 8004bf4:	483e      	ldr	r0, [pc, #248]	@ (8004cf0 <menu_key_options+0x178>)
 8004bf6:	f7ff fbd5 	bl	80043a4 <HMISends>
}
 8004bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b2.picc=1\xff\xff\xff");
 8004bfe:	483d      	ldr	r0, [pc, #244]	@ (8004cf4 <menu_key_options+0x17c>)
 8004c00:	f7ff bbd0 	b.w	80043a4 <HMISends>
                if(language == ENGLISH)
 8004c04:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <menu_key_options+0x170>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d04e      	beq.n	8004caa <menu_key_options+0x132>
                else if(language == CHINESE)
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d1c0      	bne.n	8004b92 <menu_key_options+0x1a>
                    HMISends("b1.picc=1\xff\xff\xff");
 8004c10:	4839      	ldr	r0, [pc, #228]	@ (8004cf8 <menu_key_options+0x180>)
 8004c12:	f7ff fbc7 	bl	80043a4 <HMISends>
                    HMISends("b2.picc=30\xff\xff\xff");
 8004c16:	4839      	ldr	r0, [pc, #228]	@ (8004cfc <menu_key_options+0x184>)
 8004c18:	f7ff fbc4 	bl	80043a4 <HMISends>
}
 8004c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b4.picc=1\xff\xff\xff");
 8004c20:	4837      	ldr	r0, [pc, #220]	@ (8004d00 <menu_key_options+0x188>)
 8004c22:	f7ff bbbf 	b.w	80043a4 <HMISends>
                    HMISends("b5.picc=17\xff\xff\xff");
 8004c26:	4837      	ldr	r0, [pc, #220]	@ (8004d04 <menu_key_options+0x18c>)
 8004c28:	f7ff fbbc 	bl	80043a4 <HMISends>
                    HMISends("b1.picc=31\xff\xff\xff");
 8004c2c:	4836      	ldr	r0, [pc, #216]	@ (8004d08 <menu_key_options+0x190>)
 8004c2e:	f7ff fbb9 	bl	80043a4 <HMISends>
}
 8004c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b2.picc=17\xff\xff\xff");
 8004c36:	4835      	ldr	r0, [pc, #212]	@ (8004d0c <menu_key_options+0x194>)
 8004c38:	f7ff bbb4 	b.w	80043a4 <HMISends>
                HMISends("click b1,0\xff\xff\xff");
 8004c3c:	4834      	ldr	r0, [pc, #208]	@ (8004d10 <menu_key_options+0x198>)
}
 8004c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b1,0\xff\xff\xff");
 8004c42:	f7ff bbaf 	b.w	80043a4 <HMISends>
                if(language == ENGLISH)
 8004c46:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <menu_key_options+0x170>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b1f3      	cbz	r3, 8004c8a <menu_key_options+0x112>
                else if(language == CHINESE)
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d1a0      	bne.n	8004b92 <menu_key_options+0x1a>
                    HMISends("b2.picc=1\xff\xff\xff");
 8004c50:	4828      	ldr	r0, [pc, #160]	@ (8004cf4 <menu_key_options+0x17c>)
 8004c52:	f7ff fba7 	bl	80043a4 <HMISends>
                    HMISends("b4.picc=30\xff\xff\xff");
 8004c56:	482f      	ldr	r0, [pc, #188]	@ (8004d14 <menu_key_options+0x19c>)
 8004c58:	f7ff fba4 	bl	80043a4 <HMISends>
}
 8004c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b5.picc=1\xff\xff\xff");
 8004c60:	4822      	ldr	r0, [pc, #136]	@ (8004cec <menu_key_options+0x174>)
 8004c62:	f7ff bb9f 	b.w	80043a4 <HMISends>
 8004c66:	2303      	movs	r3, #3
 8004c68:	7093      	strb	r3, [r2, #2]
                if(language == ENGLISH)
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce8 <menu_key_options+0x170>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b363      	cbz	r3, 8004cca <menu_key_options+0x152>
                else if(language == CHINESE)
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d18e      	bne.n	8004b92 <menu_key_options+0x1a>
                    HMISends("b4.picc=1\xff\xff\xff");
 8004c74:	4822      	ldr	r0, [pc, #136]	@ (8004d00 <menu_key_options+0x188>)
 8004c76:	f7ff fb95 	bl	80043a4 <HMISends>
                    HMISends("b5.picc=30\xff\xff\xff");
 8004c7a:	4827      	ldr	r0, [pc, #156]	@ (8004d18 <menu_key_options+0x1a0>)
 8004c7c:	f7ff fb92 	bl	80043a4 <HMISends>
}
 8004c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=1\xff\xff\xff");
 8004c84:	481c      	ldr	r0, [pc, #112]	@ (8004cf8 <menu_key_options+0x180>)
 8004c86:	f7ff bb8d 	b.w	80043a4 <HMISends>
                    HMISends("b2.picc=17\xff\xff\xff");
 8004c8a:	4820      	ldr	r0, [pc, #128]	@ (8004d0c <menu_key_options+0x194>)
 8004c8c:	f7ff fb8a 	bl	80043a4 <HMISends>
                    HMISends("b4.picc=31\xff\xff\xff");
 8004c90:	4822      	ldr	r0, [pc, #136]	@ (8004d1c <menu_key_options+0x1a4>)
 8004c92:	f7ff fb87 	bl	80043a4 <HMISends>
}
 8004c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b5.picc=17\xff\xff\xff");
 8004c9a:	481a      	ldr	r0, [pc, #104]	@ (8004d04 <menu_key_options+0x18c>)
 8004c9c:	f7ff bb82 	b.w	80043a4 <HMISends>
                HMISends("click b2,0\xff\xff\xff");
 8004ca0:	481f      	ldr	r0, [pc, #124]	@ (8004d20 <menu_key_options+0x1a8>)
}
 8004ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b2,0\xff\xff\xff");
 8004ca6:	f7ff bb7d 	b.w	80043a4 <HMISends>
                    HMISends("b1.picc=17\xff\xff\xff");
 8004caa:	481e      	ldr	r0, [pc, #120]	@ (8004d24 <menu_key_options+0x1ac>)
 8004cac:	f7ff fb7a 	bl	80043a4 <HMISends>
                    HMISends("b2.picc=31\xff\xff\xff");
 8004cb0:	481d      	ldr	r0, [pc, #116]	@ (8004d28 <menu_key_options+0x1b0>)
 8004cb2:	f7ff fb77 	bl	80043a4 <HMISends>
}
 8004cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b4.picc=17\xff\xff\xff");
 8004cba:	481c      	ldr	r0, [pc, #112]	@ (8004d2c <menu_key_options+0x1b4>)
 8004cbc:	f7ff bb72 	b.w	80043a4 <HMISends>
                HMISends("click b4,0\xff\xff\xff");
 8004cc0:	481b      	ldr	r0, [pc, #108]	@ (8004d30 <menu_key_options+0x1b8>)
}
 8004cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b4,0\xff\xff\xff");
 8004cc6:	f7ff bb6d 	b.w	80043a4 <HMISends>
                    HMISends("b4.picc=17\xff\xff\xff");
 8004cca:	4818      	ldr	r0, [pc, #96]	@ (8004d2c <menu_key_options+0x1b4>)
 8004ccc:	f7ff fb6a 	bl	80043a4 <HMISends>
                    HMISends("b5.picc=31\xff\xff\xff");
 8004cd0:	4818      	ldr	r0, [pc, #96]	@ (8004d34 <menu_key_options+0x1bc>)
 8004cd2:	f7ff fb67 	bl	80043a4 <HMISends>
}
 8004cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=17\xff\xff\xff");
 8004cda:	4812      	ldr	r0, [pc, #72]	@ (8004d24 <menu_key_options+0x1ac>)
 8004cdc:	f7ff bb62 	b.w	80043a4 <HMISends>
 8004ce0:	200006cc 	.word	0x200006cc
 8004ce4:	08009754 	.word	0x08009754
 8004ce8:	200006c8 	.word	0x200006c8
 8004cec:	08009474 	.word	0x08009474
 8004cf0:	08009484 	.word	0x08009484
 8004cf4:	08009494 	.word	0x08009494
 8004cf8:	080094d4 	.word	0x080094d4
 8004cfc:	080094e4 	.word	0x080094e4
 8004d00:	080094f4 	.word	0x080094f4
 8004d04:	08009444 	.word	0x08009444
 8004d08:	08009454 	.word	0x08009454
 8004d0c:	08009464 	.word	0x08009464
 8004d10:	08009834 	.word	0x08009834
 8004d14:	08009514 	.word	0x08009514
 8004d18:	08009534 	.word	0x08009534
 8004d1c:	08009504 	.word	0x08009504
 8004d20:	08009824 	.word	0x08009824
 8004d24:	080094a4 	.word	0x080094a4
 8004d28:	080094b4 	.word	0x080094b4
 8004d2c:	080094c4 	.word	0x080094c4
 8004d30:	08009744 	.word	0x08009744
 8004d34:	08009524 	.word	0x08009524

08004d38 <longtxchoose_key_options>:

void longtxchoose_key_options(uint16_t key_value)
{
 8004d38:	b508      	push	{r3, lr}
    switch(key_value)
 8004d3a:	f640 4302 	movw	r3, #3074	@ 0xc02
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	d02b      	beq.n	8004d9a <longtxchoose_key_options+0x62>
 8004d42:	d80e      	bhi.n	8004d62 <longtxchoose_key_options+0x2a>
 8004d44:	f240 4306 	movw	r3, #1030	@ 0x406
 8004d48:	4298      	cmp	r0, r3
 8004d4a:	d03c      	beq.n	8004dc6 <longtxchoose_key_options+0x8e>
 8004d4c:	f640 0306 	movw	r3, #2054	@ 0x806
 8004d50:	4298      	cmp	r0, r3
 8004d52:	d105      	bne.n	8004d60 <longtxchoose_key_options+0x28>
            page_opts_sethighlight(LONGTXCHOOSE, cur_opt[LONGTXCHOOSE]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[LONGTXCHOOSE] == 0)
 8004d54:	4b2d      	ldr	r3, [pc, #180]	@ (8004e0c <longtxchoose_key_options+0xd4>)
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d039      	beq.n	8004dd0 <longtxchoose_key_options+0x98>
                HMISends("click b0,0\xff\xff\xff");
            else if(cur_opt[LONGTXCHOOSE] == 1)
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d047      	beq.n	8004df0 <longtxchoose_key_options+0xb8>
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 8004d60:	bd08      	pop	{r3, pc}
    switch(key_value)
 8004d62:	f640 4304 	movw	r3, #3076	@ 0xc04
 8004d66:	4298      	cmp	r0, r3
 8004d68:	d1fa      	bne.n	8004d60 <longtxchoose_key_options+0x28>
            cur_opt[LONGTXCHOOSE]--;
 8004d6a:	4a28      	ldr	r2, [pc, #160]	@ (8004e0c <longtxchoose_key_options+0xd4>)
 8004d6c:	78d3      	ldrb	r3, [r2, #3]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b2db      	uxtb	r3, r3
            if(cur_opt[LONGTXCHOOSE] == 0xff)
 8004d72:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[LONGTXCHOOSE]--;
 8004d74:	70d3      	strb	r3, [r2, #3]
            if(cur_opt[LONGTXCHOOSE] == 0xff)
 8004d76:	d038      	beq.n	8004dea <longtxchoose_key_options+0xb2>
            if(opt_value == 0)
 8004d78:	b1c3      	cbz	r3, 8004dac <longtxchoose_key_options+0x74>
            else if(opt_value == 1)
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d1f0      	bne.n	8004d60 <longtxchoose_key_options+0x28>
                if(language == ENGLISH)
 8004d7e:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <longtxchoose_key_options+0xd8>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d039      	beq.n	8004dfa <longtxchoose_key_options+0xc2>
                else if(language == CHINESE)
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d1ea      	bne.n	8004d60 <longtxchoose_key_options+0x28>
                    HMISends("b0.picc=2\xff\xff\xff");
 8004d8a:	4822      	ldr	r0, [pc, #136]	@ (8004e14 <longtxchoose_key_options+0xdc>)
 8004d8c:	f7ff fb0a 	bl	80043a4 <HMISends>
}
 8004d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=32\xff\xff\xff");
 8004d94:	4820      	ldr	r0, [pc, #128]	@ (8004e18 <longtxchoose_key_options+0xe0>)
 8004d96:	f7ff bb05 	b.w	80043a4 <HMISends>
            cur_opt[LONGTXCHOOSE]++;
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <longtxchoose_key_options+0xd4>)
 8004d9c:	78d3      	ldrb	r3, [r2, #3]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2db      	uxtb	r3, r3
            if(cur_opt[LONGTXCHOOSE] == 2)
 8004da2:	2b02      	cmp	r3, #2
            cur_opt[LONGTXCHOOSE]++;
 8004da4:	70d3      	strb	r3, [r2, #3]
            if(cur_opt[LONGTXCHOOSE] == 2)
 8004da6:	d1e7      	bne.n	8004d78 <longtxchoose_key_options+0x40>
 8004da8:	2300      	movs	r3, #0
 8004daa:	70d3      	strb	r3, [r2, #3]
                if(language == ENGLISH)
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <longtxchoose_key_options+0xd8>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b19b      	cbz	r3, 8004dda <longtxchoose_key_options+0xa2>
                else if(language == CHINESE)
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d1d4      	bne.n	8004d60 <longtxchoose_key_options+0x28>
                    HMISends("b0.picc=32\xff\xff\xff");
 8004db6:	4819      	ldr	r0, [pc, #100]	@ (8004e1c <longtxchoose_key_options+0xe4>)
 8004db8:	f7ff faf4 	bl	80043a4 <HMISends>
}
 8004dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=2\xff\xff\xff");
 8004dc0:	4817      	ldr	r0, [pc, #92]	@ (8004e20 <longtxchoose_key_options+0xe8>)
 8004dc2:	f7ff baef 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 8004dc6:	4817      	ldr	r0, [pc, #92]	@ (8004e24 <longtxchoose_key_options+0xec>)
}
 8004dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HMISends("click b2,0\xff\xff\xff");
 8004dcc:	f7ff baea 	b.w	80043a4 <HMISends>
                HMISends("click b0,0\xff\xff\xff");
 8004dd0:	4815      	ldr	r0, [pc, #84]	@ (8004e28 <longtxchoose_key_options+0xf0>)
}
 8004dd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b0,0\xff\xff\xff");
 8004dd6:	f7ff bae5 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=33\xff\xff\xff");
 8004dda:	4814      	ldr	r0, [pc, #80]	@ (8004e2c <longtxchoose_key_options+0xf4>)
 8004ddc:	f7ff fae2 	bl	80043a4 <HMISends>
}
 8004de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=18\xff\xff\xff");
 8004de4:	4812      	ldr	r0, [pc, #72]	@ (8004e30 <longtxchoose_key_options+0xf8>)
 8004de6:	f7ff badd 	b.w	80043a4 <HMISends>
 8004dea:	2301      	movs	r3, #1
 8004dec:	70d3      	strb	r3, [r2, #3]
            if(opt_value == 0)
 8004dee:	e7c6      	b.n	8004d7e <longtxchoose_key_options+0x46>
                HMISends("click b1,0\xff\xff\xff");
 8004df0:	4810      	ldr	r0, [pc, #64]	@ (8004e34 <longtxchoose_key_options+0xfc>)
}
 8004df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b1,0\xff\xff\xff");
 8004df6:	f7ff bad5 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=18\xff\xff\xff");
 8004dfa:	480f      	ldr	r0, [pc, #60]	@ (8004e38 <longtxchoose_key_options+0x100>)
 8004dfc:	f7ff fad2 	bl	80043a4 <HMISends>
}
 8004e00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=33\xff\xff\xff");
 8004e04:	480d      	ldr	r0, [pc, #52]	@ (8004e3c <longtxchoose_key_options+0x104>)
 8004e06:	f7ff bacd 	b.w	80043a4 <HMISends>
 8004e0a:	bf00      	nop
 8004e0c:	200006cc 	.word	0x200006cc
 8004e10:	200006c8 	.word	0x200006c8
 8004e14:	080095a4 	.word	0x080095a4
 8004e18:	080095b4 	.word	0x080095b4
 8004e1c:	08009564 	.word	0x08009564
 8004e20:	08009574 	.word	0x08009574
 8004e24:	08009824 	.word	0x08009824
 8004e28:	08009844 	.word	0x08009844
 8004e2c:	08009544 	.word	0x08009544
 8004e30:	08009554 	.word	0x08009554
 8004e34:	08009834 	.word	0x08009834
 8004e38:	08009584 	.word	0x08009584
 8004e3c:	08009594 	.word	0x08009594

08004e40 <simgletxchoose_key_options>:

void simgletxchoose_key_options(uint16_t key_value)
{
 8004e40:	b508      	push	{r3, lr}
    switch(key_value)
 8004e42:	f640 4302 	movw	r3, #3074	@ 0xc02
 8004e46:	4298      	cmp	r0, r3
 8004e48:	d02b      	beq.n	8004ea2 <simgletxchoose_key_options+0x62>
 8004e4a:	d80e      	bhi.n	8004e6a <simgletxchoose_key_options+0x2a>
 8004e4c:	f240 4306 	movw	r3, #1030	@ 0x406
 8004e50:	4298      	cmp	r0, r3
 8004e52:	d03c      	beq.n	8004ece <simgletxchoose_key_options+0x8e>
 8004e54:	f640 0306 	movw	r3, #2054	@ 0x806
 8004e58:	4298      	cmp	r0, r3
 8004e5a:	d105      	bne.n	8004e68 <simgletxchoose_key_options+0x28>
            page_opts_sethighlight(SIMGLETXCHOOSE, cur_opt[SIMGLETXCHOOSE]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[SIMGLETXCHOOSE] == 0)
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f14 <simgletxchoose_key_options+0xd4>)
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d039      	beq.n	8004ed8 <simgletxchoose_key_options+0x98>
                HMISends("click b0,0\xff\xff\xff");
            else if(cur_opt[SIMGLETXCHOOSE] == 1)
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d047      	beq.n	8004ef8 <simgletxchoose_key_options+0xb8>
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 8004e68:	bd08      	pop	{r3, pc}
    switch(key_value)
 8004e6a:	f640 4304 	movw	r3, #3076	@ 0xc04
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	d1fa      	bne.n	8004e68 <simgletxchoose_key_options+0x28>
            cur_opt[SIMGLETXCHOOSE]--;
 8004e72:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <simgletxchoose_key_options+0xd4>)
 8004e74:	7913      	ldrb	r3, [r2, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b2db      	uxtb	r3, r3
            if(cur_opt[SIMGLETXCHOOSE] == 0xff)
 8004e7a:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[SIMGLETXCHOOSE]--;
 8004e7c:	7113      	strb	r3, [r2, #4]
            if(cur_opt[SIMGLETXCHOOSE] == 0xff)
 8004e7e:	d038      	beq.n	8004ef2 <simgletxchoose_key_options+0xb2>
            if(opt_value == 0)
 8004e80:	b1c3      	cbz	r3, 8004eb4 <simgletxchoose_key_options+0x74>
            else if(opt_value == 1)
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d1f0      	bne.n	8004e68 <simgletxchoose_key_options+0x28>
                if(language == ENGLISH)
 8004e86:	4b24      	ldr	r3, [pc, #144]	@ (8004f18 <simgletxchoose_key_options+0xd8>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d039      	beq.n	8004f02 <simgletxchoose_key_options+0xc2>
                else if(language == CHINESE)
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d1ea      	bne.n	8004e68 <simgletxchoose_key_options+0x28>
                    HMISends("b0.picc=3\xff\xff\xff");
 8004e92:	4822      	ldr	r0, [pc, #136]	@ (8004f1c <simgletxchoose_key_options+0xdc>)
 8004e94:	f7ff fa86 	bl	80043a4 <HMISends>
}
 8004e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=34\xff\xff\xff");
 8004e9c:	4820      	ldr	r0, [pc, #128]	@ (8004f20 <simgletxchoose_key_options+0xe0>)
 8004e9e:	f7ff ba81 	b.w	80043a4 <HMISends>
            cur_opt[SIMGLETXCHOOSE]++;
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f14 <simgletxchoose_key_options+0xd4>)
 8004ea4:	7913      	ldrb	r3, [r2, #4]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
            if(cur_opt[SIMGLETXCHOOSE] == 2)
 8004eaa:	2b02      	cmp	r3, #2
            cur_opt[SIMGLETXCHOOSE]++;
 8004eac:	7113      	strb	r3, [r2, #4]
            if(cur_opt[SIMGLETXCHOOSE] == 2)
 8004eae:	d1e7      	bne.n	8004e80 <simgletxchoose_key_options+0x40>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	7113      	strb	r3, [r2, #4]
                if(language == ENGLISH)
 8004eb4:	4b18      	ldr	r3, [pc, #96]	@ (8004f18 <simgletxchoose_key_options+0xd8>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b19b      	cbz	r3, 8004ee2 <simgletxchoose_key_options+0xa2>
                else if(language == CHINESE)
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d1d4      	bne.n	8004e68 <simgletxchoose_key_options+0x28>
                    HMISends("b0.picc=34\xff\xff\xff");
 8004ebe:	4819      	ldr	r0, [pc, #100]	@ (8004f24 <simgletxchoose_key_options+0xe4>)
 8004ec0:	f7ff fa70 	bl	80043a4 <HMISends>
}
 8004ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=3\xff\xff\xff");
 8004ec8:	4817      	ldr	r0, [pc, #92]	@ (8004f28 <simgletxchoose_key_options+0xe8>)
 8004eca:	f7ff ba6b 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 8004ece:	4817      	ldr	r0, [pc, #92]	@ (8004f2c <simgletxchoose_key_options+0xec>)
}
 8004ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HMISends("click b2,0\xff\xff\xff");
 8004ed4:	f7ff ba66 	b.w	80043a4 <HMISends>
                HMISends("click b0,0\xff\xff\xff");
 8004ed8:	4815      	ldr	r0, [pc, #84]	@ (8004f30 <simgletxchoose_key_options+0xf0>)
}
 8004eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b0,0\xff\xff\xff");
 8004ede:	f7ff ba61 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=35\xff\xff\xff");
 8004ee2:	4814      	ldr	r0, [pc, #80]	@ (8004f34 <simgletxchoose_key_options+0xf4>)
 8004ee4:	f7ff fa5e 	bl	80043a4 <HMISends>
}
 8004ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=19\xff\xff\xff");
 8004eec:	4812      	ldr	r0, [pc, #72]	@ (8004f38 <simgletxchoose_key_options+0xf8>)
 8004eee:	f7ff ba59 	b.w	80043a4 <HMISends>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	7113      	strb	r3, [r2, #4]
            if(opt_value == 0)
 8004ef6:	e7c6      	b.n	8004e86 <simgletxchoose_key_options+0x46>
                HMISends("click b1,0\xff\xff\xff");
 8004ef8:	4810      	ldr	r0, [pc, #64]	@ (8004f3c <simgletxchoose_key_options+0xfc>)
}
 8004efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b1,0\xff\xff\xff");
 8004efe:	f7ff ba51 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=19\xff\xff\xff");
 8004f02:	480f      	ldr	r0, [pc, #60]	@ (8004f40 <simgletxchoose_key_options+0x100>)
 8004f04:	f7ff fa4e 	bl	80043a4 <HMISends>
}
 8004f08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=35\xff\xff\xff");
 8004f0c:	480d      	ldr	r0, [pc, #52]	@ (8004f44 <simgletxchoose_key_options+0x104>)
 8004f0e:	f7ff ba49 	b.w	80043a4 <HMISends>
 8004f12:	bf00      	nop
 8004f14:	200006cc 	.word	0x200006cc
 8004f18:	200006c8 	.word	0x200006c8
 8004f1c:	08009624 	.word	0x08009624
 8004f20:	08009634 	.word	0x08009634
 8004f24:	080095e4 	.word	0x080095e4
 8004f28:	080095f4 	.word	0x080095f4
 8004f2c:	08009824 	.word	0x08009824
 8004f30:	08009844 	.word	0x08009844
 8004f34:	080095c4 	.word	0x080095c4
 8004f38:	080095d4 	.word	0x080095d4
 8004f3c:	08009834 	.word	0x08009834
 8004f40:	08009604 	.word	0x08009604
 8004f44:	08009614 	.word	0x08009614

08004f48 <rangingchoose_key_options>:

void rangingchoose_key_options(uint16_t key_value)
{
 8004f48:	b508      	push	{r3, lr}
    switch(key_value)
 8004f4a:	f640 4302 	movw	r3, #3074	@ 0xc02
 8004f4e:	4298      	cmp	r0, r3
 8004f50:	d02b      	beq.n	8004faa <rangingchoose_key_options+0x62>
 8004f52:	d80e      	bhi.n	8004f72 <rangingchoose_key_options+0x2a>
 8004f54:	f240 4306 	movw	r3, #1030	@ 0x406
 8004f58:	4298      	cmp	r0, r3
 8004f5a:	d03c      	beq.n	8004fd6 <rangingchoose_key_options+0x8e>
 8004f5c:	f640 0306 	movw	r3, #2054	@ 0x806
 8004f60:	4298      	cmp	r0, r3
 8004f62:	d105      	bne.n	8004f70 <rangingchoose_key_options+0x28>
            page_opts_sethighlight(RANGINGCHOOSE, cur_opt[RANGINGCHOOSE]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[RANGINGCHOOSE] == 0)
 8004f64:	4b2d      	ldr	r3, [pc, #180]	@ (800501c <rangingchoose_key_options+0xd4>)
 8004f66:	795b      	ldrb	r3, [r3, #5]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d039      	beq.n	8004fe0 <rangingchoose_key_options+0x98>
                HMISends("click b0,0\xff\xff\xff");
            else if(cur_opt[RANGINGCHOOSE] == 1)
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d047      	beq.n	8005000 <rangingchoose_key_options+0xb8>
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 8004f70:	bd08      	pop	{r3, pc}
    switch(key_value)
 8004f72:	f640 4304 	movw	r3, #3076	@ 0xc04
 8004f76:	4298      	cmp	r0, r3
 8004f78:	d1fa      	bne.n	8004f70 <rangingchoose_key_options+0x28>
            cur_opt[RANGINGCHOOSE]--;
 8004f7a:	4a28      	ldr	r2, [pc, #160]	@ (800501c <rangingchoose_key_options+0xd4>)
 8004f7c:	7953      	ldrb	r3, [r2, #5]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b2db      	uxtb	r3, r3
            if(cur_opt[RANGINGCHOOSE] == 0xff)
 8004f82:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[RANGINGCHOOSE]--;
 8004f84:	7153      	strb	r3, [r2, #5]
            if(cur_opt[RANGINGCHOOSE] == 0xff)
 8004f86:	d038      	beq.n	8004ffa <rangingchoose_key_options+0xb2>
            if(opt_value == 0)
 8004f88:	b1c3      	cbz	r3, 8004fbc <rangingchoose_key_options+0x74>
            else if(opt_value == 1)
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d1f0      	bne.n	8004f70 <rangingchoose_key_options+0x28>
                if(language == ENGLISH)
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <rangingchoose_key_options+0xd8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d039      	beq.n	800500a <rangingchoose_key_options+0xc2>
                else if(language == CHINESE)
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d1ea      	bne.n	8004f70 <rangingchoose_key_options+0x28>
                    HMISends("b0.picc=4\xff\xff\xff");
 8004f9a:	4822      	ldr	r0, [pc, #136]	@ (8005024 <rangingchoose_key_options+0xdc>)
 8004f9c:	f7ff fa02 	bl	80043a4 <HMISends>
}
 8004fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=36\xff\xff\xff");
 8004fa4:	4820      	ldr	r0, [pc, #128]	@ (8005028 <rangingchoose_key_options+0xe0>)
 8004fa6:	f7ff b9fd 	b.w	80043a4 <HMISends>
            cur_opt[RANGINGCHOOSE]++;
 8004faa:	4a1c      	ldr	r2, [pc, #112]	@ (800501c <rangingchoose_key_options+0xd4>)
 8004fac:	7953      	ldrb	r3, [r2, #5]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
            if(cur_opt[RANGINGCHOOSE] == 2)
 8004fb2:	2b02      	cmp	r3, #2
            cur_opt[RANGINGCHOOSE]++;
 8004fb4:	7153      	strb	r3, [r2, #5]
            if(cur_opt[RANGINGCHOOSE] == 2)
 8004fb6:	d1e7      	bne.n	8004f88 <rangingchoose_key_options+0x40>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	7153      	strb	r3, [r2, #5]
                if(language == ENGLISH)
 8004fbc:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <rangingchoose_key_options+0xd8>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b19b      	cbz	r3, 8004fea <rangingchoose_key_options+0xa2>
                else if(language == CHINESE)
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d1d4      	bne.n	8004f70 <rangingchoose_key_options+0x28>
                    HMISends("b0.picc=36\xff\xff\xff");
 8004fc6:	4819      	ldr	r0, [pc, #100]	@ (800502c <rangingchoose_key_options+0xe4>)
 8004fc8:	f7ff f9ec 	bl	80043a4 <HMISends>
}
 8004fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=4\xff\xff\xff");
 8004fd0:	4817      	ldr	r0, [pc, #92]	@ (8005030 <rangingchoose_key_options+0xe8>)
 8004fd2:	f7ff b9e7 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 8004fd6:	4817      	ldr	r0, [pc, #92]	@ (8005034 <rangingchoose_key_options+0xec>)
}
 8004fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HMISends("click b2,0\xff\xff\xff");
 8004fdc:	f7ff b9e2 	b.w	80043a4 <HMISends>
                HMISends("click b0,0\xff\xff\xff");
 8004fe0:	4815      	ldr	r0, [pc, #84]	@ (8005038 <rangingchoose_key_options+0xf0>)
}
 8004fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b0,0\xff\xff\xff");
 8004fe6:	f7ff b9dd 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=37\xff\xff\xff");
 8004fea:	4814      	ldr	r0, [pc, #80]	@ (800503c <rangingchoose_key_options+0xf4>)
 8004fec:	f7ff f9da 	bl	80043a4 <HMISends>
}
 8004ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=20\xff\xff\xff");
 8004ff4:	4812      	ldr	r0, [pc, #72]	@ (8005040 <rangingchoose_key_options+0xf8>)
 8004ff6:	f7ff b9d5 	b.w	80043a4 <HMISends>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	7153      	strb	r3, [r2, #5]
            if(opt_value == 0)
 8004ffe:	e7c6      	b.n	8004f8e <rangingchoose_key_options+0x46>
                HMISends("click b1,0\xff\xff\xff");
 8005000:	4810      	ldr	r0, [pc, #64]	@ (8005044 <rangingchoose_key_options+0xfc>)
}
 8005002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b1,0\xff\xff\xff");
 8005006:	f7ff b9cd 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=20\xff\xff\xff");
 800500a:	480f      	ldr	r0, [pc, #60]	@ (8005048 <rangingchoose_key_options+0x100>)
 800500c:	f7ff f9ca 	bl	80043a4 <HMISends>
}
 8005010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=37\xff\xff\xff");
 8005014:	480d      	ldr	r0, [pc, #52]	@ (800504c <rangingchoose_key_options+0x104>)
 8005016:	f7ff b9c5 	b.w	80043a4 <HMISends>
 800501a:	bf00      	nop
 800501c:	200006cc 	.word	0x200006cc
 8005020:	200006c8 	.word	0x200006c8
 8005024:	080096a4 	.word	0x080096a4
 8005028:	080096b4 	.word	0x080096b4
 800502c:	08009664 	.word	0x08009664
 8005030:	08009674 	.word	0x08009674
 8005034:	08009824 	.word	0x08009824
 8005038:	08009844 	.word	0x08009844
 800503c:	08009644 	.word	0x08009644
 8005040:	08009654 	.word	0x08009654
 8005044:	08009834 	.word	0x08009834
 8005048:	08009684 	.word	0x08009684
 800504c:	08009694 	.word	0x08009694

08005050 <locationchoose_key_options>:

void locationchoose_key_options(uint16_t key_value)
{
 8005050:	b508      	push	{r3, lr}
    switch(key_value)
 8005052:	f640 4302 	movw	r3, #3074	@ 0xc02
 8005056:	4298      	cmp	r0, r3
 8005058:	d02b      	beq.n	80050b2 <locationchoose_key_options+0x62>
 800505a:	d80e      	bhi.n	800507a <locationchoose_key_options+0x2a>
 800505c:	f240 4306 	movw	r3, #1030	@ 0x406
 8005060:	4298      	cmp	r0, r3
 8005062:	d03c      	beq.n	80050de <locationchoose_key_options+0x8e>
 8005064:	f640 0306 	movw	r3, #2054	@ 0x806
 8005068:	4298      	cmp	r0, r3
 800506a:	d105      	bne.n	8005078 <locationchoose_key_options+0x28>
            page_opts_sethighlight(LOCATIONCHOOSE, cur_opt[LOCATIONCHOOSE]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[LOCATIONCHOOSE] == 0)
 800506c:	4b2d      	ldr	r3, [pc, #180]	@ (8005124 <locationchoose_key_options+0xd4>)
 800506e:	799b      	ldrb	r3, [r3, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d039      	beq.n	80050e8 <locationchoose_key_options+0x98>
                HMISends("click b1,0\xff\xff\xff");
            else if(cur_opt[LOCATIONCHOOSE] == 1)
 8005074:	2b01      	cmp	r3, #1
 8005076:	d047      	beq.n	8005108 <locationchoose_key_options+0xb8>
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 8005078:	bd08      	pop	{r3, pc}
    switch(key_value)
 800507a:	f640 4304 	movw	r3, #3076	@ 0xc04
 800507e:	4298      	cmp	r0, r3
 8005080:	d1fa      	bne.n	8005078 <locationchoose_key_options+0x28>
            cur_opt[LOCATIONCHOOSE]--;
 8005082:	4a28      	ldr	r2, [pc, #160]	@ (8005124 <locationchoose_key_options+0xd4>)
 8005084:	7993      	ldrb	r3, [r2, #6]
 8005086:	3b01      	subs	r3, #1
 8005088:	b2db      	uxtb	r3, r3
            if(cur_opt[LOCATIONCHOOSE] == 0xff)
 800508a:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[LOCATIONCHOOSE]--;
 800508c:	7193      	strb	r3, [r2, #6]
            if(cur_opt[LOCATIONCHOOSE] == 0xff)
 800508e:	d038      	beq.n	8005102 <locationchoose_key_options+0xb2>
            if(opt_value == 0)
 8005090:	b1c3      	cbz	r3, 80050c4 <locationchoose_key_options+0x74>
            else if(opt_value == 1)
 8005092:	2b01      	cmp	r3, #1
 8005094:	d1f0      	bne.n	8005078 <locationchoose_key_options+0x28>
                if(language == ENGLISH)
 8005096:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <locationchoose_key_options+0xd8>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d039      	beq.n	8005112 <locationchoose_key_options+0xc2>
                else if(language == CHINESE)
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d1ea      	bne.n	8005078 <locationchoose_key_options+0x28>
                    HMISends("b0.picc=38\xff\xff\xff");
 80050a2:	4822      	ldr	r0, [pc, #136]	@ (800512c <locationchoose_key_options+0xdc>)
 80050a4:	f7ff f97e 	bl	80043a4 <HMISends>
}
 80050a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=5\xff\xff\xff");
 80050ac:	4820      	ldr	r0, [pc, #128]	@ (8005130 <locationchoose_key_options+0xe0>)
 80050ae:	f7ff b979 	b.w	80043a4 <HMISends>
            cur_opt[LOCATIONCHOOSE]++;
 80050b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005124 <locationchoose_key_options+0xd4>)
 80050b4:	7993      	ldrb	r3, [r2, #6]
 80050b6:	3301      	adds	r3, #1
 80050b8:	b2db      	uxtb	r3, r3
            if(cur_opt[LOCATIONCHOOSE] == 2)
 80050ba:	2b02      	cmp	r3, #2
            cur_opt[LOCATIONCHOOSE]++;
 80050bc:	7193      	strb	r3, [r2, #6]
            if(cur_opt[LOCATIONCHOOSE] == 2)
 80050be:	d1e7      	bne.n	8005090 <locationchoose_key_options+0x40>
 80050c0:	2300      	movs	r3, #0
 80050c2:	7193      	strb	r3, [r2, #6]
                if(language == ENGLISH)
 80050c4:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <locationchoose_key_options+0xd8>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	b19b      	cbz	r3, 80050f2 <locationchoose_key_options+0xa2>
                else if(language == CHINESE)
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d1d4      	bne.n	8005078 <locationchoose_key_options+0x28>
                    HMISends("b0.picc=5\xff\xff\xff");
 80050ce:	4819      	ldr	r0, [pc, #100]	@ (8005134 <locationchoose_key_options+0xe4>)
 80050d0:	f7ff f968 	bl	80043a4 <HMISends>
}
 80050d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=38\xff\xff\xff");
 80050d8:	4817      	ldr	r0, [pc, #92]	@ (8005138 <locationchoose_key_options+0xe8>)
 80050da:	f7ff b963 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 80050de:	4817      	ldr	r0, [pc, #92]	@ (800513c <locationchoose_key_options+0xec>)
}
 80050e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            HMISends("click b2,0\xff\xff\xff");
 80050e4:	f7ff b95e 	b.w	80043a4 <HMISends>
                HMISends("click b1,0\xff\xff\xff");
 80050e8:	4815      	ldr	r0, [pc, #84]	@ (8005140 <locationchoose_key_options+0xf0>)
}
 80050ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b1,0\xff\xff\xff");
 80050ee:	f7ff b959 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=21\xff\xff\xff");
 80050f2:	4814      	ldr	r0, [pc, #80]	@ (8005144 <locationchoose_key_options+0xf4>)
 80050f4:	f7ff f956 	bl	80043a4 <HMISends>
}
 80050f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=39\xff\xff\xff");
 80050fc:	4812      	ldr	r0, [pc, #72]	@ (8005148 <locationchoose_key_options+0xf8>)
 80050fe:	f7ff b951 	b.w	80043a4 <HMISends>
 8005102:	2301      	movs	r3, #1
 8005104:	7193      	strb	r3, [r2, #6]
            if(opt_value == 0)
 8005106:	e7c6      	b.n	8005096 <locationchoose_key_options+0x46>
                HMISends("click b0,0\xff\xff\xff");
 8005108:	4810      	ldr	r0, [pc, #64]	@ (800514c <locationchoose_key_options+0xfc>)
}
 800510a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                HMISends("click b0,0\xff\xff\xff");
 800510e:	f7ff b949 	b.w	80043a4 <HMISends>
                    HMISends("b0.picc=39\xff\xff\xff");
 8005112:	480f      	ldr	r0, [pc, #60]	@ (8005150 <locationchoose_key_options+0x100>)
 8005114:	f7ff f946 	bl	80043a4 <HMISends>
}
 8005118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                    HMISends("b1.picc=21\xff\xff\xff");
 800511c:	480d      	ldr	r0, [pc, #52]	@ (8005154 <locationchoose_key_options+0x104>)
 800511e:	f7ff b941 	b.w	80043a4 <HMISends>
 8005122:	bf00      	nop
 8005124:	200006cc 	.word	0x200006cc
 8005128:	200006c8 	.word	0x200006c8
 800512c:	08009724 	.word	0x08009724
 8005130:	08009734 	.word	0x08009734
 8005134:	080096e4 	.word	0x080096e4
 8005138:	080096f4 	.word	0x080096f4
 800513c:	08009824 	.word	0x08009824
 8005140:	08009834 	.word	0x08009834
 8005144:	080096c4 	.word	0x080096c4
 8005148:	080096d4 	.word	0x080096d4
 800514c:	08009844 	.word	0x08009844
 8005150:	08009704 	.word	0x08009704
 8005154:	08009714 	.word	0x08009714

08005158 <loca_id_choose_key_options>:

void loca_id_choose_key_options(uint16_t key_value)
{
    switch(key_value)
 8005158:	f640 4302 	movw	r3, #3074	@ 0xc02
 800515c:	4298      	cmp	r0, r3
 800515e:	d02f      	beq.n	80051c0 <loca_id_choose_key_options+0x68>
 8005160:	d816      	bhi.n	8005190 <loca_id_choose_key_options+0x38>
 8005162:	f240 4306 	movw	r3, #1030	@ 0x406
 8005166:	4298      	cmp	r0, r3
 8005168:	d036      	beq.n	80051d8 <loca_id_choose_key_options+0x80>
 800516a:	f640 0306 	movw	r3, #2054	@ 0x806
 800516e:	4298      	cmp	r0, r3
 8005170:	d17c      	bne.n	800526c <loca_id_choose_key_options+0x114>
            page_opts_sethighlight(LOCA_ID_CHOOSE, cur_opt[LOCA_ID_CHOOSE]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[LOCA_ID_CHOOSE] == 0)
 8005172:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <loca_id_choose_key_options+0x118>)
 8005174:	79db      	ldrb	r3, [r3, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d031      	beq.n	80051de <loca_id_choose_key_options+0x86>
                HMISends("click n0,0\xff\xff\xff");
            else if(cur_opt[LOCA_ID_CHOOSE] == 1)
 800517a:	3b01      	subs	r3, #1
 800517c:	2b0a      	cmp	r3, #10
 800517e:	d81e      	bhi.n	80051be <loca_id_choose_key_options+0x66>
 8005180:	e8df f003 	tbb	[pc, r3]
 8005184:	686b6e71 	.word	0x686b6e71
 8005188:	5356595c 	.word	0x5356595c
 800518c:	5f62      	.short	0x5f62
 800518e:	65          	.byte	0x65
 800518f:	00          	.byte	0x00
    switch(key_value)
 8005190:	f640 4304 	movw	r3, #3076	@ 0xc04
 8005194:	4298      	cmp	r0, r3
 8005196:	d112      	bne.n	80051be <loca_id_choose_key_options+0x66>
            cur_opt[LOCA_ID_CHOOSE]--;
 8005198:	4a35      	ldr	r2, [pc, #212]	@ (8005270 <loca_id_choose_key_options+0x118>)
 800519a:	79d3      	ldrb	r3, [r2, #7]
 800519c:	3b01      	subs	r3, #1
 800519e:	b2db      	uxtb	r3, r3
            if(cur_opt[LOCA_ID_CHOOSE] == 0xff)
 80051a0:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[LOCA_ID_CHOOSE]--;
 80051a2:	71d3      	strb	r3, [r2, #7]
            if(cur_opt[LOCA_ID_CHOOSE] == 0xff)
 80051a4:	d01e      	beq.n	80051e4 <loca_id_choose_key_options+0x8c>
            if(opt_value == 0)
 80051a6:	b1a3      	cbz	r3, 80051d2 <loca_id_choose_key_options+0x7a>
            else if(opt_value == 1)
 80051a8:	3b01      	subs	r3, #1
 80051aa:	2b0a      	cmp	r3, #10
 80051ac:	d807      	bhi.n	80051be <loca_id_choose_key_options+0x66>
 80051ae:	e8df f003 	tbb	[pc, r3]
 80051b2:	1e21      	.short	0x1e21
 80051b4:	2d2a2724 	.word	0x2d2a2724
 80051b8:	36393330 	.word	0x36393330
 80051bc:	1b          	.byte	0x1b
 80051bd:	00          	.byte	0x00
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 80051be:	4770      	bx	lr
            cur_opt[LOCA_ID_CHOOSE]++;
 80051c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005270 <loca_id_choose_key_options+0x118>)
 80051c2:	79d3      	ldrb	r3, [r2, #7]
 80051c4:	3301      	adds	r3, #1
 80051c6:	b2db      	uxtb	r3, r3
            if(cur_opt[LOCA_ID_CHOOSE] == 12)
 80051c8:	2b0c      	cmp	r3, #12
            cur_opt[LOCA_ID_CHOOSE]++;
 80051ca:	71d3      	strb	r3, [r2, #7]
            if(cur_opt[LOCA_ID_CHOOSE] == 12)
 80051cc:	d1eb      	bne.n	80051a6 <loca_id_choose_key_options+0x4e>
 80051ce:	2300      	movs	r3, #0
 80051d0:	71d3      	strb	r3, [r2, #7]
                HMISends("click b4,0\xff\xff\xff");
 80051d2:	4828      	ldr	r0, [pc, #160]	@ (8005274 <loca_id_choose_key_options+0x11c>)
 80051d4:	f7ff b8e6 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 80051d8:	4827      	ldr	r0, [pc, #156]	@ (8005278 <loca_id_choose_key_options+0x120>)
 80051da:	f7ff b8e3 	b.w	80043a4 <HMISends>
                HMISends("click n0,0\xff\xff\xff");
 80051de:	4827      	ldr	r0, [pc, #156]	@ (800527c <loca_id_choose_key_options+0x124>)
 80051e0:	f7ff b8e0 	b.w	80043a4 <HMISends>
 80051e4:	230b      	movs	r3, #11
 80051e6:	71d3      	strb	r3, [r2, #7]
                HMISends("click b15,0\xff\xff\xff");
 80051e8:	4825      	ldr	r0, [pc, #148]	@ (8005280 <loca_id_choose_key_options+0x128>)
 80051ea:	f7ff b8db 	b.w	80043a4 <HMISends>
                HMISends("click b6,0\xff\xff\xff");
 80051ee:	4825      	ldr	r0, [pc, #148]	@ (8005284 <loca_id_choose_key_options+0x12c>)
 80051f0:	f7ff b8d8 	b.w	80043a4 <HMISends>
                HMISends("click b5,0\xff\xff\xff");
 80051f4:	4824      	ldr	r0, [pc, #144]	@ (8005288 <loca_id_choose_key_options+0x130>)
 80051f6:	f7ff b8d5 	b.w	80043a4 <HMISends>
                HMISends("click b7,0\xff\xff\xff");
 80051fa:	4824      	ldr	r0, [pc, #144]	@ (800528c <loca_id_choose_key_options+0x134>)
 80051fc:	f7ff b8d2 	b.w	80043a4 <HMISends>
                HMISends("click b8,0\xff\xff\xff");
 8005200:	4823      	ldr	r0, [pc, #140]	@ (8005290 <loca_id_choose_key_options+0x138>)
 8005202:	f7ff b8cf 	b.w	80043a4 <HMISends>
                HMISends("click b9,0\xff\xff\xff");
 8005206:	4823      	ldr	r0, [pc, #140]	@ (8005294 <loca_id_choose_key_options+0x13c>)
 8005208:	f7ff b8cc 	b.w	80043a4 <HMISends>
                HMISends("click b10,0\xff\xff\xff");
 800520c:	4822      	ldr	r0, [pc, #136]	@ (8005298 <loca_id_choose_key_options+0x140>)
 800520e:	f7ff b8c9 	b.w	80043a4 <HMISends>
                HMISends("click b11,0\xff\xff\xff");
 8005212:	4822      	ldr	r0, [pc, #136]	@ (800529c <loca_id_choose_key_options+0x144>)
 8005214:	f7ff b8c6 	b.w	80043a4 <HMISends>
                HMISends("click b12,0\xff\xff\xff");
 8005218:	4821      	ldr	r0, [pc, #132]	@ (80052a0 <loca_id_choose_key_options+0x148>)
 800521a:	f7ff b8c3 	b.w	80043a4 <HMISends>
                HMISends("click b14,0\xff\xff\xff");
 800521e:	4821      	ldr	r0, [pc, #132]	@ (80052a4 <loca_id_choose_key_options+0x14c>)
 8005220:	f7ff b8c0 	b.w	80043a4 <HMISends>
                HMISends("click b13,0\xff\xff\xff");
 8005224:	4820      	ldr	r0, [pc, #128]	@ (80052a8 <loca_id_choose_key_options+0x150>)
 8005226:	f7ff b8bd 	b.w	80043a4 <HMISends>
                HMISends("click b0,0\xff\xff\xff");
 800522a:	4820      	ldr	r0, [pc, #128]	@ (80052ac <loca_id_choose_key_options+0x154>)
 800522c:	f7ff b8ba 	b.w	80043a4 <HMISends>
                HMISends("click n7,0\xff\xff\xff");
 8005230:	481f      	ldr	r0, [pc, #124]	@ (80052b0 <loca_id_choose_key_options+0x158>)
 8005232:	f7ff b8b7 	b.w	80043a4 <HMISends>
                HMISends("click n6,0\xff\xff\xff");
 8005236:	481f      	ldr	r0, [pc, #124]	@ (80052b4 <loca_id_choose_key_options+0x15c>)
 8005238:	f7ff b8b4 	b.w	80043a4 <HMISends>
                HMISends("click n5,0\xff\xff\xff");
 800523c:	481e      	ldr	r0, [pc, #120]	@ (80052b8 <loca_id_choose_key_options+0x160>)
 800523e:	f7ff b8b1 	b.w	80043a4 <HMISends>
                HMISends("click b3,0\xff\xff\xff");
 8005242:	481e      	ldr	r0, [pc, #120]	@ (80052bc <loca_id_choose_key_options+0x164>)
 8005244:	f7ff b8ae 	b.w	80043a4 <HMISends>
                HMISends("click b1,0\xff\xff\xff");
 8005248:	481d      	ldr	r0, [pc, #116]	@ (80052c0 <loca_id_choose_key_options+0x168>)
 800524a:	f7ff b8ab 	b.w	80043a4 <HMISends>
                HMISends("click b20,0\xff\xff\xff");
 800524e:	481d      	ldr	r0, [pc, #116]	@ (80052c4 <loca_id_choose_key_options+0x16c>)
 8005250:	f7ff b8a8 	b.w	80043a4 <HMISends>
                HMISends("click n4,0\xff\xff\xff");
 8005254:	481c      	ldr	r0, [pc, #112]	@ (80052c8 <loca_id_choose_key_options+0x170>)
 8005256:	f7ff b8a5 	b.w	80043a4 <HMISends>
                HMISends("click n3,0\xff\xff\xff");
 800525a:	481c      	ldr	r0, [pc, #112]	@ (80052cc <loca_id_choose_key_options+0x174>)
 800525c:	f7ff b8a2 	b.w	80043a4 <HMISends>
                HMISends("click n2,0\xff\xff\xff");
 8005260:	481b      	ldr	r0, [pc, #108]	@ (80052d0 <loca_id_choose_key_options+0x178>)
 8005262:	f7ff b89f 	b.w	80043a4 <HMISends>
                HMISends("click n1,0\xff\xff\xff");
 8005266:	481b      	ldr	r0, [pc, #108]	@ (80052d4 <loca_id_choose_key_options+0x17c>)
 8005268:	f7ff b89c 	b.w	80043a4 <HMISends>
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200006cc 	.word	0x200006cc
 8005274:	08009744 	.word	0x08009744
 8005278:	08009824 	.word	0x08009824
 800527c:	08009854 	.word	0x08009854
 8005280:	080097f4 	.word	0x080097f4
 8005284:	08009764 	.word	0x08009764
 8005288:	08009754 	.word	0x08009754
 800528c:	08009774 	.word	0x08009774
 8005290:	08009784 	.word	0x08009784
 8005294:	08009794 	.word	0x08009794
 8005298:	080097a4 	.word	0x080097a4
 800529c:	080097b4 	.word	0x080097b4
 80052a0:	080097c4 	.word	0x080097c4
 80052a4:	080097e4 	.word	0x080097e4
 80052a8:	080097d4 	.word	0x080097d4
 80052ac:	08009844 	.word	0x08009844
 80052b0:	080098c4 	.word	0x080098c4
 80052b4:	080098b4 	.word	0x080098b4
 80052b8:	080098a4 	.word	0x080098a4
 80052bc:	08009814 	.word	0x08009814
 80052c0:	08009834 	.word	0x08009834
 80052c4:	080098d4 	.word	0x080098d4
 80052c8:	08009894 	.word	0x08009894
 80052cc:	08009884 	.word	0x08009884
 80052d0:	08009874 	.word	0x08009874
 80052d4:	08009864 	.word	0x08009864

080052d8 <setting_key_options>:

void setting_key_options(uint16_t key_value)
{
    switch(key_value)
 80052d8:	f640 4302 	movw	r3, #3074	@ 0xc02
 80052dc:	4298      	cmp	r0, r3
 80052de:	d026      	beq.n	800532e <setting_key_options+0x56>
 80052e0:	d811      	bhi.n	8005306 <setting_key_options+0x2e>
 80052e2:	f240 4306 	movw	r3, #1030	@ 0x406
 80052e6:	4298      	cmp	r0, r3
 80052e8:	d02d      	beq.n	8005346 <setting_key_options+0x6e>
 80052ea:	f640 0306 	movw	r3, #2054	@ 0x806
 80052ee:	4298      	cmp	r0, r3
 80052f0:	d149      	bne.n	8005386 <setting_key_options+0xae>
            page_opts_sethighlight(SETTING, cur_opt[SETTING]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[SETTING] == 0)
 80052f2:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <setting_key_options+0xb0>)
 80052f4:	7a1b      	ldrb	r3, [r3, #8]
 80052f6:	b34b      	cbz	r3, 800534c <setting_key_options+0x74>
                HMISends("click b11,0\xff\xff\xff");
            else if(cur_opt[SETTING] == 1)
 80052f8:	3b01      	subs	r3, #1
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d816      	bhi.n	800532c <setting_key_options+0x54>
 80052fe:	e8df f003 	tbb	[pc, r3]
 8005302:	3c3f      	.short	0x3c3f
 8005304:	3639      	.short	0x3639
    switch(key_value)
 8005306:	f640 4304 	movw	r3, #3076	@ 0xc04
 800530a:	4298      	cmp	r0, r3
 800530c:	d10e      	bne.n	800532c <setting_key_options+0x54>
            cur_opt[SETTING]--;
 800530e:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <setting_key_options+0xb0>)
 8005310:	7a13      	ldrb	r3, [r2, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	b2db      	uxtb	r3, r3
            if(cur_opt[SETTING] == 0xff)
 8005316:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[SETTING]--;
 8005318:	7213      	strb	r3, [r2, #8]
            if(cur_opt[SETTING] == 0xff)
 800531a:	d01a      	beq.n	8005352 <setting_key_options+0x7a>
			if(opt_value == 0)
 800531c:	b183      	cbz	r3, 8005340 <setting_key_options+0x68>
            else if(opt_value == 1)
 800531e:	3b01      	subs	r3, #1
 8005320:	2b03      	cmp	r3, #3
 8005322:	d803      	bhi.n	800532c <setting_key_options+0x54>
 8005324:	e8df f003 	tbb	[pc, r3]
 8005328:	171a201d 	.word	0x171a201d
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
    }
}
 800532c:	4770      	bx	lr
            cur_opt[SETTING]++;
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <setting_key_options+0xb0>)
 8005330:	7a13      	ldrb	r3, [r2, #8]
 8005332:	3301      	adds	r3, #1
 8005334:	b2db      	uxtb	r3, r3
            if(cur_opt[SETTING] == 5)
 8005336:	2b05      	cmp	r3, #5
            cur_opt[SETTING]++;
 8005338:	7213      	strb	r3, [r2, #8]
            if(cur_opt[SETTING] == 5)
 800533a:	d1ef      	bne.n	800531c <setting_key_options+0x44>
 800533c:	2300      	movs	r3, #0
 800533e:	7213      	strb	r3, [r2, #8]
                HMISends("click b12,0\xff\xff\xff");
 8005340:	4812      	ldr	r0, [pc, #72]	@ (800538c <setting_key_options+0xb4>)
 8005342:	f7ff b82f 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 8005346:	4812      	ldr	r0, [pc, #72]	@ (8005390 <setting_key_options+0xb8>)
 8005348:	f7ff b82c 	b.w	80043a4 <HMISends>
                HMISends("click b11,0\xff\xff\xff");
 800534c:	4811      	ldr	r0, [pc, #68]	@ (8005394 <setting_key_options+0xbc>)
 800534e:	f7ff b829 	b.w	80043a4 <HMISends>
 8005352:	2304      	movs	r3, #4
 8005354:	7213      	strb	r3, [r2, #8]
                HMISends("click b16,0\xff\xff\xff");
 8005356:	4810      	ldr	r0, [pc, #64]	@ (8005398 <setting_key_options+0xc0>)
 8005358:	f7ff b824 	b.w	80043a4 <HMISends>
                HMISends("click b15,0\xff\xff\xff");
 800535c:	480f      	ldr	r0, [pc, #60]	@ (800539c <setting_key_options+0xc4>)
 800535e:	f7ff b821 	b.w	80043a4 <HMISends>
                HMISends("click b13,0\xff\xff\xff");
 8005362:	480f      	ldr	r0, [pc, #60]	@ (80053a0 <setting_key_options+0xc8>)
 8005364:	f7ff b81e 	b.w	80043a4 <HMISends>
                HMISends("click b14,0\xff\xff\xff");
 8005368:	480e      	ldr	r0, [pc, #56]	@ (80053a4 <setting_key_options+0xcc>)
 800536a:	f7ff b81b 	b.w	80043a4 <HMISends>
                HMISends("click b0,0\xff\xff\xff");
 800536e:	480e      	ldr	r0, [pc, #56]	@ (80053a8 <setting_key_options+0xd0>)
 8005370:	f7ff b818 	b.w	80043a4 <HMISends>
                HMISends("click b7,0\xff\xff\xff");
 8005374:	480d      	ldr	r0, [pc, #52]	@ (80053ac <setting_key_options+0xd4>)
 8005376:	f7ff b815 	b.w	80043a4 <HMISends>
                HMISends("click b5,0\xff\xff\xff");
 800537a:	480d      	ldr	r0, [pc, #52]	@ (80053b0 <setting_key_options+0xd8>)
 800537c:	f7ff b812 	b.w	80043a4 <HMISends>
                HMISends("click b3,0\xff\xff\xff");
 8005380:	480c      	ldr	r0, [pc, #48]	@ (80053b4 <setting_key_options+0xdc>)
 8005382:	f7ff b80f 	b.w	80043a4 <HMISends>
 8005386:	4770      	bx	lr
 8005388:	200006cc 	.word	0x200006cc
 800538c:	080097c4 	.word	0x080097c4
 8005390:	08009824 	.word	0x08009824
 8005394:	080097b4 	.word	0x080097b4
 8005398:	08009804 	.word	0x08009804
 800539c:	080097f4 	.word	0x080097f4
 80053a0:	080097d4 	.word	0x080097d4
 80053a4:	080097e4 	.word	0x080097e4
 80053a8:	08009844 	.word	0x08009844
 80053ac:	08009774 	.word	0x08009774
 80053b0:	08009754 	.word	0x08009754
 80053b4:	08009814 	.word	0x08009814

080053b8 <about_key_options>:
    }
}

void about_key_options(uint16_t key_value)
{
    switch(key_value)
 80053b8:	f640 4302 	movw	r3, #3074	@ 0xc02
 80053bc:	4298      	cmp	r0, r3
 80053be:	d022      	beq.n	8005406 <about_key_options+0x4e>
 80053c0:	d80d      	bhi.n	80053de <about_key_options+0x26>
 80053c2:	f240 4306 	movw	r3, #1030	@ 0x406
 80053c6:	4298      	cmp	r0, r3
 80053c8:	d01a      	beq.n	8005400 <about_key_options+0x48>
 80053ca:	f640 0306 	movw	r3, #2054	@ 0x806
 80053ce:	4298      	cmp	r0, r3
 80053d0:	d132      	bne.n	8005438 <about_key_options+0x80>
            page_opts_sethighlight(ABOUT, cur_opt[ABOUT]);
        }
        break;
        case KEY_OK:
        {
            if(cur_opt[ABOUT] == 0)
 80053d2:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <about_key_options+0x84>)
 80053d4:	7c1b      	ldrb	r3, [r3, #16]
 80053d6:	b32b      	cbz	r3, 8005424 <about_key_options+0x6c>
            {
                language = ENGLISH;
                HMISends("click b1,0\xff\xff\xff");
            }
            else if(cur_opt[ABOUT] == 1)
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d028      	beq.n	800542e <about_key_options+0x76>
        case KEY_BACK:
            HMISends("page menu\xff\xff\xff");
        break;
        default:break;
    }
}
 80053dc:	4770      	bx	lr
    switch(key_value)
 80053de:	f640 4304 	movw	r3, #3076	@ 0xc04
 80053e2:	4298      	cmp	r0, r3
 80053e4:	d1fa      	bne.n	80053dc <about_key_options+0x24>
            cur_opt[ABOUT]++;
 80053e6:	4a15      	ldr	r2, [pc, #84]	@ (800543c <about_key_options+0x84>)
 80053e8:	7c13      	ldrb	r3, [r2, #16]
 80053ea:	3301      	adds	r3, #1
 80053ec:	b2db      	uxtb	r3, r3
            if(cur_opt[ABOUT] == 2)
 80053ee:	2b02      	cmp	r3, #2
            cur_opt[ABOUT]++;
 80053f0:	7413      	strb	r3, [r2, #16]
            if(cur_opt[ABOUT] == 2)
 80053f2:	d012      	beq.n	800541a <about_key_options+0x62>
            if(opt_value == 0)
 80053f4:	b19b      	cbz	r3, 800541e <about_key_options+0x66>
            else if(opt_value == 1)
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d1f0      	bne.n	80053dc <about_key_options+0x24>
                HMISends("click b2,0\xff\xff\xff");
 80053fa:	4811      	ldr	r0, [pc, #68]	@ (8005440 <about_key_options+0x88>)
 80053fc:	f7fe bfd2 	b.w	80043a4 <HMISends>
            HMISends("page menu\xff\xff\xff");
 8005400:	4810      	ldr	r0, [pc, #64]	@ (8005444 <about_key_options+0x8c>)
 8005402:	f7fe bfcf 	b.w	80043a4 <HMISends>
            cur_opt[ABOUT]--;
 8005406:	4a0d      	ldr	r2, [pc, #52]	@ (800543c <about_key_options+0x84>)
 8005408:	7c13      	ldrb	r3, [r2, #16]
 800540a:	3b01      	subs	r3, #1
 800540c:	b2db      	uxtb	r3, r3
            if(cur_opt[ABOUT] == 0xff)
 800540e:	2bff      	cmp	r3, #255	@ 0xff
            cur_opt[ABOUT]--;
 8005410:	7413      	strb	r3, [r2, #16]
            if(cur_opt[ABOUT] == 0xff)
 8005412:	d1ef      	bne.n	80053f4 <about_key_options+0x3c>
 8005414:	2301      	movs	r3, #1
 8005416:	7413      	strb	r3, [r2, #16]
            if(opt_value == 0)
 8005418:	e7ef      	b.n	80053fa <about_key_options+0x42>
 800541a:	2300      	movs	r3, #0
 800541c:	7413      	strb	r3, [r2, #16]
                HMISends("click b3,0\xff\xff\xff");
 800541e:	480a      	ldr	r0, [pc, #40]	@ (8005448 <about_key_options+0x90>)
 8005420:	f7fe bfc0 	b.w	80043a4 <HMISends>
                language = ENGLISH;
 8005424:	4a09      	ldr	r2, [pc, #36]	@ (800544c <about_key_options+0x94>)
                HMISends("click b1,0\xff\xff\xff");
 8005426:	480a      	ldr	r0, [pc, #40]	@ (8005450 <about_key_options+0x98>)
                language = ENGLISH;
 8005428:	7013      	strb	r3, [r2, #0]
                HMISends("click b1,0\xff\xff\xff");
 800542a:	f7fe bfbb 	b.w	80043a4 <HMISends>
                language = CHINESE;
 800542e:	4a07      	ldr	r2, [pc, #28]	@ (800544c <about_key_options+0x94>)
                HMISends("click b0,0\xff\xff\xff");
 8005430:	4808      	ldr	r0, [pc, #32]	@ (8005454 <about_key_options+0x9c>)
                language = CHINESE;
 8005432:	7013      	strb	r3, [r2, #0]
                HMISends("click b0,0\xff\xff\xff");
 8005434:	f7fe bfb6 	b.w	80043a4 <HMISends>
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	200006cc 	.word	0x200006cc
 8005440:	08009824 	.word	0x08009824
 8005444:	08009240 	.word	0x08009240
 8005448:	08009814 	.word	0x08009814
 800544c:	200006c8 	.word	0x200006c8
 8005450:	08009834 	.word	0x08009834
 8005454:	08009844 	.word	0x08009844

08005458 <key_options>:

void key_options(uint16_t key_value)
{
    if(hmi_page == MENU)
 8005458:	4b2d      	ldr	r3, [pc, #180]	@ (8005510 <key_options+0xb8>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d00b      	beq.n	8005478 <key_options+0x20>
        menu_key_options(key_value);
    else if(hmi_page == LONGTXCHOOSE)
 8005460:	3b03      	subs	r3, #3
 8005462:	2b0d      	cmp	r3, #13
 8005464:	d820      	bhi.n	80054a8 <key_options+0x50>
 8005466:	e8df f003 	tbb	[pc, r3]
 800546a:	0d0b      	.short	0x0d0b
 800546c:	1513110f 	.word	0x1513110f
 8005470:	3b292017 	.word	0x3b292017
 8005474:	091f4432 	.word	0x091f4432
        menu_key_options(key_value);
 8005478:	f7ff bb7e 	b.w	8004b78 <menu_key_options>
    else if(hmi_page == RANGINGINIT)
        ranginginit_key_options(key_value);
    else if(hmi_page == RANGINGRESP)
        rangingresp_key_options(key_value);
    else if(hmi_page == ABOUT)
        about_key_options(key_value);
 800547c:	f7ff bf9c 	b.w	80053b8 <about_key_options>
        longtxchoose_key_options(key_value);
 8005480:	f7ff bc5a 	b.w	8004d38 <longtxchoose_key_options>
        simgletxchoose_key_options(key_value);
 8005484:	f7ff bcdc 	b.w	8004e40 <simgletxchoose_key_options>
        rangingchoose_key_options(key_value);
 8005488:	f7ff bd5e 	b.w	8004f48 <rangingchoose_key_options>
        locationchoose_key_options(key_value);
 800548c:	f7ff bde0 	b.w	8005050 <locationchoose_key_options>
        loca_id_choose_key_options(key_value);
 8005490:	f7ff be62 	b.w	8005158 <loca_id_choose_key_options>
        setting_key_options(key_value);
 8005494:	f7ff bf20 	b.w	80052d8 <setting_key_options>
    switch(key_value)
 8005498:	f240 4306 	movw	r3, #1030	@ 0x406
 800549c:	4298      	cmp	r0, r3
 800549e:	d034      	beq.n	800550a <key_options+0xb2>
 80054a0:	f640 0306 	movw	r3, #2054	@ 0x806
 80054a4:	4298      	cmp	r0, r3
 80054a6:	d02d      	beq.n	8005504 <key_options+0xac>
}
 80054a8:	4770      	bx	lr
    switch(key_value)
 80054aa:	f240 4306 	movw	r3, #1030	@ 0x406
 80054ae:	4298      	cmp	r0, r3
 80054b0:	d02b      	beq.n	800550a <key_options+0xb2>
 80054b2:	f640 0306 	movw	r3, #2054	@ 0x806
 80054b6:	4298      	cmp	r0, r3
 80054b8:	d024      	beq.n	8005504 <key_options+0xac>
 80054ba:	4770      	bx	lr
 80054bc:	f240 4306 	movw	r3, #1030	@ 0x406
 80054c0:	4298      	cmp	r0, r3
 80054c2:	d022      	beq.n	800550a <key_options+0xb2>
 80054c4:	f640 0306 	movw	r3, #2054	@ 0x806
 80054c8:	4298      	cmp	r0, r3
 80054ca:	d01b      	beq.n	8005504 <key_options+0xac>
 80054cc:	4770      	bx	lr
 80054ce:	f240 4306 	movw	r3, #1030	@ 0x406
 80054d2:	4298      	cmp	r0, r3
 80054d4:	d019      	beq.n	800550a <key_options+0xb2>
 80054d6:	f640 0306 	movw	r3, #2054	@ 0x806
 80054da:	4298      	cmp	r0, r3
 80054dc:	d012      	beq.n	8005504 <key_options+0xac>
 80054de:	4770      	bx	lr
 80054e0:	f240 4306 	movw	r3, #1030	@ 0x406
 80054e4:	4298      	cmp	r0, r3
 80054e6:	d010      	beq.n	800550a <key_options+0xb2>
 80054e8:	f640 0306 	movw	r3, #2054	@ 0x806
 80054ec:	4298      	cmp	r0, r3
 80054ee:	d009      	beq.n	8005504 <key_options+0xac>
 80054f0:	4770      	bx	lr
 80054f2:	f240 4306 	movw	r3, #1030	@ 0x406
 80054f6:	4298      	cmp	r0, r3
 80054f8:	d007      	beq.n	800550a <key_options+0xb2>
 80054fa:	f640 0306 	movw	r3, #2054	@ 0x806
 80054fe:	4298      	cmp	r0, r3
 8005500:	d000      	beq.n	8005504 <key_options+0xac>
 8005502:	4770      	bx	lr
            HMISends("click b0,0\xff\xff\xff");
 8005504:	4803      	ldr	r0, [pc, #12]	@ (8005514 <key_options+0xbc>)
 8005506:	f7fe bf4d 	b.w	80043a4 <HMISends>
            HMISends("click b2,0\xff\xff\xff");
 800550a:	4803      	ldr	r0, [pc, #12]	@ (8005518 <key_options+0xc0>)
 800550c:	f7fe bf4a 	b.w	80043a4 <HMISends>
 8005510:	200000ac 	.word	0x200000ac
 8005514:	08009844 	.word	0x08009844
 8005518:	08009824 	.word	0x08009824

0800551c <resp_msg_get_ts>:
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
    int i;
    *ts = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	600b      	str	r3, [r1, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8005520:	7803      	ldrb	r3, [r0, #0]
 8005522:	600b      	str	r3, [r1, #0]
 8005524:	7842      	ldrb	r2, [r0, #1]
 8005526:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	7882      	ldrb	r2, [r0, #2]
 800552e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005532:	600b      	str	r3, [r1, #0]
 8005534:	78c2      	ldrb	r2, [r0, #3]
 8005536:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800553a:	600b      	str	r3, [r1, #0]
    }
}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 8005540:	b500      	push	{lr}
 8005542:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 8005544:	4668      	mov	r0, sp
 8005546:	f7fd fb19 	bl	8002b7c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
    {
        ts <<= 8;
        ts |= ts_tab[i];
 800554a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800554e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005552:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8005556:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800555a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800555e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8005562:	f89d 0000 	ldrb.w	r0, [sp]
 8005566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    }
    return ts;
}
 800556a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800556e:	0c09      	lsrs	r1, r1, #16
 8005570:	b003      	add	sp, #12
 8005572:	f85d fb04 	ldr.w	pc, [sp], #4
 8005576:	bf00      	nop

08005578 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8005578:	b500      	push	{lr}
 800557a:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 800557c:	4668      	mov	r0, sp
 800557e:	f7fd fb41 	bl	8002c04 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
    {
        ts <<= 8;
        ts |= ts_tab[i];
 8005582:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005586:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800558a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800558e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005592:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005596:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800559a:	f89d 0000 	ldrb.w	r0, [sp]
 800559e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    }
    return ts;
}
 80055a2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80055a6:	0c09      	lsrs	r1, r1, #16
 80055a8:	b003      	add	sp, #12
 80055aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80055ae:	bf00      	nop

080055b0 <final_msg_get_ts>:
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
    uint8_t i;
    *ts = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	600b      	str	r3, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 80055b4:	7803      	ldrb	r3, [r0, #0]
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	7842      	ldrb	r2, [r0, #1]
 80055ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80055be:	600b      	str	r3, [r1, #0]
 80055c0:	7882      	ldrb	r2, [r0, #2]
 80055c2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80055c6:	600b      	str	r3, [r1, #0]
 80055c8:	78c2      	ldrb	r2, [r0, #3]
 80055ca:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80055ce:	600b      	str	r3, [r1, #0]
    }
}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop

080055d4 <final_msg_set_ts>:
void final_msg_set_ts(uint8_t *ts_field, uint64_t ts)
{
    uint8_t i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
    {
        ts_field[i] = (uint8_t)ts;
 80055d4:	6002      	str	r2, [r0, #0]
        ts >>= 8;
    }
}
 80055d6:	4770      	bx	lr

080055d8 <resp_msg_set_ts>:
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 80055d8:	6002      	str	r2, [r0, #0]
    }
}
 80055da:	4770      	bx	lr

080055dc <simple_rx_init>:
    tx_cnt = 0;
    rx_cnt = 0;
}

uint8_t simple_rx_init(void)
{
 80055dc:	b538      	push	{r3, r4, r5, lr}
    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80055de:	f000 fb9d 	bl	8005d1c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80055e2:	2002      	movs	r0, #2
 80055e4:	f000 fb86 	bl	8005cf4 <Sleep>
    flags.option_timeout = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	4d26      	ldr	r5, [pc, #152]	@ (8005684 <simple_rx_init+0xa8>)
 80055ec:	822b      	strh	r3, [r5, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80055ee:	e005      	b.n	80055fc <simple_rx_init+0x20>
    {
        hmi_recv();
 80055f0:	f7fb fce6 	bl	8000fc0 <hmi_recv>
        if(flags.option_timeout > 300)
 80055f4:	8a2b      	ldrh	r3, [r5, #16]
 80055f6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80055fa:	d831      	bhi.n	8005660 <simple_rx_init+0x84>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80055fc:	f7fd fc0c 	bl	8002e18 <dwt_checkidlerc>
 8005600:	4604      	mov	r4, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	d0f4      	beq.n	80055f0 <simple_rx_init+0x14>
            Sleep(1000);
            HMISends("page menu\xff\xff\xff"); 
            return 1;
        }
    };
    flags.option_timeout = 0;
 8005606:	2000      	movs	r0, #0
 8005608:	8228      	strh	r0, [r5, #16]
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 800560a:	f7fc f86f 	bl	80016ec <dwt_initialise>
 800560e:	3001      	adds	r0, #1
 8005610:	d033      	beq.n	800567a <simple_rx_init+0x9e>
        HMISends("page menu\xff\xff\xff");
        return 1;
    }

    /* Configure DW IC. */
    dwt_structs_init(SIMPLE_RX, &config, &Config_options);
 8005612:	2004      	movs	r0, #4
 8005614:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <simple_rx_init+0xac>)
 8005616:	491d      	ldr	r1, [pc, #116]	@ (800568c <simple_rx_init+0xb0>)
 8005618:	f7fb fe34 	bl	8001284 <dwt_structs_init>
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 800561c:	481b      	ldr	r0, [pc, #108]	@ (800568c <simple_rx_init+0xb0>)
 800561e:	f7fc fc85 	bl	8001f2c <dwt_configure>
 8005622:	4604      	mov	r4, r0
 8005624:	bb58      	cbnz	r0, 800567e <simple_rx_init+0xa2>
        Sleep(1000);
        HMISends("page menu\xff\xff\xff");
        return 1;
    }
    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&Config_options);
 8005626:	4818      	ldr	r0, [pc, #96]	@ (8005688 <simple_rx_init+0xac>)
 8005628:	f7fe f85e 	bl	80036e8 <dwt_configuretxrf>
    
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 800562c:	2007      	movs	r0, #7
 800562e:	f7fc f969 	bl	8001904 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 8005632:	4620      	mov	r0, r4
 8005634:	f7fc f936 	bl	80018a4 <dwt_setfinegraintxseq>

    dwt_setrxantennadelay(RX_ANT_DLY);
 8005638:	f244 0001 	movw	r0, #16385	@ 0x4001
 800563c:	f7fd f87e 	bl	800273c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8005640:	f244 0001 	movw	r0, #16385	@ 0x4001
 8005644:	f7fd f894 	bl	8002770 <dwt_settxantennadelay>
        
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK); 
 8005648:	2003      	movs	r0, #3
 800564a:	f7fd fc29 	bl	8002ea0 <dwt_setleds>
    
    HMISends("page simglerx\xff\xff\xff");
 800564e:	4810      	ldr	r0, [pc, #64]	@ (8005690 <simple_rx_init+0xb4>)
 8005650:	f7fe fea8 	bl	80043a4 <HMISends>
    tx_cnt = 0;
 8005654:	4a0f      	ldr	r2, [pc, #60]	@ (8005694 <simple_rx_init+0xb8>)
    rx_cnt = 0;
 8005656:	4b10      	ldr	r3, [pc, #64]	@ (8005698 <simple_rx_init+0xbc>)
    rx_reset_count();
    return 0;
 8005658:	4620      	mov	r0, r4
    tx_cnt = 0;
 800565a:	8014      	strh	r4, [r2, #0]
    rx_cnt = 0;
 800565c:	801c      	strh	r4, [r3, #0]
}
 800565e:	bd38      	pop	{r3, r4, r5, pc}
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 8005660:	480e      	ldr	r0, [pc, #56]	@ (800569c <simple_rx_init+0xc0>)
            flags.option_timeout = 0;
 8005662:	822c      	strh	r4, [r5, #16]
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8005664:	f7fe fe9e 	bl	80043a4 <HMISends>
        Sleep(1000); 
 8005668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800566c:	f000 fb42 	bl	8005cf4 <Sleep>
        HMISends("page menu\xff\xff\xff");
 8005670:	480b      	ldr	r0, [pc, #44]	@ (80056a0 <simple_rx_init+0xc4>)
 8005672:	f7fe fe97 	bl	80043a4 <HMISends>
            return 1;
 8005676:	2001      	movs	r0, #1
}
 8005678:	bd38      	pop	{r3, r4, r5, pc}
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 800567a:	480a      	ldr	r0, [pc, #40]	@ (80056a4 <simple_rx_init+0xc8>)
 800567c:	e7f2      	b.n	8005664 <simple_rx_init+0x88>
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 800567e:	480a      	ldr	r0, [pc, #40]	@ (80056a8 <simple_rx_init+0xcc>)
 8005680:	e7f0      	b.n	8005664 <simple_rx_init+0x88>
 8005682:	bf00      	nop
 8005684:	200006b0 	.word	0x200006b0
 8005688:	200000b0 	.word	0x200000b0
 800568c:	200000d4 	.word	0x200000d4
 8005690:	080098e4 	.word	0x080098e4
 8005694:	200006f4 	.word	0x200006f4
 8005698:	200006f2 	.word	0x200006f2
 800569c:	0800936c 	.word	0x0800936c
 80056a0:	08009240 	.word	0x08009240
 80056a4:	08009394 	.word	0x08009394
 80056a8:	080093bc 	.word	0x080093bc

080056ac <simple_rx>:
/**
 * Application entry point.
 */
void simple_rx(void)
{
 80056ac:	b570      	push	{r4, r5, r6, lr}
    /* Activate reception immediately. See NOTE 4 below. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE); 
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fd fdc4 	bl	800323c <dwt_rxenable>

    /* Poll until a frame is properly received or an error occurs. 
     * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
     * function to access it. */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR)))
 80056b4:	4c3f      	ldr	r4, [pc, #252]	@ (80057b4 <simple_rx+0x108>)
    {
        if(hmi_recv() == 1)
			return;
		if(flags.opt_1ms_flag == 10)
 80056b6:	4e40      	ldr	r6, [pc, #256]	@ (80057b8 <simple_rx+0x10c>)
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR)))
 80056b8:	e006      	b.n	80056c8 <simple_rx+0x1c>
        if(hmi_recv() == 1)
 80056ba:	f7fb fc81 	bl	8000fc0 <hmi_recv>
 80056be:	2801      	cmp	r0, #1
 80056c0:	d014      	beq.n	80056ec <simple_rx+0x40>
		if(flags.opt_1ms_flag == 10)
 80056c2:	7833      	ldrb	r3, [r6, #0]
 80056c4:	2b0a      	cmp	r3, #10
 80056c6:	d06c      	beq.n	80057a2 <simple_rx+0xf6>
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR)))
 80056c8:	2100      	movs	r1, #0
 80056ca:	2044      	movs	r0, #68	@ 0x44
 80056cc:	f7fb ff72 	bl	80015b4 <dwt_read32bitoffsetreg>
 80056d0:	ea10 0504 	ands.w	r5, r0, r4
 80056d4:	d0f1      	beq.n	80056ba <simple_rx+0xe>
			flags.opt_1ms_flag = 0;
			key_scan();
		}
        //if(flags.key_value == KEY_BACK || flags.key_value == KEY_OK) return;
    };
    if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 80056d6:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
 80056da:	d108      	bne.n	80056ee <simple_rx+0x42>
    }
    else
    {

        /* Clear RX error events in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 80056dc:	2044      	movs	r0, #68	@ 0x44
 80056de:	4a37      	ldr	r2, [pc, #220]	@ (80057bc <simple_rx+0x110>)
 80056e0:	f7fb ffd2 	bl	8001688 <dwt_write32bitoffsetreg>
    }
	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = SIMGLE_RX_RERUN_INTERVAL;
 80056e4:	4b34      	ldr	r3, [pc, #208]	@ (80057b8 <simple_rx+0x10c>)
 80056e6:	4a36      	ldr	r2, [pc, #216]	@ (80057c0 <simple_rx+0x114>)
 80056e8:	f8c3 200a 	str.w	r2, [r3, #10]
    flags.time_to_allow_run = 1; /* start counting */
}
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 80056ee:	2100      	movs	r1, #0
 80056f0:	204c      	movs	r0, #76	@ 0x4c
 80056f2:	f7fb ff5f 	bl	80015b4 <dwt_read32bitoffsetreg>
 80056f6:	4c33      	ldr	r4, [pc, #204]	@ (80057c4 <simple_rx+0x118>)
 80056f8:	f3c0 0109 	ubfx	r1, r0, #0, #10
        if (frame_len <= FRAME_LEN_MAX)
 80056fc:	f410 7260 	ands.w	r2, r0, #896	@ 0x380
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 8005700:	8021      	strh	r1, [r4, #0]
        if (frame_len <= FRAME_LEN_MAX)
 8005702:	d052      	beq.n	80057aa <simple_rx+0xfe>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8005704:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005708:	2100      	movs	r1, #0
 800570a:	2044      	movs	r0, #68	@ 0x44
 800570c:	f7fb ffbc 	bl	8001688 <dwt_write32bitoffsetreg>
        if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 8005710:	8823      	ldrh	r3, [r4, #0]
 8005712:	2b0e      	cmp	r3, #14
 8005714:	d1e6      	bne.n	80056e4 <simple_rx+0x38>
 8005716:	4c2c      	ldr	r4, [pc, #176]	@ (80057c8 <simple_rx+0x11c>)
 8005718:	7823      	ldrb	r3, [r4, #0]
 800571a:	2bc5      	cmp	r3, #197	@ 0xc5
 800571c:	d1e2      	bne.n	80056e4 <simple_rx+0x38>
 800571e:	7aa3      	ldrb	r3, [r4, #10]
 8005720:	2b43      	cmp	r3, #67	@ 0x43
 8005722:	d1df      	bne.n	80056e4 <simple_rx+0x38>
 8005724:	7ae3      	ldrb	r3, [r4, #11]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d1dc      	bne.n	80056e4 <simple_rx+0x38>
            rx_cnt++;
 800572a:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <simple_rx+0x120>)
            sprintf(msg_str, "t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 800572c:	4928      	ldr	r1, [pc, #160]	@ (80057d0 <simple_rx+0x124>)
            rx_cnt++;
 800572e:	881a      	ldrh	r2, [r3, #0]
            sprintf(msg_str, "t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005730:	4828      	ldr	r0, [pc, #160]	@ (80057d4 <simple_rx+0x128>)
            rx_cnt++;
 8005732:	3201      	adds	r2, #1
 8005734:	b292      	uxth	r2, r2
 8005736:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005738:	f002 fcca 	bl	80080d0 <siprintf>
            HMISends(msg_str);
 800573c:	4825      	ldr	r0, [pc, #148]	@ (80057d4 <simple_rx+0x128>)
 800573e:	f7fe fe31 	bl	80043a4 <HMISends>
                tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8005742:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <simple_rx+0x12c>)
 8005744:	f8d4 0006 	ldr.w	r0, [r4, #6]
 8005748:	f8d4 5002 	ldr.w	r5, [r4, #2]
            dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 800574c:	1f59      	subs	r1, r3, #5
                tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 800574e:	6058      	str	r0, [r3, #4]
            dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8005750:	2200      	movs	r2, #0
 8005752:	2015      	movs	r0, #21
                tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8005754:	601d      	str	r5, [r3, #0]
            dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8005756:	f7fd f825 	bl	80027a4 <dwt_writetxdata>
            dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 800575a:	2200      	movs	r2, #0
 800575c:	2015      	movs	r0, #21
 800575e:	4611      	mov	r1, r2
 8005760:	f7fd f87c 	bl	800285c <dwt_writetxfctrl>
            dwt_starttx(DWT_START_TX_IMMEDIATE);
 8005764:	2000      	movs	r0, #0
 8005766:	f7fd fc3f 	bl	8002fe8 <dwt_starttx>
            while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 800576a:	2100      	movs	r1, #0
 800576c:	2044      	movs	r0, #68	@ 0x44
 800576e:	f7fb ff21 	bl	80015b4 <dwt_read32bitoffsetreg>
 8005772:	0603      	lsls	r3, r0, #24
 8005774:	d5f9      	bpl.n	800576a <simple_rx+0xbe>
            tx_cnt++;
 8005776:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <simple_rx+0x130>)
            sprintf(msg_str, "t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 8005778:	4919      	ldr	r1, [pc, #100]	@ (80057e0 <simple_rx+0x134>)
            tx_cnt++;
 800577a:	881a      	ldrh	r2, [r3, #0]
            sprintf(msg_str, "t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 800577c:	4815      	ldr	r0, [pc, #84]	@ (80057d4 <simple_rx+0x128>)
            tx_cnt++;
 800577e:	3201      	adds	r2, #1
 8005780:	b292      	uxth	r2, r2
 8005782:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 8005784:	f002 fca4 	bl	80080d0 <siprintf>
            HMISends(msg_str);
 8005788:	4812      	ldr	r0, [pc, #72]	@ (80057d4 <simple_rx+0x128>)
 800578a:	f7fe fe0b 	bl	80043a4 <HMISends>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	2100      	movs	r1, #0
 8005792:	2044      	movs	r0, #68	@ 0x44
 8005794:	f7fb ff78 	bl	8001688 <dwt_write32bitoffsetreg>
            tx_msg[DATA_FRAME_SN_IDX]++;
 8005798:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <simple_rx+0x138>)
 800579a:	7893      	ldrb	r3, [r2, #2]
 800579c:	3301      	adds	r3, #1
 800579e:	7093      	strb	r3, [r2, #2]
 80057a0:	e7a0      	b.n	80056e4 <simple_rx+0x38>
			flags.opt_1ms_flag = 0;
 80057a2:	7035      	strb	r5, [r6, #0]
			key_scan();
 80057a4:	f7fe fe34 	bl	8004410 <key_scan>
 80057a8:	e78e      	b.n	80056c8 <simple_rx+0x1c>
            dwt_readrxdata(rx_buffer, frame_len, 0);
 80057aa:	4807      	ldr	r0, [pc, #28]	@ (80057c8 <simple_rx+0x11c>)
 80057ac:	f7fd f8c0 	bl	8002930 <dwt_readrxdata>
 80057b0:	e7a8      	b.n	8005704 <simple_rx+0x58>
 80057b2:	bf00      	nop
 80057b4:	2405d000 	.word	0x2405d000
 80057b8:	200006b0 	.word	0x200006b0
 80057bc:	24059000 	.word	0x24059000
 80057c0:	000103de 	.word	0x000103de
 80057c4:	200006f6 	.word	0x200006f6
 80057c8:	200006f8 	.word	0x200006f8
 80057cc:	200006f2 	.word	0x200006f2
 80057d0:	080098f8 	.word	0x080098f8
 80057d4:	200006e0 	.word	0x200006e0
 80057d8:	200000c1 	.word	0x200000c1
 80057dc:	200006f4 	.word	0x200006f4
 80057e0:	08009908 	.word	0x08009908
 80057e4:	200000bc 	.word	0x200000bc

080057e8 <simple_tx_init>:
{
    tx_cnt = 0;
    rx_cnt = 0;
}
uint8_t simple_tx_init(void)
{
 80057e8:	b510      	push	{r4, lr}
    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80057ea:	f000 fa97 	bl	8005d1c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80057ee:	2002      	movs	r0, #2
 80057f0:	f000 fa80 	bl	8005cf4 <Sleep>
    flags.option_timeout = 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	4c28      	ldr	r4, [pc, #160]	@ (8005898 <simple_tx_init+0xb0>)
 80057f8:	8223      	strh	r3, [r4, #16]
	
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80057fa:	e003      	b.n	8005804 <simple_tx_init+0x1c>
    {
        if(flags.option_timeout > 300)
 80057fc:	8a22      	ldrh	r2, [r4, #16]
 80057fe:	f5b2 7f96 	cmp.w	r2, #300	@ 0x12c
 8005802:	d838      	bhi.n	8005876 <simple_tx_init+0x8e>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8005804:	f7fd fb08 	bl	8002e18 <dwt_checkidlerc>
 8005808:	4603      	mov	r3, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d0f6      	beq.n	80057fc <simple_tx_init+0x14>
            Sleep(1000);
            HMISends("page menu\xff\xff\xff"); 
            return 1;
        }
    };
    flags.option_timeout = 0;
 800580e:	2000      	movs	r0, #0
 8005810:	8220      	strh	r0, [r4, #16]
	
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8005812:	f7fb ff6b 	bl	80016ec <dwt_initialise>
 8005816:	3001      	adds	r0, #1
 8005818:	d03a      	beq.n	8005890 <simple_tx_init+0xa8>
        HMISends("page menu\xff\xff\xff");
        return 1;
    }

    /* Configure DW IC. See NOTE 8 below. */
    dwt_structs_init(SIMPLE_TX, &config, &Config_options);
 800581a:	2003      	movs	r0, #3
 800581c:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <simple_tx_init+0xb4>)
 800581e:	4920      	ldr	r1, [pc, #128]	@ (80058a0 <simple_tx_init+0xb8>)
 8005820:	f7fb fd30 	bl	8001284 <dwt_structs_init>
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8005824:	481e      	ldr	r0, [pc, #120]	@ (80058a0 <simple_tx_init+0xb8>)
 8005826:	f7fc fb81 	bl	8001f2c <dwt_configure>
 800582a:	4604      	mov	r4, r0
 800582c:	bb90      	cbnz	r0, 8005894 <simple_tx_init+0xac>
        HMISends("page menu\xff\xff\xff");
        return 1;
    }
    
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 800582e:	2007      	movs	r0, #7
 8005830:	f7fc f868 	bl	8001904 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 8005834:	4620      	mov	r0, r4
 8005836:	f7fc f835 	bl	80018a4 <dwt_setfinegraintxseq>
    
    dwt_setrxantennadelay(RX_ANT_DLY);
 800583a:	f244 0001 	movw	r0, #16385	@ 0x4001
 800583e:	f7fc ff7d 	bl	800273c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8005842:	f244 0001 	movw	r0, #16385	@ 0x4001
 8005846:	f7fc ff93 	bl	8002770 <dwt_settxantennadelay>
    
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK) ;
 800584a:	2003      	movs	r0, #3
 800584c:	f7fd fb28 	bl	8002ea0 <dwt_setleds>

    /* Configure the TX spectrum parameters (power PG delay and PG Count) */
    dwt_configuretxrf(&Config_options);
 8005850:	4812      	ldr	r0, [pc, #72]	@ (800589c <simple_tx_init+0xb4>)
 8005852:	f7fd ff49 	bl	80036e8 <dwt_configuretxrf>
    
    /* Set delay to turn reception on after transmission of the frame. See NOTE 3 below. */
    dwt_setrxaftertxdelay(TX_TO_RX_DELAY_UUS);
 8005856:	203c      	movs	r0, #60	@ 0x3c
 8005858:	f7fd fa76 	bl	8002d48 <dwt_setrxaftertxdelay>

    /* Set response frame timeout. */
    dwt_setrxtimeout(RX_RESP_TO_UUS);
 800585c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005860:	f7fd fd84 	bl	800336c <dwt_setrxtimeout>
	
    HMISends("page simgletx\xff\xff\xff");
 8005864:	480f      	ldr	r0, [pc, #60]	@ (80058a4 <simple_tx_init+0xbc>)
 8005866:	f7fe fd9d 	bl	80043a4 <HMISends>
    tx_cnt = 0;
 800586a:	4a0f      	ldr	r2, [pc, #60]	@ (80058a8 <simple_tx_init+0xc0>)
    rx_cnt = 0;
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <simple_tx_init+0xc4>)
    tx_reset_count();
    return 0;
 800586e:	4620      	mov	r0, r4
    tx_cnt = 0;
 8005870:	8014      	strh	r4, [r2, #0]
    rx_cnt = 0;
 8005872:	801c      	strh	r4, [r3, #0]
}
 8005874:	bd10      	pop	{r4, pc}
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 8005876:	480e      	ldr	r0, [pc, #56]	@ (80058b0 <simple_tx_init+0xc8>)
            flags.option_timeout = 0;
 8005878:	8223      	strh	r3, [r4, #16]
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 800587a:	f7fe fd93 	bl	80043a4 <HMISends>
        Sleep(1000); 
 800587e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005882:	f000 fa37 	bl	8005cf4 <Sleep>
        HMISends("page menu\xff\xff\xff");
 8005886:	480b      	ldr	r0, [pc, #44]	@ (80058b4 <simple_tx_init+0xcc>)
 8005888:	f7fe fd8c 	bl	80043a4 <HMISends>
            return 1;
 800588c:	2001      	movs	r0, #1
}
 800588e:	bd10      	pop	{r4, pc}
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8005890:	4809      	ldr	r0, [pc, #36]	@ (80058b8 <simple_tx_init+0xd0>)
 8005892:	e7f2      	b.n	800587a <simple_tx_init+0x92>
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 8005894:	4809      	ldr	r0, [pc, #36]	@ (80058bc <simple_tx_init+0xd4>)
 8005896:	e7f0      	b.n	800587a <simple_tx_init+0x92>
 8005898:	200006b0 	.word	0x200006b0
 800589c:	200000e4 	.word	0x200000e4
 80058a0:	20000100 	.word	0x20000100
 80058a4:	08009918 	.word	0x08009918
 80058a8:	2000078c 	.word	0x2000078c
 80058ac:	2000078a 	.word	0x2000078a
 80058b0:	0800936c 	.word	0x0800936c
 80058b4:	08009240 	.word	0x08009240
 80058b8:	08009394 	.word	0x08009394
 80058bc:	080093bc 	.word	0x080093bc

080058c0 <simple_tx>:
/**
 * Application entry point.
 */
void simple_tx(void)
{
 80058c0:	b510      	push	{r4, lr}
    /* Write frame data to DW3000 and prepare transmission. See NOTE 7 below. */
    dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80058c2:	2200      	movs	r2, #0
 80058c4:	492a      	ldr	r1, [pc, #168]	@ (8005970 <simple_tx+0xb0>)
 80058c6:	200e      	movs	r0, #14
 80058c8:	f7fc ff6c 	bl	80027a4 <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 80058cc:	2200      	movs	r2, #0
 80058ce:	200e      	movs	r0, #14
 80058d0:	4611      	mov	r1, r2
 80058d2:	f7fc ffc3 	bl	800285c <dwt_writetxfctrl>

    tx_cnt++;
 80058d6:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <simple_tx+0xb4>)
    sprintf(msg_str, "simgletx.t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 80058d8:	4927      	ldr	r1, [pc, #156]	@ (8005978 <simple_tx+0xb8>)
    tx_cnt++;
 80058da:	881a      	ldrh	r2, [r3, #0]
    sprintf(msg_str, "simgletx.t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 80058dc:	4827      	ldr	r0, [pc, #156]	@ (800597c <simple_tx+0xbc>)
    tx_cnt++;
 80058de:	3201      	adds	r2, #1
 80058e0:	b292      	uxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]
    sprintf(msg_str, "simgletx.t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 80058e4:	f002 fbf4 	bl	80080d0 <siprintf>
    HMISends(msg_str);
 80058e8:	4824      	ldr	r0, [pc, #144]	@ (800597c <simple_tx+0xbc>)
 80058ea:	f7fe fd5b 	bl	80043a4 <HMISends>
    

    /* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 80058ee:	2002      	movs	r0, #2
    /* We assume that the transmission is achieved normally, now poll for reception of a frame or error/timeout.*/
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80058f0:	4c23      	ldr	r4, [pc, #140]	@ (8005980 <simple_tx+0xc0>)
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 80058f2:	f7fd fb79 	bl	8002fe8 <dwt_starttx>
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80058f6:	2100      	movs	r1, #0
 80058f8:	2044      	movs	r0, #68	@ 0x44
 80058fa:	f7fb fe5b 	bl	80015b4 <dwt_read32bitoffsetreg>
 80058fe:	4220      	tst	r0, r4
 8005900:	d0f9      	beq.n	80058f6 <simple_tx+0x36>
    { 
    };

    if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8005902:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
 8005906:	d02d      	beq.n	8005964 <simple_tx+0xa4>

        /* Clear local RX buffer to avoid having leftovers from previous receptions. This is not necessary but is included here to aid reading
         * the RX buffer. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
        {
            rx_buffer[i] = 0;
 8005908:	227f      	movs	r2, #127	@ 0x7f
 800590a:	2100      	movs	r1, #0
 800590c:	481d      	ldr	r0, [pc, #116]	@ (8005984 <simple_tx+0xc4>)
 800590e:	f002 fc52 	bl	80081b6 <memset>
        }

        /* A frame has been received, copy it to our local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 8005912:	2100      	movs	r1, #0
 8005914:	204c      	movs	r0, #76	@ 0x4c
 8005916:	f7fb fe4d 	bl	80015b4 <dwt_read32bitoffsetreg>
        if (frame_len <= FRAME_LEN_MAX)
 800591a:	f410 7260 	ands.w	r2, r0, #896	@ 0x380
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 800591e:	b281      	uxth	r1, r0
        if (frame_len <= FRAME_LEN_MAX)
 8005920:	d00e      	beq.n	8005940 <simple_tx+0x80>
            sprintf(msg_str, "simgletx.t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
            HMISends(msg_str);
        }

        /* Clear good RX frame event in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8005922:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005926:	2100      	movs	r1, #0
 8005928:	2044      	movs	r0, #68	@ 0x44
 800592a:	f7fb fead 	bl	8001688 <dwt_write32bitoffsetreg>
        /* Clear RX error/timeout events in the DW3000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
    }

    /* Increment the blink frame sequence number (modulo 256). */
    tx_msg[BLINK_FRAME_SN_IDX]++;
 800592e:	4a10      	ldr	r2, [pc, #64]	@ (8005970 <simple_tx+0xb0>)
	
	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = SIMGLE_TX_RERUN_INTERVAL;
 8005930:	4915      	ldr	r1, [pc, #84]	@ (8005988 <simple_tx+0xc8>)
    tx_msg[BLINK_FRAME_SN_IDX]++;
 8005932:	7853      	ldrb	r3, [r2, #1]
    flags.target_allow_run_time = SIMGLE_TX_RERUN_INTERVAL;
 8005934:	4815      	ldr	r0, [pc, #84]	@ (800598c <simple_tx+0xcc>)
    tx_msg[BLINK_FRAME_SN_IDX]++;
 8005936:	3301      	adds	r3, #1
 8005938:	7053      	strb	r3, [r2, #1]
    flags.target_allow_run_time = SIMGLE_TX_RERUN_INTERVAL;
 800593a:	f8c1 000a 	str.w	r0, [r1, #10]
    flags.time_to_allow_run = 1;	/* start counting */
}
 800593e:	bd10      	pop	{r4, pc}
            dwt_readrxdata(rx_buffer, frame_len, 0);
 8005940:	4810      	ldr	r0, [pc, #64]	@ (8005984 <simple_tx+0xc4>)
 8005942:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005946:	f7fc fff3 	bl	8002930 <dwt_readrxdata>
            rx_cnt++;
 800594a:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <simple_tx+0xd0>)
            sprintf(msg_str, "simgletx.t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 800594c:	4911      	ldr	r1, [pc, #68]	@ (8005994 <simple_tx+0xd4>)
            rx_cnt++;
 800594e:	881a      	ldrh	r2, [r3, #0]
            sprintf(msg_str, "simgletx.t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005950:	480a      	ldr	r0, [pc, #40]	@ (800597c <simple_tx+0xbc>)
            rx_cnt++;
 8005952:	3201      	adds	r2, #1
 8005954:	b292      	uxth	r2, r2
 8005956:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "simgletx.t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005958:	f002 fbba 	bl	80080d0 <siprintf>
            HMISends(msg_str);
 800595c:	4807      	ldr	r0, [pc, #28]	@ (800597c <simple_tx+0xbc>)
 800595e:	f7fe fd21 	bl	80043a4 <HMISends>
 8005962:	e7de      	b.n	8005922 <simple_tx+0x62>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8005964:	2044      	movs	r0, #68	@ 0x44
 8005966:	4a0c      	ldr	r2, [pc, #48]	@ (8005998 <simple_tx+0xd8>)
 8005968:	f7fb fe8e 	bl	8001688 <dwt_write32bitoffsetreg>
 800596c:	e7df      	b.n	800592e <simple_tx+0x6e>
 800596e:	bf00      	nop
 8005970:	200000f0 	.word	0x200000f0
 8005974:	2000078c 	.word	0x2000078c
 8005978:	0800992c 	.word	0x0800992c
 800597c:	20000778 	.word	0x20000778
 8005980:	2427d000 	.word	0x2427d000
 8005984:	20000790 	.word	0x20000790
 8005988:	200006b0 	.word	0x200006b0
 800598c:	000103e8 	.word	0x000103e8
 8005990:	2000078a 	.word	0x2000078a
 8005994:	08009944 	.word	0x08009944
 8005998:	24279000 	.word	0x24279000

0800599c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800599c:	4b0e      	ldr	r3, [pc, #56]	@ (80059d8 <HAL_MspInit+0x3c>)
{
 800599e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80059a0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80059a2:	490e      	ldr	r1, [pc, #56]	@ (80059dc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	f002 0201 	and.w	r2, r2, #1
 80059b0:	9200      	str	r2, [sp, #0]
 80059b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80059ba:	61da      	str	r2, [r3, #28]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80059c6:	684b      	ldr	r3, [r1, #4]
 80059c8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80059cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059d0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059d2:	b002      	add	sp, #8
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40010000 	.word	0x40010000

080059e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059e0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e2:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80059e4:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa4 <HAL_SPI_MspInit+0xc4>)
 80059e6:	6803      	ldr	r3, [r0, #0]
{
 80059e8:	b088      	sub	sp, #32
  if(hspi->Instance==SPI1)
 80059ea:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80059f0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 80059f4:	d004      	beq.n	8005a00 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80059f6:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa8 <HAL_SPI_MspInit+0xc8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d029      	beq.n	8005a50 <HAL_SPI_MspInit+0x70>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80059fc:	b008      	add	sp, #32
 80059fe:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a00:	4b2a      	ldr	r3, [pc, #168]	@ (8005aac <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a02:	26a0      	movs	r6, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a04:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a06:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a10:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a12:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a16:	9200      	str	r2, [sp, #0]
 8005a18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a1c:	4824      	ldr	r0, [pc, #144]	@ (8005ab0 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	f042 0204 	orr.w	r2, r2, #4
 8005a22:	619a      	str	r2, [r3, #24]
 8005a24:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a26:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a30:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a32:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a36:	f000 fbdb 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a3a:	2240      	movs	r2, #64	@ 0x40
 8005a3c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3e:	481c      	ldr	r0, [pc, #112]	@ (8005ab0 <HAL_SPI_MspInit+0xd0>)
 8005a40:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a48:	f000 fbd2 	bl	80061f0 <HAL_GPIO_Init>
}
 8005a4c:	b008      	add	sp, #32
 8005a4e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a50:	4b16      	ldr	r3, [pc, #88]	@ (8005aac <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005a52:	f44f 4620 	mov.w	r6, #40960	@ 0xa000
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a56:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005a58:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5e:	61da      	str	r2, [r3, #28]
 8005a60:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a62:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a64:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005a68:	9202      	str	r2, [sp, #8]
 8005a6a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6e:	4811      	ldr	r0, [pc, #68]	@ (8005ab4 <HAL_SPI_MspInit+0xd4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a70:	f042 0208 	orr.w	r2, r2, #8
 8005a74:	619a      	str	r2, [r3, #24]
 8005a76:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005a78:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a82:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a84:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a88:	f000 fbb2 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005a8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a90:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a92:	4808      	ldr	r0, [pc, #32]	@ (8005ab4 <HAL_SPI_MspInit+0xd4>)
 8005a94:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9c:	f000 fba8 	bl	80061f0 <HAL_GPIO_Init>
}
 8005aa0:	b008      	add	sp, #32
 8005aa2:	bdd0      	pop	{r4, r6, r7, pc}
 8005aa4:	40013000 	.word	0x40013000
 8005aa8:	40003800 	.word	0x40003800
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	40010800 	.word	0x40010800
 8005ab4:	40010c00 	.word	0x40010c00

08005ab8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <HAL_TIM_Base_MspInit+0x3c>)
 8005aba:	6802      	ldr	r2, [r0, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d000      	beq.n	8005ac2 <HAL_TIM_Base_MspInit+0xa>
 8005ac0:	4770      	bx	lr

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005ac2:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ac4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005ac8:	69d9      	ldr	r1, [r3, #28]
{
 8005aca:	b500      	push	{lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005acc:	f041 0104 	orr.w	r1, r1, #4
 8005ad0:	61d9      	str	r1, [r3, #28]
 8005ad2:	69db      	ldr	r3, [r3, #28]
{
 8005ad4:	b083      	sub	sp, #12
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005adc:	201e      	movs	r0, #30
 8005ade:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ae0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005ae2:	f000 fab5 	bl	8006050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005ae6:	201e      	movs	r0, #30
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005ae8:	b003      	add	sp, #12
 8005aea:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005aee:	f000 baeb 	b.w	80060c8 <HAL_NVIC_EnableIRQ>
 8005af2:	bf00      	nop
 8005af4:	40000800 	.word	0x40000800

08005af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005af8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afa:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8005afc:	4b1e      	ldr	r3, [pc, #120]	@ (8005b78 <HAL_UART_MspInit+0x80>)
 8005afe:	6802      	ldr	r2, [r0, #0]
{
 8005b00:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8005b02:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b04:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005b08:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8005b0c:	d001      	beq.n	8005b12 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005b0e:	b006      	add	sp, #24
 8005b10:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b12:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8005b16:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b18:	f44f 7600 	mov.w	r6, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b20:	619a      	str	r2, [r3, #24]
 8005b22:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b24:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b26:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005b2a:	9200      	str	r2, [sp, #0]
 8005b2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b30:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b32:	f042 0204 	orr.w	r2, r2, #4
 8005b36:	619a      	str	r2, [r3, #24]
 8005b38:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b3a:	4810      	ldr	r0, [pc, #64]	@ (8005b7c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b42:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b44:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b48:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b4c:	f000 fb50 	bl	80061f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b56:	a902      	add	r1, sp, #8
 8005b58:	4808      	ldr	r0, [pc, #32]	@ (8005b7c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b60:	f000 fb46 	bl	80061f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005b64:	4622      	mov	r2, r4
 8005b66:	4621      	mov	r1, r4
 8005b68:	2025      	movs	r0, #37	@ 0x25
 8005b6a:	f000 fa71 	bl	8006050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b6e:	2025      	movs	r0, #37	@ 0x25
 8005b70:	f000 faaa 	bl	80060c8 <HAL_NVIC_EnableIRQ>
}
 8005b74:	b006      	add	sp, #24
 8005b76:	bdd0      	pop	{r4, r6, r7, pc}
 8005b78:	40013800 	.word	0x40013800
 8005b7c:	40010800 	.word	0x40010800

08005b80 <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  while (1)
 8005b80:	e7fe      	b.n	8005b80 <NMI_Handler>
 8005b82:	bf00      	nop

08005b84 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  while (1)
 8005b84:	e7fe      	b.n	8005b84 <HardFault_Handler>
 8005b86:	bf00      	nop

08005b88 <MemManage_Handler>:
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  while (1)
 8005b88:	e7fe      	b.n	8005b88 <MemManage_Handler>
 8005b8a:	bf00      	nop

08005b8c <BusFault_Handler>:
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  while (1)
 8005b8c:	e7fe      	b.n	8005b8c <BusFault_Handler>
 8005b8e:	bf00      	nop

08005b90 <UsageFault_Handler>:
/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  while (1)
 8005b90:	e7fe      	b.n	8005b90 <UsageFault_Handler>
 8005b92:	bf00      	nop

08005b94 <SVC_Handler>:
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop

08005ba0 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
	time32_incr++;
 8005ba0:	4a02      	ldr	r2, [pc, #8]	@ (8005bac <SysTick_Handler+0xc>)
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 8005ba8:	f000 ba2e 	b.w	8006008 <HAL_IncTick>
 8005bac:	20000814 	.word	0x20000814

08005bb0 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim4);
 8005bb0:	4801      	ldr	r0, [pc, #4]	@ (8005bb8 <TIM4_IRQHandler+0x8>)
 8005bb2:	f001 bd69 	b.w	8007688 <HAL_TIM_IRQHandler>
 8005bb6:	bf00      	nop
 8005bb8:	200005b8 	.word	0x200005b8

08005bbc <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart1);
 8005bbc:	4801      	ldr	r0, [pc, #4]	@ (8005bc4 <USART1_IRQHandler+0x8>)
 8005bbe:	f001 bfeb 	b.w	8007b98 <HAL_UART_IRQHandler>
 8005bc2:	bf00      	nop
 8005bc4:	20000570 	.word	0x20000570

08005bc8 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == htim4.Instance)
 8005bc8:	4b17      	ldr	r3, [pc, #92]	@ (8005c28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005bca:	6802      	ldr	r2, [r0, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d000      	beq.n	8005bd4 <HAL_TIM_PeriodElapsedCallback+0xc>
            flags.option_timeout++;

        if(flags.ds_twr_timeout > 0)
            flags.ds_twr_timeout++;
    }
}
 8005bd2:	4770      	bx	lr
        if(flags.opt_1ms_flag < 10)
 8005bd4:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	2a09      	cmp	r2, #9
            flags.opt_1ms_flag++;
 8005bda:	bf9c      	itt	ls
 8005bdc:	3201      	addls	r2, #1
 8005bde:	701a      	strbls	r2, [r3, #0]
        if(flags.key_presstime > 0)
 8005be0:	885a      	ldrh	r2, [r3, #2]
 8005be2:	b10a      	cbz	r2, 8005be8 <HAL_TIM_PeriodElapsedCallback+0x20>
            flags.key_presstime++;
 8005be4:	3201      	adds	r2, #1
 8005be6:	805a      	strh	r2, [r3, #2]
        if(flags.uart_recv_time > 0)
 8005be8:	799a      	ldrb	r2, [r3, #6]
 8005bea:	b13a      	cbz	r2, 8005bfc <HAL_TIM_PeriodElapsedCallback+0x34>
            flags.uart_recv_time++;
 8005bec:	3201      	adds	r2, #1
 8005bee:	b2d2      	uxtb	r2, r2
        if(flags.uart_recv_time > 10)
 8005bf0:	2a0a      	cmp	r2, #10
            flags.uart_recv_time = 0;
 8005bf2:	bf8a      	itet	hi
 8005bf4:	f44f 7280 	movhi.w	r2, #256	@ 0x100
            flags.uart_recv_time++;
 8005bf8:	719a      	strbls	r2, [r3, #6]
            flags.uart_recv_time = 0;
 8005bfa:	80da      	strhhi	r2, [r3, #6]
        if(flags.time_to_allow_run > 0)
 8005bfc:	899a      	ldrh	r2, [r3, #12]
 8005bfe:	b14a      	cbz	r2, 8005c14 <HAL_TIM_PeriodElapsedCallback+0x4c>
            if(flags.time_to_allow_run > flags.target_allow_run_time)
 8005c00:	8959      	ldrh	r1, [r3, #10]
            flags.time_to_allow_run++;
 8005c02:	3201      	adds	r2, #1
 8005c04:	b292      	uxth	r2, r2
            if(flags.time_to_allow_run > flags.target_allow_run_time)
 8005c06:	4291      	cmp	r1, r2
            flags.time_to_allow_run++;
 8005c08:	819a      	strh	r2, [r3, #12]
            if(flags.time_to_allow_run > flags.target_allow_run_time)
 8005c0a:	d203      	bcs.n	8005c14 <HAL_TIM_PeriodElapsedCallback+0x4c>
                flags.time_to_allow_run = 0;
 8005c0c:	2100      	movs	r1, #0
                flags.func_allow_run = 1;
 8005c0e:	2201      	movs	r2, #1
                flags.time_to_allow_run = 0;
 8005c10:	8199      	strh	r1, [r3, #12]
                flags.func_allow_run = 1;
 8005c12:	721a      	strb	r2, [r3, #8]
        if(flags.option_timeout > 0)
 8005c14:	8a1a      	ldrh	r2, [r3, #16]
 8005c16:	b10a      	cbz	r2, 8005c1c <HAL_TIM_PeriodElapsedCallback+0x54>
            flags.option_timeout++;
 8005c18:	3201      	adds	r2, #1
 8005c1a:	821a      	strh	r2, [r3, #16]
        if(flags.ds_twr_timeout > 0)
 8005c1c:	89da      	ldrh	r2, [r3, #14]
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	d0d7      	beq.n	8005bd2 <HAL_TIM_PeriodElapsedCallback+0xa>
            flags.ds_twr_timeout++;
 8005c22:	3201      	adds	r2, #1
 8005c24:	81da      	strh	r2, [r3, #14]
}
 8005c26:	4770      	bx	lr
 8005c28:	200005b8 	.word	0x200005b8
 8005c2c:	200006b0 	.word	0x200006b0

08005c30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005c30:	2001      	movs	r0, #1
 8005c32:	4770      	bx	lr

08005c34 <_kill>:

int _kill(int pid, int sig)
{
 8005c34:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c36:	f002 fb0d 	bl	8008254 <__errno>
 8005c3a:	2216      	movs	r2, #22
 8005c3c:	4603      	mov	r3, r0
  return -1;
}
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  errno = EINVAL;
 8005c42:	601a      	str	r2, [r3, #0]
}
 8005c44:	bd08      	pop	{r3, pc}
 8005c46:	bf00      	nop

08005c48 <_exit>:

void _exit (int status)
{
 8005c48:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005c4a:	f002 fb03 	bl	8008254 <__errno>
 8005c4e:	2316      	movs	r3, #22
 8005c50:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005c52:	e7fe      	b.n	8005c52 <_exit+0xa>

08005c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c56:	1e16      	subs	r6, r2, #0
 8005c58:	dd07      	ble.n	8005c6a <_read+0x16>
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8005c5e:	f3af 8000 	nop.w
 8005c62:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c66:	42a5      	cmp	r5, r4
 8005c68:	d1f9      	bne.n	8005c5e <_read+0xa>
  }

  return len;
}
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	bf00      	nop

08005c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c70:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c72:	1e16      	subs	r6, r2, #0
 8005c74:	dd07      	ble.n	8005c86 <_write+0x16>
 8005c76:	460c      	mov	r4, r1
 8005c78:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8005c7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c82:	42ac      	cmp	r4, r5
 8005c84:	d1f9      	bne.n	8005c7a <_write+0xa>
  }
  return len;
}
 8005c86:	4630      	mov	r0, r6
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	bf00      	nop

08005c8c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8005c98:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8005c9a:	604b      	str	r3, [r1, #4]
}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	4770      	bx	lr

08005ca4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4770      	bx	lr

08005ca8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ca8:	490d      	ldr	r1, [pc, #52]	@ (8005ce0 <_sbrk+0x38>)
{
 8005caa:	4603      	mov	r3, r0
 8005cac:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce4 <_sbrk+0x3c>)
 8005cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005ce8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8005cb2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cb4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005cb6:	b120      	cbz	r0, 8005cc2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cb8:	4403      	add	r3, r0
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d807      	bhi.n	8005cce <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005cbe:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8005cc0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005cc2:	4c0a      	ldr	r4, [pc, #40]	@ (8005cec <_sbrk+0x44>)
 8005cc4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8005cc6:	4403      	add	r3, r0
 8005cc8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8005cca:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005ccc:	d9f7      	bls.n	8005cbe <_sbrk+0x16>
    errno = ENOMEM;
 8005cce:	f002 fac1 	bl	8008254 <__errno>
 8005cd2:	220c      	movs	r2, #12
 8005cd4:	4603      	mov	r3, r0
    return (void *)-1;
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000810 	.word	0x20000810
 8005ce4:	20005000 	.word	0x20005000
 8005ce8:	00000400 	.word	0x00000400
 8005cec:	20000968 	.word	0x20000968

08005cf0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop

08005cf4 <Sleep>:
/******************************************
*          Get Tick Count
*******************************************/
unsigned long portGetTickCnt(void)
{
	return time32_incr;
 8005cf4:	4a03      	ldr	r2, [pc, #12]	@ (8005d04 <Sleep+0x10>)
 8005cf6:	6813      	ldr	r3, [r2, #0]
/******************************************
*   
*******************************************/
void sleep_ms(unsigned int time_ms)
{
	unsigned long end = portGetTickCnt() + time_ms;
 8005cf8:	4418      	add	r0, r3
	return time32_incr;
 8005cfa:	6813      	ldr	r3, [r2, #0]
	while ((signed long)(portGetTickCnt() - end) <= 0)
 8005cfc:	1a1b      	subs	r3, r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	ddfb      	ble.n	8005cfa <Sleep+0x6>
*          sleep functions
*******************************************/
void Sleep(uint32_t time_ms)
{
	sleep_ms(time_ms);
}
 8005d02:	4770      	bx	lr
 8005d04:	20000814 	.word	0x20000814

08005d08 <deca_usleep>:

void deca_usleep(unsigned int usec)
{
    unsigned int i;

	usec*=12;
 8005d08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	for(i=0;i<usec;i++)
 8005d0c:	0080      	lsls	r0, r0, #2
 8005d0e:	d004      	beq.n	8005d1a <deca_usleep+0x12>
 8005d10:	2300      	movs	r3, #0
	{
		__NOP();
 8005d12:	bf00      	nop
	for(i=0;i<usec;i++)
 8005d14:	3301      	adds	r3, #1
 8005d16:	4298      	cmp	r0, r3
 8005d18:	d1fb      	bne.n	8005d12 <deca_usleep+0xa>
	}
}
 8005d1a:	4770      	bx	lr

08005d1c <reset_DWIC>:

/******************************************
*             reset UWB
*******************************************/
void reset_DWIC(void)
{
 8005d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
    if(running_device == DEV_UWB3000F27)
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd8 <reset_DWIC+0xbc>)
{
 8005d20:	b085      	sub	sp, #20
    if(running_device == DEV_UWB3000F27)
 8005d22:	781c      	ldrb	r4, [r3, #0]
 8005d24:	bb4c      	cbnz	r4, 8005d7a <reset_DWIC+0x5e>
    {
        // Enable GPIO used for DW3000 reset
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8005d26:	2303      	movs	r3, #3
 8005d28:	2202      	movs	r2, #2
 8005d2a:	2601      	movs	r6, #1
 8005d2c:	2701      	movs	r7, #1
        GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStructure.Pull = GPIO_PULLDOWN;
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005d2e:	4669      	mov	r1, sp
 8005d30:	482a      	ldr	r0, [pc, #168]	@ (8005ddc <reset_DWIC+0xc0>)
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8005d32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d36:	e9cd 6700 	strd	r6, r7, [sp]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005d3a:	f000 fa59 	bl	80061f0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, DW3000_RST_PIN, GPIO_PIN_RESET);
 8005d3e:	4622      	mov	r2, r4
 8005d40:	2101      	movs	r1, #1
 8005d42:	4826      	ldr	r0, [pc, #152]	@ (8005ddc <reset_DWIC+0xc0>)
 8005d44:	f000 fc00 	bl	8006548 <HAL_GPIO_WritePin>
        
        //drive the RSTn pin low
        HAL_GPIO_DeInit(GPIOA, DW3000_RST_PIN);
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4824      	ldr	r0, [pc, #144]	@ (8005ddc <reset_DWIC+0xc0>)
 8005d4c:	f000 fb6c 	bl	8006428 <HAL_GPIO_DeInit>
        //put the pin back to tri-state ... as input
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8005d50:	2401      	movs	r4, #1
 8005d52:	2200      	movs	r2, #0
 8005d54:	2303      	movs	r3, #3
 8005d56:	2500      	movs	r5, #0
        GPIO_InitStructure.Pull = GPIO_NOPULL;
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8005d58:	4669      	mov	r1, sp
 8005d5a:	4820      	ldr	r0, [pc, #128]	@ (8005ddc <reset_DWIC+0xc0>)
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8005d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d60:	e9cd 4500 	strd	r4, r5, [sp]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8005d64:	f000 fa44 	bl	80061f0 <HAL_GPIO_Init>
	return time32_incr;
 8005d68:	4a1d      	ldr	r2, [pc, #116]	@ (8005de0 <reset_DWIC+0xc4>)
 8005d6a:	6811      	ldr	r1, [r2, #0]
	unsigned long end = portGetTickCnt() + time_ms;
 8005d6c:	3103      	adds	r1, #3
	return time32_incr;
 8005d6e:	6813      	ldr	r3, [r2, #0]
	while ((signed long)(portGetTickCnt() - end) <= 0)
 8005d70:	1a5b      	subs	r3, r3, r1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	ddfb      	ble.n	8005d6e <reset_DWIC+0x52>
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
        Sleep(3);
    }

}
 8005d76:	b005      	add	sp, #20
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8005d82:	2501      	movs	r5, #1
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005d84:	4669      	mov	r1, sp
 8005d86:	4815      	ldr	r0, [pc, #84]	@ (8005ddc <reset_DWIC+0xc0>)
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 8005d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d8c:	e9cd 4500 	strd	r4, r5, [sp]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005d90:	f000 fa2e 	bl	80061f0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, DW3000_RST1_PIN, GPIO_PIN_RESET);
 8005d94:	2200      	movs	r2, #0
 8005d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d9a:	4810      	ldr	r0, [pc, #64]	@ (8005ddc <reset_DWIC+0xc0>)
 8005d9c:	f000 fbd4 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_GPIO_DeInit(GPIOA, DW3000_RST1_PIN);
 8005da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005da4:	480d      	ldr	r0, [pc, #52]	@ (8005ddc <reset_DWIC+0xc0>)
 8005da6:	f000 fb3f 	bl	8006428 <HAL_GPIO_DeInit>
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 8005daa:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8005dae:	2200      	movs	r2, #0
 8005db0:	2303      	movs	r3, #3
 8005db2:	2500      	movs	r5, #0
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8005db4:	4669      	mov	r1, sp
 8005db6:	4809      	ldr	r0, [pc, #36]	@ (8005ddc <reset_DWIC+0xc0>)
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 8005db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dbc:	e9cd 4500 	strd	r4, r5, [sp]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8005dc0:	f000 fa16 	bl	80061f0 <HAL_GPIO_Init>
	return time32_incr;
 8005dc4:	4a06      	ldr	r2, [pc, #24]	@ (8005de0 <reset_DWIC+0xc4>)
 8005dc6:	6811      	ldr	r1, [r2, #0]
	unsigned long end = portGetTickCnt() + time_ms;
 8005dc8:	3103      	adds	r1, #3
	return time32_incr;
 8005dca:	6813      	ldr	r3, [r2, #0]
	while ((signed long)(portGetTickCnt() - end) <= 0)
 8005dcc:	1a5b      	subs	r3, r3, r1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	ddfb      	ble.n	8005dca <reset_DWIC+0xae>
}
 8005dd2:	b005      	add	sp, #20
 8005dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200001b9 	.word	0x200001b9
 8005ddc:	40010800 	.word	0x40010800
 8005de0:	20000814 	.word	0x20000814

08005de4 <writetospi_serial>:
int writetospi_serial( uint16_t headerLength,
			   	    const uint8_t *headerBuffer,
					uint32_t bodylength,
					const uint8_t *bodyBuffer
				  )
{
 8005de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int i, j;  

    uint8_t buf[100] = {0};
 8005de8:	2700      	movs	r7, #0
{
 8005dea:	460e      	mov	r6, r1
 8005dec:	4604      	mov	r4, r0
 8005dee:	b09a      	sub	sp, #104	@ 0x68
    uint8_t buf[100] = {0};
 8005df0:	4639      	mov	r1, r7
{
 8005df2:	4615      	mov	r5, r2
    uint8_t buf[100] = {0};
 8005df4:	a802      	add	r0, sp, #8
 8005df6:	2260      	movs	r2, #96	@ 0x60
 8005df8:	9701      	str	r7, [sp, #4]
    for(i = 0; i < headerLength; i++)
    {
        buf[i] = headerBuffer[i];
 8005dfa:	f10d 0804 	add.w	r8, sp, #4
{
 8005dfe:	4637      	mov	r7, r6
 8005e00:	461e      	mov	r6, r3
    uint8_t buf[100] = {0};
 8005e02:	f002 f9d8 	bl	80081b6 <memset>
    for(i = 0; i < headerLength; i++)
 8005e06:	b124      	cbz	r4, 8005e12 <writetospi_serial+0x2e>
        buf[i] = headerBuffer[i];
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	f002 fa4e 	bl	80082ae <memcpy>
    }
    for(j = 0; j < bodylength; j++)
 8005e12:	b13d      	cbz	r5, 8005e24 <writetospi_serial+0x40>
    {
        buf[i+j] = bodyBuffer[j];
 8005e14:	462a      	mov	r2, r5
 8005e16:	eb08 0004 	add.w	r0, r8, r4
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	f002 fa47 	bl	80082ae <memcpy>
    }
    if(running_device == DEV_UWB3000F27)
    {
        port_SPIx_set_chip_select();
        HAL_SPI_Transmit(&hspi1, buf, i+j, 0xffff);
 8005e20:	4425      	add	r5, r4
 8005e22:	b2ac      	uxth	r4, r5
    if(running_device == DEV_UWB3000F27)
 8005e24:	4b16      	ldr	r3, [pc, #88]	@ (8005e80 <writetospi_serial+0x9c>)
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	b99a      	cbnz	r2, 8005e52 <writetospi_serial+0x6e>
        port_SPIx_set_chip_select();
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	4815      	ldr	r0, [pc, #84]	@ (8005e84 <writetospi_serial+0xa0>)
 8005e2e:	f000 fb8b 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, buf, i+j, 0xffff);
 8005e32:	4622      	mov	r2, r4
 8005e34:	4641      	mov	r1, r8
 8005e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e3a:	4813      	ldr	r0, [pc, #76]	@ (8005e88 <writetospi_serial+0xa4>)
 8005e3c:	f000 ff92 	bl	8006d64 <HAL_SPI_Transmit>
        port_SPIx_clear_chip_select();
 8005e40:	2201      	movs	r2, #1
 8005e42:	2110      	movs	r1, #16
 8005e44:	480f      	ldr	r0, [pc, #60]	@ (8005e84 <writetospi_serial+0xa0>)
 8005e46:	f000 fb7f 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, buf, i+j, 0xffff);
        port_SPI2_clear_chip_select();
    }
    
    return 0;
}
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	b01a      	add	sp, #104	@ 0x68
 8005e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        port_SPI2_set_chip_select();
 8005e52:	2200      	movs	r2, #0
 8005e54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e58:	480c      	ldr	r0, [pc, #48]	@ (8005e8c <writetospi_serial+0xa8>)
 8005e5a:	f000 fb75 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, buf, i+j, 0xffff);
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4641      	mov	r1, r8
 8005e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e66:	480a      	ldr	r0, [pc, #40]	@ (8005e90 <writetospi_serial+0xac>)
 8005e68:	f000 ff7c 	bl	8006d64 <HAL_SPI_Transmit>
        port_SPI2_clear_chip_select();
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e72:	4806      	ldr	r0, [pc, #24]	@ (8005e8c <writetospi_serial+0xa8>)
 8005e74:	f000 fb68 	bl	8006548 <HAL_GPIO_WritePin>
}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	b01a      	add	sp, #104	@ 0x68
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e80:	200001b9 	.word	0x200001b9
 8005e84:	40010800 	.word	0x40010800
 8005e88:	20000658 	.word	0x20000658
 8005e8c:	40010c00 	.word	0x40010c00
 8005e90:	20000600 	.word	0x20000600

08005e94 <readfromspi_serial>:

int readfromspi_serial( uint16_t	headerLength,
			    	 const uint8_t *headerBuffer,
					 uint32_t readlength,
					 uint8_t *readBuffer )
{
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(running_device == DEV_UWB3000F27)
 8005e96:	4c20      	ldr	r4, [pc, #128]	@ (8005f18 <readfromspi_serial+0x84>)
{
 8005e98:	4607      	mov	r7, r0
    if(running_device == DEV_UWB3000F27)
 8005e9a:	f894 c000 	ldrb.w	ip, [r4]
{
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	461c      	mov	r4, r3
    {
        port_SPIx_set_chip_select();
        HAL_SPI_Transmit(&hspi1, (uint8_t*)headerBuffer, headerLength, 0xffff);
        HAL_SPI_Receive(&hspi1, readBuffer, readlength, 0xffff);
 8005ea2:	b295      	uxth	r5, r2
    if(running_device == DEV_UWB3000F27)
 8005ea4:	f1bc 0f00 	cmp.w	ip, #0
 8005ea8:	d119      	bne.n	8005ede <readfromspi_serial+0x4a>
        port_SPIx_set_chip_select();
 8005eaa:	4662      	mov	r2, ip
 8005eac:	2110      	movs	r1, #16
 8005eae:	481b      	ldr	r0, [pc, #108]	@ (8005f1c <readfromspi_serial+0x88>)
 8005eb0:	f000 fb4a 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, (uint8_t*)headerBuffer, headerLength, 0xffff);
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ebc:	4818      	ldr	r0, [pc, #96]	@ (8005f20 <readfromspi_serial+0x8c>)
 8005ebe:	f000 ff51 	bl	8006d64 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, readBuffer, readlength, 0xffff);
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005eca:	4815      	ldr	r0, [pc, #84]	@ (8005f20 <readfromspi_serial+0x8c>)
 8005ecc:	f001 f98c 	bl	80071e8 <HAL_SPI_Receive>
        port_SPIx_clear_chip_select();
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	4811      	ldr	r0, [pc, #68]	@ (8005f1c <readfromspi_serial+0x88>)
 8005ed6:	f000 fb37 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, (uint8_t*)headerBuffer, headerLength, 0xffff);
        HAL_SPI_Receive(&hspi2, readBuffer, readlength, 0xffff);
        port_SPI2_clear_chip_select();
    }
    return 0;
}
 8005eda:	2000      	movs	r0, #0
 8005edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        port_SPI2_set_chip_select();
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ee4:	480f      	ldr	r0, [pc, #60]	@ (8005f24 <readfromspi_serial+0x90>)
 8005ee6:	f000 fb2f 	bl	8006548 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, (uint8_t*)headerBuffer, headerLength, 0xffff);
 8005eea:	463a      	mov	r2, r7
 8005eec:	4631      	mov	r1, r6
 8005eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ef2:	480d      	ldr	r0, [pc, #52]	@ (8005f28 <readfromspi_serial+0x94>)
 8005ef4:	f000 ff36 	bl	8006d64 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi2, readBuffer, readlength, 0xffff);
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4621      	mov	r1, r4
 8005efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f00:	4809      	ldr	r0, [pc, #36]	@ (8005f28 <readfromspi_serial+0x94>)
 8005f02:	f001 f971 	bl	80071e8 <HAL_SPI_Receive>
        port_SPI2_clear_chip_select();
 8005f06:	2201      	movs	r2, #1
 8005f08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f0c:	4805      	ldr	r0, [pc, #20]	@ (8005f24 <readfromspi_serial+0x90>)
 8005f0e:	f000 fb1b 	bl	8006548 <HAL_GPIO_WritePin>
}
 8005f12:	2000      	movs	r0, #0
 8005f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200001b9 	.word	0x200001b9
 8005f1c:	40010800 	.word	0x40010800
 8005f20:	20000658 	.word	0x20000658
 8005f24:	40010c00 	.word	0x40010c00
 8005f28:	20000600 	.word	0x20000600

08005f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f2c:	f7ff fee0 	bl	8005cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f30:	480b      	ldr	r0, [pc, #44]	@ (8005f60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f32:	490c      	ldr	r1, [pc, #48]	@ (8005f64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f34:	4a0c      	ldr	r2, [pc, #48]	@ (8005f68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f38:	e002      	b.n	8005f40 <LoopCopyDataInit>

08005f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3e:	3304      	adds	r3, #4

08005f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f44:	d3f9      	bcc.n	8005f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f46:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005f48:	4c09      	ldr	r4, [pc, #36]	@ (8005f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f4c:	e001      	b.n	8005f52 <LoopFillZerobss>

08005f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f50:	3204      	adds	r2, #4

08005f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f54:	d3fb      	bcc.n	8005f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f56:	f002 f983 	bl	8008260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f5a:	f7fe fab5 	bl	80044c8 <main>
  bx lr
 8005f5e:	4770      	bx	lr
  ldr r0, =_sdata
 8005f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f64:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8005f68:	08009a08 	.word	0x08009a08
  ldr r2, =_sbss
 8005f6c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8005f70:	20000968 	.word	0x20000968

08005f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f74:	e7fe      	b.n	8005f74 <ADC1_2_IRQHandler>
	...

08005f78 <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <HAL_DeInit>:
{
 8005f7c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 8005f82:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8005f84:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <HAL_DeInit+0x1c>)
 8005f86:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8005f88:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8005f8a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8005f8c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 8005f8e:	f7ff fff3 	bl	8005f78 <HAL_MspDeInit>
}
 8005f92:	4620      	mov	r0, r4
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000

08005f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd8 <HAL_InitTick+0x3c>)
{
 8005fa4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fa6:	7811      	ldrb	r1, [r2, #0]
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8005fdc <HAL_InitTick+0x40>)
 8005faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	fbb2 f0f3 	udiv	r0, r2, r3
 8005fb4:	f000 f896 	bl	80060e4 <HAL_SYSTICK_Config>
 8005fb8:	b908      	cbnz	r0, 8005fbe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fba:	2d0f      	cmp	r5, #15
 8005fbc:	d901      	bls.n	8005fc2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8005fbe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fcc:	f000 f840 	bl	8006050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fd0:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <HAL_InitTick+0x44>)
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	601d      	str	r5, [r3, #0]
}
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	20000114 	.word	0x20000114
 8005fdc:	20000110 	.word	0x20000110
 8005fe0:	20000118 	.word	0x20000118

08005fe4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fe4:	4a07      	ldr	r2, [pc, #28]	@ (8006004 <HAL_Init+0x20>)
{
 8005fe6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fe8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fec:	f043 0310 	orr.w	r3, r3, #16
 8005ff0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ff2:	f000 f81b 	bl	800602c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ff6:	200f      	movs	r0, #15
 8005ff8:	f7ff ffd0 	bl	8005f9c <HAL_InitTick>
  HAL_MspInit();
 8005ffc:	f7ff fcce 	bl	800599c <HAL_MspInit>
}
 8006000:	2000      	movs	r0, #0
 8006002:	bd08      	pop	{r3, pc}
 8006004:	40022000 	.word	0x40022000

08006008 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006008:	4a03      	ldr	r2, [pc, #12]	@ (8006018 <HAL_IncTick+0x10>)
 800600a:	4b04      	ldr	r3, [pc, #16]	@ (800601c <HAL_IncTick+0x14>)
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	440b      	add	r3, r1
 8006012:	6013      	str	r3, [r2, #0]
}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000818 	.word	0x20000818
 800601c:	20000114 	.word	0x20000114

08006020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006020:	4b01      	ldr	r3, [pc, #4]	@ (8006028 <HAL_GetTick+0x8>)
 8006022:	6818      	ldr	r0, [r3, #0]
}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000818 	.word	0x20000818

0800602c <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602c:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006030:	4906      	ldr	r1, [pc, #24]	@ (800604c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006032:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006034:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006036:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800603a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800603e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006048:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800604a:	4770      	bx	lr
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006050:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006052:	b500      	push	{lr}
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800605a:	f1c3 0e07 	rsb	lr, r3, #7
 800605e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006062:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006066:	bf28      	it	cs
 8006068:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800606c:	f1bc 0f06 	cmp.w	ip, #6
 8006070:	d91c      	bls.n	80060ac <HAL_NVIC_SetPriority+0x5c>
 8006072:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800607a:	fa03 f30c 	lsl.w	r3, r3, ip
 800607e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006086:	fa03 f30e 	lsl.w	r3, r3, lr
 800608a:	ea21 0303 	bic.w	r3, r1, r3
 800608e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006092:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006094:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006096:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006098:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800609a:	db0a      	blt.n	80060b2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80060a0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80060a4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80060a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ae:	4694      	mov	ip, r2
 80060b0:	e7e7      	b.n	8006082 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b2:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <HAL_NVIC_SetPriority+0x74>)
 80060b4:	f000 000f 	and.w	r0, r0, #15
 80060b8:	4402      	add	r2, r0
 80060ba:	7613      	strb	r3, [r2, #24]
 80060bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c0:	e000ed00 	.word	0xe000ed00
 80060c4:	e000ecfc 	.word	0xe000ecfc

080060c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80060c8:	2800      	cmp	r0, #0
 80060ca:	db07      	blt.n	80060dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060cc:	2301      	movs	r3, #1
 80060ce:	f000 011f 	and.w	r1, r0, #31
 80060d2:	4a03      	ldr	r2, [pc, #12]	@ (80060e0 <HAL_NVIC_EnableIRQ+0x18>)
 80060d4:	0940      	lsrs	r0, r0, #5
 80060d6:	408b      	lsls	r3, r1
 80060d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e100 	.word	0xe000e100

080060e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e4:	3801      	subs	r0, #1
 80060e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80060ea:	d301      	bcc.n	80060f0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80060ee:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060f8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060fa:	2107      	movs	r1, #7
{
 80060fc:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060fe:	4c04      	ldr	r4, [pc, #16]	@ (8006110 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006100:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006102:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006106:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006108:	619a      	str	r2, [r3, #24]
}
 800610a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800610c:	6119      	str	r1, [r3, #16]
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006114:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8006118:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800611a:	2a02      	cmp	r2, #2
 800611c:	d006      	beq.n	800612c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611e:	2204      	movs	r2, #4
 8006120:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006122:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 8006124:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8006126:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800612a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800612c:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006130:	681a      	ldr	r2, [r3, #0]
  return status; 
 8006132:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006134:	6811      	ldr	r1, [r2, #0]
 8006136:	f021 010e 	bic.w	r1, r1, #14
 800613a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800613c:	6811      	ldr	r1, [r2, #0]
 800613e:	f021 0101 	bic.w	r1, r1, #1
 8006142:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006144:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	@ 0x3c
 8006148:	fa0c f202 	lsl.w	r2, ip, r2
 800614c:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 800614e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006150:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8006154:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop

0800615c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800615c:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{  
 8006160:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006162:	2a02      	cmp	r2, #2
 8006164:	d003      	beq.n	800616e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006166:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8006168:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800616a:	639a      	str	r2, [r3, #56]	@ 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800616c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800616e:	6802      	ldr	r2, [r0, #0]
{  
 8006170:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006172:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006174:	481b      	ldr	r0, [pc, #108]	@ (80061e4 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006176:	f021 010e 	bic.w	r1, r1, #14
 800617a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800617c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800617e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8006180:	f021 0101 	bic.w	r1, r1, #1
 8006184:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006186:	d022      	beq.n	80061ce <HAL_DMA_Abort_IT+0x72>
 8006188:	4917      	ldr	r1, [pc, #92]	@ (80061e8 <HAL_DMA_Abort_IT+0x8c>)
 800618a:	428a      	cmp	r2, r1
 800618c:	d01d      	beq.n	80061ca <HAL_DMA_Abort_IT+0x6e>
 800618e:	3114      	adds	r1, #20
 8006190:	428a      	cmp	r2, r1
 8006192:	d01e      	beq.n	80061d2 <HAL_DMA_Abort_IT+0x76>
 8006194:	3114      	adds	r1, #20
 8006196:	428a      	cmp	r2, r1
 8006198:	d01e      	beq.n	80061d8 <HAL_DMA_Abort_IT+0x7c>
 800619a:	3114      	adds	r1, #20
 800619c:	428a      	cmp	r2, r1
 800619e:	d01e      	beq.n	80061de <HAL_DMA_Abort_IT+0x82>
 80061a0:	3114      	adds	r1, #20
 80061a2:	428a      	cmp	r2, r1
 80061a4:	bf14      	ite	ne
 80061a6:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 80061aa:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
    hdma->State = HAL_DMA_STATE_READY;
 80061ae:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80061b0:	2100      	movs	r1, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80061b2:	4c0e      	ldr	r4, [pc, #56]	@ (80061ec <HAL_DMA_Abort_IT+0x90>)
 80061b4:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 80061b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80061b8:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80061bc:	f883 1020 	strb.w	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80061c0:	b10a      	cbz	r2, 80061c6 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80061c2:	4618      	mov	r0, r3
 80061c4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80061c6:	2000      	movs	r0, #0
}
 80061c8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80061ca:	2210      	movs	r2, #16
 80061cc:	e7ef      	b.n	80061ae <HAL_DMA_Abort_IT+0x52>
 80061ce:	2201      	movs	r2, #1
 80061d0:	e7ed      	b.n	80061ae <HAL_DMA_Abort_IT+0x52>
 80061d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061d6:	e7ea      	b.n	80061ae <HAL_DMA_Abort_IT+0x52>
 80061d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80061dc:	e7e7      	b.n	80061ae <HAL_DMA_Abort_IT+0x52>
 80061de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80061e2:	e7e4      	b.n	80061ae <HAL_DMA_Abort_IT+0x52>
 80061e4:	40020008 	.word	0x40020008
 80061e8:	4002001c 	.word	0x4002001c
 80061ec:	40020000 	.word	0x40020000

080061f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061f4:	680d      	ldr	r5, [r1, #0]
{
 80061f6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061f8:	2d00      	cmp	r5, #0
 80061fa:	f000 80c3 	beq.w	8006384 <HAL_GPIO_Init+0x194>
 80061fe:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006200:	4e80      	ldr	r6, [pc, #512]	@ (8006404 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8006202:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8006204:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8006206:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8006408 <HAL_GPIO_Init+0x218>
 800620a:	4f80      	ldr	r7, [pc, #512]	@ (800640c <HAL_GPIO_Init+0x21c>)
 800620c:	e006      	b.n	800621c <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800620e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006210:	fa35 f403 	lsrs.w	r4, r5, r3
 8006214:	f102 0204 	add.w	r2, r2, #4
 8006218:	f000 80b4 	beq.w	8006384 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 800621c:	2401      	movs	r4, #1
 800621e:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8006220:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006224:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8006228:	d1f1      	bne.n	800620e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800622a:	684d      	ldr	r5, [r1, #4]
 800622c:	2d12      	cmp	r5, #18
 800622e:	f200 80ac 	bhi.w	800638a <HAL_GPIO_Init+0x19a>
 8006232:	2d12      	cmp	r5, #18
 8006234:	d81a      	bhi.n	800626c <HAL_GPIO_Init+0x7c>
 8006236:	e8df f005 	tbb	[pc, r5]
 800623a:	c5b3      	.short	0xc5b3
 800623c:	1919ccc1 	.word	0x1919ccc1
 8006240:	19191919 	.word	0x19191919
 8006244:	19191919 	.word	0x19191919
 8006248:	bd191919 	.word	0xbd191919
 800624c:	c8          	.byte	0xc8
 800624d:	00          	.byte	0x00
 800624e:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8006410 <HAL_GPIO_Init+0x220>
 8006252:	4575      	cmp	r5, lr
 8006254:	f000 80a4 	beq.w	80063a0 <HAL_GPIO_Init+0x1b0>
 8006258:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 800625c:	4575      	cmp	r5, lr
 800625e:	f000 809f 	beq.w	80063a0 <HAL_GPIO_Init+0x1b0>
 8006262:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8006266:	4575      	cmp	r5, lr
 8006268:	f000 809a 	beq.w	80063a0 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800626c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8006270:	bf9c      	itt	ls
 8006272:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006274:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006276:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800627a:	bf84      	itt	hi
 800627c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006280:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006284:	f8de 4000 	ldr.w	r4, [lr]
 8006288:	fa0a f90b 	lsl.w	r9, sl, fp
 800628c:	fa05 fb0b 	lsl.w	fp, r5, fp
 8006290:	ea24 040b 	bic.w	r4, r4, fp
 8006294:	ea44 0409 	orr.w	r4, r4, r9
 8006298:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800629c:	684c      	ldr	r4, [r1, #4]
 800629e:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 80062a2:	f000 8085 	beq.w	80063b0 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062a6:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062aa:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062ae:	f04e 0e01 	orr.w	lr, lr, #1
 80062b2:	f8c6 e018 	str.w	lr, [r6, #24]
 80062b6:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062ba:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062be:	f00e 0e01 	and.w	lr, lr, #1
 80062c2:	f8cd e004 	str.w	lr, [sp, #4]
 80062c6:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80062ca:	f023 0e03 	bic.w	lr, r3, #3
 80062ce:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 80062d2:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 80062d6:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062da:	fa05 f509 	lsl.w	r5, r5, r9
 80062de:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062e2:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8006414 <HAL_GPIO_Init+0x224>
 80062e6:	4558      	cmp	r0, fp
 80062e8:	d013      	beq.n	8006312 <HAL_GPIO_Init+0x122>
 80062ea:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 80062ee:	4558      	cmp	r0, fp
 80062f0:	d079      	beq.n	80063e6 <HAL_GPIO_Init+0x1f6>
 80062f2:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8006418 <HAL_GPIO_Init+0x228>
 80062f6:	4558      	cmp	r0, fp
 80062f8:	d06e      	beq.n	80063d8 <HAL_GPIO_Init+0x1e8>
 80062fa:	f8df b120 	ldr.w	fp, [pc, #288]	@ 800641c <HAL_GPIO_Init+0x22c>
 80062fe:	4558      	cmp	r0, fp
 8006300:	bf0c      	ite	eq
 8006302:	f04f 0b03 	moveq.w	fp, #3
 8006306:	f04f 0b04 	movne.w	fp, #4
 800630a:	fa0b f909 	lsl.w	r9, fp, r9
 800630e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8006312:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006316:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8006420 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800631a:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800631e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8006322:	bf14      	ite	ne
 8006324:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006328:	ea25 050c 	biceq.w	r5, r5, ip
 800632c:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8006330:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 8006420 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006334:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006338:	f8de 500c 	ldr.w	r5, [lr, #12]
 800633c:	bf14      	ite	ne
 800633e:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006342:	ea25 050c 	biceq.w	r5, r5, ip
 8006346:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800634a:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8006420 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800634e:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8006352:	f8de 5004 	ldr.w	r5, [lr, #4]
 8006356:	bf14      	ite	ne
 8006358:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800635c:	ea25 050c 	biceq.w	r5, r5, ip
 8006360:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8006364:	4d2e      	ldr	r5, [pc, #184]	@ (8006420 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006366:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800636a:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800636c:	d01d      	beq.n	80063aa <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 800636e:	ea44 040c 	orr.w	r4, r4, ip
 8006372:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006374:	680d      	ldr	r5, [r1, #0]
	position++;
 8006376:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006378:	fa35 f403 	lsrs.w	r4, r5, r3
 800637c:	f102 0204 	add.w	r2, r2, #4
 8006380:	f47f af4c 	bne.w	800621c <HAL_GPIO_Init+0x2c>
  }
}
 8006384:	b003      	add	sp, #12
 8006386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800638a:	4545      	cmp	r5, r8
 800638c:	d008      	beq.n	80063a0 <HAL_GPIO_Init+0x1b0>
 800638e:	f67f af5e 	bls.w	800624e <HAL_GPIO_Init+0x5e>
 8006392:	42bd      	cmp	r5, r7
 8006394:	d004      	beq.n	80063a0 <HAL_GPIO_Init+0x1b0>
 8006396:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8006424 <HAL_GPIO_Init+0x234>
 800639a:	4575      	cmp	r5, lr
 800639c:	f47f af66 	bne.w	800626c <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80063a0:	688d      	ldr	r5, [r1, #8]
 80063a2:	bb3d      	cbnz	r5, 80063f4 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80063a4:	f04f 0a04 	mov.w	sl, #4
 80063a8:	e760      	b.n	800626c <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063aa:	ea24 040c 	bic.w	r4, r4, ip
 80063ae:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063b0:	680d      	ldr	r5, [r1, #0]
 80063b2:	e72c      	b.n	800620e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80063b4:	68cc      	ldr	r4, [r1, #12]
 80063b6:	f104 0a04 	add.w	sl, r4, #4
          break;
 80063ba:	e757      	b.n	800626c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80063bc:	68cc      	ldr	r4, [r1, #12]
 80063be:	f104 0a08 	add.w	sl, r4, #8
          break;
 80063c2:	e753      	b.n	800626c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80063c4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80063c8:	e750      	b.n	800626c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80063ca:	68cc      	ldr	r4, [r1, #12]
 80063cc:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80063d0:	e74c      	b.n	800626c <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 80063d2:	f04f 0a00 	mov.w	sl, #0
 80063d6:	e749      	b.n	800626c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063d8:	f04f 0b02 	mov.w	fp, #2
 80063dc:	fa0b f909 	lsl.w	r9, fp, r9
 80063e0:	ea45 0509 	orr.w	r5, r5, r9
 80063e4:	e795      	b.n	8006312 <HAL_GPIO_Init+0x122>
 80063e6:	f04f 0b01 	mov.w	fp, #1
 80063ea:	fa0b f909 	lsl.w	r9, fp, r9
 80063ee:	ea45 0509 	orr.w	r5, r5, r9
 80063f2:	e78e      	b.n	8006312 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80063f4:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80063f6:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80063fa:	bf0c      	ite	eq
 80063fc:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80063fe:	6144      	strne	r4, [r0, #20]
 8006400:	e734      	b.n	800626c <HAL_GPIO_Init+0x7c>
 8006402:	bf00      	nop
 8006404:	40021000 	.word	0x40021000
 8006408:	10220000 	.word	0x10220000
 800640c:	10310000 	.word	0x10310000
 8006410:	10120000 	.word	0x10120000
 8006414:	40010800 	.word	0x40010800
 8006418:	40011000 	.word	0x40011000
 800641c:	40011400 	.word	0x40011400
 8006420:	40010400 	.word	0x40010400
 8006424:	10320000 	.word	0x10320000

08006428 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006428:	2900      	cmp	r1, #0
 800642a:	f000 8083 	beq.w	8006534 <HAL_GPIO_DeInit+0x10c>
{
 800642e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006432:	f04f 0a04 	mov.w	sl, #4
  while ((GPIO_Pin >> position) != 0u)
 8006436:	f04f 0e00 	mov.w	lr, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800643a:	eb00 030a 	add.w	r3, r0, sl
{
 800643e:	b083      	sub	sp, #12
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006440:	9301      	str	r3, [sp, #4]
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006442:	2701      	movs	r7, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006444:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8006448:	4673      	mov	r3, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800644a:	4e3b      	ldr	r6, [pc, #236]	@ (8006538 <HAL_GPIO_DeInit+0x110>)
 800644c:	e04d      	b.n	80064ea <HAL_GPIO_DeInit+0xc2>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800644e:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8006452:	4558      	cmp	r0, fp
 8006454:	d066      	beq.n	8006524 <HAL_GPIO_DeInit+0xfc>
 8006456:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 800653c <HAL_GPIO_DeInit+0x114>
 800645a:	4558      	cmp	r0, fp
 800645c:	d065      	beq.n	800652a <HAL_GPIO_DeInit+0x102>
 800645e:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8006540 <HAL_GPIO_DeInit+0x118>
 8006462:	4558      	cmp	r0, fp
 8006464:	bf0a      	itet	eq
 8006466:	f04f 0b03 	moveq.w	fp, #3
 800646a:	fa0a fb05 	lslne.w	fp, sl, r5
 800646e:	fa0b fb05 	lsleq.w	fp, fp, r5
 8006472:	45dc      	cmp	ip, fp
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006474:	ea6f 0502 	mvn.w	r5, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006478:	d11d      	bne.n	80064b6 <HAL_GPIO_DeInit+0x8e>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800647a:	f8d6 c000 	ldr.w	ip, [r6]
 800647e:	ea0c 0c05 	and.w	ip, ip, r5
 8006482:	f8c6 c000 	str.w	ip, [r6]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006486:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800648a:	ea0c 0c05 	and.w	ip, ip, r5
 800648e:	f8c6 c004 	str.w	ip, [r6, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006492:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8006496:	ea0c 0c05 	and.w	ip, ip, r5
 800649a:	f8c6 c00c 	str.w	ip, [r6, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800649e:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80064a2:	ea0c 0c05 	and.w	ip, ip, r5
 80064a6:	f8c6 c008 	str.w	ip, [r6, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80064aa:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80064ae:	ea2c 0c08 	bic.w	ip, ip, r8
 80064b2:	f8c4 c008 	str.w	ip, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80064b6:	2aff      	cmp	r2, #255	@ 0xff
 80064b8:	bf99      	ittee	ls
 80064ba:	4604      	movls	r4, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80064bc:	46f4      	movls	ip, lr
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80064be:	9c01      	ldrhi	r4, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80064c0:	f1ae 0c20 	subhi.w	ip, lr, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	fa09 f80c 	lsl.w	r8, r9, ip
 80064ca:	ea22 0208 	bic.w	r2, r2, r8
 80064ce:	fa0a fc0c 	lsl.w	ip, sl, ip
 80064d2:	ea42 020c 	orr.w	r2, r2, ip
 80064d6:	6022      	str	r2, [r4, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80064d8:	68c2      	ldr	r2, [r0, #12]
 80064da:	402a      	ands	r2, r5
 80064dc:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80064de:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0u)
 80064e0:	fa31 f203 	lsrs.w	r2, r1, r3
 80064e4:	f10e 0e04 	add.w	lr, lr, #4
 80064e8:	d019      	beq.n	800651e <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80064ea:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 80064ee:	400a      	ands	r2, r1
 80064f0:	d0f5      	beq.n	80064de <HAL_GPIO_DeInit+0xb6>
      tmp = AFIO->EXTICR[position >> 2u];
 80064f2:	f023 0403 	bic.w	r4, r3, #3
 80064f6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80064fa:	f8df b048 	ldr.w	fp, [pc, #72]	@ 8006544 <HAL_GPIO_DeInit+0x11c>
 80064fe:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006502:	f003 0503 	and.w	r5, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8006506:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800650a:	00ad      	lsls	r5, r5, #2
 800650c:	fa09 f805 	lsl.w	r8, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006510:	4558      	cmp	r0, fp
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006512:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006516:	d19a      	bne.n	800644e <HAL_GPIO_DeInit+0x26>
 8006518:	f04f 0b00 	mov.w	fp, #0
 800651c:	e7a9      	b.n	8006472 <HAL_GPIO_DeInit+0x4a>
  }
}
 800651e:	b003      	add	sp, #12
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006524:	fa07 fb05 	lsl.w	fp, r7, r5
 8006528:	e7a3      	b.n	8006472 <HAL_GPIO_DeInit+0x4a>
 800652a:	f04f 0b02 	mov.w	fp, #2
 800652e:	fa0b fb05 	lsl.w	fp, fp, r5
 8006532:	e79e      	b.n	8006472 <HAL_GPIO_DeInit+0x4a>
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010400 	.word	0x40010400
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400
 8006544:	40010800 	.word	0x40010800

08006548 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006548:	b902      	cbnz	r2, 800654c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800654a:	0409      	lsls	r1, r1, #16
 800654c:	6101      	str	r1, [r0, #16]
  }
}
 800654e:	4770      	bx	lr

08006550 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006552:	f7ff fd65 	bl	8006020 <HAL_GetTick>

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006556:	4c32      	ldr	r4, [pc, #200]	@ (8006620 <HAL_RCC_DeInit+0xd0>)
  tickstart = HAL_GetTick();
 8006558:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006562:	e004      	b.n	800656e <HAL_RCC_DeInit+0x1e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006564:	f7ff fd5c 	bl	8006020 <HAL_GetTick>
 8006568:	1b40      	subs	r0, r0, r5
 800656a:	2802      	cmp	r0, #2
 800656c:	d826      	bhi.n	80065bc <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	079b      	lsls	r3, r3, #30
 8006572:	d5f7      	bpl.n	8006564 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8006574:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006576:	f241 3788 	movw	r7, #5000	@ 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800657a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800657e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006582:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006584:	f7ff fd4c 	bl	8006020 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8006588:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 800658a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800658c:	4e24      	ldr	r6, [pc, #144]	@ (8006620 <HAL_RCC_DeInit+0xd0>)
  CLEAR_REG(RCC->CFGR);
 800658e:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006590:	e004      	b.n	800659c <HAL_RCC_DeInit+0x4c>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006592:	f7ff fd45 	bl	8006020 <HAL_GetTick>
 8006596:	1b40      	subs	r0, r0, r5
 8006598:	42b8      	cmp	r0, r7
 800659a:	d80f      	bhi.n	80065bc <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800659c:	6873      	ldr	r3, [r6, #4]
 800659e:	f013 0f0c 	tst.w	r3, #12
 80065a2:	d1f6      	bne.n	8006592 <HAL_RCC_DeInit+0x42>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065a4:	491f      	ldr	r1, [pc, #124]	@ (8006624 <HAL_RCC_DeInit+0xd4>)
  SystemCoreClock = HSI_VALUE;
 80065a6:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_RCC_DeInit+0xd8>)
 80065a8:	4a20      	ldr	r2, [pc, #128]	@ (800662c <HAL_RCC_DeInit+0xdc>)
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065aa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HSI_VALUE;
 80065ac:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065ae:	f7ff fcf5 	bl	8005f9c <HAL_InitTick>
 80065b2:	4604      	mov	r4, r0
 80065b4:	b128      	cbz	r0, 80065c2 <HAL_RCC_DeInit+0x72>
  {
    return HAL_ERROR;
 80065b6:	2401      	movs	r4, #1

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);

  return HAL_OK;
}
 80065b8:	4620      	mov	r0, r4
 80065ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 80065bc:	2403      	movs	r4, #3
}
 80065be:	4620      	mov	r0, r4
 80065c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80065c2:	f7ff fd2d 	bl	8006020 <HAL_GetTick>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065c6:	6833      	ldr	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80065c8:	4d15      	ldr	r5, [pc, #84]	@ (8006620 <HAL_RCC_DeInit+0xd0>)
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ce:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80065d0:	4606      	mov	r6, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80065d2:	e004      	b.n	80065de <HAL_RCC_DeInit+0x8e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7ff fd24 	bl	8006020 <HAL_GetTick>
 80065d8:	1b83      	subs	r3, r0, r6
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d8ee      	bhi.n	80065bc <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 80065e4:	d1f6      	bne.n	80065d4 <HAL_RCC_DeInit+0x84>
  CLEAR_REG(RCC->CFGR);
 80065e6:	606b      	str	r3, [r5, #4]
  tickstart = HAL_GetTick();
 80065e8:	f7ff fd1a 	bl	8006020 <HAL_GetTick>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80065ec:	682b      	ldr	r3, [r5, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80065ee:	4e0c      	ldr	r6, [pc, #48]	@ (8006620 <HAL_RCC_DeInit+0xd0>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80065f0:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80065f4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80065f6:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80065f8:	e004      	b.n	8006604 <HAL_RCC_DeInit+0xb4>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065fa:	f7ff fd11 	bl	8006020 <HAL_GetTick>
 80065fe:	1b40      	subs	r0, r0, r5
 8006600:	2864      	cmp	r0, #100	@ 0x64
 8006602:	d8db      	bhi.n	80065bc <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800660a:	d1f6      	bne.n	80065fa <HAL_RCC_DeInit+0xaa>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800660c:	6832      	ldr	r2, [r6, #0]
 800660e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006612:	6032      	str	r2, [r6, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8006614:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006616:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800661a:	6272      	str	r2, [r6, #36]	@ 0x24
  CLEAR_REG(RCC->CIR);
 800661c:	60b3      	str	r3, [r6, #8]
  return HAL_OK;
 800661e:	e7ce      	b.n	80065be <HAL_RCC_DeInit+0x6e>
 8006620:	40021000 	.word	0x40021000
 8006624:	20000118 	.word	0x20000118
 8006628:	20000110 	.word	0x20000110
 800662c:	007a1200 	.word	0x007a1200

08006630 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006630:	2800      	cmp	r0, #0
 8006632:	f000 81e4 	beq.w	80069fe <HAL_RCC_OscConfig+0x3ce>
{
 8006636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800663a:	6803      	ldr	r3, [r0, #0]
 800663c:	4604      	mov	r4, r0
 800663e:	07dd      	lsls	r5, r3, #31
{
 8006640:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006642:	d535      	bpl.n	80066b0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006644:	4999      	ldr	r1, [pc, #612]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006646:	684a      	ldr	r2, [r1, #4]
 8006648:	f002 020c 	and.w	r2, r2, #12
 800664c:	2a04      	cmp	r2, #4
 800664e:	f000 80ed 	beq.w	800682c <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006652:	684a      	ldr	r2, [r1, #4]
 8006654:	f002 020c 	and.w	r2, r2, #12
 8006658:	2a08      	cmp	r2, #8
 800665a:	f000 80e3 	beq.w	8006824 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d010      	beq.n	8006688 <HAL_RCC_OscConfig+0x58>
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 810a 	beq.w	8006880 <HAL_RCC_OscConfig+0x250>
 800666c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006670:	f000 8180 	beq.w	8006974 <HAL_RCC_OscConfig+0x344>
 8006674:	4b8d      	ldr	r3, [pc, #564]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006684:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006686:	e004      	b.n	8006692 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006688:	4a88      	ldr	r2, [pc, #544]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006692:	f7ff fcc5 	bl	8006020 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	4e85      	ldr	r6, [pc, #532]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8006698:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669a:	e005      	b.n	80066a8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669c:	f7ff fcc0 	bl	8006020 <HAL_GetTick>
 80066a0:	1b40      	subs	r0, r0, r5
 80066a2:	2864      	cmp	r0, #100	@ 0x64
 80066a4:	f200 80e8 	bhi.w	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	039a      	lsls	r2, r3, #14
 80066ac:	d5f6      	bpl.n	800669c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	079f      	lsls	r7, r3, #30
 80066b2:	d528      	bpl.n	8006706 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066b4:	4a7d      	ldr	r2, [pc, #500]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 80066b6:	6851      	ldr	r1, [r2, #4]
 80066b8:	f011 0f0c 	tst.w	r1, #12
 80066bc:	f000 8096 	beq.w	80067ec <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066c0:	6851      	ldr	r1, [r2, #4]
 80066c2:	f001 010c 	and.w	r1, r1, #12
 80066c6:	2908      	cmp	r1, #8
 80066c8:	f000 808c 	beq.w	80067e4 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8116 	beq.w	8006900 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d4:	2201      	movs	r2, #1
 80066d6:	4b76      	ldr	r3, [pc, #472]	@ (80068b0 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d8:	4e74      	ldr	r6, [pc, #464]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 80066da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066dc:	f7ff fca0 	bl	8006020 <HAL_GetTick>
 80066e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e2:	e005      	b.n	80066f0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e4:	f7ff fc9c 	bl	8006020 <HAL_GetTick>
 80066e8:	1b40      	subs	r0, r0, r5
 80066ea:	2802      	cmp	r0, #2
 80066ec:	f200 80c4 	bhi.w	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	0798      	lsls	r0, r3, #30
 80066f4:	d5f6      	bpl.n	80066e4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	6962      	ldr	r2, [r4, #20]
 80066fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80066fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006702:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	071a      	lsls	r2, r3, #28
 8006708:	d429      	bmi.n	800675e <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800670a:	075d      	lsls	r5, r3, #29
 800670c:	d54b      	bpl.n	80067a6 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800670e:	4b67      	ldr	r3, [pc, #412]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	00d0      	lsls	r0, r2, #3
 8006714:	f100 8084 	bmi.w	8006820 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006718:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006720:	61da      	str	r2, [r3, #28]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672c:	4e61      	ldr	r6, [pc, #388]	@ (80068b4 <HAL_RCC_OscConfig+0x284>)
 800672e:	6833      	ldr	r3, [r6, #0]
 8006730:	05d9      	lsls	r1, r3, #23
 8006732:	f140 8091 	bpl.w	8006858 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	2b01      	cmp	r3, #1
 800673a:	f000 80f2 	beq.w	8006922 <HAL_RCC_OscConfig+0x2f2>
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80be 	beq.w	80068c0 <HAL_RCC_OscConfig+0x290>
 8006744:	2b05      	cmp	r3, #5
 8006746:	4b59      	ldr	r3, [pc, #356]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	f000 8120 	beq.w	800698e <HAL_RCC_OscConfig+0x35e>
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	621a      	str	r2, [r3, #32]
 8006754:	6a1a      	ldr	r2, [r3, #32]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800675c:	e0e6      	b.n	800692c <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800675e:	69a3      	ldr	r3, [r4, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d04c      	beq.n	80067fe <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8006764:	2201      	movs	r2, #1
 8006766:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006768:	4e50      	ldr	r6, [pc, #320]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 800676a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800676e:	f7ff fc57 	bl	8006020 <HAL_GetTick>
 8006772:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006774:	e004      	b.n	8006780 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7ff fc53 	bl	8006020 <HAL_GetTick>
 800677a:	1b40      	subs	r0, r0, r5
 800677c:	2802      	cmp	r0, #2
 800677e:	d87b      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006780:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8006782:	079b      	lsls	r3, r3, #30
 8006784:	d5f7      	bpl.n	8006776 <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006786:	4b4c      	ldr	r3, [pc, #304]	@ (80068b8 <HAL_RCC_OscConfig+0x288>)
 8006788:	4a4c      	ldr	r2, [pc, #304]	@ (80068bc <HAL_RCC_OscConfig+0x28c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006794:	bf00      	nop
  }
  while (Delay --);
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	1e5a      	subs	r2, r3, #1
 800679a:	9201      	str	r2, [sp, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1f9      	bne.n	8006794 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	075d      	lsls	r5, r3, #29
 80067a4:	d4b3      	bmi.n	800670e <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067a6:	69e3      	ldr	r3, [r4, #28]
 80067a8:	b1c3      	cbz	r3, 80067dc <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067aa:	4d40      	ldr	r5, [pc, #256]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 80067ac:	686a      	ldr	r2, [r5, #4]
 80067ae:	f002 020c 	and.w	r2, r2, #12
 80067b2:	2a08      	cmp	r2, #8
 80067b4:	f000 80cd 	beq.w	8006952 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 80067b8:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ba:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80067bc:	4b3c      	ldr	r3, [pc, #240]	@ (80068b0 <HAL_RCC_OscConfig+0x280>)
 80067be:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c0:	f000 80ed 	beq.w	800699e <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 80067c4:	f7ff fc2c 	bl	8006020 <HAL_GetTick>
 80067c8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ca:	e004      	b.n	80067d6 <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067cc:	f7ff fc28 	bl	8006020 <HAL_GetTick>
 80067d0:	1b00      	subs	r0, r0, r4
 80067d2:	2802      	cmp	r0, #2
 80067d4:	d850      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	d4f7      	bmi.n	80067cc <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 80067dc:	2000      	movs	r0, #0
}
 80067de:	b002      	add	sp, #8
 80067e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067e4:	6852      	ldr	r2, [r2, #4]
 80067e6:	03d6      	lsls	r6, r2, #15
 80067e8:	f53f af70 	bmi.w	80066cc <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ec:	4a2f      	ldr	r2, [pc, #188]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	0795      	lsls	r5, r2, #30
 80067f2:	d525      	bpl.n	8006840 <HAL_RCC_OscConfig+0x210>
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	2a01      	cmp	r2, #1
 80067f8:	d022      	beq.n	8006840 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 80067fa:	2001      	movs	r0, #1
 80067fc:	e7ef      	b.n	80067de <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 80067fe:	4a2c      	ldr	r2, [pc, #176]	@ (80068b0 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006800:	4e2a      	ldr	r6, [pc, #168]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8006802:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8006806:	f7ff fc0b 	bl	8006020 <HAL_GetTick>
 800680a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800680c:	e004      	b.n	8006818 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800680e:	f7ff fc07 	bl	8006020 <HAL_GetTick>
 8006812:	1b40      	subs	r0, r0, r5
 8006814:	2802      	cmp	r0, #2
 8006816:	d82f      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800681a:	079f      	lsls	r7, r3, #30
 800681c:	d4f7      	bmi.n	800680e <HAL_RCC_OscConfig+0x1de>
 800681e:	e7bf      	b.n	80067a0 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8006820:	2500      	movs	r5, #0
 8006822:	e783      	b.n	800672c <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006824:	684a      	ldr	r2, [r1, #4]
 8006826:	03d0      	lsls	r0, r2, #15
 8006828:	f57f af19 	bpl.w	800665e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	0391      	lsls	r1, r2, #14
 8006832:	f57f af3d 	bpl.w	80066b0 <HAL_RCC_OscConfig+0x80>
 8006836:	6862      	ldr	r2, [r4, #4]
 8006838:	2a00      	cmp	r2, #0
 800683a:	f47f af39 	bne.w	80066b0 <HAL_RCC_OscConfig+0x80>
 800683e:	e7dc      	b.n	80067fa <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006840:	491a      	ldr	r1, [pc, #104]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006842:	6960      	ldr	r0, [r4, #20]
 8006844:	680a      	ldr	r2, [r1, #0]
 8006846:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800684a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800684e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006850:	071a      	lsls	r2, r3, #28
 8006852:	f57f af5a 	bpl.w	800670a <HAL_RCC_OscConfig+0xda>
 8006856:	e782      	b.n	800675e <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800685e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006860:	f7ff fbde 	bl	8006020 <HAL_GetTick>
 8006864:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006866:	6833      	ldr	r3, [r6, #0]
 8006868:	05da      	lsls	r2, r3, #23
 800686a:	f53f af64 	bmi.w	8006736 <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686e:	f7ff fbd7 	bl	8006020 <HAL_GetTick>
 8006872:	1bc0      	subs	r0, r0, r7
 8006874:	2864      	cmp	r0, #100	@ 0x64
 8006876:	d9f6      	bls.n	8006866 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8006878:	2003      	movs	r0, #3
}
 800687a:	b002      	add	sp, #8
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006880:	4d0a      	ldr	r5, [pc, #40]	@ (80068ac <HAL_RCC_OscConfig+0x27c>)
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006888:	602b      	str	r3, [r5, #0]
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006892:	f7ff fbc5 	bl	8006020 <HAL_GetTick>
 8006896:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006898:	e004      	b.n	80068a4 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800689a:	f7ff fbc1 	bl	8006020 <HAL_GetTick>
 800689e:	1b80      	subs	r0, r0, r6
 80068a0:	2864      	cmp	r0, #100	@ 0x64
 80068a2:	d8e9      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	039b      	lsls	r3, r3, #14
 80068a8:	d4f7      	bmi.n	800689a <HAL_RCC_OscConfig+0x26a>
 80068aa:	e700      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
 80068ac:	40021000 	.word	0x40021000
 80068b0:	42420000 	.word	0x42420000
 80068b4:	40007000 	.word	0x40007000
 80068b8:	20000110 	.word	0x20000110
 80068bc:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c0:	4e50      	ldr	r6, [pc, #320]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c6:	6a33      	ldr	r3, [r6, #32]
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6233      	str	r3, [r6, #32]
 80068ce:	6a33      	ldr	r3, [r6, #32]
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80068d6:	f7ff fba3 	bl	8006020 <HAL_GetTick>
 80068da:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068dc:	e004      	b.n	80068e8 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068de:	f7ff fb9f 	bl	8006020 <HAL_GetTick>
 80068e2:	1bc0      	subs	r0, r0, r7
 80068e4:	4540      	cmp	r0, r8
 80068e6:	d8c7      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e8:	6a33      	ldr	r3, [r6, #32]
 80068ea:	0798      	lsls	r0, r3, #30
 80068ec:	d4f7      	bmi.n	80068de <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	f43f af59 	beq.w	80067a6 <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f4:	4a43      	ldr	r2, [pc, #268]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
 80068f6:	69d3      	ldr	r3, [r2, #28]
 80068f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068fc:	61d3      	str	r3, [r2, #28]
 80068fe:	e752      	b.n	80067a6 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8006900:	4a41      	ldr	r2, [pc, #260]	@ (8006a08 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006902:	4e40      	ldr	r6, [pc, #256]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8006904:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006906:	f7ff fb8b 	bl	8006020 <HAL_GetTick>
 800690a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800690c:	e004      	b.n	8006918 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690e:	f7ff fb87 	bl	8006020 <HAL_GetTick>
 8006912:	1b40      	subs	r0, r0, r5
 8006914:	2802      	cmp	r0, #2
 8006916:	d8af      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	0799      	lsls	r1, r3, #30
 800691c:	d4f7      	bmi.n	800690e <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	e6f1      	b.n	8006706 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006922:	4a38      	ldr	r2, [pc, #224]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
 8006924:	6a13      	ldr	r3, [r2, #32]
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800692c:	f7ff fb78 	bl	8006020 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006934:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006936:	4f33      	ldr	r7, [pc, #204]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
 8006938:	e004      	b.n	8006944 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7ff fb71 	bl	8006020 <HAL_GetTick>
 800693e:	1b80      	subs	r0, r0, r6
 8006940:	4540      	cmp	r0, r8
 8006942:	d899      	bhi.n	8006878 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	d5f7      	bpl.n	800693a <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 800694a:	2d00      	cmp	r5, #0
 800694c:	f43f af2b 	beq.w	80067a6 <HAL_RCC_OscConfig+0x176>
 8006950:	e7d0      	b.n	80068f4 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006952:	2b01      	cmp	r3, #1
 8006954:	f43f af51 	beq.w	80067fa <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8006958:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	6a22      	ldr	r2, [r4, #32]
 800695c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8006960:	4291      	cmp	r1, r2
 8006962:	f47f af4a 	bne.w	80067fa <HAL_RCC_OscConfig+0x1ca>
 8006966:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006968:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696c:	1a18      	subs	r0, r3, r0
 800696e:	bf18      	it	ne
 8006970:	2001      	movne	r0, #1
 8006972:	e734      	b.n	80067de <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006978:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800698a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698c:	e681      	b.n	8006692 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800698e:	f042 0204 	orr.w	r2, r2, #4
 8006992:	621a      	str	r2, [r3, #32]
 8006994:	6a1a      	ldr	r2, [r3, #32]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800699c:	e7c6      	b.n	800692c <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 800699e:	f7ff fb3f 	bl	8006020 <HAL_GetTick>
 80069a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a4:	e005      	b.n	80069b2 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a6:	f7ff fb3b 	bl	8006020 <HAL_GetTick>
 80069aa:	1b80      	subs	r0, r0, r6
 80069ac:	2802      	cmp	r0, #2
 80069ae:	f63f af63 	bhi.w	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	0199      	lsls	r1, r3, #6
 80069b6:	d4f6      	bmi.n	80069a6 <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069b8:	6a23      	ldr	r3, [r4, #32]
 80069ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069be:	d105      	bne.n	80069cc <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069c0:	686a      	ldr	r2, [r5, #4]
 80069c2:	68a1      	ldr	r1, [r4, #8]
 80069c4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80069c8:	430a      	orrs	r2, r1
 80069ca:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80069cc:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006a04 <HAL_RCC_OscConfig+0x3d4>)
 80069d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80069d2:	686a      	ldr	r2, [r5, #4]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80069da:	490b      	ldr	r1, [pc, #44]	@ (8006a08 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069dc:	4313      	orrs	r3, r2
 80069de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80069e0:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80069e2:	f7ff fb1d 	bl	8006020 <HAL_GetTick>
 80069e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069e8:	e005      	b.n	80069f6 <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ea:	f7ff fb19 	bl	8006020 <HAL_GetTick>
 80069ee:	1b00      	subs	r0, r0, r4
 80069f0:	2802      	cmp	r0, #2
 80069f2:	f63f af41 	bhi.w	8006878 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	019a      	lsls	r2, r3, #6
 80069fa:	d5f6      	bpl.n	80069ea <HAL_RCC_OscConfig+0x3ba>
 80069fc:	e6ee      	b.n	80067dc <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 80069fe:	2001      	movs	r0, #1
}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40021000 	.word	0x40021000
 8006a08:	42420000 	.word	0x42420000

08006a0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f000 80ab 	beq.w	8006b68 <HAL_RCC_ClockConfig+0x15c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a12:	4a5b      	ldr	r2, [pc, #364]	@ (8006b80 <HAL_RCC_ClockConfig+0x174>)
{
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	428b      	cmp	r3, r1
 8006a22:	460d      	mov	r5, r1
 8006a24:	d20c      	bcs.n	8006a40 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a30:	6813      	ldr	r3, [r2, #0]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	428b      	cmp	r3, r1
 8006a38:	d002      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006a3a:	2001      	movs	r0, #1
}
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	079e      	lsls	r6, r3, #30
 8006a44:	d514      	bpl.n	8006a70 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a46:	0758      	lsls	r0, r3, #29
 8006a48:	d504      	bpl.n	8006a54 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a4a:	494e      	ldr	r1, [pc, #312]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006a4c:	684a      	ldr	r2, [r1, #4]
 8006a4e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8006a52:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	0719      	lsls	r1, r3, #28
 8006a56:	d504      	bpl.n	8006a62 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a58:	494a      	ldr	r1, [pc, #296]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006a5a:	684a      	ldr	r2, [r1, #4]
 8006a5c:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8006a60:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a62:	4948      	ldr	r1, [pc, #288]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006a64:	68a0      	ldr	r0, [r4, #8]
 8006a66:	684a      	ldr	r2, [r1, #4]
 8006a68:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006a6c:	4302      	orrs	r2, r0
 8006a6e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a70:	07da      	lsls	r2, r3, #31
 8006a72:	d520      	bpl.n	8006ab6 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a74:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a76:	4b43      	ldr	r3, [pc, #268]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a78:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a7c:	d076      	beq.n	8006b6c <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a7e:	2a02      	cmp	r2, #2
 8006a80:	d06f      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a82:	079e      	lsls	r6, r3, #30
 8006a84:	d5d9      	bpl.n	8006a3a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a86:	4e3f      	ldr	r6, [pc, #252]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a8c:	6873      	ldr	r3, [r6, #4]
 8006a8e:	f023 0303 	bic.w	r3, r3, #3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006a96:	f7ff fac3 	bl	8006020 <HAL_GetTick>
 8006a9a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9c:	e004      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a9e:	f7ff fabf 	bl	8006020 <HAL_GetTick>
 8006aa2:	1bc0      	subs	r0, r0, r7
 8006aa4:	4540      	cmp	r0, r8
 8006aa6:	d864      	bhi.n	8006b72 <HAL_RCC_ClockConfig+0x166>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa8:	6873      	ldr	r3, [r6, #4]
 8006aaa:	6862      	ldr	r2, [r4, #4]
 8006aac:	f003 030c 	and.w	r3, r3, #12
 8006ab0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006ab4:	d1f3      	bne.n	8006a9e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ab6:	4a32      	ldr	r2, [pc, #200]	@ (8006b80 <HAL_RCC_ClockConfig+0x174>)
 8006ab8:	6813      	ldr	r3, [r2, #0]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	42ab      	cmp	r3, r5
 8006ac0:	d909      	bls.n	8006ad6 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac2:	6813      	ldr	r3, [r2, #0]
 8006ac4:	f023 0307 	bic.w	r3, r3, #7
 8006ac8:	432b      	orrs	r3, r5
 8006aca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	42ab      	cmp	r3, r5
 8006ad4:	d1b1      	bne.n	8006a3a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	0758      	lsls	r0, r3, #29
 8006ada:	d506      	bpl.n	8006aea <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006adc:	4929      	ldr	r1, [pc, #164]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006ade:	68e0      	ldr	r0, [r4, #12]
 8006ae0:	684a      	ldr	r2, [r1, #4]
 8006ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ae6:	4302      	orrs	r2, r0
 8006ae8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aea:	0719      	lsls	r1, r3, #28
 8006aec:	d418      	bmi.n	8006b20 <HAL_RCC_ClockConfig+0x114>
  tmpreg = RCC->CFGR;
 8006aee:	4925      	ldr	r1, [pc, #148]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006af0:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006af2:	f002 030c 	and.w	r3, r2, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d020      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x130>
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d020      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x134>
 8006afe:	4b22      	ldr	r3, [pc, #136]	@ (8006b88 <HAL_RCC_ClockConfig+0x17c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b00:	4a20      	ldr	r2, [pc, #128]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006b02:	4822      	ldr	r0, [pc, #136]	@ (8006b8c <HAL_RCC_ClockConfig+0x180>)
 8006b04:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8006b06:	4922      	ldr	r1, [pc, #136]	@ (8006b90 <HAL_RCC_ClockConfig+0x184>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b08:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006b0c:	5c80      	ldrb	r0, [r0, r2]
 8006b0e:	4a21      	ldr	r2, [pc, #132]	@ (8006b94 <HAL_RCC_ClockConfig+0x188>)
 8006b10:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8006b12:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b14:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8006b16:	f7ff fa41 	bl	8005f9c <HAL_InitTick>
  return HAL_OK;
 8006b1a:	2000      	movs	r0, #0
}
 8006b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b20:	4a18      	ldr	r2, [pc, #96]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
 8006b22:	6921      	ldr	r1, [r4, #16]
 8006b24:	6853      	ldr	r3, [r2, #4]
 8006b26:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006b2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  tmpreg = RCC->CFGR;
 8006b2e:	4915      	ldr	r1, [pc, #84]	@ (8006b84 <HAL_RCC_ClockConfig+0x178>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b30:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8006b32:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006b34:	f002 030c 	and.w	r3, r2, #12
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d1de      	bne.n	8006afa <HAL_RCC_ClockConfig+0xee>
      sysclockfreq = HSE_VALUE;
 8006b3c:	4b16      	ldr	r3, [pc, #88]	@ (8006b98 <HAL_RCC_ClockConfig+0x18c>)
 8006b3e:	e7df      	b.n	8006b00 <HAL_RCC_ClockConfig+0xf4>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b40:	4816      	ldr	r0, [pc, #88]	@ (8006b9c <HAL_RCC_ClockConfig+0x190>)
 8006b42:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b46:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b48:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b4a:	d514      	bpl.n	8006b76 <HAL_RCC_ClockConfig+0x16a>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b4c:	4812      	ldr	r0, [pc, #72]	@ (8006b98 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b4e:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b50:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b54:	4912      	ldr	r1, [pc, #72]	@ (8006ba0 <HAL_RCC_ClockConfig+0x194>)
 8006b56:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8006b5a:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b60:	e7ce      	b.n	8006b00 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	019f      	lsls	r7, r3, #6
 8006b64:	d48f      	bmi.n	8006a86 <HAL_RCC_ClockConfig+0x7a>
 8006b66:	e768      	b.n	8006a3a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006b68:	2001      	movs	r0, #1
}
 8006b6a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6c:	039b      	lsls	r3, r3, #14
 8006b6e:	d48a      	bmi.n	8006a86 <HAL_RCC_ClockConfig+0x7a>
 8006b70:	e763      	b.n	8006a3a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8006b72:	2003      	movs	r0, #3
 8006b74:	e762      	b.n	8006a3c <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b76:	4a0b      	ldr	r2, [pc, #44]	@ (8006ba4 <HAL_RCC_ClockConfig+0x198>)
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	e7c0      	b.n	8006b00 <HAL_RCC_ClockConfig+0xf4>
 8006b7e:	bf00      	nop
 8006b80:	40022000 	.word	0x40022000
 8006b84:	40021000 	.word	0x40021000
 8006b88:	007a1200 	.word	0x007a1200
 8006b8c:	08009964 	.word	0x08009964
 8006b90:	20000118 	.word	0x20000118
 8006b94:	20000110 	.word	0x20000110
 8006b98:	00f42400 	.word	0x00f42400
 8006b9c:	08009978 	.word	0x08009978
 8006ba0:	08009974 	.word	0x08009974
 8006ba4:	003d0900 	.word	0x003d0900

08006ba8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ba8:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006baa:	4a05      	ldr	r2, [pc, #20]	@ (8006bc0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4905      	ldr	r1, [pc, #20]	@ (8006bc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006bb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006bb4:	5ccb      	ldrb	r3, [r1, r3]
 8006bb6:	6810      	ldr	r0, [r2, #0]
}
 8006bb8:	40d8      	lsrs	r0, r3
 8006bba:	4770      	bx	lr
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	20000110 	.word	0x20000110
 8006bc4:	0800995c 	.word	0x0800995c

08006bc8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bc8:	4b04      	ldr	r3, [pc, #16]	@ (8006bdc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006bca:	4a05      	ldr	r2, [pc, #20]	@ (8006be0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4905      	ldr	r1, [pc, #20]	@ (8006be4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006bd0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006bd4:	5ccb      	ldrb	r3, [r1, r3]
 8006bd6:	6810      	ldr	r0, [r2, #0]
}
 8006bd8:	40d8      	lsrs	r0, r3
 8006bda:	4770      	bx	lr
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	20000110 	.word	0x20000110
 8006be4:	0800995c 	.word	0x0800995c

08006be8 <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bec:	4617      	mov	r7, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bf6:	f7ff fa13 	bl	8006020 <HAL_GetTick>
 8006bfa:	443d      	add	r5, r7
 8006bfc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006bfe:	f7ff fa0f 	bl	8006020 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c02:	4b28      	ldr	r3, [pc, #160]	@ (8006ca4 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xbc>)
 8006c04:	3701      	adds	r7, #1
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	bf18      	it	ne
 8006c0a:	4680      	movne	r8, r0
 8006c0c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006c10:	fb05 f303 	mul.w	r3, r5, r3

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c14:	6831      	ldr	r1, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	d115      	bne.n	8006c46 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x5e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1a:	688b      	ldr	r3, [r1, #8]
 8006c1c:	ea34 0303 	bics.w	r3, r4, r3
 8006c20:	d0fb      	beq.n	8006c1a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8006c22:	2000      	movs	r0, #0
}
 8006c24:	b002      	add	sp, #8
 8006c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c2a:	f7ff f9f9 	bl	8006020 <HAL_GetTick>
 8006c2e:	eba0 0008 	sub.w	r0, r0, r8
 8006c32:	42a8      	cmp	r0, r5
 8006c34:	d20c      	bcs.n	8006c50 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x68>
      if (count == 0U)
 8006c36:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006c38:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	bf08      	it	eq
 8006c3e:	2500      	moveq	r5, #0
      count--;
 8006c40:	3b01      	subs	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c42:	6831      	ldr	r1, [r6, #0]
      count--;
 8006c44:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c46:	688b      	ldr	r3, [r1, #8]
 8006c48:	ea34 0303 	bics.w	r3, r4, r3
 8006c4c:	d0ed      	beq.n	8006c2a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x42>
 8006c4e:	e7e8      	b.n	8006c22 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c50:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c54:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c56:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c5e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c60:	d013      	beq.n	8006c8a <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c62:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8006c64:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006c68:	d107      	bne.n	8006c7a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x92>
          SPI_RESET_CRC(hspi);
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c78:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006c7a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8006c80:	f886 2051 	strb.w	r2, [r6, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c84:	f886 3050 	strb.w	r3, [r6, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c88:	e7cc      	b.n	8006c24 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68b2      	ldr	r2, [r6, #8]
 8006c8c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006c90:	d002      	beq.n	8006c98 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c92:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006c96:	d1e4      	bne.n	8006c62 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e7df      	b.n	8006c62 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7a>
 8006ca2:	bf00      	nop
 8006ca4:	20000110 	.word	0x20000110

08006ca8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d058      	beq.n	8006d5e <HAL_SPI_Init+0xb6>
{
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d044      	beq.n	8006d40 <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cbc:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cbe:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cc2:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d03f      	beq.n	8006d4c <HAL_SPI_Init+0xa4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ccc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd0:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8006cd2:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cd6:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cd8:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8006cdc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006ce4:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ce8:	6926      	ldr	r6, [r4, #16]
 8006cea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f006 0602 	and.w	r6, r6, #2
 8006cf4:	4333      	orrs	r3, r6
 8006cf6:	6966      	ldr	r6, [r4, #20]
 8006cf8:	69a1      	ldr	r1, [r4, #24]
 8006cfa:	6a27      	ldr	r7, [r4, #32]
 8006cfc:	ea06 060c 	and.w	r6, r6, ip
 8006d00:	4333      	orrs	r3, r6
 8006d02:	69e6      	ldr	r6, [r4, #28]
 8006d04:	f007 0e80 	and.w	lr, r7, #128	@ 0x80
 8006d08:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8006d0c:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8006d10:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 8006d12:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d14:	4333      	orrs	r3, r6
 8006d16:	ea43 030e 	orr.w	r3, r3, lr
 8006d1a:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8006d1c:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d1e:	0c09      	lsrs	r1, r1, #16
 8006d20:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8006d24:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006d28:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d2a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d2c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d2e:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 8006d30:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d36:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d38:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d3a:	f884 c051 	strb.w	ip, [r4, #81]	@ 0x51
}
 8006d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d40:	6842      	ldr	r2, [r0, #4]
 8006d42:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006d46:	d0b9      	beq.n	8006cbc <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d48:	61c3      	str	r3, [r0, #28]
 8006d4a:	e7b7      	b.n	8006cbc <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8006d4c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006d4e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006d52:	f7fe fe45 	bl	80059e0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d56:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006d58:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8006d5c:	e7b6      	b.n	8006ccc <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8006d5e:	2001      	movs	r0, #1
}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <HAL_SPI_Transmit>:
{
 8006d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d68:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8006d6a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006d6e:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d076      	beq.n	8006e62 <HAL_SPI_Transmit+0xfe>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4604      	mov	r4, r0
 8006d78:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8006d80:	f7ff f94e 	bl	8006020 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d84:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8006d88:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	b2df      	uxtb	r7, r3
 8006d8e:	d007      	beq.n	8006da0 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8006d90:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 8006d96:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006d9a:	b003      	add	sp, #12
 8006d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8006da0:	f1b9 0f00 	cmp.w	r9, #0
 8006da4:	d0f5      	beq.n	8006d92 <HAL_SPI_Transmit+0x2e>
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	d0f2      	beq.n	8006d92 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dac:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dae:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006db0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006db2:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  hspi->RxXferSize  = 0U;
 8006db6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db8:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8006dba:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006dbc:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006dc0:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006dc2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006dc6:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 8006dcc:	4684      	mov	ip, r0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dce:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006dd2:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd6:	d075      	beq.n	8006ec4 <HAL_SPI_Transmit+0x160>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dd8:	6803      	ldr	r3, [r0, #0]
 8006dda:	065b      	lsls	r3, r3, #25
 8006ddc:	d403      	bmi.n	8006de6 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8006dde:	6803      	ldr	r3, [r0, #0]
 8006de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de4:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de6:	68e3      	ldr	r3, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de8:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dee:	d03d      	beq.n	8006e6c <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	f000 808c 	beq.w	8006f0e <HAL_SPI_Transmit+0x1aa>
 8006df6:	f1b8 0f01 	cmp.w	r8, #1
 8006dfa:	f000 8088 	beq.w	8006f0e <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 8006dfe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	b1a3      	cbz	r3, 8006e2e <HAL_SPI_Transmit+0xca>
 8006e04:	1c68      	adds	r0, r5, #1
 8006e06:	d174      	bne.n	8006ef2 <HAL_SPI_Transmit+0x18e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	0791      	lsls	r1, r2, #30
 8006e0e:	f140 8089 	bpl.w	8006f24 <HAL_SPI_Transmit+0x1c0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006e14:	7812      	ldrb	r2, [r2, #0]
 8006e16:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006e18:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e1c:	3901      	subs	r1, #1
 8006e1e:	b289      	uxth	r1, r1
 8006e20:	86e1      	strh	r1, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006e22:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e24:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8006e26:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e28:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	d1ec      	bne.n	8006e08 <HAL_SPI_Transmit+0xa4>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2e:	4633      	mov	r3, r6
 8006e30:	462a      	mov	r2, r5
 8006e32:	2180      	movs	r1, #128	@ 0x80
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fed7 	bl	8006be8 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f040 8099 	bne.w	8006f72 <HAL_SPI_Transmit+0x20e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e40:	68a3      	ldr	r3, [r4, #8]
 8006e42:	b933      	cbnz	r3, 8006e52 <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	68d3      	ldr	r3, [r2, #12]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	6893      	ldr	r3, [r2, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d19c      	bne.n	8006d92 <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8006e58:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e5a:	461f      	mov	r7, r3
    hspi->State = HAL_SPI_STATE_READY;
 8006e5c:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 8006e60:	e797      	b.n	8006d92 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8006e62:	2702      	movs	r7, #2
}
 8006e64:	4638      	mov	r0, r7
 8006e66:	b003      	add	sp, #12
 8006e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d17c      	bne.n	8006f6a <HAL_SPI_Transmit+0x206>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e70:	4649      	mov	r1, r9
 8006e72:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006e76:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8006e78:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7a:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006e82:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0d1      	beq.n	8006e2e <HAL_SPI_Transmit+0xca>
 8006e8a:	1c69      	adds	r1, r5, #1
 8006e8c:	d163      	bne.n	8006f56 <HAL_SPI_Transmit+0x1f2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8e:	6883      	ldr	r3, [r0, #8]
 8006e90:	079a      	lsls	r2, r3, #30
 8006e92:	d50f      	bpl.n	8006eb4 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e94:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006e96:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006e9a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8006e9c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9e:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006ea6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0bf      	beq.n	8006e2e <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eae:	6883      	ldr	r3, [r0, #8]
 8006eb0:	079a      	lsls	r2, r3, #30
 8006eb2:	d4ef      	bmi.n	8006e94 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb4:	f7ff f8b4 	bl	8006020 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8006eb8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0b6      	beq.n	8006e2e <HAL_SPI_Transmit+0xca>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	e7e4      	b.n	8006e8e <HAL_SPI_Transmit+0x12a>
    __HAL_SPI_DISABLE(hspi);
 8006ec4:	6803      	ldr	r3, [r0, #0]
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eca:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8006ecc:	6803      	ldr	r3, [r0, #0]
 8006ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ed2:	6003      	str	r3, [r0, #0]
 8006ed4:	e780      	b.n	8006dd8 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ed6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006edc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ede:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ee0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006ee4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee6:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ee8:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006eea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d09d      	beq.n	8006e2e <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	0792      	lsls	r2, r2, #30
 8006ef8:	d4ed      	bmi.n	8006ed6 <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efa:	f7ff f891 	bl	8006020 <HAL_GetTick>
 8006efe:	1b83      	subs	r3, r0, r6
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	d3f2      	bcc.n	8006eea <HAL_SPI_Transmit+0x186>
          hspi->State = HAL_SPI_STATE_READY;
 8006f04:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8006f06:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8006f08:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          goto error;
 8006f0c:	e741      	b.n	8006d92 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f0e:	f899 3000 	ldrb.w	r3, [r9]
 8006f12:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f16:	3301      	adds	r3, #1
 8006f18:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f1a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8006f22:	e76c      	b.n	8006dfe <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f24:	f7ff f87c 	bl	8006020 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8006f28:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f47f af6b 	bne.w	8006e08 <HAL_SPI_Transmit+0xa4>
 8006f32:	e77c      	b.n	8006e2e <HAL_SPI_Transmit+0xca>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006f36:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006f3a:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8006f3e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f40:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006f48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f43f af6e 	beq.w	8006e2e <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f52:	f8d4 c000 	ldr.w	ip, [r4]
 8006f56:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006f5a:	079b      	lsls	r3, r3, #30
 8006f5c:	d4ea      	bmi.n	8006f34 <HAL_SPI_Transmit+0x1d0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f5e:	f7ff f85f 	bl	8006020 <HAL_GetTick>
 8006f62:	1b83      	subs	r3, r0, r6
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	d3ef      	bcc.n	8006f48 <HAL_SPI_Transmit+0x1e4>
 8006f68:	e7cc      	b.n	8006f04 <HAL_SPI_Transmit+0x1a0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f6a:	f1b8 0f01 	cmp.w	r8, #1
 8006f6e:	d188      	bne.n	8006e82 <HAL_SPI_Transmit+0x11e>
 8006f70:	e77e      	b.n	8006e70 <HAL_SPI_Transmit+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f72:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006f76:	4313      	orrs	r3, r2
 8006f78:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7a:	6562      	str	r2, [r4, #84]	@ 0x54
 8006f7c:	e760      	b.n	8006e40 <HAL_SPI_Transmit+0xdc>
 8006f7e:	bf00      	nop

08006f80 <HAL_SPI_TransmitReceive>:
{
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006f86:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
{
 8006f8a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8006f8c:	2801      	cmp	r0, #1
{
 8006f8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006f90:	f000 808c 	beq.w	80070ac <HAL_SPI_TransmitReceive+0x12c>
 8006f94:	4698      	mov	r8, r3
 8006f96:	2301      	movs	r3, #1
 8006f98:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006f9c:	468a      	mov	sl, r1
 8006f9e:	4691      	mov	r9, r2
 8006fa0:	f7ff f83e 	bl	8006020 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006fa4:	f894 7051 	ldrb.w	r7, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8006fa8:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006faa:	2f01      	cmp	r7, #1
  tmp_mode            = hspi->Init.Mode;
 8006fac:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 8006fae:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_SPI_TransmitReceive+0x50>
 8006fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fb6:	d006      	beq.n	8006fc6 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 8006fb8:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006fc0:	b002      	add	sp, #8
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fc6:	68a2      	ldr	r2, [r4, #8]
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d1f5      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x38>
 8006fcc:	2904      	cmp	r1, #4
 8006fce:	d1f3      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fd0:	f1ba 0f00 	cmp.w	sl, #0
 8006fd4:	f000 80d1 	beq.w	800717a <HAL_SPI_TransmitReceive+0x1fa>
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	f000 80cd 	beq.w	800717a <HAL_SPI_TransmitReceive+0x1fa>
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	f000 80c9 	beq.w	800717a <HAL_SPI_TransmitReceive+0x1fa>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fe8:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fec:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fee:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ff0:	bf1c      	itt	ne
 8006ff2:	2205      	movne	r2, #5
 8006ff4:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxXferCount = Size;
 8006ffc:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8007000:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007004:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007008:	6802      	ldr	r2, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800700a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800700e:	0652      	lsls	r2, r2, #25
  hspi->RxXferSize  = Size;
 8007010:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007014:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007018:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800701c:	d403      	bmi.n	8007026 <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 800701e:	6802      	ldr	r2, [r0, #0]
 8007020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007024:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007026:	68e2      	ldr	r2, [r4, #12]
 8007028:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800702c:	d04d      	beq.n	80070ca <HAL_SPI_TransmitReceive+0x14a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702e:	2b00      	cmp	r3, #0
 8007030:	d040      	beq.n	80070b4 <HAL_SPI_TransmitReceive+0x134>
 8007032:	f1b8 0f01 	cmp.w	r8, #1
 8007036:	d03d      	beq.n	80070b4 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8007038:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800703a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800703c:	b292      	uxth	r2, r2
 800703e:	b91a      	cbnz	r2, 8007048 <HAL_SPI_TransmitReceive+0xc8>
 8007040:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d07d      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x1c4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	0792      	lsls	r2, r2, #30
 800704e:	d50f      	bpl.n	8007070 <HAL_SPI_TransmitReceive+0xf0>
 8007050:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8007052:	b292      	uxth	r2, r2
 8007054:	b162      	cbz	r2, 8007070 <HAL_SPI_TransmitReceive+0xf0>
 8007056:	b15f      	cbz	r7, 8007070 <HAL_SPI_TransmitReceive+0xf0>
        txallowed = 0U;
 8007058:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800705a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8007060:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8007062:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007064:	3b01      	subs	r3, #1
 8007066:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8007068:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800706a:	86e3      	strh	r3, [r4, #54]	@ 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800706c:	6823      	ldr	r3, [r4, #0]
        hspi->pTxBuffPtr++;
 800706e:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	f012 0201 	ands.w	r2, r2, #1
 8007076:	d00d      	beq.n	8007094 <HAL_SPI_TransmitReceive+0x114>
 8007078:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800707a:	b289      	uxth	r1, r1
 800707c:	b151      	cbz	r1, 8007094 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 1U;
 800707e:	4617      	mov	r7, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007086:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007088:	3301      	adds	r3, #1
 800708a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800708c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800708e:	3b01      	subs	r3, #1
 8007090:	b29b      	uxth	r3, r3
 8007092:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007094:	f7fe ffc4 	bl	8006020 <HAL_GetTick>
 8007098:	1b40      	subs	r0, r0, r5
 800709a:	42b0      	cmp	r0, r6
 800709c:	d3cd      	bcc.n	800703a <HAL_SPI_TransmitReceive+0xba>
 800709e:	1c73      	adds	r3, r6, #1
 80070a0:	d0cb      	beq.n	800703a <HAL_SPI_TransmitReceive+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 80070a2:	2301      	movs	r3, #1
        errorcode = HAL_TIMEOUT;
 80070a4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80070a6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        goto error;
 80070aa:	e786      	b.n	8006fba <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80070ac:	2002      	movs	r0, #2
}
 80070ae:	b002      	add	sp, #8
 80070b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80070ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070bc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80070be:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c0:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80070c2:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c4:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80070c6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80070c8:	e7b6      	b.n	8007038 <HAL_SPI_TransmitReceive+0xb8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d157      	bne.n	800717e <HAL_SPI_TransmitReceive+0x1fe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ce:	4651      	mov	r1, sl
 80070d0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80070d4:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80070d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80070e0:	1c73      	adds	r3, r6, #1
{
 80070e2:	f04f 0701 	mov.w	r7, #1
 80070e6:	d025      	beq.n	8007134 <HAL_SPI_TransmitReceive+0x1b4>
 80070e8:	e04d      	b.n	8007186 <HAL_SPI_TransmitReceive+0x206>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	6893      	ldr	r3, [r2, #8]
 80070ee:	0798      	lsls	r0, r3, #30
 80070f0:	d50d      	bpl.n	800710e <HAL_SPI_TransmitReceive+0x18e>
 80070f2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b153      	cbz	r3, 800710e <HAL_SPI_TransmitReceive+0x18e>
 80070f8:	b147      	cbz	r7, 800710c <HAL_SPI_TransmitReceive+0x18c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80070fc:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007100:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007102:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007104:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007106:	3b01      	subs	r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800710c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800710e:	6893      	ldr	r3, [r2, #8]
 8007110:	f013 0301 	ands.w	r3, r3, #1
 8007114:	d00c      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x1b0>
 8007116:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8007118:	b289      	uxth	r1, r1
 800711a:	b149      	cbz	r1, 8007130 <HAL_SPI_TransmitReceive+0x1b0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800711c:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 800711e:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007120:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007122:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007126:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007128:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007130:	f7fe ff76 	bl	8006020 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007134:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1d6      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x16a>
 800713c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1d2      	bne.n	80070ea <HAL_SPI_TransmitReceive+0x16a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007144:	462b      	mov	r3, r5
 8007146:	4632      	mov	r2, r6
 8007148:	2180      	movs	r1, #128	@ 0x80
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff fd4c 	bl	8006be8 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8007150:	b970      	cbnz	r0, 8007170 <HAL_SPI_TransmitReceive+0x1f0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	b933      	cbnz	r3, 8007164 <HAL_SPI_TransmitReceive+0x1e4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	9001      	str	r0, [sp, #4]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	9201      	str	r2, [sp, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007164:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007166:	b943      	cbnz	r3, 800717a <HAL_SPI_TransmitReceive+0x1fa>
    hspi->State = HAL_SPI_STATE_READY;
 8007168:	2301      	movs	r3, #1
 800716a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 800716e:	e724      	b.n	8006fba <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007172:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007174:	4313      	orrs	r3, r2
 8007176:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007178:	6562      	str	r2, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800717a:	2001      	movs	r0, #1
 800717c:	e71d      	b.n	8006fba <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800717e:	f1b8 0f01 	cmp.w	r8, #1
 8007182:	d1ad      	bne.n	80070e0 <HAL_SPI_TransmitReceive+0x160>
 8007184:	e7a3      	b.n	80070ce <HAL_SPI_TransmitReceive+0x14e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007186:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	b91b      	cbnz	r3, 8007194 <HAL_SPI_TransmitReceive+0x214>
 800718c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0d7      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x1c4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	6893      	ldr	r3, [r2, #8]
 8007198:	0799      	lsls	r1, r3, #30
 800719a:	d50d      	bpl.n	80071b8 <HAL_SPI_TransmitReceive+0x238>
 800719c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800719e:	b29b      	uxth	r3, r3
 80071a0:	b153      	cbz	r3, 80071b8 <HAL_SPI_TransmitReceive+0x238>
 80071a2:	b147      	cbz	r7, 80071b6 <HAL_SPI_TransmitReceive+0x236>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80071a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80071aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ac:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80071ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80071b6:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071b8:	6893      	ldr	r3, [r2, #8]
 80071ba:	f013 0301 	ands.w	r3, r3, #1
 80071be:	d00c      	beq.n	80071da <HAL_SPI_TransmitReceive+0x25a>
 80071c0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80071c2:	b289      	uxth	r1, r1
 80071c4:	b149      	cbz	r1, 80071da <HAL_SPI_TransmitReceive+0x25a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071c6:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80071c8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071cc:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071d0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80071d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071da:	f7fe ff21 	bl	8006020 <HAL_GetTick>
 80071de:	1b40      	subs	r0, r0, r5
 80071e0:	42b0      	cmp	r0, r6
 80071e2:	d3d0      	bcc.n	8007186 <HAL_SPI_TransmitReceive+0x206>
 80071e4:	e75d      	b.n	80070a2 <HAL_SPI_TransmitReceive+0x122>
 80071e6:	bf00      	nop

080071e8 <HAL_SPI_Receive>:
{
 80071e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80071ec:	f890 7051 	ldrb.w	r7, [r0, #81]	@ 0x51
{
 80071f0:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80071f2:	2f01      	cmp	r7, #1
{
 80071f4:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80071f6:	d16a      	bne.n	80072ce <HAL_SPI_Receive+0xe6>
 80071f8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071fa:	6843      	ldr	r3, [r0, #4]
 80071fc:	4691      	mov	r9, r2
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007202:	4688      	mov	r8, r1
 8007204:	b2fe      	uxtb	r6, r7
 8007206:	d06a      	beq.n	80072de <HAL_SPI_Receive+0xf6>
  __HAL_LOCK(hspi);
 8007208:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800720c:	2b01      	cmp	r3, #1
 800720e:	f000 8096 	beq.w	800733e <HAL_SPI_Receive+0x156>
 8007212:	2301      	movs	r3, #1
 8007214:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8007218:	f7fe ff02 	bl	8006020 <HAL_GetTick>
 800721c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 800721e:	f1b8 0f00 	cmp.w	r8, #0
 8007222:	d055      	beq.n	80072d0 <HAL_SPI_Receive+0xe8>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	d052      	beq.n	80072d0 <HAL_SPI_Receive+0xe8>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800722a:	2204      	movs	r2, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800722c:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800722e:	68a1      	ldr	r1, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007230:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
    __HAL_SPI_DISABLE(hspi);
 8007234:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007236:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800723a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800723c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007240:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->RxXferCount = Size;
 8007242:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = 0U;
 8007246:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007248:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800724a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
    __HAL_SPI_DISABLE(hspi);
 800724e:	4613      	mov	r3, r2
  hspi->RxXferSize  = Size;
 8007250:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007254:	d107      	bne.n	8007266 <HAL_SPI_Receive+0x7e>
    __HAL_SPI_DISABLE(hspi);
 8007256:	6811      	ldr	r1, [r2, #0]
 8007258:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800725c:	6011      	str	r1, [r2, #0]
    SPI_1LINE_RX(hspi);
 800725e:	6811      	ldr	r1, [r2, #0]
 8007260:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007264:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007266:	6811      	ldr	r1, [r2, #0]
 8007268:	0649      	lsls	r1, r1, #25
 800726a:	d403      	bmi.n	8007274 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 800726c:	6811      	ldr	r1, [r2, #0]
 800726e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8007272:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007274:	68e1      	ldr	r1, [r4, #12]
 8007276:	2900      	cmp	r1, #0
 8007278:	d066      	beq.n	8007348 <HAL_SPI_Receive+0x160>
    while (hspi->RxXferCount > 0U)
 800727a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800727c:	b289      	uxth	r1, r1
 800727e:	b189      	cbz	r1, 80072a4 <HAL_SPI_Receive+0xbc>
 8007280:	1c68      	adds	r0, r5, #1
 8007282:	d147      	bne.n	8007314 <HAL_SPI_Receive+0x12c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007284:	6893      	ldr	r3, [r2, #8]
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	d551      	bpl.n	800732e <HAL_SPI_Receive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800728a:	68d1      	ldr	r1, [r2, #12]
 800728c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800728e:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 8007292:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007294:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007296:	3901      	subs	r1, #1
 8007298:	b289      	uxth	r1, r1
 800729a:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800729c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ef      	bne.n	8007284 <HAL_SPI_Receive+0x9c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072aa:	f000 8086 	beq.w	80073ba <HAL_SPI_Receive+0x1d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ae:	463b      	mov	r3, r7
 80072b0:	462a      	mov	r2, r5
 80072b2:	2180      	movs	r1, #128	@ 0x80
 80072b4:	4620      	mov	r0, r4
 80072b6:	f7ff fc97 	bl	8006be8 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	f040 8093 	bne.w	80073e6 <HAL_SPI_Receive+0x1fe>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80072c2:	b92b      	cbnz	r3, 80072d0 <HAL_SPI_Receive+0xe8>
    hspi->State = HAL_SPI_STATE_READY;
 80072c4:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072c6:	461e      	mov	r6, r3
    hspi->State = HAL_SPI_STATE_READY;
 80072c8:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 80072cc:	e000      	b.n	80072d0 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 80072ce:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80072d0:	2300      	movs	r3, #0
 80072d2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80072d6:	4630      	mov	r0, r6
 80072d8:	b003      	add	sp, #12
 80072da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072de:	6883      	ldr	r3, [r0, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d191      	bne.n	8007208 <HAL_SPI_Receive+0x20>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072e4:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072e6:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072e8:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072ea:	f880 5051 	strb.w	r5, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072ee:	460a      	mov	r2, r1
 80072f0:	f7ff fe46 	bl	8006f80 <HAL_SPI_TransmitReceive>
 80072f4:	4606      	mov	r6, r0
 80072f6:	e7ee      	b.n	80072d6 <HAL_SPI_Receive+0xee>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80072fc:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8007300:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007302:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007304:	3b01      	subs	r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800730a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0c8      	beq.n	80072a4 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	07d2      	lsls	r2, r2, #31
 8007318:	d4ee      	bmi.n	80072f8 <HAL_SPI_Receive+0x110>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731a:	f7fe fe81 	bl	8006020 <HAL_GetTick>
 800731e:	1bc3      	subs	r3, r0, r7
 8007320:	42ab      	cmp	r3, r5
 8007322:	d3f2      	bcc.n	800730a <HAL_SPI_Receive+0x122>
          hspi->State = HAL_SPI_STATE_READY;
 8007324:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8007326:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 8007328:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          goto error;
 800732c:	e7d0      	b.n	80072d0 <HAL_SPI_Receive+0xe8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732e:	f7fe fe77 	bl	8006020 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8007332:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0b4      	beq.n	80072a4 <HAL_SPI_Receive+0xbc>
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	e7a2      	b.n	8007284 <HAL_SPI_Receive+0x9c>
  __HAL_LOCK(hspi);
 800733e:	2602      	movs	r6, #2
}
 8007340:	4630      	mov	r0, r6
 8007342:	b003      	add	sp, #12
 8007344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 8007348:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800734a:	b292      	uxth	r2, r2
 800734c:	2a00      	cmp	r2, #0
 800734e:	d0a9      	beq.n	80072a4 <HAL_SPI_Receive+0xbc>
 8007350:	1c6a      	adds	r2, r5, #1
 8007352:	d00f      	beq.n	8007374 <HAL_SPI_Receive+0x18c>
 8007354:	e028      	b.n	80073a8 <HAL_SPI_Receive+0x1c0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007356:	7b1a      	ldrb	r2, [r3, #12]
 8007358:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800735a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800735c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800735e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007360:	3901      	subs	r1, #1
 8007362:	b289      	uxth	r1, r1
 8007364:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8007366:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007368:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800736a:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800736c:	63a2      	str	r2, [r4, #56]	@ 0x38
    while (hspi->RxXferCount > 0U)
 800736e:	2b00      	cmp	r3, #0
 8007370:	d098      	beq.n	80072a4 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	07d0      	lsls	r0, r2, #31
 8007378:	d4ed      	bmi.n	8007356 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800737a:	f7fe fe51 	bl	8006020 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800737e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f5      	bne.n	8007372 <HAL_SPI_Receive+0x18a>
 8007386:	e78d      	b.n	80072a4 <HAL_SPI_Receive+0xbc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007388:	7b1a      	ldrb	r2, [r3, #12]
 800738a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800738c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800738e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007390:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007392:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007394:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8007396:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007398:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800739a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800739c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f43f af7f 	beq.w	80072a4 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	07d1      	lsls	r1, r2, #31
 80073ac:	d4ec      	bmi.n	8007388 <HAL_SPI_Receive+0x1a0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ae:	f7fe fe37 	bl	8006020 <HAL_GetTick>
 80073b2:	1bc3      	subs	r3, r0, r7
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	d3f1      	bcc.n	800739c <HAL_SPI_Receive+0x1b4>
 80073b8:	e7b4      	b.n	8007324 <HAL_SPI_Receive+0x13c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c0:	d018      	beq.n	80073f4 <HAL_SPI_Receive+0x20c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c6:	f47f af72 	bne.w	80072ae <HAL_SPI_Receive+0xc6>
    __HAL_SPI_DISABLE(hspi);
 80073ca:	6820      	ldr	r0, [r4, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073cc:	463b      	mov	r3, r7
    __HAL_SPI_DISABLE(hspi);
 80073ce:	6801      	ldr	r1, [r0, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073d0:	462a      	mov	r2, r5
    __HAL_SPI_DISABLE(hspi);
 80073d2:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80073d6:	6001      	str	r1, [r0, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073d8:	2101      	movs	r1, #1
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff fc04 	bl	8006be8 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f43f af6d 	beq.w	80072c0 <HAL_SPI_Receive+0xd8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ee:	2320      	movs	r3, #32
 80073f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80073f2:	e765      	b.n	80072c0 <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fc:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80073fe:	e756      	b.n	80072ae <HAL_SPI_Receive+0xc6>

08007400 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007400:	2800      	cmp	r0, #0
 8007402:	d060      	beq.n	80074c6 <HAL_TIM_Base_Init+0xc6>
{
 8007404:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800740a:	4604      	mov	r4, r0
 800740c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007410:	2b00      	cmp	r3, #0
 8007412:	d042      	beq.n	800749a <HAL_TIM_Base_Init+0x9a>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007414:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800741a:	4e2c      	ldr	r6, [pc, #176]	@ (80074cc <HAL_TIM_Base_Init+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007420:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007422:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007424:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8007426:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007428:	d03c      	beq.n	80074a4 <HAL_TIM_Base_Init+0xa4>
 800742a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800742e:	d00e      	beq.n	800744e <HAL_TIM_Base_Init+0x4e>
 8007430:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8007434:	42b2      	cmp	r2, r6
 8007436:	d00a      	beq.n	800744e <HAL_TIM_Base_Init+0x4e>
 8007438:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800743c:	42b2      	cmp	r2, r6
 800743e:	d006      	beq.n	800744e <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007444:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007446:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800744a:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800744c:	e00d      	b.n	800746a <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800744e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007454:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007456:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800745e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007462:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8007464:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007466:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007468:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800746a:	2301      	movs	r3, #1
 800746c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007472:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007476:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800747a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800747e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800748a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800748e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007492:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007496:	2000      	movs	r0, #0
}
 8007498:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800749a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800749e:	f7fe fb0b 	bl	8005ab8 <HAL_TIM_Base_MspInit>
 80074a2:	e7b7      	b.n	8007414 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80074a4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80074aa:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074b2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80074ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074bc:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074be:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80074c0:	6963      	ldr	r3, [r4, #20]
 80074c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80074c4:	e7d1      	b.n	800746a <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 80074c6:	2001      	movs	r0, #1
}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40012c00 	.word	0x40012c00

080074d0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80074d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d11f      	bne.n	8007518 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074da:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e0:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e2:	490e      	ldr	r1, [pc, #56]	@ (800751c <HAL_TIM_Base_Start_IT+0x4c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e4:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074ea:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ec:	d009      	beq.n	8007502 <HAL_TIM_Base_Start_IT+0x32>
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f2:	d006      	beq.n	8007502 <HAL_TIM_Base_Start_IT+0x32>
 80074f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007520 <HAL_TIM_Base_Start_IT+0x50>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <HAL_TIM_Base_Start_IT+0x32>
 80074fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074fe:	4293      	cmp	r3, r2
 8007500:	d104      	bne.n	800750c <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007508:	2a06      	cmp	r2, #6
 800750a:	d003      	beq.n	8007514 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007514:	2000      	movs	r0, #0
 8007516:	4770      	bx	lr
    return HAL_ERROR;
 8007518:	2001      	movs	r0, #1
}
 800751a:	4770      	bx	lr
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40000400 	.word	0x40000400

08007524 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007524:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d071      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0xec>
 800752c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800752e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007530:	2001      	movs	r0, #1
{
 8007532:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8007534:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8007536:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800753a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800753e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007540:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007544:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007548:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800754a:	680b      	ldr	r3, [r1, #0]
 800754c:	2b60      	cmp	r3, #96	@ 0x60
 800754e:	d061      	beq.n	8007614 <HAL_TIM_ConfigClockSource+0xf0>
 8007550:	d824      	bhi.n	800759c <HAL_TIM_ConfigClockSource+0x78>
 8007552:	2b40      	cmp	r3, #64	@ 0x40
 8007554:	d077      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x122>
 8007556:	d94a      	bls.n	80075ee <HAL_TIM_ConfigClockSource+0xca>
 8007558:	2b50      	cmp	r3, #80	@ 0x50
 800755a:	d117      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800755c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800755e:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007560:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007562:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007566:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007568:	6a23      	ldr	r3, [r4, #32]
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007570:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007576:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800757a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800757c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800757e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007584:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007588:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800758c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800758e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007590:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007594:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8007598:	bc30      	pop	{r4, r5}
 800759a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a0:	d0f3      	beq.n	800758a <HAL_TIM_ConfigClockSource+0x66>
 80075a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a6:	d110      	bne.n	80075ca <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80075ac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ae:	432b      	orrs	r3, r5
 80075b0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80075ba:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075bc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075be:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075c0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075c6:	60a3      	str	r3, [r4, #8]
      break;
 80075c8:	e7e0      	b.n	800758c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80075ca:	2b70      	cmp	r3, #112	@ 0x70
 80075cc:	d1de      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ce:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80075d2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d4:	432b      	orrs	r3, r5
 80075d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d8:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80075e0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80075e2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80075e4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80075ea:	60a3      	str	r3, [r4, #8]
      break;
 80075ec:	e7cd      	b.n	800758a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d002      	beq.n	80075f8 <HAL_TIM_ConfigClockSource+0xd4>
 80075f2:	d909      	bls.n	8007608 <HAL_TIM_ConfigClockSource+0xe4>
 80075f4:	2b30      	cmp	r3, #48	@ 0x30
 80075f6:	d1c9      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80075f8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80075fa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075fe:	430b      	orrs	r3, r1
 8007600:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007604:	60a3      	str	r3, [r4, #8]
}
 8007606:	e7c0      	b.n	800758a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007608:	f033 0110 	bics.w	r1, r3, #16
 800760c:	d1be      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x68>
 800760e:	e7f3      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8007610:	2002      	movs	r0, #2
}
 8007612:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8007614:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8007616:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007618:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800761a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007620:	f021 0110 	bic.w	r1, r1, #16
 8007624:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007626:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007628:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800762c:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007630:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007634:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8007636:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007638:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800763e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007642:	60a3      	str	r3, [r4, #8]
}
 8007644:	e7a1      	b.n	800758a <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8007646:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007648:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800764a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007650:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007652:	6a23      	ldr	r3, [r4, #32]
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800765c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007660:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007664:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007666:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007668:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800766e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007672:	60a3      	str	r3, [r4, #8]
}
 8007674:	e789      	b.n	800758a <HAL_TIM_ConfigClockSource+0x66>
 8007676:	bf00      	nop

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop

08007684 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007688:	6803      	ldr	r3, [r0, #0]
{
 800768a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800768c:	691a      	ldr	r2, [r3, #16]
{
 800768e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007690:	0791      	lsls	r1, r2, #30
 8007692:	d502      	bpl.n	800769a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	0792      	lsls	r2, r2, #30
 8007698:	d45f      	bmi.n	800775a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	0750      	lsls	r0, r2, #29
 800769e:	d502      	bpl.n	80076a6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	0751      	lsls	r1, r2, #29
 80076a4:	d446      	bmi.n	8007734 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	0712      	lsls	r2, r2, #28
 80076aa:	d502      	bpl.n	80076b2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	0710      	lsls	r0, r2, #28
 80076b0:	d42e      	bmi.n	8007710 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	06d2      	lsls	r2, r2, #27
 80076b6:	d502      	bpl.n	80076be <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	06d0      	lsls	r0, r2, #27
 80076bc:	d418      	bmi.n	80076f0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	07d1      	lsls	r1, r2, #31
 80076c2:	d502      	bpl.n	80076ca <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	07d2      	lsls	r2, r2, #31
 80076c8:	d45d      	bmi.n	8007786 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	0610      	lsls	r0, r2, #24
 80076ce:	d502      	bpl.n	80076d6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	0611      	lsls	r1, r2, #24
 80076d4:	d45f      	bmi.n	8007796 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	0652      	lsls	r2, r2, #25
 80076da:	d502      	bpl.n	80076e2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	0650      	lsls	r0, r2, #25
 80076e0:	d461      	bmi.n	80077a6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	0691      	lsls	r1, r2, #26
 80076e6:	d502      	bpl.n	80076ee <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	0692      	lsls	r2, r2, #26
 80076ec:	d443      	bmi.n	8007776 <HAL_TIM_IRQHandler+0xee>
}
 80076ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076f0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076f6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076fa:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80076fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076fe:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007702:	d064      	beq.n	80077ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007704:	f7ff ffba 	bl	800767c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007708:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800770a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770c:	7722      	strb	r2, [r4, #28]
 800770e:	e7d6      	b.n	80076be <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007710:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007714:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007716:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007718:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800771a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800771c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800771e:	0799      	lsls	r1, r3, #30
 8007720:	d152      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	f7ff ffa9 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff ffaa 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800772e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007730:	7722      	strb	r2, [r4, #28]
 8007732:	e7be      	b.n	80076b2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007734:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007738:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800773a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800773c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8007740:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007742:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007746:	d13c      	bne.n	80077c2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007748:	f7ff ff96 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff ff97 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007752:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007754:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	7722      	strb	r2, [r4, #28]
 8007758:	e7a5      	b.n	80076a6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800775a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800775e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007760:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007762:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	079b      	lsls	r3, r3, #30
 8007768:	d025      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800776a:	f7ff ff87 	bl	800767c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007770:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007772:	7722      	strb	r2, [r4, #28]
 8007774:	e791      	b.n	800769a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007776:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800777a:	4620      	mov	r0, r4
}
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007780:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007782:	f000 b85d 	b.w	8007840 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007786:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800778a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800778c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800778e:	f7fe fa1b 	bl	8005bc8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	e799      	b.n	80076ca <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007796:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800779a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800779c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800779e:	f000 f851 	bl	8007844 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	e797      	b.n	80076d6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80077aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80077ae:	f7ff ff69 	bl	8007684 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	e795      	b.n	80076e2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	f7ff ff5f 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff ff60 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
 80077c0:	e7d5      	b.n	800776e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80077c2:	f7ff ff5b 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 80077c6:	e7c4      	b.n	8007752 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80077c8:	f7ff ff58 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 80077cc:	e7ae      	b.n	800772c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	f7ff ff53 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff ff54 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
 80077d8:	e796      	b.n	8007708 <HAL_TIM_IRQHandler+0x80>
 80077da:	bf00      	nop

080077dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077dc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80077e0:	2a01      	cmp	r2, #1
 80077e2:	d027      	beq.n	8007834 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80077e4:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e6:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e8:	681a      	ldr	r2, [r3, #0]
{
 80077ea:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80077ec:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80077f0:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f2:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077f4:	4d10      	ldr	r5, [pc, #64]	@ (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077fa:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fc:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80077fe:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8007800:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007802:	d009      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007804:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007808:	d006      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800780a:	480c      	ldr	r0, [pc, #48]	@ (800783c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800780c:	4282      	cmp	r2, r0
 800780e:	d003      	beq.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8007810:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8007814:	4282      	cmp	r2, r0
 8007816:	d104      	bne.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007818:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800781a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007820:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007822:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8007824:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800782a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 800782e:	4610      	mov	r0, r2
}
 8007830:	bc30      	pop	{r4, r5}
 8007832:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007834:	2002      	movs	r0, #2
}
 8007836:	4770      	bx	lr
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40000400 	.word	0x40000400

08007840 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop

08007844 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop

08007848 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	2800      	cmp	r0, #0
 800784a:	d065      	beq.n	8007918 <HAL_UART_Init+0xd0>
{
 800784c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800784e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007852:	4604      	mov	r4, r0
 8007854:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007858:	2b00      	cmp	r3, #0
 800785a:	d055      	beq.n	8007908 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800785c:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8007860:	2124      	movs	r1, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8007862:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007864:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007868:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800786a:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800786c:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007870:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007872:	4302      	orrs	r2, r0
 8007874:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8007876:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007878:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800787a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800787c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8007880:	4331      	orrs	r1, r6
 8007882:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007884:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 8007886:	4825      	ldr	r0, [pc, #148]	@ (800791c <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 8007888:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800788c:	f021 010c 	bic.w	r1, r1, #12
 8007890:	430a      	orrs	r2, r1
 8007892:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007894:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 8007896:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007898:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800789c:	ea42 0205 	orr.w	r2, r2, r5
 80078a0:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80078a2:	d036      	beq.n	8007912 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7ff f980 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078a8:	6862      	ldr	r2, [r4, #4]
 80078aa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b8:	f04f 0e64 	mov.w	lr, #100	@ 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80078be:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078c2:	4817      	ldr	r0, [pc, #92]	@ (8007920 <HAL_UART_Init+0xd8>)
 80078c4:	6821      	ldr	r1, [r4, #0]
 80078c6:	fba0 6203 	umull	r6, r2, r0, r3
 80078ca:	0952      	lsrs	r2, r2, #5
 80078cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	3332      	adds	r3, #50	@ 0x32
 80078d4:	fba0 0303 	umull	r0, r3, r0, r3
 80078d8:	0112      	lsls	r2, r2, #4
 80078da:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80078de:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e0:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 80078e2:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80078e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ea:	694b      	ldr	r3, [r1, #20]
 80078ec:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80078f0:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80078f2:	68cb      	ldr	r3, [r1, #12]
 80078f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80078f8:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	6465      	str	r5, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078fc:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007900:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007904:	6365      	str	r5, [r4, #52]	@ 0x34
}
 8007906:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007908:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800790c:	f7fe f8f4 	bl	8005af8 <HAL_UART_MspInit>
 8007910:	e7a4      	b.n	800785c <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8007912:	f7ff f959 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 8007916:	e7c7      	b.n	80078a8 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8007918:	2001      	movs	r0, #1
}
 800791a:	4770      	bx	lr
 800791c:	40013800 	.word	0x40013800
 8007920:	51eb851f 	.word	0x51eb851f

08007924 <HAL_UART_Transmit>:
{
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800792a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800792e:	2b20      	cmp	r3, #32
 8007930:	d16e      	bne.n	8007a10 <HAL_UART_Transmit+0xec>
    if ((pData == NULL) || (Size == 0U))
 8007932:	4688      	mov	r8, r1
 8007934:	b109      	cbz	r1, 800793a <HAL_UART_Transmit+0x16>
 8007936:	4617      	mov	r7, r2
 8007938:	b912      	cbnz	r2, 8007940 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800793a:	2001      	movs	r0, #1
}
 800793c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007940:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	4604      	mov	r4, r0
 8007948:	f8c0 9044 	str.w	r9, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8007950:	f7fe fb66 	bl	8006020 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007954:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007956:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 800795c:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800795e:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007960:	d064      	beq.n	8007a2c <HAL_UART_Transmit+0x108>
    while (huart->TxXferCount > 0U)
 8007962:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007964:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8007966:	b292      	uxth	r2, r2
 8007968:	b192      	cbz	r2, 8007990 <HAL_UART_Transmit+0x6c>
 800796a:	1c69      	adds	r1, r5, #1
 800796c:	d122      	bne.n	80079b4 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	0612      	lsls	r2, r2, #24
 8007972:	d5fc      	bpl.n	800796e <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 8007974:	f1b8 0f00 	cmp.w	r8, #0
 8007978:	d022      	beq.n	80079c0 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800797a:	f818 2b01 	ldrb.w	r2, [r8], #1
 800797e:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8007980:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007982:	3a01      	subs	r2, #1
 8007984:	b292      	uxth	r2, r2
 8007986:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007988:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800798a:	b292      	uxth	r2, r2
 800798c:	2a00      	cmp	r2, #0
 800798e:	d1ec      	bne.n	800796a <HAL_UART_Transmit+0x46>
 8007990:	1c68      	adds	r0, r5, #1
 8007992:	d147      	bne.n	8007a24 <HAL_UART_Transmit+0x100>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	0651      	lsls	r1, r2, #25
 8007998:	d5fc      	bpl.n	8007994 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800799a:	2320      	movs	r3, #32
 800799c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80079a0:	2000      	movs	r0, #0
}
 80079a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079a6:	b185      	cbz	r5, 80079ca <HAL_UART_Transmit+0xa6>
 80079a8:	f7fe fb3a 	bl	8006020 <HAL_GetTick>
 80079ac:	1b80      	subs	r0, r0, r6
 80079ae:	4285      	cmp	r5, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079b0:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079b2:	d30a      	bcc.n	80079ca <HAL_UART_Transmit+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	0617      	lsls	r7, r2, #24
 80079b8:	d5f5      	bpl.n	80079a6 <HAL_UART_Transmit+0x82>
      if (pdata8bits == NULL)
 80079ba:	f1b8 0f00 	cmp.w	r8, #0
 80079be:	d1dc      	bne.n	800797a <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079c0:	f839 2b02 	ldrh.w	r2, [r9], #2
 80079c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c8:	e7d9      	b.n	800797e <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	f103 020c 	add.w	r2, r3, #12
 80079ce:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079d2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	f103 000c 	add.w	r0, r3, #12
 80079da:	e840 2100 	strex	r1, r2, [r0]
 80079de:	2900      	cmp	r1, #0
 80079e0:	d1f3      	bne.n	80079ca <HAL_UART_Transmit+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	f103 0214 	add.w	r2, r3, #20
 80079e6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	f103 0014 	add.w	r0, r3, #20
 80079f2:	e840 2100 	strex	r1, r2, [r0]
 80079f6:	2900      	cmp	r1, #0
 80079f8:	d1f3      	bne.n	80079e2 <HAL_UART_Transmit+0xbe>
        huart->gState  = HAL_UART_STATE_READY;
 80079fa:	2320      	movs	r3, #32
 80079fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 8007a04:	2300      	movs	r3, #0
 8007a06:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8007a0a:	2003      	movs	r0, #3
}
 8007a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007a10:	2002      	movs	r0, #2
}
 8007a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a16:	b17d      	cbz	r5, 8007a38 <HAL_UART_Transmit+0x114>
 8007a18:	f7fe fb02 	bl	8006020 <HAL_GetTick>
 8007a1c:	1b83      	subs	r3, r0, r6
 8007a1e:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a20:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a22:	d309      	bcc.n	8007a38 <HAL_UART_Transmit+0x114>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	0652      	lsls	r2, r2, #25
 8007a28:	d5f5      	bpl.n	8007a16 <HAL_UART_Transmit+0xf2>
 8007a2a:	e7b6      	b.n	800799a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d197      	bne.n	8007962 <HAL_UART_Transmit+0x3e>
 8007a32:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8007a34:	4698      	mov	r8, r3
 8007a36:	e794      	b.n	8007962 <HAL_UART_Transmit+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f103 020c 	add.w	r2, r3, #12
 8007a3c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a40:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	f103 000c 	add.w	r0, r3, #12
 8007a48:	e840 2100 	strex	r1, r2, [r0]
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d1f3      	bne.n	8007a38 <HAL_UART_Transmit+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	f103 0214 	add.w	r2, r3, #20
 8007a54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a58:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	f103 0014 	add.w	r0, r3, #20
 8007a60:	e840 2100 	strex	r1, r2, [r0]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d1f3      	bne.n	8007a50 <HAL_UART_Transmit+0x12c>
 8007a68:	e7c7      	b.n	80079fa <HAL_UART_Transmit+0xd6>
 8007a6a:	bf00      	nop

08007a6c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a6c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d120      	bne.n	8007ab6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8007a74:	b101      	cbz	r1, 8007a78 <HAL_UART_Receive_IT+0xc>
 8007a76:	b90a      	cbnz	r2, 8007a7c <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8007a78:	2001      	movs	r0, #1
}
 8007a7a:	4770      	bx	lr
{
 8007a7c:	b410      	push	{r4}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a7e:	f04f 0c22 	mov.w	ip, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	2400      	movs	r4, #0
  huart->pRxBuffPtr = pData;
 8007a84:	6281      	str	r1, [r0, #40]	@ 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a86:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a88:	6304      	str	r4, [r0, #48]	@ 0x30
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a8a:	6803      	ldr	r3, [r0, #0]
  huart->RxXferCount = Size;
 8007a8c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->RxXferSize = Size;
 8007a8e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a90:	6444      	str	r4, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a92:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a96:	b119      	cbz	r1, 8007aa0 <HAL_UART_Receive_IT+0x34>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a9e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aa0:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aa2:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007aaa:	68da      	ldr	r2, [r3, #12]
}
 8007aac:	bc10      	pop	{r4}
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007aae:	f042 0220 	orr.w	r2, r2, #32
 8007ab2:	60da      	str	r2, [r3, #12]
}
 8007ab4:	4770      	bx	lr
    return HAL_BUSY;
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop

08007ac4 <UART_DMAAbortOnError>:
{
 8007ac4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007ac6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8007aca:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007acc:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8007ace:	f7ff fff7 	bl	8007ac0 <HAL_UART_ErrorCallback>
}
 8007ad2:	bd08      	pop	{r3, pc}

08007ad4 <HAL_UARTEx_RxEventCallback>:
}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop

08007ad8 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ada:	6801      	ldr	r1, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ae0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae2:	d042      	beq.n	8007b6a <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d039      	beq.n	8007b5c <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ae8:	684b      	ldr	r3, [r1, #4]
 8007aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aee:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007af0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8007af2:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8007af4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8007af6:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d132      	bne.n	8007b68 <UART_Receive_IT.part.0.isra.0+0x90>
      huart->RxState = HAL_UART_STATE_READY;
 8007b02:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b06:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007b08:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b0a:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007b0c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b0e:	f021 0120 	bic.w	r1, r1, #32
 8007b12:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b14:	68d1      	ldr	r1, [r2, #12]
 8007b16:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8007b1a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b1c:	6951      	ldr	r1, [r2, #20]
 8007b1e:	f021 0101 	bic.w	r1, r1, #1
 8007b22:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007b24:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007b2c:	2901      	cmp	r1, #1
 8007b2e:	d125      	bne.n	8007b7c <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b30:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	f102 030c 	add.w	r3, r2, #12
 8007b36:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	f102 0c0c 	add.w	ip, r2, #12
 8007b42:	e84c 3100 	strex	r1, r3, [ip]
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d1f3      	bne.n	8007b32 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b4a:	6813      	ldr	r3, [r2, #0]
 8007b4c:	06db      	lsls	r3, r3, #27
 8007b4e:	d41a      	bmi.n	8007b86 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b50:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007b52:	f7ff ffbf 	bl	8007ad4 <HAL_UARTEx_RxEventCallback>
}
 8007b56:	b003      	add	sp, #12
 8007b58:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b5c:	6903      	ldr	r3, [r0, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1c2      	bne.n	8007ae8 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b62:	684b      	ldr	r3, [r1, #4]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	e7c2      	b.n	8007aee <UART_Receive_IT.part.0.isra.0+0x16>
 8007b68:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6a:	6903      	ldr	r3, [r0, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f8      	bne.n	8007b62 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b70:	684b      	ldr	r3, [r1, #4]
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8007b7a:	e7bb      	b.n	8007af4 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8007b7c:	f7fc fc22 	bl	80043c4 <HAL_UART_RxCpltCallback>
}
 8007b80:	b003      	add	sp, #12
 8007b82:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b86:	2300      	movs	r3, #0
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	6853      	ldr	r3, [r2, #4]
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	e7dc      	b.n	8007b50 <UART_Receive_IT.part.0.isra.0+0x78>
 8007b96:	bf00      	nop

08007b98 <HAL_UART_IRQHandler>:
{
 8007b98:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b9a:	6803      	ldr	r3, [r0, #0]
{
 8007b9c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b9e:	681a      	ldr	r2, [r3, #0]
{
 8007ba0:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8007ba2:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ba6:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ba8:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8007baa:	d16f      	bne.n	8007c8c <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bac:	0691      	lsls	r1, r2, #26
 8007bae:	d502      	bpl.n	8007bb6 <HAL_UART_IRQHandler+0x1e>
 8007bb0:	06a9      	lsls	r1, r5, #26
 8007bb2:	f100 80a0 	bmi.w	8007cf6 <HAL_UART_IRQHandler+0x15e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bb8:	2901      	cmp	r1, #1
 8007bba:	d00b      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bbc:	0610      	lsls	r0, r2, #24
 8007bbe:	d502      	bpl.n	8007bc6 <HAL_UART_IRQHandler+0x2e>
 8007bc0:	0629      	lsls	r1, r5, #24
 8007bc2:	f100 80a2 	bmi.w	8007d0a <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bc6:	0652      	lsls	r2, r2, #25
 8007bc8:	d502      	bpl.n	8007bd0 <HAL_UART_IRQHandler+0x38>
 8007bca:	0668      	lsls	r0, r5, #25
 8007bcc:	f100 80bc 	bmi.w	8007d48 <HAL_UART_IRQHandler+0x1b0>
}
 8007bd0:	b003      	add	sp, #12
 8007bd2:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bd4:	06d0      	lsls	r0, r2, #27
 8007bd6:	d5f1      	bpl.n	8007bbc <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bd8:	06e9      	lsls	r1, r5, #27
 8007bda:	d5ef      	bpl.n	8007bbc <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bdc:	2200      	movs	r2, #0
 8007bde:	9201      	str	r2, [sp, #4]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	9201      	str	r2, [sp, #4]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	9201      	str	r2, [sp, #4]
 8007be8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	0655      	lsls	r5, r2, #25
 8007bee:	f140 8135 	bpl.w	8007e5c <HAL_UART_IRQHandler+0x2c4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bf2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007bf4:	6802      	ldr	r2, [r0, #0]
 8007bf6:	6852      	ldr	r2, [r2, #4]
 8007bf8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d0e8      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bfe:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8007c00:	4291      	cmp	r1, r2
 8007c02:	d9e5      	bls.n	8007bd0 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8007c04:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c06:	6982      	ldr	r2, [r0, #24]
 8007c08:	2a20      	cmp	r2, #32
 8007c0a:	d036      	beq.n	8007c7a <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f103 020c 	add.w	r2, r3, #12
 8007c10:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	f103 050c 	add.w	r5, r3, #12
 8007c1c:	e845 2100 	strex	r1, r2, [r5]
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1f3      	bne.n	8007c0c <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	f103 0214 	add.w	r2, r3, #20
 8007c28:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	f103 0514 	add.w	r5, r3, #20
 8007c34:	e845 2100 	strex	r1, r2, [r5]
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d1f3      	bne.n	8007c24 <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	f103 0214 	add.w	r2, r3, #20
 8007c40:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	f103 0514 	add.w	r5, r3, #20
 8007c4c:	e845 2100 	strex	r1, r2, [r5]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	d1f3      	bne.n	8007c3c <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 8007c54:	2220      	movs	r2, #32
 8007c56:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5a:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	f103 020c 	add.w	r2, r3, #12
 8007c60:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	f103 050c 	add.w	r5, r3, #12
 8007c6c:	e845 2100 	strex	r1, r2, [r5]
 8007c70:	2900      	cmp	r1, #0
 8007c72:	d1f3      	bne.n	8007c5c <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c74:	f7fe fa4e 	bl	8006114 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c78:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c7e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007c80:	4620      	mov	r0, r4
 8007c82:	1ac9      	subs	r1, r1, r3
 8007c84:	b289      	uxth	r1, r1
 8007c86:	f7ff ff25 	bl	8007ad4 <HAL_UARTEx_RxEventCallback>
 8007c8a:	e7a1      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c8c:	f011 0101 	ands.w	r1, r1, #1
 8007c90:	d178      	bne.n	8007d84 <HAL_UART_IRQHandler+0x1ec>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c92:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8007c96:	d08e      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c98:	07d0      	lsls	r0, r2, #31
 8007c9a:	d50a      	bpl.n	8007cb2 <HAL_UART_IRQHandler+0x11a>
 8007c9c:	05e8      	lsls	r0, r5, #23
 8007c9e:	f140 80d9 	bpl.w	8007e54 <HAL_UART_IRQHandler+0x2bc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8007ca4:	f040 0001 	orr.w	r0, r0, #1
 8007ca8:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007caa:	0750      	lsls	r0, r2, #29
 8007cac:	d55b      	bpl.n	8007d66 <HAL_UART_IRQHandler+0x1ce>
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d16c      	bne.n	8007d8c <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cb2:	0790      	lsls	r0, r2, #30
 8007cb4:	d570      	bpl.n	8007d98 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cb6:	0710      	lsls	r0, r2, #28
 8007cb8:	f100 80c9 	bmi.w	8007e4e <HAL_UART_IRQHandler+0x2b6>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d086      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc2:	0691      	lsls	r1, r2, #26
 8007cc4:	d509      	bpl.n	8007cda <HAL_UART_IRQHandler+0x142>
 8007cc6:	06aa      	lsls	r2, r5, #26
 8007cc8:	d507      	bpl.n	8007cda <HAL_UART_IRQHandler+0x142>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cca:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8007cce:	2a22      	cmp	r2, #34	@ 0x22
 8007cd0:	d103      	bne.n	8007cda <HAL_UART_IRQHandler+0x142>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff ff00 	bl	8007ad8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ce2:	f001 0108 	and.w	r1, r1, #8
 8007ce6:	ea52 0501 	orrs.w	r5, r2, r1
 8007cea:	d15c      	bne.n	8007da6 <HAL_UART_IRQHandler+0x20e>
        HAL_UART_ErrorCallback(huart);
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff fee7 	bl	8007ac0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf2:	6465      	str	r5, [r4, #68]	@ 0x44
 8007cf4:	e76c      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007cfa:	2b22      	cmp	r3, #34	@ 0x22
 8007cfc:	f47f af68 	bne.w	8007bd0 <HAL_UART_IRQHandler+0x38>
}
 8007d00:	b003      	add	sp, #12
 8007d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d06:	f7ff bee7 	b.w	8007ad8 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d0a:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8007d0e:	2a21      	cmp	r2, #33	@ 0x21
 8007d10:	f47f af5e 	bne.w	8007bd0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d14:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d16:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d18:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007d1c:	f000 80d9 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x33a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d20:	1c51      	adds	r1, r2, #1
 8007d22:	6221      	str	r1, [r4, #32]
 8007d24:	7812      	ldrb	r2, [r2, #0]
 8007d26:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007d28:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007d2a:	3a01      	subs	r2, #1
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	f47f af4d 	bne.w	8007bd0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d3c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	e743      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d4a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007d4c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d52:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007d54:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8007d58:	f7ff feb0 	bl	8007abc <HAL_UART_TxCpltCallback>
    return;
 8007d5c:	e738      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d5e:	05e8      	lsls	r0, r5, #23
 8007d60:	d49f      	bmi.n	8007ca2 <HAL_UART_IRQHandler+0x10a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d62:	0750      	lsls	r0, r2, #29
 8007d64:	d412      	bmi.n	8007d8c <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d66:	0790      	lsls	r0, r2, #30
 8007d68:	d516      	bpl.n	8007d98 <HAL_UART_IRQHandler+0x200>
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	d0a3      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x11e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d6e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d70:	f041 0104 	orr.w	r1, r1, #4
 8007d74:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d76:	0711      	lsls	r1, r2, #28
 8007d78:	d5a0      	bpl.n	8007cbc <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d7a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d7c:	f041 0108 	orr.w	r1, r1, #8
 8007d80:	6461      	str	r1, [r4, #68]	@ 0x44
 8007d82:	e79b      	b.n	8007cbc <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d84:	07d0      	lsls	r0, r2, #31
 8007d86:	d4ea      	bmi.n	8007d5e <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d88:	0750      	lsls	r0, r2, #29
 8007d8a:	d55b      	bpl.n	8007e44 <HAL_UART_IRQHandler+0x2ac>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d8c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8007d8e:	f040 0002 	orr.w	r0, r0, #2
 8007d92:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d94:	0790      	lsls	r0, r2, #30
 8007d96:	d4ea      	bmi.n	8007d6e <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d98:	0710      	lsls	r0, r2, #28
 8007d9a:	d58f      	bpl.n	8007cbc <HAL_UART_IRQHandler+0x124>
 8007d9c:	f005 0020 	and.w	r0, r5, #32
 8007da0:	4308      	orrs	r0, r1
 8007da2:	d08b      	beq.n	8007cbc <HAL_UART_IRQHandler+0x124>
 8007da4:	e7e9      	b.n	8007d7a <HAL_UART_IRQHandler+0x1e2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	f103 020c 	add.w	r2, r3, #12
 8007daa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dae:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	f103 000c 	add.w	r0, r3, #12
 8007db6:	e840 2100 	strex	r1, r2, [r0]
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d1f3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x20e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	f103 0214 	add.w	r2, r3, #20
 8007dc2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	f103 0014 	add.w	r0, r3, #20
 8007dce:	e840 2100 	strex	r1, r2, [r0]
 8007dd2:	2900      	cmp	r1, #0
 8007dd4:	d1f3      	bne.n	8007dbe <HAL_UART_IRQHandler+0x226>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007dd8:	2a01      	cmp	r2, #1
 8007dda:	d022      	beq.n	8007e22 <HAL_UART_IRQHandler+0x28a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ddc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007dde:	2120      	movs	r1, #32
 8007de0:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de4:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de6:	695a      	ldr	r2, [r3, #20]
 8007de8:	0655      	lsls	r5, r2, #25
 8007dea:	d527      	bpl.n	8007e3c <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	f103 0214 	add.w	r2, r3, #20
 8007df0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	f103 0014 	add.w	r0, r3, #20
 8007dfc:	e840 2100 	strex	r1, r2, [r0]
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d1f3      	bne.n	8007dec <HAL_UART_IRQHandler+0x254>
          if (huart->hdmarx != NULL)
 8007e04:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007e06:	b1c8      	cbz	r0, 8007e3c <HAL_UART_IRQHandler+0x2a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e08:	4b37      	ldr	r3, [pc, #220]	@ (8007ee8 <HAL_UART_IRQHandler+0x350>)
 8007e0a:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e0c:	f7fe f9a6 	bl	800615c <HAL_DMA_Abort_IT>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f43f aedd 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e16:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007e18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8007e1a:	b003      	add	sp, #12
 8007e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e20:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	f103 020c 	add.w	r2, r3, #12
 8007e26:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	f103 000c 	add.w	r0, r3, #12
 8007e32:	e840 2100 	strex	r1, r2, [r0]
 8007e36:	2900      	cmp	r1, #0
 8007e38:	d1f3      	bne.n	8007e22 <HAL_UART_IRQHandler+0x28a>
 8007e3a:	e7cf      	b.n	8007ddc <HAL_UART_IRQHandler+0x244>
            HAL_UART_ErrorCallback(huart);
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f7ff fe3f 	bl	8007ac0 <HAL_UART_ErrorCallback>
 8007e42:	e6c5      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e44:	0791      	lsls	r1, r2, #30
 8007e46:	d492      	bmi.n	8007d6e <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e48:	0711      	lsls	r1, r2, #28
 8007e4a:	d496      	bmi.n	8007d7a <HAL_UART_IRQHandler+0x1e2>
 8007e4c:	e736      	b.n	8007cbc <HAL_UART_IRQHandler+0x124>
 8007e4e:	06a9      	lsls	r1, r5, #26
 8007e50:	d493      	bmi.n	8007d7a <HAL_UART_IRQHandler+0x1e2>
 8007e52:	e733      	b.n	8007cbc <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e54:	0750      	lsls	r0, r2, #29
 8007e56:	f53f af2c 	bmi.w	8007cb2 <HAL_UART_IRQHandler+0x11a>
 8007e5a:	e784      	b.n	8007d66 <HAL_UART_IRQHandler+0x1ce>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e5c:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8007e5e:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e60:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8007e62:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e64:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	f43f aeb2 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e6c:	1a41      	subs	r1, r0, r1
 8007e6e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007e70:	2900      	cmp	r1, #0
 8007e72:	f43f aead 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	f103 020c 	add.w	r2, r3, #12
 8007e7a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e7e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	f103 050c 	add.w	r5, r3, #12
 8007e86:	e845 2000 	strex	r0, r2, [r5]
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d1f3      	bne.n	8007e76 <HAL_UART_IRQHandler+0x2de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	f103 0214 	add.w	r2, r3, #20
 8007e92:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	f103 0514 	add.w	r5, r3, #20
 8007e9e:	e845 2000 	strex	r0, r2, [r5]
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1f3      	bne.n	8007e8e <HAL_UART_IRQHandler+0x2f6>
        huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eac:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	f103 020c 	add.w	r2, r3, #12
 8007eb2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	f103 050c 	add.w	r5, r3, #12
 8007ebe:	e845 2000 	strex	r0, r2, [r5]
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d1f3      	bne.n	8007eae <HAL_UART_IRQHandler+0x316>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ec6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ec8:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eca:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ecc:	f7ff fe02 	bl	8007ad4 <HAL_UARTEx_RxEventCallback>
 8007ed0:	e67e      	b.n	8007bd0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed2:	6921      	ldr	r1, [r4, #16]
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	f47f af23 	bne.w	8007d20 <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eda:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007ede:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007ee2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee4:	6222      	str	r2, [r4, #32]
 8007ee6:	e71f      	b.n	8007d28 <HAL_UART_IRQHandler+0x190>
 8007ee8:	08007ac5 	.word	0x08007ac5

08007eec <__assert_func>:
 8007eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <__assert_func+0x2c>)
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68d8      	ldr	r0, [r3, #12]
 8007efa:	b954      	cbnz	r4, 8007f12 <__assert_func+0x26>
 8007efc:	4b07      	ldr	r3, [pc, #28]	@ (8007f1c <__assert_func+0x30>)
 8007efe:	461c      	mov	r4, r3
 8007f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f04:	9100      	str	r1, [sp, #0]
 8007f06:	462b      	mov	r3, r5
 8007f08:	4905      	ldr	r1, [pc, #20]	@ (8007f20 <__assert_func+0x34>)
 8007f0a:	f000 f8b1 	bl	8008070 <fiprintf>
 8007f0e:	f000 f9dc 	bl	80082ca <abort>
 8007f12:	4b04      	ldr	r3, [pc, #16]	@ (8007f24 <__assert_func+0x38>)
 8007f14:	e7f4      	b.n	8007f00 <__assert_func+0x14>
 8007f16:	bf00      	nop
 8007f18:	20000128 	.word	0x20000128
 8007f1c:	080099c3 	.word	0x080099c3
 8007f20:	08009995 	.word	0x08009995
 8007f24:	08009988 	.word	0x08009988

08007f28 <std>:
 8007f28:	2300      	movs	r3, #0
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f36:	6083      	str	r3, [r0, #8]
 8007f38:	8181      	strh	r1, [r0, #12]
 8007f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f3c:	81c2      	strh	r2, [r0, #14]
 8007f3e:	6183      	str	r3, [r0, #24]
 8007f40:	4619      	mov	r1, r3
 8007f42:	2208      	movs	r2, #8
 8007f44:	305c      	adds	r0, #92	@ 0x5c
 8007f46:	f000 f936 	bl	80081b6 <memset>
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <std+0x58>)
 8007f4c:	6224      	str	r4, [r4, #32]
 8007f4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f50:	4b0c      	ldr	r3, [pc, #48]	@ (8007f84 <std+0x5c>)
 8007f52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <std+0x60>)
 8007f56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f58:	4b0c      	ldr	r3, [pc, #48]	@ (8007f8c <std+0x64>)
 8007f5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <std+0x68>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d006      	beq.n	8007f70 <std+0x48>
 8007f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f66:	4294      	cmp	r4, r2
 8007f68:	d002      	beq.n	8007f70 <std+0x48>
 8007f6a:	33d0      	adds	r3, #208	@ 0xd0
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	d105      	bne.n	8007f7c <std+0x54>
 8007f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f000 b996 	b.w	80082a8 <__retarget_lock_init_recursive>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	08008111 	.word	0x08008111
 8007f84:	08008133 	.word	0x08008133
 8007f88:	0800816b 	.word	0x0800816b
 8007f8c:	0800818f 	.word	0x0800818f
 8007f90:	2000081c 	.word	0x2000081c

08007f94 <stdio_exit_handler>:
 8007f94:	4a02      	ldr	r2, [pc, #8]	@ (8007fa0 <stdio_exit_handler+0xc>)
 8007f96:	4903      	ldr	r1, [pc, #12]	@ (8007fa4 <stdio_exit_handler+0x10>)
 8007f98:	4803      	ldr	r0, [pc, #12]	@ (8007fa8 <stdio_exit_handler+0x14>)
 8007f9a:	f000 b87b 	b.w	8008094 <_fwalk_sglue>
 8007f9e:	bf00      	nop
 8007fa0:	2000011c 	.word	0x2000011c
 8007fa4:	08008e19 	.word	0x08008e19
 8007fa8:	2000012c 	.word	0x2000012c

08007fac <cleanup_stdio>:
 8007fac:	6841      	ldr	r1, [r0, #4]
 8007fae:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe0 <cleanup_stdio+0x34>)
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	d001      	beq.n	8007fbc <cleanup_stdio+0x10>
 8007fb8:	f000 ff2e 	bl	8008e18 <_fflush_r>
 8007fbc:	68a1      	ldr	r1, [r4, #8]
 8007fbe:	4b09      	ldr	r3, [pc, #36]	@ (8007fe4 <cleanup_stdio+0x38>)
 8007fc0:	4299      	cmp	r1, r3
 8007fc2:	d002      	beq.n	8007fca <cleanup_stdio+0x1e>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 ff27 	bl	8008e18 <_fflush_r>
 8007fca:	68e1      	ldr	r1, [r4, #12]
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <cleanup_stdio+0x3c>)
 8007fce:	4299      	cmp	r1, r3
 8007fd0:	d004      	beq.n	8007fdc <cleanup_stdio+0x30>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd8:	f000 bf1e 	b.w	8008e18 <_fflush_r>
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000081c 	.word	0x2000081c
 8007fe4:	20000884 	.word	0x20000884
 8007fe8:	200008ec 	.word	0x200008ec

08007fec <global_stdio_init.part.0>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <global_stdio_init.part.0+0x30>)
 8007ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8008020 <global_stdio_init.part.0+0x34>)
 8007ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8008024 <global_stdio_init.part.0+0x38>)
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f7ff ff94 	bl	8007f28 <std>
 8008000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008004:	2201      	movs	r2, #1
 8008006:	2109      	movs	r1, #9
 8008008:	f7ff ff8e 	bl	8007f28 <std>
 800800c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008010:	2202      	movs	r2, #2
 8008012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008016:	2112      	movs	r1, #18
 8008018:	f7ff bf86 	b.w	8007f28 <std>
 800801c:	20000954 	.word	0x20000954
 8008020:	2000081c 	.word	0x2000081c
 8008024:	08007f95 	.word	0x08007f95

08008028 <__sfp_lock_acquire>:
 8008028:	4801      	ldr	r0, [pc, #4]	@ (8008030 <__sfp_lock_acquire+0x8>)
 800802a:	f000 b93e 	b.w	80082aa <__retarget_lock_acquire_recursive>
 800802e:	bf00      	nop
 8008030:	2000095d 	.word	0x2000095d

08008034 <__sfp_lock_release>:
 8008034:	4801      	ldr	r0, [pc, #4]	@ (800803c <__sfp_lock_release+0x8>)
 8008036:	f000 b939 	b.w	80082ac <__retarget_lock_release_recursive>
 800803a:	bf00      	nop
 800803c:	2000095d 	.word	0x2000095d

08008040 <__sinit>:
 8008040:	b510      	push	{r4, lr}
 8008042:	4604      	mov	r4, r0
 8008044:	f7ff fff0 	bl	8008028 <__sfp_lock_acquire>
 8008048:	6a23      	ldr	r3, [r4, #32]
 800804a:	b11b      	cbz	r3, 8008054 <__sinit+0x14>
 800804c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008050:	f7ff bff0 	b.w	8008034 <__sfp_lock_release>
 8008054:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <__sinit+0x28>)
 8008056:	6223      	str	r3, [r4, #32]
 8008058:	4b04      	ldr	r3, [pc, #16]	@ (800806c <__sinit+0x2c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1f5      	bne.n	800804c <__sinit+0xc>
 8008060:	f7ff ffc4 	bl	8007fec <global_stdio_init.part.0>
 8008064:	e7f2      	b.n	800804c <__sinit+0xc>
 8008066:	bf00      	nop
 8008068:	08007fad 	.word	0x08007fad
 800806c:	20000954 	.word	0x20000954

08008070 <fiprintf>:
 8008070:	b40e      	push	{r1, r2, r3}
 8008072:	b503      	push	{r0, r1, lr}
 8008074:	4601      	mov	r1, r0
 8008076:	ab03      	add	r3, sp, #12
 8008078:	4805      	ldr	r0, [pc, #20]	@ (8008090 <fiprintf+0x20>)
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	6800      	ldr	r0, [r0, #0]
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f000 fb9f 	bl	80087c4 <_vfiprintf_r>
 8008086:	b002      	add	sp, #8
 8008088:	f85d eb04 	ldr.w	lr, [sp], #4
 800808c:	b003      	add	sp, #12
 800808e:	4770      	bx	lr
 8008090:	20000128 	.word	0x20000128

08008094 <_fwalk_sglue>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	4607      	mov	r7, r0
 800809a:	4688      	mov	r8, r1
 800809c:	4614      	mov	r4, r2
 800809e:	2600      	movs	r6, #0
 80080a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a4:	f1b9 0901 	subs.w	r9, r9, #1
 80080a8:	d505      	bpl.n	80080b6 <_fwalk_sglue+0x22>
 80080aa:	6824      	ldr	r4, [r4, #0]
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	d1f7      	bne.n	80080a0 <_fwalk_sglue+0xc>
 80080b0:	4630      	mov	r0, r6
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d907      	bls.n	80080cc <_fwalk_sglue+0x38>
 80080bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c0:	3301      	adds	r3, #1
 80080c2:	d003      	beq.n	80080cc <_fwalk_sglue+0x38>
 80080c4:	4629      	mov	r1, r5
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	4306      	orrs	r6, r0
 80080cc:	3568      	adds	r5, #104	@ 0x68
 80080ce:	e7e9      	b.n	80080a4 <_fwalk_sglue+0x10>

080080d0 <siprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080d6:	b500      	push	{lr}
 80080d8:	b09c      	sub	sp, #112	@ 0x70
 80080da:	ab1d      	add	r3, sp, #116	@ 0x74
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	9006      	str	r0, [sp, #24]
 80080e0:	9107      	str	r1, [sp, #28]
 80080e2:	9104      	str	r1, [sp, #16]
 80080e4:	4808      	ldr	r0, [pc, #32]	@ (8008108 <siprintf+0x38>)
 80080e6:	4909      	ldr	r1, [pc, #36]	@ (800810c <siprintf+0x3c>)
 80080e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	a902      	add	r1, sp, #8
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	f000 fa42 	bl	800857c <_svfiprintf_r>
 80080f8:	2200      	movs	r2, #0
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	b01c      	add	sp, #112	@ 0x70
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	20000128 	.word	0x20000128
 800810c:	ffff0208 	.word	0xffff0208

08008110 <__sread>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	f000 f878 	bl	800820c <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	bfab      	itete	ge
 8008120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008122:	89a3      	ldrhlt	r3, [r4, #12]
 8008124:	181b      	addge	r3, r3, r0
 8008126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800812a:	bfac      	ite	ge
 800812c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800812e:	81a3      	strhlt	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__swrite>:
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	461f      	mov	r7, r3
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	4605      	mov	r5, r0
 800813c:	05db      	lsls	r3, r3, #23
 800813e:	460c      	mov	r4, r1
 8008140:	4616      	mov	r6, r2
 8008142:	d505      	bpl.n	8008150 <__swrite+0x1e>
 8008144:	2302      	movs	r3, #2
 8008146:	2200      	movs	r2, #0
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	f000 f84c 	bl	80081e8 <_lseek_r>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	4632      	mov	r2, r6
 8008154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	4628      	mov	r0, r5
 800815c:	463b      	mov	r3, r7
 800815e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	f000 b863 	b.w	8008230 <_write_r>

0800816a <__sseek>:
 800816a:	b510      	push	{r4, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 f839 	bl	80081e8 <_lseek_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	bf15      	itete	ne
 800817c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800817e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008186:	81a3      	strheq	r3, [r4, #12]
 8008188:	bf18      	it	ne
 800818a:	81a3      	strhne	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__sclose>:
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 b819 	b.w	80081c8 <_close_r>

08008196 <memcmp>:
 8008196:	b510      	push	{r4, lr}
 8008198:	3901      	subs	r1, #1
 800819a:	4402      	add	r2, r0
 800819c:	4290      	cmp	r0, r2
 800819e:	d101      	bne.n	80081a4 <memcmp+0xe>
 80081a0:	2000      	movs	r0, #0
 80081a2:	e005      	b.n	80081b0 <memcmp+0x1a>
 80081a4:	7803      	ldrb	r3, [r0, #0]
 80081a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	d001      	beq.n	80081b2 <memcmp+0x1c>
 80081ae:	1b18      	subs	r0, r3, r4
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	3001      	adds	r0, #1
 80081b4:	e7f2      	b.n	800819c <memcmp+0x6>

080081b6 <memset>:
 80081b6:	4603      	mov	r3, r0
 80081b8:	4402      	add	r2, r0
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d100      	bne.n	80081c0 <memset+0xa>
 80081be:	4770      	bx	lr
 80081c0:	f803 1b01 	strb.w	r1, [r3], #1
 80081c4:	e7f9      	b.n	80081ba <memset+0x4>
	...

080081c8 <_close_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	2300      	movs	r3, #0
 80081cc:	4d05      	ldr	r5, [pc, #20]	@ (80081e4 <_close_r+0x1c>)
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7fd fd5a 	bl	8005c8c <_close>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_close_r+0x1a>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_close_r+0x1a>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20000958 	.word	0x20000958

080081e8 <_lseek_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	2200      	movs	r2, #0
 80081f2:	4d05      	ldr	r5, [pc, #20]	@ (8008208 <_lseek_r+0x20>)
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7fd fd54 	bl	8005ca4 <_lseek>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_lseek_r+0x1e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_lseek_r+0x1e>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	20000958 	.word	0x20000958

0800820c <_read_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	4611      	mov	r1, r2
 8008214:	2200      	movs	r2, #0
 8008216:	4d05      	ldr	r5, [pc, #20]	@ (800822c <_read_r+0x20>)
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	f7fd fd1a 	bl	8005c54 <_read>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_read_r+0x1e>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b103      	cbz	r3, 800822a <_read_r+0x1e>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	20000958 	.word	0x20000958

08008230 <_write_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	2200      	movs	r2, #0
 800823a:	4d05      	ldr	r5, [pc, #20]	@ (8008250 <_write_r+0x20>)
 800823c:	602a      	str	r2, [r5, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	f7fd fd16 	bl	8005c70 <_write>
 8008244:	1c43      	adds	r3, r0, #1
 8008246:	d102      	bne.n	800824e <_write_r+0x1e>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	b103      	cbz	r3, 800824e <_write_r+0x1e>
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	20000958 	.word	0x20000958

08008254 <__errno>:
 8008254:	4b01      	ldr	r3, [pc, #4]	@ (800825c <__errno+0x8>)
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000128 	.word	0x20000128

08008260 <__libc_init_array>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	2600      	movs	r6, #0
 8008264:	4d0c      	ldr	r5, [pc, #48]	@ (8008298 <__libc_init_array+0x38>)
 8008266:	4c0d      	ldr	r4, [pc, #52]	@ (800829c <__libc_init_array+0x3c>)
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	42a6      	cmp	r6, r4
 800826e:	d109      	bne.n	8008284 <__libc_init_array+0x24>
 8008270:	f000 ffc4 	bl	80091fc <_init>
 8008274:	2600      	movs	r6, #0
 8008276:	4d0a      	ldr	r5, [pc, #40]	@ (80082a0 <__libc_init_array+0x40>)
 8008278:	4c0a      	ldr	r4, [pc, #40]	@ (80082a4 <__libc_init_array+0x44>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	42a6      	cmp	r6, r4
 8008280:	d105      	bne.n	800828e <__libc_init_array+0x2e>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	f855 3b04 	ldr.w	r3, [r5], #4
 8008288:	4798      	blx	r3
 800828a:	3601      	adds	r6, #1
 800828c:	e7ee      	b.n	800826c <__libc_init_array+0xc>
 800828e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008292:	4798      	blx	r3
 8008294:	3601      	adds	r6, #1
 8008296:	e7f2      	b.n	800827e <__libc_init_array+0x1e>
 8008298:	08009a00 	.word	0x08009a00
 800829c:	08009a00 	.word	0x08009a00
 80082a0:	08009a00 	.word	0x08009a00
 80082a4:	08009a04 	.word	0x08009a04

080082a8 <__retarget_lock_init_recursive>:
 80082a8:	4770      	bx	lr

080082aa <__retarget_lock_acquire_recursive>:
 80082aa:	4770      	bx	lr

080082ac <__retarget_lock_release_recursive>:
 80082ac:	4770      	bx	lr

080082ae <memcpy>:
 80082ae:	440a      	add	r2, r1
 80082b0:	4291      	cmp	r1, r2
 80082b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082b6:	d100      	bne.n	80082ba <memcpy+0xc>
 80082b8:	4770      	bx	lr
 80082ba:	b510      	push	{r4, lr}
 80082bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c0:	4291      	cmp	r1, r2
 80082c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c6:	d1f9      	bne.n	80082bc <memcpy+0xe>
 80082c8:	bd10      	pop	{r4, pc}

080082ca <abort>:
 80082ca:	2006      	movs	r0, #6
 80082cc:	b508      	push	{r3, lr}
 80082ce:	f000 fea1 	bl	8009014 <raise>
 80082d2:	2001      	movs	r0, #1
 80082d4:	f7fd fcb8 	bl	8005c48 <_exit>

080082d8 <_free_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	2900      	cmp	r1, #0
 80082de:	d040      	beq.n	8008362 <_free_r+0x8a>
 80082e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e4:	1f0c      	subs	r4, r1, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfb8      	it	lt
 80082ea:	18e4      	addlt	r4, r4, r3
 80082ec:	f000 f8de 	bl	80084ac <__malloc_lock>
 80082f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008364 <_free_r+0x8c>)
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	b933      	cbnz	r3, 8008304 <_free_r+0x2c>
 80082f6:	6063      	str	r3, [r4, #4]
 80082f8:	6014      	str	r4, [r2, #0]
 80082fa:	4628      	mov	r0, r5
 80082fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008300:	f000 b8da 	b.w	80084b8 <__malloc_unlock>
 8008304:	42a3      	cmp	r3, r4
 8008306:	d908      	bls.n	800831a <_free_r+0x42>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	1821      	adds	r1, r4, r0
 800830c:	428b      	cmp	r3, r1
 800830e:	bf01      	itttt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	1809      	addeq	r1, r1, r0
 8008316:	6021      	streq	r1, [r4, #0]
 8008318:	e7ed      	b.n	80082f6 <_free_r+0x1e>
 800831a:	461a      	mov	r2, r3
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b10b      	cbz	r3, 8008324 <_free_r+0x4c>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d9fa      	bls.n	800831a <_free_r+0x42>
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	1850      	adds	r0, r2, r1
 8008328:	42a0      	cmp	r0, r4
 800832a:	d10b      	bne.n	8008344 <_free_r+0x6c>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	4401      	add	r1, r0
 8008330:	1850      	adds	r0, r2, r1
 8008332:	4283      	cmp	r3, r0
 8008334:	6011      	str	r1, [r2, #0]
 8008336:	d1e0      	bne.n	80082fa <_free_r+0x22>
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4408      	add	r0, r1
 800833e:	6010      	str	r0, [r2, #0]
 8008340:	6053      	str	r3, [r2, #4]
 8008342:	e7da      	b.n	80082fa <_free_r+0x22>
 8008344:	d902      	bls.n	800834c <_free_r+0x74>
 8008346:	230c      	movs	r3, #12
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	e7d6      	b.n	80082fa <_free_r+0x22>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	1821      	adds	r1, r4, r0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf01      	itttt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	1809      	addeq	r1, r1, r0
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6054      	str	r4, [r2, #4]
 8008360:	e7cb      	b.n	80082fa <_free_r+0x22>
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000964 	.word	0x20000964

08008368 <sbrk_aligned>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4e0f      	ldr	r6, [pc, #60]	@ (80083a8 <sbrk_aligned+0x40>)
 800836c:	460c      	mov	r4, r1
 800836e:	6831      	ldr	r1, [r6, #0]
 8008370:	4605      	mov	r5, r0
 8008372:	b911      	cbnz	r1, 800837a <sbrk_aligned+0x12>
 8008374:	f000 fe6a 	bl	800904c <_sbrk_r>
 8008378:	6030      	str	r0, [r6, #0]
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f000 fe65 	bl	800904c <_sbrk_r>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d103      	bne.n	800838e <sbrk_aligned+0x26>
 8008386:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800838a:	4620      	mov	r0, r4
 800838c:	bd70      	pop	{r4, r5, r6, pc}
 800838e:	1cc4      	adds	r4, r0, #3
 8008390:	f024 0403 	bic.w	r4, r4, #3
 8008394:	42a0      	cmp	r0, r4
 8008396:	d0f8      	beq.n	800838a <sbrk_aligned+0x22>
 8008398:	1a21      	subs	r1, r4, r0
 800839a:	4628      	mov	r0, r5
 800839c:	f000 fe56 	bl	800904c <_sbrk_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d1f2      	bne.n	800838a <sbrk_aligned+0x22>
 80083a4:	e7ef      	b.n	8008386 <sbrk_aligned+0x1e>
 80083a6:	bf00      	nop
 80083a8:	20000960 	.word	0x20000960

080083ac <_malloc_r>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	1ccd      	adds	r5, r1, #3
 80083b2:	f025 0503 	bic.w	r5, r5, #3
 80083b6:	3508      	adds	r5, #8
 80083b8:	2d0c      	cmp	r5, #12
 80083ba:	bf38      	it	cc
 80083bc:	250c      	movcc	r5, #12
 80083be:	2d00      	cmp	r5, #0
 80083c0:	4606      	mov	r6, r0
 80083c2:	db01      	blt.n	80083c8 <_malloc_r+0x1c>
 80083c4:	42a9      	cmp	r1, r5
 80083c6:	d904      	bls.n	80083d2 <_malloc_r+0x26>
 80083c8:	230c      	movs	r3, #12
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084a8 <_malloc_r+0xfc>
 80083d6:	f000 f869 	bl	80084ac <__malloc_lock>
 80083da:	f8d8 3000 	ldr.w	r3, [r8]
 80083de:	461c      	mov	r4, r3
 80083e0:	bb44      	cbnz	r4, 8008434 <_malloc_r+0x88>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff ffbf 	bl	8008368 <sbrk_aligned>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	4604      	mov	r4, r0
 80083ee:	d158      	bne.n	80084a2 <_malloc_r+0xf6>
 80083f0:	f8d8 4000 	ldr.w	r4, [r8]
 80083f4:	4627      	mov	r7, r4
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d143      	bne.n	8008482 <_malloc_r+0xd6>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	d04b      	beq.n	8008496 <_malloc_r+0xea>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	4639      	mov	r1, r7
 8008402:	4630      	mov	r0, r6
 8008404:	eb04 0903 	add.w	r9, r4, r3
 8008408:	f000 fe20 	bl	800904c <_sbrk_r>
 800840c:	4581      	cmp	r9, r0
 800840e:	d142      	bne.n	8008496 <_malloc_r+0xea>
 8008410:	6821      	ldr	r1, [r4, #0]
 8008412:	4630      	mov	r0, r6
 8008414:	1a6d      	subs	r5, r5, r1
 8008416:	4629      	mov	r1, r5
 8008418:	f7ff ffa6 	bl	8008368 <sbrk_aligned>
 800841c:	3001      	adds	r0, #1
 800841e:	d03a      	beq.n	8008496 <_malloc_r+0xea>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	442b      	add	r3, r5
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	f8d8 3000 	ldr.w	r3, [r8]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	bb62      	cbnz	r2, 8008488 <_malloc_r+0xdc>
 800842e:	f8c8 7000 	str.w	r7, [r8]
 8008432:	e00f      	b.n	8008454 <_malloc_r+0xa8>
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	1b52      	subs	r2, r2, r5
 8008438:	d420      	bmi.n	800847c <_malloc_r+0xd0>
 800843a:	2a0b      	cmp	r2, #11
 800843c:	d917      	bls.n	800846e <_malloc_r+0xc2>
 800843e:	1961      	adds	r1, r4, r5
 8008440:	42a3      	cmp	r3, r4
 8008442:	6025      	str	r5, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	6059      	strne	r1, [r3, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	bf08      	it	eq
 800844c:	f8c8 1000 	streq.w	r1, [r8]
 8008450:	5162      	str	r2, [r4, r5]
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	4630      	mov	r0, r6
 8008456:	f000 f82f 	bl	80084b8 <__malloc_unlock>
 800845a:	f104 000b 	add.w	r0, r4, #11
 800845e:	1d23      	adds	r3, r4, #4
 8008460:	f020 0007 	bic.w	r0, r0, #7
 8008464:	1ac2      	subs	r2, r0, r3
 8008466:	bf1c      	itt	ne
 8008468:	1a1b      	subne	r3, r3, r0
 800846a:	50a3      	strne	r3, [r4, r2]
 800846c:	e7af      	b.n	80083ce <_malloc_r+0x22>
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	42a3      	cmp	r3, r4
 8008472:	bf0c      	ite	eq
 8008474:	f8c8 2000 	streq.w	r2, [r8]
 8008478:	605a      	strne	r2, [r3, #4]
 800847a:	e7eb      	b.n	8008454 <_malloc_r+0xa8>
 800847c:	4623      	mov	r3, r4
 800847e:	6864      	ldr	r4, [r4, #4]
 8008480:	e7ae      	b.n	80083e0 <_malloc_r+0x34>
 8008482:	463c      	mov	r4, r7
 8008484:	687f      	ldr	r7, [r7, #4]
 8008486:	e7b6      	b.n	80083f6 <_malloc_r+0x4a>
 8008488:	461a      	mov	r2, r3
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	42a3      	cmp	r3, r4
 800848e:	d1fb      	bne.n	8008488 <_malloc_r+0xdc>
 8008490:	2300      	movs	r3, #0
 8008492:	6053      	str	r3, [r2, #4]
 8008494:	e7de      	b.n	8008454 <_malloc_r+0xa8>
 8008496:	230c      	movs	r3, #12
 8008498:	4630      	mov	r0, r6
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	f000 f80c 	bl	80084b8 <__malloc_unlock>
 80084a0:	e794      	b.n	80083cc <_malloc_r+0x20>
 80084a2:	6005      	str	r5, [r0, #0]
 80084a4:	e7d6      	b.n	8008454 <_malloc_r+0xa8>
 80084a6:	bf00      	nop
 80084a8:	20000964 	.word	0x20000964

080084ac <__malloc_lock>:
 80084ac:	4801      	ldr	r0, [pc, #4]	@ (80084b4 <__malloc_lock+0x8>)
 80084ae:	f7ff befc 	b.w	80082aa <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	2000095c 	.word	0x2000095c

080084b8 <__malloc_unlock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__malloc_unlock+0x8>)
 80084ba:	f7ff bef7 	b.w	80082ac <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	2000095c 	.word	0x2000095c

080084c4 <__ssputs_r>:
 80084c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c8:	461f      	mov	r7, r3
 80084ca:	688e      	ldr	r6, [r1, #8]
 80084cc:	4682      	mov	sl, r0
 80084ce:	42be      	cmp	r6, r7
 80084d0:	460c      	mov	r4, r1
 80084d2:	4690      	mov	r8, r2
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	d82d      	bhi.n	8008534 <__ssputs_r+0x70>
 80084d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084e0:	d026      	beq.n	8008530 <__ssputs_r+0x6c>
 80084e2:	6965      	ldr	r5, [r4, #20]
 80084e4:	6909      	ldr	r1, [r1, #16]
 80084e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ea:	eba3 0901 	sub.w	r9, r3, r1
 80084ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084f2:	1c7b      	adds	r3, r7, #1
 80084f4:	444b      	add	r3, r9
 80084f6:	106d      	asrs	r5, r5, #1
 80084f8:	429d      	cmp	r5, r3
 80084fa:	bf38      	it	cc
 80084fc:	461d      	movcc	r5, r3
 80084fe:	0553      	lsls	r3, r2, #21
 8008500:	d527      	bpl.n	8008552 <__ssputs_r+0x8e>
 8008502:	4629      	mov	r1, r5
 8008504:	f7ff ff52 	bl	80083ac <_malloc_r>
 8008508:	4606      	mov	r6, r0
 800850a:	b360      	cbz	r0, 8008566 <__ssputs_r+0xa2>
 800850c:	464a      	mov	r2, r9
 800850e:	6921      	ldr	r1, [r4, #16]
 8008510:	f7ff fecd 	bl	80082ae <memcpy>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800851a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	6126      	str	r6, [r4, #16]
 8008522:	444e      	add	r6, r9
 8008524:	6026      	str	r6, [r4, #0]
 8008526:	463e      	mov	r6, r7
 8008528:	6165      	str	r5, [r4, #20]
 800852a:	eba5 0509 	sub.w	r5, r5, r9
 800852e:	60a5      	str	r5, [r4, #8]
 8008530:	42be      	cmp	r6, r7
 8008532:	d900      	bls.n	8008536 <__ssputs_r+0x72>
 8008534:	463e      	mov	r6, r7
 8008536:	4632      	mov	r2, r6
 8008538:	4641      	mov	r1, r8
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	f000 fd28 	bl	8008f90 <memmove>
 8008540:	2000      	movs	r0, #0
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	1b9b      	subs	r3, r3, r6
 8008546:	60a3      	str	r3, [r4, #8]
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	4433      	add	r3, r6
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	462a      	mov	r2, r5
 8008554:	f000 fd98 	bl	8009088 <_realloc_r>
 8008558:	4606      	mov	r6, r0
 800855a:	2800      	cmp	r0, #0
 800855c:	d1e0      	bne.n	8008520 <__ssputs_r+0x5c>
 800855e:	4650      	mov	r0, sl
 8008560:	6921      	ldr	r1, [r4, #16]
 8008562:	f7ff feb9 	bl	80082d8 <_free_r>
 8008566:	230c      	movs	r3, #12
 8008568:	f8ca 3000 	str.w	r3, [sl]
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	e7e9      	b.n	800854e <__ssputs_r+0x8a>
	...

0800857c <_svfiprintf_r>:
 800857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	4698      	mov	r8, r3
 8008582:	898b      	ldrh	r3, [r1, #12]
 8008584:	4607      	mov	r7, r0
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	460d      	mov	r5, r1
 800858a:	4614      	mov	r4, r2
 800858c:	b09d      	sub	sp, #116	@ 0x74
 800858e:	d510      	bpl.n	80085b2 <_svfiprintf_r+0x36>
 8008590:	690b      	ldr	r3, [r1, #16]
 8008592:	b973      	cbnz	r3, 80085b2 <_svfiprintf_r+0x36>
 8008594:	2140      	movs	r1, #64	@ 0x40
 8008596:	f7ff ff09 	bl	80083ac <_malloc_r>
 800859a:	6028      	str	r0, [r5, #0]
 800859c:	6128      	str	r0, [r5, #16]
 800859e:	b930      	cbnz	r0, 80085ae <_svfiprintf_r+0x32>
 80085a0:	230c      	movs	r3, #12
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085a8:	b01d      	add	sp, #116	@ 0x74
 80085aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ae:	2340      	movs	r3, #64	@ 0x40
 80085b0:	616b      	str	r3, [r5, #20]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	2320      	movs	r3, #32
 80085b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085bc:	2330      	movs	r3, #48	@ 0x30
 80085be:	f04f 0901 	mov.w	r9, #1
 80085c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008760 <_svfiprintf_r+0x1e4>
 80085ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ce:	4623      	mov	r3, r4
 80085d0:	469a      	mov	sl, r3
 80085d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d6:	b10a      	cbz	r2, 80085dc <_svfiprintf_r+0x60>
 80085d8:	2a25      	cmp	r2, #37	@ 0x25
 80085da:	d1f9      	bne.n	80085d0 <_svfiprintf_r+0x54>
 80085dc:	ebba 0b04 	subs.w	fp, sl, r4
 80085e0:	d00b      	beq.n	80085fa <_svfiprintf_r+0x7e>
 80085e2:	465b      	mov	r3, fp
 80085e4:	4622      	mov	r2, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	4638      	mov	r0, r7
 80085ea:	f7ff ff6b 	bl	80084c4 <__ssputs_r>
 80085ee:	3001      	adds	r0, #1
 80085f0:	f000 80a7 	beq.w	8008742 <_svfiprintf_r+0x1c6>
 80085f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f6:	445a      	add	r2, fp
 80085f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fa:	f89a 3000 	ldrb.w	r3, [sl]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 809f 	beq.w	8008742 <_svfiprintf_r+0x1c6>
 8008604:	2300      	movs	r3, #0
 8008606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800860a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800860e:	f10a 0a01 	add.w	sl, sl, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861a:	931a      	str	r3, [sp, #104]	@ 0x68
 800861c:	4654      	mov	r4, sl
 800861e:	2205      	movs	r2, #5
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	484e      	ldr	r0, [pc, #312]	@ (8008760 <_svfiprintf_r+0x1e4>)
 8008626:	f000 fd21 	bl	800906c <memchr>
 800862a:	9a04      	ldr	r2, [sp, #16]
 800862c:	b9d8      	cbnz	r0, 8008666 <_svfiprintf_r+0xea>
 800862e:	06d0      	lsls	r0, r2, #27
 8008630:	bf44      	itt	mi
 8008632:	2320      	movmi	r3, #32
 8008634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008638:	0711      	lsls	r1, r2, #28
 800863a:	bf44      	itt	mi
 800863c:	232b      	movmi	r3, #43	@ 0x2b
 800863e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008642:	f89a 3000 	ldrb.w	r3, [sl]
 8008646:	2b2a      	cmp	r3, #42	@ 0x2a
 8008648:	d015      	beq.n	8008676 <_svfiprintf_r+0xfa>
 800864a:	4654      	mov	r4, sl
 800864c:	2000      	movs	r0, #0
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	4621      	mov	r1, r4
 8008656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865a:	3b30      	subs	r3, #48	@ 0x30
 800865c:	2b09      	cmp	r3, #9
 800865e:	d94b      	bls.n	80086f8 <_svfiprintf_r+0x17c>
 8008660:	b1b0      	cbz	r0, 8008690 <_svfiprintf_r+0x114>
 8008662:	9207      	str	r2, [sp, #28]
 8008664:	e014      	b.n	8008690 <_svfiprintf_r+0x114>
 8008666:	eba0 0308 	sub.w	r3, r0, r8
 800866a:	fa09 f303 	lsl.w	r3, r9, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	46a2      	mov	sl, r4
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	e7d2      	b.n	800861c <_svfiprintf_r+0xa0>
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	1d19      	adds	r1, r3, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	9103      	str	r1, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfbb      	ittet	lt
 8008682:	425b      	neglt	r3, r3
 8008684:	f042 0202 	orrlt.w	r2, r2, #2
 8008688:	9307      	strge	r3, [sp, #28]
 800868a:	9307      	strlt	r3, [sp, #28]
 800868c:	bfb8      	it	lt
 800868e:	9204      	strlt	r2, [sp, #16]
 8008690:	7823      	ldrb	r3, [r4, #0]
 8008692:	2b2e      	cmp	r3, #46	@ 0x2e
 8008694:	d10a      	bne.n	80086ac <_svfiprintf_r+0x130>
 8008696:	7863      	ldrb	r3, [r4, #1]
 8008698:	2b2a      	cmp	r3, #42	@ 0x2a
 800869a:	d132      	bne.n	8008702 <_svfiprintf_r+0x186>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	3402      	adds	r4, #2
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086aa:	9305      	str	r3, [sp, #20]
 80086ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008764 <_svfiprintf_r+0x1e8>
 80086b0:	2203      	movs	r2, #3
 80086b2:	4650      	mov	r0, sl
 80086b4:	7821      	ldrb	r1, [r4, #0]
 80086b6:	f000 fcd9 	bl	800906c <memchr>
 80086ba:	b138      	cbz	r0, 80086cc <_svfiprintf_r+0x150>
 80086bc:	2240      	movs	r2, #64	@ 0x40
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	eba0 000a 	sub.w	r0, r0, sl
 80086c4:	4082      	lsls	r2, r0
 80086c6:	4313      	orrs	r3, r2
 80086c8:	3401      	adds	r4, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d0:	2206      	movs	r2, #6
 80086d2:	4825      	ldr	r0, [pc, #148]	@ (8008768 <_svfiprintf_r+0x1ec>)
 80086d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d8:	f000 fcc8 	bl	800906c <memchr>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d036      	beq.n	800874e <_svfiprintf_r+0x1d2>
 80086e0:	4b22      	ldr	r3, [pc, #136]	@ (800876c <_svfiprintf_r+0x1f0>)
 80086e2:	bb1b      	cbnz	r3, 800872c <_svfiprintf_r+0x1b0>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	3307      	adds	r3, #7
 80086e8:	f023 0307 	bic.w	r3, r3, #7
 80086ec:	3308      	adds	r3, #8
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	4433      	add	r3, r6
 80086f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f6:	e76a      	b.n	80085ce <_svfiprintf_r+0x52>
 80086f8:	460c      	mov	r4, r1
 80086fa:	2001      	movs	r0, #1
 80086fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008700:	e7a8      	b.n	8008654 <_svfiprintf_r+0xd8>
 8008702:	2300      	movs	r3, #0
 8008704:	f04f 0c0a 	mov.w	ip, #10
 8008708:	4619      	mov	r1, r3
 800870a:	3401      	adds	r4, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	4620      	mov	r0, r4
 8008710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008714:	3a30      	subs	r2, #48	@ 0x30
 8008716:	2a09      	cmp	r2, #9
 8008718:	d903      	bls.n	8008722 <_svfiprintf_r+0x1a6>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c6      	beq.n	80086ac <_svfiprintf_r+0x130>
 800871e:	9105      	str	r1, [sp, #20]
 8008720:	e7c4      	b.n	80086ac <_svfiprintf_r+0x130>
 8008722:	4604      	mov	r4, r0
 8008724:	2301      	movs	r3, #1
 8008726:	fb0c 2101 	mla	r1, ip, r1, r2
 800872a:	e7f0      	b.n	800870e <_svfiprintf_r+0x192>
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4638      	mov	r0, r7
 8008734:	4b0e      	ldr	r3, [pc, #56]	@ (8008770 <_svfiprintf_r+0x1f4>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	f3af 8000 	nop.w
 800873c:	1c42      	adds	r2, r0, #1
 800873e:	4606      	mov	r6, r0
 8008740:	d1d6      	bne.n	80086f0 <_svfiprintf_r+0x174>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	065b      	lsls	r3, r3, #25
 8008746:	f53f af2d 	bmi.w	80085a4 <_svfiprintf_r+0x28>
 800874a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800874c:	e72c      	b.n	80085a8 <_svfiprintf_r+0x2c>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4638      	mov	r0, r7
 8008756:	4b06      	ldr	r3, [pc, #24]	@ (8008770 <_svfiprintf_r+0x1f4>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	f000 f9bd 	bl	8008ad8 <_printf_i>
 800875e:	e7ed      	b.n	800873c <_svfiprintf_r+0x1c0>
 8008760:	080099c4 	.word	0x080099c4
 8008764:	080099ca 	.word	0x080099ca
 8008768:	080099ce 	.word	0x080099ce
 800876c:	00000000 	.word	0x00000000
 8008770:	080084c5 	.word	0x080084c5

08008774 <__sfputc_r>:
 8008774:	6893      	ldr	r3, [r2, #8]
 8008776:	b410      	push	{r4}
 8008778:	3b01      	subs	r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	6093      	str	r3, [r2, #8]
 800877e:	da07      	bge.n	8008790 <__sfputc_r+0x1c>
 8008780:	6994      	ldr	r4, [r2, #24]
 8008782:	42a3      	cmp	r3, r4
 8008784:	db01      	blt.n	800878a <__sfputc_r+0x16>
 8008786:	290a      	cmp	r1, #10
 8008788:	d102      	bne.n	8008790 <__sfputc_r+0x1c>
 800878a:	bc10      	pop	{r4}
 800878c:	f000 bb6c 	b.w	8008e68 <__swbuf_r>
 8008790:	6813      	ldr	r3, [r2, #0]
 8008792:	1c58      	adds	r0, r3, #1
 8008794:	6010      	str	r0, [r2, #0]
 8008796:	7019      	strb	r1, [r3, #0]
 8008798:	4608      	mov	r0, r1
 800879a:	bc10      	pop	{r4}
 800879c:	4770      	bx	lr

0800879e <__sfputs_r>:
 800879e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a0:	4606      	mov	r6, r0
 80087a2:	460f      	mov	r7, r1
 80087a4:	4614      	mov	r4, r2
 80087a6:	18d5      	adds	r5, r2, r3
 80087a8:	42ac      	cmp	r4, r5
 80087aa:	d101      	bne.n	80087b0 <__sfputs_r+0x12>
 80087ac:	2000      	movs	r0, #0
 80087ae:	e007      	b.n	80087c0 <__sfputs_r+0x22>
 80087b0:	463a      	mov	r2, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b8:	f7ff ffdc 	bl	8008774 <__sfputc_r>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d1f3      	bne.n	80087a8 <__sfputs_r+0xa>
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087c4 <_vfiprintf_r>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	460d      	mov	r5, r1
 80087ca:	4614      	mov	r4, r2
 80087cc:	4698      	mov	r8, r3
 80087ce:	4606      	mov	r6, r0
 80087d0:	b09d      	sub	sp, #116	@ 0x74
 80087d2:	b118      	cbz	r0, 80087dc <_vfiprintf_r+0x18>
 80087d4:	6a03      	ldr	r3, [r0, #32]
 80087d6:	b90b      	cbnz	r3, 80087dc <_vfiprintf_r+0x18>
 80087d8:	f7ff fc32 	bl	8008040 <__sinit>
 80087dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087de:	07d9      	lsls	r1, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_vfiprintf_r+0x2a>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_vfiprintf_r+0x2a>
 80087e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ea:	f7ff fd5e 	bl	80082aa <__retarget_lock_acquire_recursive>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	071b      	lsls	r3, r3, #28
 80087f2:	d501      	bpl.n	80087f8 <_vfiprintf_r+0x34>
 80087f4:	692b      	ldr	r3, [r5, #16]
 80087f6:	b99b      	cbnz	r3, 8008820 <_vfiprintf_r+0x5c>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fb72 	bl	8008ee4 <__swsetup_r>
 8008800:	b170      	cbz	r0, 8008820 <_vfiprintf_r+0x5c>
 8008802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008804:	07dc      	lsls	r4, r3, #31
 8008806:	d504      	bpl.n	8008812 <_vfiprintf_r+0x4e>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800880c:	b01d      	add	sp, #116	@ 0x74
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	0598      	lsls	r0, r3, #22
 8008816:	d4f7      	bmi.n	8008808 <_vfiprintf_r+0x44>
 8008818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800881a:	f7ff fd47 	bl	80082ac <__retarget_lock_release_recursive>
 800881e:	e7f3      	b.n	8008808 <_vfiprintf_r+0x44>
 8008820:	2300      	movs	r3, #0
 8008822:	9309      	str	r3, [sp, #36]	@ 0x24
 8008824:	2320      	movs	r3, #32
 8008826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800882a:	2330      	movs	r3, #48	@ 0x30
 800882c:	f04f 0901 	mov.w	r9, #1
 8008830:	f8cd 800c 	str.w	r8, [sp, #12]
 8008834:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80089e0 <_vfiprintf_r+0x21c>
 8008838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800883c:	4623      	mov	r3, r4
 800883e:	469a      	mov	sl, r3
 8008840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008844:	b10a      	cbz	r2, 800884a <_vfiprintf_r+0x86>
 8008846:	2a25      	cmp	r2, #37	@ 0x25
 8008848:	d1f9      	bne.n	800883e <_vfiprintf_r+0x7a>
 800884a:	ebba 0b04 	subs.w	fp, sl, r4
 800884e:	d00b      	beq.n	8008868 <_vfiprintf_r+0xa4>
 8008850:	465b      	mov	r3, fp
 8008852:	4622      	mov	r2, r4
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ffa1 	bl	800879e <__sfputs_r>
 800885c:	3001      	adds	r0, #1
 800885e:	f000 80a7 	beq.w	80089b0 <_vfiprintf_r+0x1ec>
 8008862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008864:	445a      	add	r2, fp
 8008866:	9209      	str	r2, [sp, #36]	@ 0x24
 8008868:	f89a 3000 	ldrb.w	r3, [sl]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 809f 	beq.w	80089b0 <_vfiprintf_r+0x1ec>
 8008872:	2300      	movs	r3, #0
 8008874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800887c:	f10a 0a01 	add.w	sl, sl, #1
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008888:	931a      	str	r3, [sp, #104]	@ 0x68
 800888a:	4654      	mov	r4, sl
 800888c:	2205      	movs	r2, #5
 800888e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008892:	4853      	ldr	r0, [pc, #332]	@ (80089e0 <_vfiprintf_r+0x21c>)
 8008894:	f000 fbea 	bl	800906c <memchr>
 8008898:	9a04      	ldr	r2, [sp, #16]
 800889a:	b9d8      	cbnz	r0, 80088d4 <_vfiprintf_r+0x110>
 800889c:	06d1      	lsls	r1, r2, #27
 800889e:	bf44      	itt	mi
 80088a0:	2320      	movmi	r3, #32
 80088a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a6:	0713      	lsls	r3, r2, #28
 80088a8:	bf44      	itt	mi
 80088aa:	232b      	movmi	r3, #43	@ 0x2b
 80088ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b0:	f89a 3000 	ldrb.w	r3, [sl]
 80088b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b6:	d015      	beq.n	80088e4 <_vfiprintf_r+0x120>
 80088b8:	4654      	mov	r4, sl
 80088ba:	2000      	movs	r0, #0
 80088bc:	f04f 0c0a 	mov.w	ip, #10
 80088c0:	9a07      	ldr	r2, [sp, #28]
 80088c2:	4621      	mov	r1, r4
 80088c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c8:	3b30      	subs	r3, #48	@ 0x30
 80088ca:	2b09      	cmp	r3, #9
 80088cc:	d94b      	bls.n	8008966 <_vfiprintf_r+0x1a2>
 80088ce:	b1b0      	cbz	r0, 80088fe <_vfiprintf_r+0x13a>
 80088d0:	9207      	str	r2, [sp, #28]
 80088d2:	e014      	b.n	80088fe <_vfiprintf_r+0x13a>
 80088d4:	eba0 0308 	sub.w	r3, r0, r8
 80088d8:	fa09 f303 	lsl.w	r3, r9, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	46a2      	mov	sl, r4
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	e7d2      	b.n	800888a <_vfiprintf_r+0xc6>
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	1d19      	adds	r1, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	9103      	str	r1, [sp, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfbb      	ittet	lt
 80088f0:	425b      	neglt	r3, r3
 80088f2:	f042 0202 	orrlt.w	r2, r2, #2
 80088f6:	9307      	strge	r3, [sp, #28]
 80088f8:	9307      	strlt	r3, [sp, #28]
 80088fa:	bfb8      	it	lt
 80088fc:	9204      	strlt	r2, [sp, #16]
 80088fe:	7823      	ldrb	r3, [r4, #0]
 8008900:	2b2e      	cmp	r3, #46	@ 0x2e
 8008902:	d10a      	bne.n	800891a <_vfiprintf_r+0x156>
 8008904:	7863      	ldrb	r3, [r4, #1]
 8008906:	2b2a      	cmp	r3, #42	@ 0x2a
 8008908:	d132      	bne.n	8008970 <_vfiprintf_r+0x1ac>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	3402      	adds	r4, #2
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	9203      	str	r2, [sp, #12]
 8008914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80089e4 <_vfiprintf_r+0x220>
 800891e:	2203      	movs	r2, #3
 8008920:	4650      	mov	r0, sl
 8008922:	7821      	ldrb	r1, [r4, #0]
 8008924:	f000 fba2 	bl	800906c <memchr>
 8008928:	b138      	cbz	r0, 800893a <_vfiprintf_r+0x176>
 800892a:	2240      	movs	r2, #64	@ 0x40
 800892c:	9b04      	ldr	r3, [sp, #16]
 800892e:	eba0 000a 	sub.w	r0, r0, sl
 8008932:	4082      	lsls	r2, r0
 8008934:	4313      	orrs	r3, r2
 8008936:	3401      	adds	r4, #1
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893e:	2206      	movs	r2, #6
 8008940:	4829      	ldr	r0, [pc, #164]	@ (80089e8 <_vfiprintf_r+0x224>)
 8008942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008946:	f000 fb91 	bl	800906c <memchr>
 800894a:	2800      	cmp	r0, #0
 800894c:	d03f      	beq.n	80089ce <_vfiprintf_r+0x20a>
 800894e:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <_vfiprintf_r+0x228>)
 8008950:	bb1b      	cbnz	r3, 800899a <_vfiprintf_r+0x1d6>
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	3307      	adds	r3, #7
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	3308      	adds	r3, #8
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008960:	443b      	add	r3, r7
 8008962:	9309      	str	r3, [sp, #36]	@ 0x24
 8008964:	e76a      	b.n	800883c <_vfiprintf_r+0x78>
 8008966:	460c      	mov	r4, r1
 8008968:	2001      	movs	r0, #1
 800896a:	fb0c 3202 	mla	r2, ip, r2, r3
 800896e:	e7a8      	b.n	80088c2 <_vfiprintf_r+0xfe>
 8008970:	2300      	movs	r3, #0
 8008972:	f04f 0c0a 	mov.w	ip, #10
 8008976:	4619      	mov	r1, r3
 8008978:	3401      	adds	r4, #1
 800897a:	9305      	str	r3, [sp, #20]
 800897c:	4620      	mov	r0, r4
 800897e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008982:	3a30      	subs	r2, #48	@ 0x30
 8008984:	2a09      	cmp	r2, #9
 8008986:	d903      	bls.n	8008990 <_vfiprintf_r+0x1cc>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0c6      	beq.n	800891a <_vfiprintf_r+0x156>
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	e7c4      	b.n	800891a <_vfiprintf_r+0x156>
 8008990:	4604      	mov	r4, r0
 8008992:	2301      	movs	r3, #1
 8008994:	fb0c 2101 	mla	r1, ip, r1, r2
 8008998:	e7f0      	b.n	800897c <_vfiprintf_r+0x1b8>
 800899a:	ab03      	add	r3, sp, #12
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	462a      	mov	r2, r5
 80089a0:	4630      	mov	r0, r6
 80089a2:	4b13      	ldr	r3, [pc, #76]	@ (80089f0 <_vfiprintf_r+0x22c>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	f3af 8000 	nop.w
 80089aa:	4607      	mov	r7, r0
 80089ac:	1c78      	adds	r0, r7, #1
 80089ae:	d1d6      	bne.n	800895e <_vfiprintf_r+0x19a>
 80089b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089b2:	07d9      	lsls	r1, r3, #31
 80089b4:	d405      	bmi.n	80089c2 <_vfiprintf_r+0x1fe>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	059a      	lsls	r2, r3, #22
 80089ba:	d402      	bmi.n	80089c2 <_vfiprintf_r+0x1fe>
 80089bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089be:	f7ff fc75 	bl	80082ac <__retarget_lock_release_recursive>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	065b      	lsls	r3, r3, #25
 80089c6:	f53f af1f 	bmi.w	8008808 <_vfiprintf_r+0x44>
 80089ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089cc:	e71e      	b.n	800880c <_vfiprintf_r+0x48>
 80089ce:	ab03      	add	r3, sp, #12
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	462a      	mov	r2, r5
 80089d4:	4630      	mov	r0, r6
 80089d6:	4b06      	ldr	r3, [pc, #24]	@ (80089f0 <_vfiprintf_r+0x22c>)
 80089d8:	a904      	add	r1, sp, #16
 80089da:	f000 f87d 	bl	8008ad8 <_printf_i>
 80089de:	e7e4      	b.n	80089aa <_vfiprintf_r+0x1e6>
 80089e0:	080099c4 	.word	0x080099c4
 80089e4:	080099ca 	.word	0x080099ca
 80089e8:	080099ce 	.word	0x080099ce
 80089ec:	00000000 	.word	0x00000000
 80089f0:	0800879f 	.word	0x0800879f

080089f4 <_printf_common>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	4616      	mov	r6, r2
 80089fa:	4698      	mov	r8, r3
 80089fc:	688a      	ldr	r2, [r1, #8]
 80089fe:	690b      	ldr	r3, [r1, #16]
 8008a00:	4607      	mov	r7, r0
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bfb8      	it	lt
 8008a06:	4613      	movlt	r3, r2
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a14:	b10a      	cbz	r2, 8008a1a <_printf_common+0x26>
 8008a16:	3301      	adds	r3, #1
 8008a18:	6033      	str	r3, [r6, #0]
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	0699      	lsls	r1, r3, #26
 8008a1e:	bf42      	ittt	mi
 8008a20:	6833      	ldrmi	r3, [r6, #0]
 8008a22:	3302      	addmi	r3, #2
 8008a24:	6033      	strmi	r3, [r6, #0]
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	f015 0506 	ands.w	r5, r5, #6
 8008a2c:	d106      	bne.n	8008a3c <_printf_common+0x48>
 8008a2e:	f104 0a19 	add.w	sl, r4, #25
 8008a32:	68e3      	ldr	r3, [r4, #12]
 8008a34:	6832      	ldr	r2, [r6, #0]
 8008a36:	1a9b      	subs	r3, r3, r2
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc2b      	bgt.n	8008a94 <_printf_common+0xa0>
 8008a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	3b00      	subs	r3, #0
 8008a44:	bf18      	it	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	0692      	lsls	r2, r2, #26
 8008a4a:	d430      	bmi.n	8008aae <_printf_common+0xba>
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a54:	47c8      	blx	r9
 8008a56:	3001      	adds	r0, #1
 8008a58:	d023      	beq.n	8008aa2 <_printf_common+0xae>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	f003 0306 	and.w	r3, r3, #6
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	bf14      	ite	ne
 8008a66:	2500      	movne	r5, #0
 8008a68:	6833      	ldreq	r3, [r6, #0]
 8008a6a:	f04f 0600 	mov.w	r6, #0
 8008a6e:	bf08      	it	eq
 8008a70:	68e5      	ldreq	r5, [r4, #12]
 8008a72:	f104 041a 	add.w	r4, r4, #26
 8008a76:	bf08      	it	eq
 8008a78:	1aed      	subeq	r5, r5, r3
 8008a7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a7e:	bf08      	it	eq
 8008a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a84:	4293      	cmp	r3, r2
 8008a86:	bfc4      	itt	gt
 8008a88:	1a9b      	subgt	r3, r3, r2
 8008a8a:	18ed      	addgt	r5, r5, r3
 8008a8c:	42b5      	cmp	r5, r6
 8008a8e:	d11a      	bne.n	8008ac6 <_printf_common+0xd2>
 8008a90:	2000      	movs	r0, #0
 8008a92:	e008      	b.n	8008aa6 <_printf_common+0xb2>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4652      	mov	r2, sl
 8008a98:	4641      	mov	r1, r8
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c8      	blx	r9
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d103      	bne.n	8008aaa <_printf_common+0xb6>
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aaa:	3501      	adds	r5, #1
 8008aac:	e7c1      	b.n	8008a32 <_printf_common+0x3e>
 8008aae:	2030      	movs	r0, #48	@ 0x30
 8008ab0:	18e1      	adds	r1, r4, r3
 8008ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008abc:	4422      	add	r2, r4
 8008abe:	3302      	adds	r3, #2
 8008ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac4:	e7c2      	b.n	8008a4c <_printf_common+0x58>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4622      	mov	r2, r4
 8008aca:	4641      	mov	r1, r8
 8008acc:	4638      	mov	r0, r7
 8008ace:	47c8      	blx	r9
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d0e6      	beq.n	8008aa2 <_printf_common+0xae>
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7d9      	b.n	8008a8c <_printf_common+0x98>

08008ad8 <_printf_i>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	7e0f      	ldrb	r7, [r1, #24]
 8008ade:	4691      	mov	r9, r2
 8008ae0:	2f78      	cmp	r7, #120	@ 0x78
 8008ae2:	4680      	mov	r8, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aee:	d807      	bhi.n	8008b00 <_printf_i+0x28>
 8008af0:	2f62      	cmp	r7, #98	@ 0x62
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x32>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	f000 80d3 	beq.w	8008ca0 <_printf_i+0x1c8>
 8008afa:	2f58      	cmp	r7, #88	@ 0x58
 8008afc:	f000 80ba 	beq.w	8008c74 <_printf_i+0x19c>
 8008b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b08:	e03a      	b.n	8008b80 <_printf_i+0xa8>
 8008b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b0e:	2b15      	cmp	r3, #21
 8008b10:	d8f6      	bhi.n	8008b00 <_printf_i+0x28>
 8008b12:	a101      	add	r1, pc, #4	@ (adr r1, 8008b18 <_printf_i+0x40>)
 8008b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b01 	.word	0x08008b01
 8008b24:	08008b01 	.word	0x08008b01
 8008b28:	08008b01 	.word	0x08008b01
 8008b2c:	08008b01 	.word	0x08008b01
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b01 	.word	0x08008b01
 8008b38:	08008b01 	.word	0x08008b01
 8008b3c:	08008b01 	.word	0x08008b01
 8008b40:	08008b01 	.word	0x08008b01
 8008b44:	08008c87 	.word	0x08008c87
 8008b48:	08008baf 	.word	0x08008baf
 8008b4c:	08008c41 	.word	0x08008c41
 8008b50:	08008b01 	.word	0x08008b01
 8008b54:	08008b01 	.word	0x08008b01
 8008b58:	08008ca9 	.word	0x08008ca9
 8008b5c:	08008b01 	.word	0x08008b01
 8008b60:	08008baf 	.word	0x08008baf
 8008b64:	08008b01 	.word	0x08008b01
 8008b68:	08008b01 	.word	0x08008b01
 8008b6c:	08008c49 	.word	0x08008c49
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	1d1a      	adds	r2, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6032      	str	r2, [r6, #0]
 8008b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b80:	2301      	movs	r3, #1
 8008b82:	e09e      	b.n	8008cc2 <_printf_i+0x1ea>
 8008b84:	6833      	ldr	r3, [r6, #0]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	6031      	str	r1, [r6, #0]
 8008b8c:	0606      	lsls	r6, r0, #24
 8008b8e:	d501      	bpl.n	8008b94 <_printf_i+0xbc>
 8008b90:	681d      	ldr	r5, [r3, #0]
 8008b92:	e003      	b.n	8008b9c <_printf_i+0xc4>
 8008b94:	0645      	lsls	r5, r0, #25
 8008b96:	d5fb      	bpl.n	8008b90 <_printf_i+0xb8>
 8008b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	da03      	bge.n	8008ba8 <_printf_i+0xd0>
 8008ba0:	232d      	movs	r3, #45	@ 0x2d
 8008ba2:	426d      	negs	r5, r5
 8008ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba8:	230a      	movs	r3, #10
 8008baa:	4859      	ldr	r0, [pc, #356]	@ (8008d10 <_printf_i+0x238>)
 8008bac:	e011      	b.n	8008bd2 <_printf_i+0xfa>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	0608      	lsls	r0, r1, #24
 8008bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0xe8>
 8008bba:	0649      	lsls	r1, r1, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2ad      	uxthmi	r5, r5
 8008bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	bf14      	ite	ne
 8008bc6:	230a      	movne	r3, #10
 8008bc8:	2308      	moveq	r3, #8
 8008bca:	4851      	ldr	r0, [pc, #324]	@ (8008d10 <_printf_i+0x238>)
 8008bcc:	2100      	movs	r1, #0
 8008bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bd2:	6866      	ldr	r6, [r4, #4]
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	bfa8      	it	ge
 8008bd8:	6821      	ldrge	r1, [r4, #0]
 8008bda:	60a6      	str	r6, [r4, #8]
 8008bdc:	bfa4      	itt	ge
 8008bde:	f021 0104 	bicge.w	r1, r1, #4
 8008be2:	6021      	strge	r1, [r4, #0]
 8008be4:	b90d      	cbnz	r5, 8008bea <_printf_i+0x112>
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	d04b      	beq.n	8008c82 <_printf_i+0x1aa>
 8008bea:	4616      	mov	r6, r2
 8008bec:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf0:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf4:	5dc7      	ldrb	r7, [r0, r7]
 8008bf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bfa:	462f      	mov	r7, r5
 8008bfc:	42bb      	cmp	r3, r7
 8008bfe:	460d      	mov	r5, r1
 8008c00:	d9f4      	bls.n	8008bec <_printf_i+0x114>
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d10b      	bne.n	8008c1e <_printf_i+0x146>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	07df      	lsls	r7, r3, #31
 8008c0a:	d508      	bpl.n	8008c1e <_printf_i+0x146>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	6861      	ldr	r1, [r4, #4]
 8008c10:	4299      	cmp	r1, r3
 8008c12:	bfde      	ittt	le
 8008c14:	2330      	movle	r3, #48	@ 0x30
 8008c16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c1a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008c1e:	1b92      	subs	r2, r2, r6
 8008c20:	6122      	str	r2, [r4, #16]
 8008c22:	464b      	mov	r3, r9
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f8cd a000 	str.w	sl, [sp]
 8008c2c:	aa03      	add	r2, sp, #12
 8008c2e:	f7ff fee1 	bl	80089f4 <_printf_common>
 8008c32:	3001      	adds	r0, #1
 8008c34:	d14a      	bne.n	8008ccc <_printf_i+0x1f4>
 8008c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c3a:	b004      	add	sp, #16
 8008c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f043 0320 	orr.w	r3, r3, #32
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	2778      	movs	r7, #120	@ 0x78
 8008c4a:	4832      	ldr	r0, [pc, #200]	@ (8008d14 <_printf_i+0x23c>)
 8008c4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	6831      	ldr	r1, [r6, #0]
 8008c54:	061f      	lsls	r7, r3, #24
 8008c56:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c5a:	d402      	bmi.n	8008c62 <_printf_i+0x18a>
 8008c5c:	065f      	lsls	r7, r3, #25
 8008c5e:	bf48      	it	mi
 8008c60:	b2ad      	uxthmi	r5, r5
 8008c62:	6031      	str	r1, [r6, #0]
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	bf44      	itt	mi
 8008c68:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6c:	6023      	strmi	r3, [r4, #0]
 8008c6e:	b11d      	cbz	r5, 8008c78 <_printf_i+0x1a0>
 8008c70:	2310      	movs	r3, #16
 8008c72:	e7ab      	b.n	8008bcc <_printf_i+0xf4>
 8008c74:	4826      	ldr	r0, [pc, #152]	@ (8008d10 <_printf_i+0x238>)
 8008c76:	e7e9      	b.n	8008c4c <_printf_i+0x174>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	f023 0320 	bic.w	r3, r3, #32
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	e7f6      	b.n	8008c70 <_printf_i+0x198>
 8008c82:	4616      	mov	r6, r2
 8008c84:	e7bd      	b.n	8008c02 <_printf_i+0x12a>
 8008c86:	6833      	ldr	r3, [r6, #0]
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	1d18      	adds	r0, r3, #4
 8008c8c:	6961      	ldr	r1, [r4, #20]
 8008c8e:	6030      	str	r0, [r6, #0]
 8008c90:	062e      	lsls	r6, r5, #24
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	d501      	bpl.n	8008c9a <_printf_i+0x1c2>
 8008c96:	6019      	str	r1, [r3, #0]
 8008c98:	e002      	b.n	8008ca0 <_printf_i+0x1c8>
 8008c9a:	0668      	lsls	r0, r5, #25
 8008c9c:	d5fb      	bpl.n	8008c96 <_printf_i+0x1be>
 8008c9e:	8019      	strh	r1, [r3, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	e7bc      	b.n	8008c22 <_printf_i+0x14a>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	2100      	movs	r1, #0
 8008cac:	1d1a      	adds	r2, r3, #4
 8008cae:	6032      	str	r2, [r6, #0]
 8008cb0:	681e      	ldr	r6, [r3, #0]
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 f9d9 	bl	800906c <memchr>
 8008cba:	b108      	cbz	r0, 8008cc0 <_printf_i+0x1e8>
 8008cbc:	1b80      	subs	r0, r0, r6
 8008cbe:	6060      	str	r0, [r4, #4]
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cca:	e7aa      	b.n	8008c22 <_printf_i+0x14a>
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	47d0      	blx	sl
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d0ad      	beq.n	8008c36 <_printf_i+0x15e>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	079b      	lsls	r3, r3, #30
 8008cde:	d413      	bmi.n	8008d08 <_printf_i+0x230>
 8008ce0:	68e0      	ldr	r0, [r4, #12]
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	4298      	cmp	r0, r3
 8008ce6:	bfb8      	it	lt
 8008ce8:	4618      	movlt	r0, r3
 8008cea:	e7a6      	b.n	8008c3a <_printf_i+0x162>
 8008cec:	2301      	movs	r3, #1
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	47d0      	blx	sl
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d09d      	beq.n	8008c36 <_printf_i+0x15e>
 8008cfa:	3501      	adds	r5, #1
 8008cfc:	68e3      	ldr	r3, [r4, #12]
 8008cfe:	9903      	ldr	r1, [sp, #12]
 8008d00:	1a5b      	subs	r3, r3, r1
 8008d02:	42ab      	cmp	r3, r5
 8008d04:	dcf2      	bgt.n	8008cec <_printf_i+0x214>
 8008d06:	e7eb      	b.n	8008ce0 <_printf_i+0x208>
 8008d08:	2500      	movs	r5, #0
 8008d0a:	f104 0619 	add.w	r6, r4, #25
 8008d0e:	e7f5      	b.n	8008cfc <_printf_i+0x224>
 8008d10:	080099d5 	.word	0x080099d5
 8008d14:	080099e6 	.word	0x080099e6

08008d18 <__sflush_r>:
 8008d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	0716      	lsls	r6, r2, #28
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	d454      	bmi.n	8008dd0 <__sflush_r+0xb8>
 8008d26:	684b      	ldr	r3, [r1, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc02      	bgt.n	8008d32 <__sflush_r+0x1a>
 8008d2c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dd48      	ble.n	8008dc4 <__sflush_r+0xac>
 8008d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	d045      	beq.n	8008dc4 <__sflush_r+0xac>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d3e:	682f      	ldr	r7, [r5, #0]
 8008d40:	6a21      	ldr	r1, [r4, #32]
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	d030      	beq.n	8008da8 <__sflush_r+0x90>
 8008d46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	0759      	lsls	r1, r3, #29
 8008d4c:	d505      	bpl.n	8008d5a <__sflush_r+0x42>
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	1ad2      	subs	r2, r2, r3
 8008d52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d54:	b10b      	cbz	r3, 8008d5a <__sflush_r+0x42>
 8008d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d60:	6a21      	ldr	r1, [r4, #32]
 8008d62:	47b0      	blx	r6
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	d106      	bne.n	8008d78 <__sflush_r+0x60>
 8008d6a:	6829      	ldr	r1, [r5, #0]
 8008d6c:	291d      	cmp	r1, #29
 8008d6e:	d82b      	bhi.n	8008dc8 <__sflush_r+0xb0>
 8008d70:	4a28      	ldr	r2, [pc, #160]	@ (8008e14 <__sflush_r+0xfc>)
 8008d72:	410a      	asrs	r2, r1
 8008d74:	07d6      	lsls	r6, r2, #31
 8008d76:	d427      	bmi.n	8008dc8 <__sflush_r+0xb0>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	6062      	str	r2, [r4, #4]
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	04d9      	lsls	r1, r3, #19
 8008d80:	6022      	str	r2, [r4, #0]
 8008d82:	d504      	bpl.n	8008d8e <__sflush_r+0x76>
 8008d84:	1c42      	adds	r2, r0, #1
 8008d86:	d101      	bne.n	8008d8c <__sflush_r+0x74>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b903      	cbnz	r3, 8008d8e <__sflush_r+0x76>
 8008d8c:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d90:	602f      	str	r7, [r5, #0]
 8008d92:	b1b9      	cbz	r1, 8008dc4 <__sflush_r+0xac>
 8008d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__sflush_r+0x8a>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f7ff fa9b 	bl	80082d8 <_free_r>
 8008da2:	2300      	movs	r3, #0
 8008da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008da6:	e00d      	b.n	8008dc4 <__sflush_r+0xac>
 8008da8:	2301      	movs	r3, #1
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b0      	blx	r6
 8008dae:	4602      	mov	r2, r0
 8008db0:	1c50      	adds	r0, r2, #1
 8008db2:	d1c9      	bne.n	8008d48 <__sflush_r+0x30>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0c6      	beq.n	8008d48 <__sflush_r+0x30>
 8008dba:	2b1d      	cmp	r3, #29
 8008dbc:	d001      	beq.n	8008dc2 <__sflush_r+0xaa>
 8008dbe:	2b16      	cmp	r3, #22
 8008dc0:	d11d      	bne.n	8008dfe <__sflush_r+0xe6>
 8008dc2:	602f      	str	r7, [r5, #0]
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e021      	b.n	8008e0c <__sflush_r+0xf4>
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dcc:	b21b      	sxth	r3, r3
 8008dce:	e01a      	b.n	8008e06 <__sflush_r+0xee>
 8008dd0:	690f      	ldr	r7, [r1, #16]
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	d0f6      	beq.n	8008dc4 <__sflush_r+0xac>
 8008dd6:	0793      	lsls	r3, r2, #30
 8008dd8:	bf18      	it	ne
 8008dda:	2300      	movne	r3, #0
 8008ddc:	680e      	ldr	r6, [r1, #0]
 8008dde:	bf08      	it	eq
 8008de0:	694b      	ldreq	r3, [r1, #20]
 8008de2:	1bf6      	subs	r6, r6, r7
 8008de4:	600f      	str	r7, [r1, #0]
 8008de6:	608b      	str	r3, [r1, #8]
 8008de8:	2e00      	cmp	r6, #0
 8008dea:	ddeb      	ble.n	8008dc4 <__sflush_r+0xac>
 8008dec:	4633      	mov	r3, r6
 8008dee:	463a      	mov	r2, r7
 8008df0:	4628      	mov	r0, r5
 8008df2:	6a21      	ldr	r1, [r4, #32]
 8008df4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008df8:	47e0      	blx	ip
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	dc07      	bgt.n	8008e0e <__sflush_r+0xf6>
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0e:	4407      	add	r7, r0
 8008e10:	1a36      	subs	r6, r6, r0
 8008e12:	e7e9      	b.n	8008de8 <__sflush_r+0xd0>
 8008e14:	dfbffffe 	.word	0xdfbffffe

08008e18 <_fflush_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b913      	cbnz	r3, 8008e28 <_fflush_r+0x10>
 8008e22:	2500      	movs	r5, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	b118      	cbz	r0, 8008e32 <_fflush_r+0x1a>
 8008e2a:	6a03      	ldr	r3, [r0, #32]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_fflush_r+0x1a>
 8008e2e:	f7ff f907 	bl	8008040 <__sinit>
 8008e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f3      	beq.n	8008e22 <_fflush_r+0xa>
 8008e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e3c:	07d0      	lsls	r0, r2, #31
 8008e3e:	d404      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e40:	0599      	lsls	r1, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e46:	f7ff fa30 	bl	80082aa <__retarget_lock_acquire_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7ff ff63 	bl	8008d18 <__sflush_r>
 8008e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e54:	4605      	mov	r5, r0
 8008e56:	07da      	lsls	r2, r3, #31
 8008e58:	d4e4      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	059b      	lsls	r3, r3, #22
 8008e5e:	d4e1      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e62:	f7ff fa23 	bl	80082ac <__retarget_lock_release_recursive>
 8008e66:	e7dd      	b.n	8008e24 <_fflush_r+0xc>

08008e68 <__swbuf_r>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b118      	cbz	r0, 8008e7a <__swbuf_r+0x12>
 8008e72:	6a03      	ldr	r3, [r0, #32]
 8008e74:	b90b      	cbnz	r3, 8008e7a <__swbuf_r+0x12>
 8008e76:	f7ff f8e3 	bl	8008040 <__sinit>
 8008e7a:	69a3      	ldr	r3, [r4, #24]
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <__swbuf_r+0x20>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	b943      	cbnz	r3, 8008e9a <__swbuf_r+0x32>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 f82a 	bl	8008ee4 <__swsetup_r>
 8008e90:	b118      	cbz	r0, 8008e9a <__swbuf_r+0x32>
 8008e92:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008e96:	4638      	mov	r0, r7
 8008e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6922      	ldr	r2, [r4, #16]
 8008e9e:	b2f6      	uxtb	r6, r6
 8008ea0:	1a98      	subs	r0, r3, r2
 8008ea2:	6963      	ldr	r3, [r4, #20]
 8008ea4:	4637      	mov	r7, r6
 8008ea6:	4283      	cmp	r3, r0
 8008ea8:	dc05      	bgt.n	8008eb6 <__swbuf_r+0x4e>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f7ff ffb3 	bl	8008e18 <_fflush_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d1ed      	bne.n	8008e92 <__swbuf_r+0x2a>
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	701e      	strb	r6, [r3, #0]
 8008ec4:	6962      	ldr	r2, [r4, #20]
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d004      	beq.n	8008ed6 <__swbuf_r+0x6e>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	07db      	lsls	r3, r3, #31
 8008ed0:	d5e1      	bpl.n	8008e96 <__swbuf_r+0x2e>
 8008ed2:	2e0a      	cmp	r6, #10
 8008ed4:	d1df      	bne.n	8008e96 <__swbuf_r+0x2e>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f7ff ff9d 	bl	8008e18 <_fflush_r>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d0d9      	beq.n	8008e96 <__swbuf_r+0x2e>
 8008ee2:	e7d6      	b.n	8008e92 <__swbuf_r+0x2a>

08008ee4 <__swsetup_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4b29      	ldr	r3, [pc, #164]	@ (8008f8c <__swsetup_r+0xa8>)
 8008ee8:	4605      	mov	r5, r0
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	460c      	mov	r4, r1
 8008eee:	b118      	cbz	r0, 8008ef8 <__swsetup_r+0x14>
 8008ef0:	6a03      	ldr	r3, [r0, #32]
 8008ef2:	b90b      	cbnz	r3, 8008ef8 <__swsetup_r+0x14>
 8008ef4:	f7ff f8a4 	bl	8008040 <__sinit>
 8008ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efc:	0719      	lsls	r1, r3, #28
 8008efe:	d422      	bmi.n	8008f46 <__swsetup_r+0x62>
 8008f00:	06da      	lsls	r2, r3, #27
 8008f02:	d407      	bmi.n	8008f14 <__swsetup_r+0x30>
 8008f04:	2209      	movs	r2, #9
 8008f06:	602a      	str	r2, [r5, #0]
 8008f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e033      	b.n	8008f7c <__swsetup_r+0x98>
 8008f14:	0758      	lsls	r0, r3, #29
 8008f16:	d512      	bpl.n	8008f3e <__swsetup_r+0x5a>
 8008f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f1a:	b141      	cbz	r1, 8008f2e <__swsetup_r+0x4a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__swsetup_r+0x46>
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff f9d7 	bl	80082d8 <_free_r>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b94b      	cbnz	r3, 8008f5e <__swsetup_r+0x7a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f54:	d003      	beq.n	8008f5e <__swsetup_r+0x7a>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f000 f8e8 	bl	800912e <__smakebuf_r>
 8008f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f62:	f013 0201 	ands.w	r2, r3, #1
 8008f66:	d00a      	beq.n	8008f7e <__swsetup_r+0x9a>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	60a2      	str	r2, [r4, #8]
 8008f6c:	6962      	ldr	r2, [r4, #20]
 8008f6e:	4252      	negs	r2, r2
 8008f70:	61a2      	str	r2, [r4, #24]
 8008f72:	6922      	ldr	r2, [r4, #16]
 8008f74:	b942      	cbnz	r2, 8008f88 <__swsetup_r+0xa4>
 8008f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f7a:	d1c5      	bne.n	8008f08 <__swsetup_r+0x24>
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	0799      	lsls	r1, r3, #30
 8008f80:	bf58      	it	pl
 8008f82:	6962      	ldrpl	r2, [r4, #20]
 8008f84:	60a2      	str	r2, [r4, #8]
 8008f86:	e7f4      	b.n	8008f72 <__swsetup_r+0x8e>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e7f7      	b.n	8008f7c <__swsetup_r+0x98>
 8008f8c:	20000128 	.word	0x20000128

08008f90 <memmove>:
 8008f90:	4288      	cmp	r0, r1
 8008f92:	b510      	push	{r4, lr}
 8008f94:	eb01 0402 	add.w	r4, r1, r2
 8008f98:	d902      	bls.n	8008fa0 <memmove+0x10>
 8008f9a:	4284      	cmp	r4, r0
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	d807      	bhi.n	8008fb0 <memmove+0x20>
 8008fa0:	1e43      	subs	r3, r0, #1
 8008fa2:	42a1      	cmp	r1, r4
 8008fa4:	d008      	beq.n	8008fb8 <memmove+0x28>
 8008fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fae:	e7f8      	b.n	8008fa2 <memmove+0x12>
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4402      	add	r2, r0
 8008fb4:	428a      	cmp	r2, r1
 8008fb6:	d100      	bne.n	8008fba <memmove+0x2a>
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fc2:	e7f7      	b.n	8008fb4 <memmove+0x24>

08008fc4 <_raise_r>:
 8008fc4:	291f      	cmp	r1, #31
 8008fc6:	b538      	push	{r3, r4, r5, lr}
 8008fc8:	4605      	mov	r5, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	d904      	bls.n	8008fd8 <_raise_r+0x14>
 8008fce:	2316      	movs	r3, #22
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fda:	b112      	cbz	r2, 8008fe2 <_raise_r+0x1e>
 8008fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <_raise_r+0x32>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 f830 	bl	8009048 <_getpid_r>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4601      	mov	r1, r0
 8008fec:	4628      	mov	r0, r5
 8008fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff2:	f000 b817 	b.w	8009024 <_kill_r>
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d00a      	beq.n	8009010 <_raise_r+0x4c>
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	d103      	bne.n	8009006 <_raise_r+0x42>
 8008ffe:	2316      	movs	r3, #22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	2001      	movs	r0, #1
 8009004:	e7e7      	b.n	8008fd6 <_raise_r+0x12>
 8009006:	2100      	movs	r1, #0
 8009008:	4620      	mov	r0, r4
 800900a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800900e:	4798      	blx	r3
 8009010:	2000      	movs	r0, #0
 8009012:	e7e0      	b.n	8008fd6 <_raise_r+0x12>

08009014 <raise>:
 8009014:	4b02      	ldr	r3, [pc, #8]	@ (8009020 <raise+0xc>)
 8009016:	4601      	mov	r1, r0
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f7ff bfd3 	b.w	8008fc4 <_raise_r>
 800901e:	bf00      	nop
 8009020:	20000128 	.word	0x20000128

08009024 <_kill_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	2300      	movs	r3, #0
 8009028:	4d06      	ldr	r5, [pc, #24]	@ (8009044 <_kill_r+0x20>)
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	f7fc fdff 	bl	8005c34 <_kill>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d102      	bne.n	8009040 <_kill_r+0x1c>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	b103      	cbz	r3, 8009040 <_kill_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	bf00      	nop
 8009044:	20000958 	.word	0x20000958

08009048 <_getpid_r>:
 8009048:	f7fc bdf2 	b.w	8005c30 <_getpid>

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	2300      	movs	r3, #0
 8009050:	4d05      	ldr	r5, [pc, #20]	@ (8009068 <_sbrk_r+0x1c>)
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7fc fe26 	bl	8005ca8 <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20000958 	.word	0x20000958

0800906c <memchr>:
 800906c:	4603      	mov	r3, r0
 800906e:	b510      	push	{r4, lr}
 8009070:	b2c9      	uxtb	r1, r1
 8009072:	4402      	add	r2, r0
 8009074:	4293      	cmp	r3, r2
 8009076:	4618      	mov	r0, r3
 8009078:	d101      	bne.n	800907e <memchr+0x12>
 800907a:	2000      	movs	r0, #0
 800907c:	e003      	b.n	8009086 <memchr+0x1a>
 800907e:	7804      	ldrb	r4, [r0, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	428c      	cmp	r4, r1
 8009084:	d1f6      	bne.n	8009074 <memchr+0x8>
 8009086:	bd10      	pop	{r4, pc}

08009088 <_realloc_r>:
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	4680      	mov	r8, r0
 800908e:	4615      	mov	r5, r2
 8009090:	460c      	mov	r4, r1
 8009092:	b921      	cbnz	r1, 800909e <_realloc_r+0x16>
 8009094:	4611      	mov	r1, r2
 8009096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909a:	f7ff b987 	b.w	80083ac <_malloc_r>
 800909e:	b92a      	cbnz	r2, 80090ac <_realloc_r+0x24>
 80090a0:	f7ff f91a 	bl	80082d8 <_free_r>
 80090a4:	2400      	movs	r4, #0
 80090a6:	4620      	mov	r0, r4
 80090a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ac:	f000 f89e 	bl	80091ec <_malloc_usable_size_r>
 80090b0:	4285      	cmp	r5, r0
 80090b2:	4606      	mov	r6, r0
 80090b4:	d802      	bhi.n	80090bc <_realloc_r+0x34>
 80090b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090ba:	d8f4      	bhi.n	80090a6 <_realloc_r+0x1e>
 80090bc:	4629      	mov	r1, r5
 80090be:	4640      	mov	r0, r8
 80090c0:	f7ff f974 	bl	80083ac <_malloc_r>
 80090c4:	4607      	mov	r7, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d0ec      	beq.n	80090a4 <_realloc_r+0x1c>
 80090ca:	42b5      	cmp	r5, r6
 80090cc:	462a      	mov	r2, r5
 80090ce:	4621      	mov	r1, r4
 80090d0:	bf28      	it	cs
 80090d2:	4632      	movcs	r2, r6
 80090d4:	f7ff f8eb 	bl	80082ae <memcpy>
 80090d8:	4621      	mov	r1, r4
 80090da:	4640      	mov	r0, r8
 80090dc:	f7ff f8fc 	bl	80082d8 <_free_r>
 80090e0:	463c      	mov	r4, r7
 80090e2:	e7e0      	b.n	80090a6 <_realloc_r+0x1e>

080090e4 <__swhatbuf_r>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	4615      	mov	r5, r2
 80090ee:	2900      	cmp	r1, #0
 80090f0:	461e      	mov	r6, r3
 80090f2:	b096      	sub	sp, #88	@ 0x58
 80090f4:	da0c      	bge.n	8009110 <__swhatbuf_r+0x2c>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	2100      	movs	r1, #0
 80090fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090fe:	bf14      	ite	ne
 8009100:	2340      	movne	r3, #64	@ 0x40
 8009102:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009106:	2000      	movs	r0, #0
 8009108:	6031      	str	r1, [r6, #0]
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	b016      	add	sp, #88	@ 0x58
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	466a      	mov	r2, sp
 8009112:	f000 f849 	bl	80091a8 <_fstat_r>
 8009116:	2800      	cmp	r0, #0
 8009118:	dbed      	blt.n	80090f6 <__swhatbuf_r+0x12>
 800911a:	9901      	ldr	r1, [sp, #4]
 800911c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009120:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009124:	4259      	negs	r1, r3
 8009126:	4159      	adcs	r1, r3
 8009128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912c:	e7eb      	b.n	8009106 <__swhatbuf_r+0x22>

0800912e <__smakebuf_r>:
 800912e:	898b      	ldrh	r3, [r1, #12]
 8009130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009132:	079d      	lsls	r5, r3, #30
 8009134:	4606      	mov	r6, r0
 8009136:	460c      	mov	r4, r1
 8009138:	d507      	bpl.n	800914a <__smakebuf_r+0x1c>
 800913a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	6123      	str	r3, [r4, #16]
 8009142:	2301      	movs	r3, #1
 8009144:	6163      	str	r3, [r4, #20]
 8009146:	b003      	add	sp, #12
 8009148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914a:	466a      	mov	r2, sp
 800914c:	ab01      	add	r3, sp, #4
 800914e:	f7ff ffc9 	bl	80090e4 <__swhatbuf_r>
 8009152:	9f00      	ldr	r7, [sp, #0]
 8009154:	4605      	mov	r5, r0
 8009156:	4639      	mov	r1, r7
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff f927 	bl	80083ac <_malloc_r>
 800915e:	b948      	cbnz	r0, 8009174 <__smakebuf_r+0x46>
 8009160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d4ee      	bmi.n	8009146 <__smakebuf_r+0x18>
 8009168:	f023 0303 	bic.w	r3, r3, #3
 800916c:	f043 0302 	orr.w	r3, r3, #2
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7e2      	b.n	800913a <__smakebuf_r+0xc>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800917a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	6020      	str	r0, [r4, #0]
 8009184:	b15b      	cbz	r3, 800919e <__smakebuf_r+0x70>
 8009186:	4630      	mov	r0, r6
 8009188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918c:	f000 f81e 	bl	80091cc <_isatty_r>
 8009190:	b128      	cbz	r0, 800919e <__smakebuf_r+0x70>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	f043 0301 	orr.w	r3, r3, #1
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	431d      	orrs	r5, r3
 80091a2:	81a5      	strh	r5, [r4, #12]
 80091a4:	e7cf      	b.n	8009146 <__smakebuf_r+0x18>
	...

080091a8 <_fstat_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	2300      	movs	r3, #0
 80091ac:	4d06      	ldr	r5, [pc, #24]	@ (80091c8 <_fstat_r+0x20>)
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	4611      	mov	r1, r2
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	f7fc fd6d 	bl	8005c94 <_fstat>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	d102      	bne.n	80091c4 <_fstat_r+0x1c>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b103      	cbz	r3, 80091c4 <_fstat_r+0x1c>
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	20000958 	.word	0x20000958

080091cc <_isatty_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	2300      	movs	r3, #0
 80091d0:	4d05      	ldr	r5, [pc, #20]	@ (80091e8 <_isatty_r+0x1c>)
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7fc fd62 	bl	8005ca0 <_isatty>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_isatty_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_isatty_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	20000958 	.word	0x20000958

080091ec <_malloc_usable_size_r>:
 80091ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f0:	1f18      	subs	r0, r3, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfbc      	itt	lt
 80091f6:	580b      	ldrlt	r3, [r1, r0]
 80091f8:	18c0      	addlt	r0, r0, r3
 80091fa:	4770      	bx	lr

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
