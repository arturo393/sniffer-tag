
sniffer_tag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080093e0  080093e0  0000a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098dc  080098dc  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080098dc  080098dc  0000a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e4  080098e4  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098e8  080098e8  0000a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080098ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001e0  08009acc  0000b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  08009acc  0000b5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045556  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fa  00000000  00000000  0005075f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00038b9d  00000000  00000000  00053a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  0008c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000077e3  00000000  00000000  0008d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8ae  00000000  00000000  00095033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d71d  00000000  00000000  000b28e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a265b  00000000  00000000  000dfffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00182659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000517c  00000000  00000000  0018269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00187818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080093c8 	.word	0x080093c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080093c8 	.word	0x080093c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <__aeabi_d2lz>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	2200      	movs	r2, #0
 8000f94:	2300      	movs	r3, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	460d      	mov	r5, r1
 8000f9a:	f7ff fd0f 	bl	80009bc <__aeabi_dcmplt>
 8000f9e:	b928      	cbnz	r0, 8000fac <__aeabi_d2lz+0x1c>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa8:	f000 b80a 	b.w	8000fc0 <__aeabi_d2ulz>
 8000fac:	4620      	mov	r0, r4
 8000fae:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fb2:	f000 f805 	bl	8000fc0 <__aeabi_d2ulz>
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_d2ulz>:
 8000fc0:	b5d0      	push	{r4, r6, r7, lr}
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <__aeabi_d2ulz+0x34>)
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	460f      	mov	r7, r1
 8000fca:	f7ff fa85 	bl	80004d8 <__aeabi_dmul>
 8000fce:	f000 f815 	bl	8000ffc <__aeabi_d2uiz>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	f7ff fa06 	bl	80003e4 <__aeabi_ui2d>
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <__aeabi_d2ulz+0x38>)
 8000fdc:	f7ff fa7c 	bl	80004d8 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	4639      	mov	r1, r7
 8000fe8:	f7ff f8be 	bl	8000168 <__aeabi_dsub>
 8000fec:	f000 f806 	bl	8000ffc <__aeabi_d2uiz>
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ff4:	3df00000 	.word	0x3df00000
 8000ff8:	41f00000 	.word	0x41f00000

08000ffc <__aeabi_d2uiz>:
 8000ffc:	004a      	lsls	r2, r1, #1
 8000ffe:	d211      	bcs.n	8001024 <__aeabi_d2uiz+0x28>
 8001000:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001004:	d211      	bcs.n	800102a <__aeabi_d2uiz+0x2e>
 8001006:	d50d      	bpl.n	8001024 <__aeabi_d2uiz+0x28>
 8001008:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800100c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001010:	d40e      	bmi.n	8001030 <__aeabi_d2uiz+0x34>
 8001012:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001016:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800101a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800101e:	fa23 f002 	lsr.w	r0, r3, r2
 8001022:	4770      	bx	lr
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	4770      	bx	lr
 800102a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800102e:	d102      	bne.n	8001036 <__aeabi_d2uiz+0x3a>
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001034:	4770      	bx	lr
 8001036:	f04f 0000 	mov.w	r0, #0
 800103a:	4770      	bx	lr

0800103c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800103c:	2300      	movs	r3, #0
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103e:	2201      	movs	r2, #1
void SystemClock_Config(void) {
 8001040:	b530      	push	{r4, r5, lr}
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001042:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 8001044:	b091      	sub	sp, #68	@ 0x44
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001046:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104a:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800104c:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001050:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001054:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001058:	9308      	str	r3, [sp, #32]
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800105a:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	920a      	str	r2, [sp, #40]	@ 0x28
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800105e:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001064:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	e9cd 0106 	strd	r0, r1, [sp, #24]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800106c:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800106e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	940d      	str	r4, [sp, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001074:	f003 fee6 	bl	8004e44 <HAL_RCC_OscConfig>
 8001078:	b108      	cbz	r0, 800107e <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107a:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800107c:	e7fe      	b.n	800107c <SystemClock_Config+0x40>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800107e:	4603      	mov	r3, r0
 8001080:	250f      	movs	r5, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001086:	4621      	mov	r1, r4
 8001088:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001090:	9501      	str	r5, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001092:	9204      	str	r2, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001094:	f004 f8c4 	bl	8005220 <HAL_RCC_ClockConfig>
 8001098:	b108      	cbz	r0, 800109e <SystemClock_Config+0x62>
 800109a:	b672      	cpsid	i
	while (1) {
 800109c:	e7fe      	b.n	800109c <SystemClock_Config+0x60>
}
 800109e:	b011      	add	sp, #68	@ 0x44
 80010a0:	bd30      	pop	{r4, r5, pc}
 80010a2:	bf00      	nop
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <main>:
int main(void) {
 80010a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010ac:	2600      	movs	r6, #0
int main(void) {
 80010ae:	b0f5      	sub	sp, #468	@ 0x1d4
	HAL_DeInit();
 80010b0:	f003 fbec 	bl	800488c <HAL_DeInit>
	HAL_RCC_DeInit();
 80010b4:	f003 fe56 	bl	8004d64 <HAL_RCC_DeInit>
	HAL_Init();
 80010b8:	f003 fc1c 	bl	80048f4 <HAL_Init>
	SystemClock_Config();
 80010bc:	f7ff ffbe 	bl	800103c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010c0:	e9cd 6642 	strd	r6, r6, [sp, #264]	@ 0x108
 80010c4:	e9cd 6644 	strd	r6, r6, [sp, #272]	@ 0x110
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001334 <main+0x28c>)
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 80010ca:	4f9b      	ldr	r7, [pc, #620]	@ (8001338 <main+0x290>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010cc:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80010ce:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 800133c <main+0x294>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	619a      	str	r2, [r3, #24]
 80010d8:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 80010da:	f240 1101 	movw	r1, #257	@ 0x101
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	f002 0220 	and.w	r2, r2, #32
 80010e2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80010e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 80010e8:	4638      	mov	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	f042 0204 	orr.w	r2, r2, #4
 80010ee:	619a      	str	r2, [r3, #24]
 80010f0:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2501      	movs	r5, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	f002 0204 	and.w	r2, r2, #4
 80010f8:	9210      	str	r2, [sp, #64]	@ 0x40
 80010fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	2403      	movs	r4, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	f042 0208 	orr.w	r2, r2, #8
 8001104:	619a      	str	r2, [r3, #24]
 8001106:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 8001108:	4632      	mov	r2, r6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	9311      	str	r3, [sp, #68]	@ 0x44
 8001110:	9b11      	ldr	r3, [sp, #68]	@ 0x44
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 8001112:	f003 fe23 	bl	8004d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	4638      	mov	r0, r7
 800111c:	f003 fe1e 	bl	8004d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001126:	4640      	mov	r0, r8
 8001128:	f003 fe18 	bl	8004d5c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2202      	movs	r2, #2
	GPIO_InitStruct.Pin = DW3000_RST_Pin | DW3000_RST_RCV_Pin;
 800112e:	f240 1301 	movw	r3, #257	@ 0x101
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	4638      	mov	r0, r7
 8001134:	a942      	add	r1, sp, #264	@ 0x108
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	9245      	str	r2, [sp, #276]	@ 0x114
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	e9cd 3542 	strd	r3, r5, [sp, #264]	@ 0x108
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	9644      	str	r6, [sp, #272]	@ 0x110
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f003 fcf1 	bl	8004b24 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001142:	2310      	movs	r3, #16
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001144:	4638      	mov	r0, r7
 8001146:	a942      	add	r1, sp, #264	@ 0x108
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	9445      	str	r4, [sp, #276]	@ 0x114
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800114a:	9342      	str	r3, [sp, #264]	@ 0x108
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	e9cd 5543 	strd	r5, r5, [sp, #268]	@ 0x10c
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001150:	f003 fce8 	bl	8004b24 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DEVICE_SELECT_Pin | KEY_UP_Pin | KEY_DOWN_Pin
 8001154:	f640 4307 	movw	r3, #3079	@ 0xc07
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	4640      	mov	r0, r8
 800115a:	a942      	add	r1, sp, #264	@ 0x108
	GPIO_InitStruct.Pin = DEVICE_SELECT_Pin | KEY_UP_Pin | KEY_DOWN_Pin
 800115c:	9342      	str	r3, [sp, #264]	@ 0x108
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115e:	e9cd 6543 	strd	r6, r5, [sp, #268]	@ 0x10c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f003 fcdf 	bl	8004b24 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800116a:	4640      	mov	r0, r8
 800116c:	a942      	add	r1, sp, #264	@ 0x108
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	e9cd 3542 	strd	r3, r5, [sp, #264]	@ 0x108
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	9445      	str	r4, [sp, #276]	@ 0x114
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	9544      	str	r5, [sp, #272]	@ 0x110
	HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001176:	f003 fcd5 	bl	8004b24 <HAL_GPIO_Init>
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800117a:	2308      	movs	r3, #8
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800117c:	f44f 7b82 	mov.w	fp, #260	@ 0x104
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001180:	f44f 7a00 	mov.w	sl, #512	@ 0x200
	hspi1.Init.CRCPolynomial = 10;
 8001184:	f04f 090a 	mov.w	r9, #10
	hspi1.Instance = SPI1;
 8001188:	4c6d      	ldr	r4, [pc, #436]	@ (8001340 <main+0x298>)
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800118a:	61e3      	str	r3, [r4, #28]
	hspi1.Instance = SPI1;
 800118c:	4b6d      	ldr	r3, [pc, #436]	@ (8001344 <main+0x29c>)
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800118e:	4620      	mov	r0, r4
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001190:	e9c4 b601 	strd	fp, r6, [r4, #4]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001194:	e9c4 6603 	strd	r6, r6, [r4, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001198:	e9c4 6a05 	strd	r6, sl, [r4, #20]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119c:	e9c4 6608 	strd	r6, r6, [r4, #32]
	hspi1.Init.CRCPolynomial = 10;
 80011a0:	e9c4 690a 	strd	r6, r9, [r4, #40]	@ 0x28
	hspi1.Instance = SPI1;
 80011a4:	6023      	str	r3, [r4, #0]
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80011a6:	f004 f989 	bl	80054bc <HAL_SPI_Init>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x108>
 80011ac:	b672      	cpsid	i
	while (1) {
 80011ae:	e7fe      	b.n	80011ae <main+0x106>
	hspi2.Instance = SPI2;
 80011b0:	4e65      	ldr	r6, [pc, #404]	@ (8001348 <main+0x2a0>)
 80011b2:	4b66      	ldr	r3, [pc, #408]	@ (800134c <main+0x2a4>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	e9c6 0002 	strd	r0, r0, [r6, #8]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	e9c6 0004 	strd	r0, r0, [r6, #16]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	e9c6 0007 	strd	r0, r0, [r6, #28]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c0:	e9c6 0009 	strd	r0, r0, [r6, #36]	@ 0x24
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80011c4:	4630      	mov	r0, r6
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	f8c6 b004 	str.w	fp, [r6, #4]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ca:	f8c6 a018 	str.w	sl, [r6, #24]
	hspi2.Init.CRCPolynomial = 10;
 80011ce:	f8c6 902c 	str.w	r9, [r6, #44]	@ 0x2c
	hspi2.Instance = SPI2;
 80011d2:	6033      	str	r3, [r6, #0]
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80011d4:	f004 f972 	bl	80054bc <HAL_SPI_Init>
 80011d8:	b108      	cbz	r0, 80011de <main+0x136>
 80011da:	b672      	cpsid	i
	while (1) {
 80011dc:	e7fe      	b.n	80011dc <main+0x134>
	htim4.Init.Period = 320 - 1;
 80011de:	f240 133f 	movw	r3, #319	@ 0x13f
	htim4.Init.Prescaler = 160 - 1;
 80011e2:	229f      	movs	r2, #159	@ 0x9f
	htim4.Instance = TIM4;
 80011e4:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8001350 <main+0x2a8>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011e8:	e9cd 0042 	strd	r0, r0, [sp, #264]	@ 0x108
	htim4.Init.Period = 320 - 1;
 80011ec:	f8c9 300c 	str.w	r3, [r9, #12]
	htim4.Instance = TIM4;
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <main+0x2ac>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011f2:	e9cd 0044 	strd	r0, r0, [sp, #272]	@ 0x110
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011f6:	e9cd 0032 	strd	r0, r0, [sp, #200]	@ 0xc8
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	f8c9 0008 	str.w	r0, [r9, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fe:	f8c9 0010 	str.w	r0, [r9, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	f8c9 0018 	str.w	r0, [r9, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001206:	4648      	mov	r0, r9
	htim4.Init.Prescaler = 160 - 1;
 8001208:	f8c9 2004 	str.w	r2, [r9, #4]
	htim4.Instance = TIM4;
 800120c:	f8c9 3000 	str.w	r3, [r9]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001210:	f004 fd00 	bl	8005c14 <HAL_TIM_Base_Init>
 8001214:	b108      	cbz	r0, 800121a <main+0x172>
 8001216:	b672      	cpsid	i
	while (1) {
 8001218:	e7fe      	b.n	8001218 <main+0x170>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800121e:	4648      	mov	r0, r9
 8001220:	a942      	add	r1, sp, #264	@ 0x108
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	9342      	str	r3, [sp, #264]	@ 0x108
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001224:	f004 fd88 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 8001228:	b108      	cbz	r0, 800122e <main+0x186>
 800122a:	b672      	cpsid	i
	while (1) {
 800122c:	e7fe      	b.n	800122c <main+0x184>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	e9cd 0032 	strd	r0, r0, [sp, #200]	@ 0xc8
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001232:	a932      	add	r1, sp, #200	@ 0xc8
 8001234:	4648      	mov	r0, r9
 8001236:	f004 fedd 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4682      	mov	sl, r0
 800123c:	b108      	cbz	r0, 8001242 <main+0x19a>
 800123e:	b672      	cpsid	i
	while (1) {
 8001240:	e7fe      	b.n	8001240 <main+0x198>
	HAL_TIM_Base_Start_IT(&htim4);
 8001242:	4648      	mov	r0, r9
 8001244:	f004 fd4e 	bl	8005ce4 <HAL_TIM_Base_Start_IT>
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	230c      	movs	r3, #12
	huart1.Init.BaudRate = 115200;
 800124a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
	huart1.Instance = USART1;
 800124e:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8001358 <main+0x2b0>
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001252:	f8c9 3014 	str.w	r3, [r9, #20]
	huart1.Instance = USART1;
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <main+0x2b4>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001258:	4648      	mov	r0, r9
	huart1.Init.StopBits = UART_STOPBITS_1;
 800125a:	e9c9 aa02 	strd	sl, sl, [r9, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800125e:	e9c9 aa06 	strd	sl, sl, [r9, #24]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	f8c9 a010 	str.w	sl, [r9, #16]
	huart1.Init.BaudRate = 115200;
 8001266:	f8c9 2004 	str.w	r2, [r9, #4]
	huart1.Instance = USART1;
 800126a:	f8c9 3000 	str.w	r3, [r9]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800126e:	f004 fef7 	bl	8006060 <HAL_UART_Init>
 8001272:	b108      	cbz	r0, 8001278 <main+0x1d0>
 8001274:	b672      	cpsid	i
	while (1) {
 8001276:	e7fe      	b.n	8001276 <main+0x1ce>
	HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 8001278:	462a      	mov	r2, r5
 800127a:	4939      	ldr	r1, [pc, #228]	@ (8001360 <main+0x2b8>)
 800127c:	4648      	mov	r0, r9
 800127e:	f005 f801 	bl	8006284 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin, GPIO_PIN_SET);
 8001282:	462a      	mov	r2, r5
 8001284:	4629      	mov	r1, r5
 8001286:	4638      	mov	r0, r7
 8001288:	f003 fd68 	bl	8004d5c <HAL_GPIO_WritePin>
	pdw3000local = &dwt_local_data;
 800128c:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <main+0x2bc>)
	dwt_config_t defatult_dwt_config = { 5, /* Channel number. */
 800128e:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <main+0x2c0>)
	pdw3000local = &dwt_local_data;
 8001290:	a932      	add	r1, sp, #200	@ 0xc8
	dwt_config_t defatult_dwt_config = { 5, /* Channel number. */
 8001292:	f10d 0a54 	add.w	sl, sp, #84	@ 0x54
	pdw3000local = &dwt_local_data;
 8001296:	6011      	str	r1, [r2, #0]
	dwt_config_t defatult_dwt_config = { 5, /* Channel number. */
 8001298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	tag.hw = malloc(sizeof(SPI_HW_t));
 800129e:	2014      	movs	r0, #20
 80012a0:	f005 fa50 	bl	8006744 <malloc>
 80012a4:	4b31      	ldr	r3, [pc, #196]	@ (800136c <main+0x2c4>)
 80012a6:	6118      	str	r0, [r3, #16]
	if (tag.hw == NULL)
 80012a8:	2800      	cmp	r0, #0
 80012aa:	f000 80f8 	beq.w	800149e <main+0x3f6>
	switch (running_device) {
 80012ae:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <main+0x2c8>)
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	f000 80e7 	beq.w	8001486 <main+0x3de>
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	f040 80f2 	bne.w	80014a2 <main+0x3fa>
		tag.hw->nssPin = SPI2_CS_Pin;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
		tag.hw->nrstPin = DW3000_RST_RCV_Pin;
 80012c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F00 init\n\r");
 80012c6:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
 80012ca:	465c      	mov	r4, fp
 80012cc:	4d29      	ldr	r5, [pc, #164]	@ (8001374 <main+0x2cc>)
		tag.hw->spi = &hspi2;
 80012ce:	6006      	str	r6, [r0, #0]
		tag.hw->nrstPort = DW3000_RST_RCV_GPIO_Port;
 80012d0:	60c7      	str	r7, [r0, #12]
		tag.hw->nssPin = SPI2_CS_Pin;
 80012d2:	8103      	strh	r3, [r0, #8]
		tag.hw->nssPort = SPI2_CS_GPIO_Port;
 80012d4:	f8c0 8004 	str.w	r8, [r0, #4]
		tag.hw->nrstPin = DW3000_RST_RCV_Pin;
 80012d8:	8202      	strh	r2, [r0, #16]
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F00 init\n\r");
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	e895 0003 	ldmia.w	r5, {r0, r1}
		HAL_UART_Transmit(&huart1, dist_str,(uint16_t)size,
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F00 init\n\r");
 80012e6:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart1, dist_str,(uint16_t)size,
 80012ea:	2217      	movs	r2, #23
 80012ec:	4648      	mov	r0, r9
 80012ee:	4659      	mov	r1, fp
 80012f0:	f004 ff24 	bl	800613c <HAL_UART_Transmit>
	if (tag_init(&defatult_dwt_config, &defatult_dwt_txconfig, &dwt_local_data,DEV_UWB3000F00,RATE_6M8)
 80012f4:	2400      	movs	r4, #0
	hw = tag.hw;
 80012f6:	4d1d      	ldr	r5, [pc, #116]	@ (800136c <main+0x2c4>)
 80012f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <main+0x2d0>)
 80012fa:	692b      	ldr	r3, [r5, #16]
	if (tag_init(&defatult_dwt_config, &defatult_dwt_txconfig, &dwt_local_data,DEV_UWB3000F00,RATE_6M8)
 80012fc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800137c <main+0x2d4>
	HAL_GPIO_WritePin(tag.hw->nrstPort, tag.hw->nrstPin, GPIO_PIN_RESET);/* Target specific drive of RSTn line into DW IC low for a period. */
 8001300:	8a19      	ldrh	r1, [r3, #16]
 8001302:	68d8      	ldr	r0, [r3, #12]
	hw = tag.hw;
 8001304:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(tag.hw->nrstPort, tag.hw->nrstPin, GPIO_PIN_RESET);/* Target specific drive of RSTn line into DW IC low for a period. */
 8001306:	4622      	mov	r2, r4
 8001308:	f003 fd28 	bl	8004d5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f003 fb15 	bl	800493c <HAL_Delay>
	HAL_GPIO_WritePin(tag.hw->nrstPort, tag.hw->nrstPin, GPIO_PIN_SET);
 8001312:	692b      	ldr	r3, [r5, #16]
 8001314:	2201      	movs	r2, #1
 8001316:	8a19      	ldrh	r1, [r3, #16]
 8001318:	68d8      	ldr	r0, [r3, #12]
 800131a:	f003 fd1f 	bl	8004d5c <HAL_GPIO_WritePin>
	if (tag_init(&defatult_dwt_config, &defatult_dwt_txconfig, &dwt_local_data,DEV_UWB3000F00,RATE_6M8)
 800131e:	4650      	mov	r0, sl
 8001320:	2301      	movs	r3, #1
 8001322:	4641      	mov	r1, r8
 8001324:	aa32      	add	r2, sp, #200	@ 0xc8
 8001326:	9400      	str	r4, [sp, #0]
 8001328:	f002 fe56 	bl	8003fd8 <tag_init>
 800132c:	2801      	cmp	r0, #1
 800132e:	d127      	bne.n	8001380 <main+0x2d8>
 8001330:	b672      	cpsid	i
	while (1) {
 8001332:	e7fe      	b.n	8001332 <main+0x28a>
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	200002e8 	.word	0x200002e8
 8001344:	40013000 	.word	0x40013000
 8001348:	20000290 	.word	0x20000290
 800134c:	40003800 	.word	0x40003800
 8001350:	20000248 	.word	0x20000248
 8001354:	40000800 	.word	0x40000800
 8001358:	20000200 	.word	0x20000200
 800135c:	40013800 	.word	0x40013800
 8001360:	200001fc 	.word	0x200001fc
 8001364:	20000440 	.word	0x20000440
 8001368:	080093e0 	.word	0x080093e0
 800136c:	20000450 	.word	0x20000450
 8001370:	20000448 	.word	0x20000448
 8001374:	08009488 	.word	0x08009488
 8001378:	20000444 	.word	0x20000444
 800137c:	20000000 	.word	0x20000000
	defatult_dwt_txconfig.power = GAIN_30DB;
 8001380:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
	distance.last = 0;
 8001384:	f04f 0900 	mov.w	r9, #0
 8001388:	f04f 0a00 	mov.w	sl, #0
	uint8_t rx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 800138c:	4b7a      	ldr	r3, [pc, #488]	@ (8001578 <main+0x4d0>)
	uint8_t tx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 800138e:	af19      	add	r7, sp, #100	@ 0x64
	uint8_t rx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	uint8_t tx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 8001394:	f103 0c0c 	add.w	ip, r3, #12
	uint8_t rx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001398:	f103 0620 	add.w	r6, r3, #32
	uint8_t rx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 800139c:	ab12      	add	r3, sp, #72	@ 0x48
 800139e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t tx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 80013a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80013a8:	f8dc 3000 	ldr.w	r3, [ip]
	uint8_t rx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 80013ac:	ad24      	add	r5, sp, #144	@ 0x90
	uint8_t tx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 80013ae:	603b      	str	r3, [r7, #0]
	uint8_t rx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 80013b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	e896 0003 	ldmia.w	r6, {r0, r1}
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
 80013b8:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
	uint32_t frame_seq_nb = 0;
 80013bc:	9403      	str	r4, [sp, #12]
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
 80013be:	9421      	str	r4, [sp, #132]	@ 0x84
 80013c0:	941e      	str	r4, [sp, #120]	@ 0x78
	uint8_t rx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 80013c2:	e885 0003 	stmia.w	r5, {r0, r1}
	dwt_configuretxrf(&defatult_dwt_txconfig);
 80013c6:	4640      	mov	r0, r8
	distance.last = 0;
 80013c8:	e9cd 9a70 	strd	r9, sl, [sp, #448]	@ 0x1c0
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
 80013cc:	9422      	str	r4, [sp, #136]	@ 0x88
 80013ce:	f8ad 408c 	strh.w	r4, [sp, #140]	@ 0x8c
	distance.error_times = 0;
 80013d2:	f8ad 41c8 	strh.w	r4, [sp, #456]	@ 0x1c8
	defatult_dwt_txconfig.power = GAIN_30DB;
 80013d6:	f8c8 e004 	str.w	lr, [r8, #4]
	dwt_configuretxrf(&defatult_dwt_txconfig);
 80013da:	f002 f953 	bl	8003684 <dwt_configuretxrf>
		if (running_device == DEV_UWB3000F27) {
 80013de:	4b67      	ldr	r3, [pc, #412]	@ (800157c <main+0x4d4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d041      	beq.n	800146a <main+0x3c2>
		} else if (running_device == DEV_UWB3000F00) {
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d1f9      	bne.n	80013de <main+0x336>
			dwt_setpreambledetecttimeout(0);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 fe84 	bl	80020f8 <dwt_setpreambledetecttimeout>
			dwt_setrxtimeout(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f001 f965 	bl	80026c0 <dwt_setrxtimeout>
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f001 ff7c 	bl	80032f4 <dwt_rxenable>
			while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
 80013fc:	2100      	movs	r1, #0
 80013fe:	2044      	movs	r0, #68	@ 0x44
 8001400:	f000 fd1a 	bl	8001e38 <dwt_read32bitoffsetreg>
 8001404:	4a5e      	ldr	r2, [pc, #376]	@ (8001580 <main+0x4d8>)
 8001406:	4210      	tst	r0, r2
 8001408:	d0f8      	beq.n	80013fc <main+0x354>
			if (status_reg & SYS_STATUS_RXFCG_BIT_MASK) {
 800140a:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
 800140e:	d030      	beq.n	8001472 <main+0x3ca>
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8001410:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001414:	2100      	movs	r1, #0
 8001416:	2044      	movs	r0, #68	@ 0x44
 8001418:	f001 f920 	bl	800265c <dwt_write32bitoffsetreg>
				memset(rx_buffer, 0, RX_BUF_LEN);
 800141c:	2300      	movs	r3, #0
				frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 800141e:	2100      	movs	r1, #0
 8001420:	204c      	movs	r0, #76	@ 0x4c
				memset(rx_buffer, 0, RX_BUF_LEN);
 8001422:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 8001426:	e9cd 3320 	strd	r3, r3, [sp, #128]	@ 0x80
 800142a:	9322      	str	r3, [sp, #136]	@ 0x88
 800142c:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
				frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8001430:	f000 fd02 	bl	8001e38 <dwt_read32bitoffsetreg>
 8001434:	f3c0 0109 	ubfx	r1, r0, #0, #10
				if (frame_len <= RX_BUF_LEN) {
 8001438:	2916      	cmp	r1, #22
 800143a:	d91f      	bls.n	800147c <main+0x3d4>
				rx_buffer[ALL_MSG_SN_IDX] = 0;
 800143c:	f04f 0300 	mov.w	r3, #0
				if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0) {
 8001440:	220a      	movs	r2, #10
 8001442:	a912      	add	r1, sp, #72	@ 0x48
 8001444:	a81e      	add	r0, sp, #120	@ 0x78
				rx_buffer[ALL_MSG_SN_IDX] = 0;
 8001446:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
				if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0) {
 800144a:	f005 ffc4 	bl	80073d6 <memcmp>
 800144e:	4606      	mov	r6, r0
 8001450:	b350      	cbz	r0, 80014a8 <main+0x400>
			if (flags.ds_twr_timeout > 3000) {
 8001452:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001456:	494b      	ldr	r1, [pc, #300]	@ (8001584 <main+0x4dc>)
 8001458:	89ca      	ldrh	r2, [r1, #14]
 800145a:	429a      	cmp	r2, r3
				flags.ds_twr_timeout = 1;
 800145c:	bf84      	itt	hi
 800145e:	2301      	movhi	r3, #1
 8001460:	81cb      	strhhi	r3, [r1, #14]
			flags.time_to_allow_run = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	4a47      	ldr	r2, [pc, #284]	@ (8001584 <main+0x4dc>)
 8001466:	8193      	strh	r3, [r2, #12]
 8001468:	e7b9      	b.n	80013de <main+0x336>
			handle_sniffer_tag(&distance);
 800146a:	a842      	add	r0, sp, #264	@ 0x108
 800146c:	f000 f9d2 	bl	8001814 <handle_sniffer_tag>
 8001470:	e7b5      	b.n	80013de <main+0x336>
				dwt_write32bitreg(SYS_STATUS_ID,
 8001472:	2044      	movs	r0, #68	@ 0x44
 8001474:	4a44      	ldr	r2, [pc, #272]	@ (8001588 <main+0x4e0>)
 8001476:	f001 f8f1 	bl	800265c <dwt_write32bitoffsetreg>
 800147a:	e7ea      	b.n	8001452 <main+0x3aa>
					dwt_readrxdata(rx_buffer, (uint16_t) frame_len, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	a81e      	add	r0, sp, #120	@ 0x78
 8001480:	f001 fede 	bl	8003240 <dwt_readrxdata>
 8001484:	e7da      	b.n	800143c <main+0x394>
		tag.hw->nssPin = SPI1_CS_Pin;
 8001486:	f04f 0310 	mov.w	r3, #16
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F27 init\n\r");
 800148a:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
		tag.hw->spi = &hspi1;
 800148e:	6004      	str	r4, [r0, #0]
		tag.hw->nrstPin = DW3000_RST_Pin;
 8001490:	8205      	strh	r5, [r0, #16]
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F27 init\n\r");
 8001492:	465c      	mov	r4, fp
 8001494:	4d3d      	ldr	r5, [pc, #244]	@ (800158c <main+0x4e4>)
		tag.hw->nssPin = SPI1_CS_Pin;
 8001496:	8103      	strh	r3, [r0, #8]
		tag.hw->nrstPort = DW3000_RST_GPIO_Port;
 8001498:	60c7      	str	r7, [r0, #12]
		tag.hw->nssPort = SPI1_CS_GPIO_Port;
 800149a:	6047      	str	r7, [r0, #4]
		size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F27 init\n\r");
 800149c:	e71d      	b.n	80012da <main+0x232>
 800149e:	b672      	cpsid	i
	while (1) {
 80014a0:	e7fe      	b.n	80014a0 <main+0x3f8>
 80014a2:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
 80014a6:	e725      	b.n	80012f4 <main+0x24c>
					poll_rx_timestamp = get_rx_timestamp_u64();
 80014a8:	f003 f97e 	bl	80047a8 <get_rx_timestamp_u64>
 80014ac:	4688      	mov	r8, r1
 80014ae:	4605      	mov	r5, r0
							+ ((POLL_RX_TO_RESP_TX_DLY_UUS_6M8)
 80014b0:	4c37      	ldr	r4, [pc, #220]	@ (8001590 <main+0x4e8>)
 80014b2:	1904      	adds	r4, r0, r4
 80014b4:	f141 0700 	adc.w	r7, r1, #0
									* UUS_TO_DWT_TIME)) >> 8);
 80014b8:	0a20      	lsrs	r0, r4, #8
					dwt_setdelayedtrxtime(resp_tx_time);
 80014ba:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
 80014be:	f000 fe35 	bl	800212c <dwt_setdelayedtrxtime>
					resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_POLL_TX_TS_IDX],
 80014c2:	462a      	mov	r2, r5
 80014c4:	4643      	mov	r3, r8
 80014c6:	f10d 006e 	add.w	r0, sp, #110	@ 0x6e
 80014ca:	f003 f9b5 	bl	8004838 <resp_msg_set_ts>
					resp_tx_timestamp = (((uint64_t) (resp_tx_time
 80014ce:	f244 011a 	movw	r1, #16410	@ 0x401a
							& 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80014d2:	f424 72ff 	bic.w	r2, r4, #510	@ 0x1fe
 80014d6:	f022 0201 	bic.w	r2, r2, #1
					resp_tx_timestamp = (((uint64_t) (resp_tx_time
 80014da:	1852      	adds	r2, r2, r1
							& 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 80014dc:	f007 03ff 	and.w	r3, r7, #255	@ 0xff
					resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_RESP_RX_TS_IDX],
 80014e0:	f143 0300 	adc.w	r3, r3, #0
 80014e4:	f10d 0072 	add.w	r0, sp, #114	@ 0x72
 80014e8:	f003 f9a6 	bl	8004838 <resp_msg_set_ts>
					dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS_6M8);
 80014ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f0:	f000 fefe 	bl	80022f0 <dwt_setrxaftertxdelay>
					dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS_6M8);
 80014f4:	20dc      	movs	r0, #220	@ 0xdc
 80014f6:	f001 f8e3 	bl	80026c0 <dwt_setrxtimeout>
					dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 80014fa:	2005      	movs	r0, #5
 80014fc:	f000 fdfc 	bl	80020f8 <dwt_setpreambledetecttimeout>
					tx_resp_msg[ALL_MSG_SN_IDX] = (uint8_t) frame_seq_nb;
 8001500:	9b03      	ldr	r3, [sp, #12]
					dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8001502:	4632      	mov	r2, r6
 8001504:	a919      	add	r1, sp, #100	@ 0x64
 8001506:	2014      	movs	r0, #20
					tx_resp_msg[ALL_MSG_SN_IDX] = (uint8_t) frame_seq_nb;
 8001508:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
					dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 800150c:	f001 fb22 	bl	8002b54 <dwt_writetxdata>
					dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8001510:	4631      	mov	r1, r6
 8001512:	2201      	movs	r2, #1
 8001514:	2014      	movs	r0, #20
 8001516:	f001 fa9b 	bl	8002a50 <dwt_writetxfctrl>
					ret = dwt_starttx(
 800151a:	2003      	movs	r0, #3
 800151c:	f002 fec6 	bl	80042ac <dwt_starttx>
					if (ret == DWT_SUCCESS) {
 8001520:	4604      	mov	r4, r0
 8001522:	2800      	cmp	r0, #0
 8001524:	d195      	bne.n	8001452 <main+0x3aa>
								& (SYS_STATUS_RXFCG_BIT_MASK
 8001526:	4e16      	ldr	r6, [pc, #88]	@ (8001580 <main+0x4d8>)
						while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
 8001528:	2100      	movs	r1, #0
 800152a:	2044      	movs	r0, #68	@ 0x44
 800152c:	f000 fc84 	bl	8001e38 <dwt_read32bitoffsetreg>
 8001530:	4230      	tst	r0, r6
 8001532:	d0f9      	beq.n	8001528 <main+0x480>
						frame_seq_nb++;
 8001534:	9a03      	ldr	r2, [sp, #12]
						if (status_reg & SYS_STATUS_RXFCG_BIT_MASK) {
 8001536:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
						frame_seq_nb++;
 800153a:	f102 0201 	add.w	r2, r2, #1
 800153e:	9203      	str	r2, [sp, #12]
						if (status_reg & SYS_STATUS_RXFCG_BIT_MASK) {
 8001540:	d104      	bne.n	800154c <main+0x4a4>
							dwt_write32bitreg(SYS_STATUS_ID,
 8001542:	2044      	movs	r0, #68	@ 0x44
 8001544:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <main+0x4e0>)
 8001546:	f001 f889 	bl	800265c <dwt_write32bitoffsetreg>
 800154a:	e782      	b.n	8001452 <main+0x3aa>
							dwt_write32bitreg(SYS_STATUS_ID,
 800154c:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8001550:	2100      	movs	r1, #0
 8001552:	2044      	movs	r0, #68	@ 0x44
 8001554:	f001 f882 	bl	800265c <dwt_write32bitoffsetreg>
							frame_len = dwt_read32bitreg(
 8001558:	2100      	movs	r1, #0
 800155a:	204c      	movs	r0, #76	@ 0x4c
 800155c:	f000 fc6c 	bl	8001e38 <dwt_read32bitoffsetreg>
 8001560:	f3c0 0609 	ubfx	r6, r0, #0, #10
							if (frame_len <= RX_BUF_LEN) {
 8001564:	2e16      	cmp	r6, #22
 8001566:	f240 80e9 	bls.w	800173c <main+0x694>
								sprintf((char*) dist_str, "%02X ",
 800156a:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8001594 <main+0x4ec>
								HAL_UART_Transmit(&huart1, dist_str,
 800156e:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 8001598 <main+0x4f0>
 8001572:	af1e      	add	r7, sp, #120	@ 0x78
 8001574:	e020      	b.n	80015b8 <main+0x510>
 8001576:	bf00      	nop
 8001578:	080093f0 	.word	0x080093f0
 800157c:	20000448 	.word	0x20000448
 8001580:	2427d000 	.word	0x2427d000
 8001584:	20000468 	.word	0x20000468
 8001588:	24279000 	.word	0x24279000
 800158c:	08009470 	.word	0x08009470
 8001590:	036d8168 	.word	0x036d8168
 8001594:	080094a0 	.word	0x080094a0
 8001598:	20000200 	.word	0x20000200
								sprintf((char*) dist_str, "%02X ",
 800159c:	4649      	mov	r1, r9
 800159e:	f817 2b01 	ldrb.w	r2, [r7], #1
 80015a2:	4658      	mov	r0, fp
 80015a4:	f005 feb4 	bl	8007310 <siprintf>
								HAL_UART_Transmit(&huart1, dist_str,
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ac:	2202      	movs	r2, #2
 80015ae:	4659      	mov	r1, fp
 80015b0:	4640      	mov	r0, r8
							for (int i = 0; i < (int) frame_len; i++) {
 80015b2:	3401      	adds	r4, #1
								HAL_UART_Transmit(&huart1, dist_str,
 80015b4:	f004 fdc2 	bl	800613c <HAL_UART_Transmit>
							for (int i = 0; i < (int) frame_len; i++) {
 80015b8:	42a6      	cmp	r6, r4
 80015ba:	dcef      	bgt.n	800159c <main+0x4f4>
							sprintf((char*) dist_str, "\n\r");
 80015bc:	4b8e      	ldr	r3, [pc, #568]	@ (80017f8 <main+0x750>)
							HAL_UART_Transmit(&huart1, dist_str, (uint16_t) 2,
 80015be:	2202      	movs	r2, #2
							sprintf((char*) dist_str, "\n\r");
 80015c0:	681b      	ldr	r3, [r3, #0]
							HAL_UART_Transmit(&huart1, dist_str, (uint16_t) 2,
 80015c2:	4659      	mov	r1, fp
							sprintf((char*) dist_str, "\n\r");
 80015c4:	f8ab 3000 	strh.w	r3, [fp]
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
							HAL_UART_Transmit(&huart1, dist_str, (uint16_t) 2,
 80015ce:	488b      	ldr	r0, [pc, #556]	@ (80017fc <main+0x754>)
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d4:	f004 fdb2 	bl	800613c <HAL_UART_Transmit>
							rx_buffer[ALL_MSG_SN_IDX] = 0;
 80015d8:	2300      	movs	r3, #0
							if (memcmp(rx_buffer, rx_final_msg,
 80015da:	220a      	movs	r2, #10
 80015dc:	a924      	add	r1, sp, #144	@ 0x90
 80015de:	a81e      	add	r0, sp, #120	@ 0x78
							rx_buffer[ALL_MSG_SN_IDX] = 0;
 80015e0:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
							if (memcmp(rx_buffer, rx_final_msg,
 80015e4:	f005 fef7 	bl	80073d6 <memcmp>
 80015e8:	4604      	mov	r4, r0
 80015ea:	2800      	cmp	r0, #0
 80015ec:	f47f af31 	bne.w	8001452 <main+0x3aa>
								resp_tx_timestamp = get_tx_timestamp_u64();
 80015f0:	f003 f864 	bl	80046bc <get_tx_timestamp_u64>
 80015f4:	4682      	mov	sl, r0
								final_rx_timestamp = get_rx_timestamp_u64();
 80015f6:	f003 f8d7 	bl	80047a8 <get_rx_timestamp_u64>
								final_msg_get_ts(
 80015fa:	a90c      	add	r1, sp, #48	@ 0x30
								final_rx_timestamp = get_rx_timestamp_u64();
 80015fc:	4606      	mov	r6, r0
								final_msg_get_ts(
 80015fe:	f10d 0082 	add.w	r0, sp, #130	@ 0x82
 8001602:	f003 f907 	bl	8004814 <final_msg_get_ts>
								final_msg_get_ts(
 8001606:	a90d      	add	r1, sp, #52	@ 0x34
 8001608:	f10d 0086 	add.w	r0, sp, #134	@ 0x86
 800160c:	f003 f902 	bl	8004814 <final_msg_get_ts>
								final_msg_get_ts(
 8001610:	a90e      	add	r1, sp, #56	@ 0x38
 8001612:	f10d 008a 	add.w	r0, sp, #138	@ 0x8a
 8001616:	f003 f8fd 	bl	8004814 <final_msg_get_ts>
								Ra = (double) (resp_rx_ts - poll_tx_ts);
 800161a:	e9dd 070c 	ldrd	r0, r7, [sp, #48]	@ 0x30
 800161e:	1a38      	subs	r0, r7, r0
 8001620:	f7fe fee0 	bl	80003e4 <__aeabi_ui2d>
 8001624:	4680      	mov	r8, r0
								Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
 8001626:	eba6 000a 	sub.w	r0, r6, sl
								Ra = (double) (resp_rx_ts - poll_tx_ts);
 800162a:	4689      	mov	r9, r1
								Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
 800162c:	f7fe feda 	bl	80003e4 <__aeabi_ui2d>
 8001630:	4602      	mov	r2, r0
								Da = (double) (final_tx_ts - resp_rx_ts);
 8001632:	980e      	ldr	r0, [sp, #56]	@ 0x38
								Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
 8001634:	4616      	mov	r6, r2
								Da = (double) (final_tx_ts - resp_rx_ts);
 8001636:	1bc0      	subs	r0, r0, r7
								Rb = (double) (final_rx_ts_32 - resp_tx_ts_32);
 8001638:	460f      	mov	r7, r1
								Da = (double) (final_tx_ts - resp_rx_ts);
 800163a:	f7fe fed3 	bl	80003e4 <__aeabi_ui2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
								Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
 8001642:	ebaa 0005 	sub.w	r0, sl, r5
								Da = (double) (final_tx_ts - resp_rx_ts);
 8001646:	e9cd 2304 	strd	r2, r3, [sp, #16]
								Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
 800164a:	f7fe fecb 	bl	80003e4 <__aeabi_ui2d>
								tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 800164e:	4632      	mov	r2, r6
 8001650:	463b      	mov	r3, r7
								Db = (double) (resp_tx_ts_32 - poll_rx_ts_32);
 8001652:	e9cd 0106 	strd	r0, r1, [sp, #24]
								tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe ff3d 	bl	80004d8 <__aeabi_dmul>
 800165e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001662:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800166a:	f7fe ff35 	bl	80004d8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8001676:	f7fe fd77 	bl	8000168 <__aeabi_dsub>
										/ (Ra + Rb + Da + Db));
 800167a:	4632      	mov	r2, r6
								tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 800167c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
										/ (Ra + Rb + Da + Db));
 8001680:	463b      	mov	r3, r7
								tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 8001682:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	@ 0x28
										/ (Ra + Rb + Da + Db));
 8001686:	4640      	mov	r0, r8
 8001688:	4649      	mov	r1, r9
 800168a:	f7fe fd6f 	bl	800016c <__adddf3>
 800168e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001692:	f7fe fd6b 	bl	800016c <__adddf3>
 8001696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800169a:	f7fe fd67 	bl	800016c <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4630      	mov	r0, r6
 80016a4:	4639      	mov	r1, r7
 80016a6:	f7ff f841 	bl	800072c <__aeabi_ddiv>
								tof_dtu = (int64_t) ((Ra * Rb - Da * Db)
 80016aa:	f7ff fc71 	bl	8000f90 <__aeabi_d2lz>
								tof = (double) tof_dtu * DWT_TIME_UNITS;
 80016ae:	f7fe fee5 	bl	800047c <__aeabi_l2d>
 80016b2:	a34d      	add	r3, pc, #308	@ (adr r3, 80017e8 <main+0x740>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff0e 	bl	80004d8 <__aeabi_dmul>
								distance.value = tof * SPEED_OF_LIGHT;
 80016bc:	a34c      	add	r3, pc, #304	@ (adr r3, 80017f0 <main+0x748>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff09 	bl	80004d8 <__aeabi_dmul>
 80016c6:	4606      	mov	r6, r0
 80016c8:	460f      	mov	r7, r1
								if (distance.counter < 10) {
 80016ca:	f89d 51c9 	ldrb.w	r5, [sp, #457]	@ 0x1c9
								distance.value = tof * SPEED_OF_LIGHT;
 80016ce:	e9cd 6744 	strd	r6, r7, [sp, #272]	@ 0x110
								if (distance.counter < 10) {
 80016d2:	2d09      	cmp	r5, #9
 80016d4:	d938      	bls.n	8001748 <main+0x6a0>
													- distance.last) < MAX_DISTANCE_ERROR) {
 80016d6:	e9dd 8970 	ldrd	r8, r9, [sp, #448]	@ 0x1c0
 80016da:	4642      	mov	r2, r8
 80016dc:	464b      	mov	r3, r9
 80016de:	f7fe fd43 	bl	8000168 <__aeabi_dsub>
									if (fabs(
 80016e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80016e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80016e8:	9008      	str	r0, [sp, #32]
 80016ea:	2200      	movs	r2, #0
 80016ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <main+0x758>)
 80016f2:	f7ff f963 	bl	80009bc <__aeabi_dcmplt>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d14c      	bne.n	8001794 <main+0x6ec>
										distance.error_times++;
 80016fa:	f89d 31c8 	ldrb.w	r3, [sp, #456]	@ 0x1c8
										distance.value = distance.last;
 80016fe:	e9cd 8944 	strd	r8, r9, [sp, #272]	@ 0x110
										distance.error_times++;
 8001702:	3301      	adds	r3, #1
 8001704:	b2db      	uxtb	r3, r3
										if (distance.error_times > 20) {
 8001706:	2b14      	cmp	r3, #20
										distance.error_times++;
 8001708:	bf94      	ite	ls
 800170a:	f88d 31c8 	strbls.w	r3, [sp, #456]	@ 0x1c8
											distance.error_times = 0;
 800170e:	f8ad 01c8 	strhhi.w	r0, [sp, #456]	@ 0x1c8
								tag.distance = distance.value;
 8001712:	4c3c      	ldr	r4, [pc, #240]	@ (8001804 <main+0x75c>)
 8001714:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	@ 0x110
								size = sprintf((char*) dist_str,
 8001718:	493b      	ldr	r1, [pc, #236]	@ (8001808 <main+0x760>)
 800171a:	4658      	mov	r0, fp
								tag.distance = distance.value;
 800171c:	e9c4 2302 	strd	r2, r3, [r4, #8]
								size = sprintf((char*) dist_str,
 8001720:	f005 fdf6 	bl	8007310 <siprintf>
 8001724:	4602      	mov	r2, r0
								HAL_UART_Transmit(&huart1, dist_str,
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172a:	b292      	uxth	r2, r2
 800172c:	4659      	mov	r1, fp
 800172e:	4833      	ldr	r0, [pc, #204]	@ (80017fc <main+0x754>)
 8001730:	f004 fd04 	bl	800613c <HAL_UART_Transmit>
								flags.ds_twr_timeout = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	4a35      	ldr	r2, [pc, #212]	@ (800180c <main+0x764>)
 8001738:	81d3      	strh	r3, [r2, #14]
			if (flags.ds_twr_timeout > 3000) {
 800173a:	e692      	b.n	8001462 <main+0x3ba>
								dwt_readrxdata(rx_buffer, (uint16_t) frame_len,
 800173c:	2200      	movs	r2, #0
 800173e:	4631      	mov	r1, r6
 8001740:	a81e      	add	r0, sp, #120	@ 0x78
 8001742:	f001 fd7d 	bl	8003240 <dwt_readrxdata>
 8001746:	e710      	b.n	800156a <main+0x4c2>
									distance.readings[distance.counter] =
 8001748:	aa74      	add	r2, sp, #464	@ 0x1d0
									distance.counter++;
 800174a:	1c6b      	adds	r3, r5, #1
									distance.readings[distance.counter] =
 800174c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8001750:	e945 672e 	strd	r6, r7, [r5, #-184]	@ 0xb8
									for (int i = 0; i < distance.counter; i++) {
 8001754:	2600      	movs	r6, #0
 8001756:	2700      	movs	r7, #0
									distance.counter++;
 8001758:	b2dd      	uxtb	r5, r3
 800175a:	f50d 7888 	add.w	r8, sp, #272	@ 0x110
 800175e:	f88d 51c9 	strb.w	r5, [sp, #457]	@ 0x1c9
										distance.sum += distance.readings[i];
 8001762:	4630      	mov	r0, r6
 8001764:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8001768:	4639      	mov	r1, r7
 800176a:	f7fe fcff 	bl	800016c <__adddf3>
									for (int i = 0; i < distance.counter; i++) {
 800176e:	3401      	adds	r4, #1
 8001770:	42ac      	cmp	r4, r5
										distance.sum += distance.readings[i];
 8001772:	4606      	mov	r6, r0
 8001774:	460f      	mov	r7, r1
									for (int i = 0; i < distance.counter; i++) {
 8001776:	dbf4      	blt.n	8001762 <main+0x6ba>
											/ (double) distance.counter;
 8001778:	4628      	mov	r0, r5
 800177a:	e9cd 676e 	strd	r6, r7, [sp, #440]	@ 0x1b8
 800177e:	f7fe fe31 	bl	80003e4 <__aeabi_ui2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4630      	mov	r0, r6
 8001788:	4639      	mov	r1, r7
 800178a:	f7fe ffcf 	bl	800072c <__aeabi_ddiv>
									distance.value = distance.sum
 800178e:	e9cd 0144 	strd	r0, r1, [sp, #272]	@ 0x110
 8001792:	e7be      	b.n	8001712 <main+0x66a>
											distance.new[i] =
 8001794:	1e6a      	subs	r2, r5, #1
 8001796:	00d2      	lsls	r2, r2, #3
 8001798:	a948      	add	r1, sp, #288	@ 0x120
 800179a:	a85a      	add	r0, sp, #360	@ 0x168
										distance.error_times = 0;
 800179c:	f88d 41c8 	strb.w	r4, [sp, #456]	@ 0x1c8
											distance.new[i] =
 80017a0:	f005 fe29 	bl	80073f6 <memmove>
										distance.new[distance.counter - 1] =
 80017a4:	2200      	movs	r2, #0
 80017a6:	2300      	movs	r3, #0
 80017a8:	e9cd 676c 	strd	r6, r7, [sp, #432]	@ 0x1b0
										for (int i = 0; i < distance.counter;
 80017ac:	ad44      	add	r5, sp, #272	@ 0x110
											distance.sum += distance.new[i];
 80017ae:	e9d5 8916 	ldrd	r8, r9, [r5, #88]	@ 0x58
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	4642      	mov	r2, r8
 80017b8:	464b      	mov	r3, r9
 80017ba:	f7fe fcd7 	bl	800016c <__adddf3>
												i++) {
 80017be:	3401      	adds	r4, #1
										for (int i = 0; i < distance.counter;
 80017c0:	2c0a      	cmp	r4, #10
											distance.sum += distance.new[i];
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
											distance.readings[i] =
 80017c6:	e9e5 8902 	strd	r8, r9, [r5, #8]!
										for (int i = 0; i < distance.counter;
 80017ca:	d1f0      	bne.n	80017ae <main+0x706>
 80017cc:	e9cd 236e 	strd	r2, r3, [sp, #440]	@ 0x1b8
												/ (double) distance.counter;
 80017d0:	2200      	movs	r2, #0
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <main+0x768>)
										distance.last = distance.value;
 80017d4:	e9cd 6770 	strd	r6, r7, [sp, #448]	@ 0x1c0
												/ (double) distance.counter;
 80017d8:	f7fe ffa8 	bl	800072c <__aeabi_ddiv>
										distance.value = distance.sum
 80017dc:	e9cd 0144 	strd	r0, r1, [sp, #272]	@ 0x110
 80017e0:	e797      	b.n	8001712 <main+0x66a>
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	3bce48fa 	.word	0x3bce48fa
 80017ec:	3db13518 	.word	0x3db13518
 80017f0:	13000000 	.word	0x13000000
 80017f4:	41b1dd19 	.word	0x41b1dd19
 80017f8:	080094c8 	.word	0x080094c8
 80017fc:	20000200 	.word	0x20000200
 8001800:	40340000 	.word	0x40340000
 8001804:	20000450 	.word	0x20000450
 8001808:	080094a8 	.word	0x080094a8
 800180c:	20000468 	.word	0x20000468
 8001810:	40240000 	.word	0x40240000

08001814 <handle_sniffer_tag>:
 *      Author: uqommdev
 */

#include "sniffer_tag.h"

void handle_sniffer_tag(Distance_t *distance) {
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	b09d      	sub	sp, #116	@ 0x74
	int rets;
	TAG_t tag;
	uint8_t tx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001818:	466b      	mov	r3, sp
void handle_sniffer_tag(Distance_t *distance) {
 800181a:	2400      	movs	r4, #0
	uint8_t tx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 800181c:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <handle_sniffer_tag+0x10c>)
void handle_sniffer_tag(Distance_t *distance) {
 800181e:	4606      	mov	r6, r0
			0x21 };
	uint8_t rx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 8001820:	f102 070c 	add.w	r7, r2, #12
			0xE1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint8_t tx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001824:	f102 0e20 	add.w	lr, r2, #32
	uint8_t tx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001828:	ca07      	ldmia	r2, {r0, r1, r2}
 800182a:	c303      	stmia	r3!, {r0, r1}
	uint8_t rx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 800182c:	ad03      	add	r5, sp, #12
	uint8_t tx_poll_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 800182e:	801a      	strh	r2, [r3, #0]
	uint8_t rx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 8001830:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	683b      	ldr	r3, [r7, #0]
	uint8_t tx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001836:	f10d 0c20 	add.w	ip, sp, #32
	uint8_t rx_resp_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A',
 800183a:	602b      	str	r3, [r5, #0]
	uint8_t tx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 800183c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001844:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8001848:	f84c 0b04 	str.w	r0, [ip], #4
	uint8_t dist_str[30];
	uint8_t frame_seq_nb;
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
	/* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = (uint8_t) frame_seq_nb;
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 800184c:	4622      	mov	r2, r4
 800184e:	200a      	movs	r0, #10
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
 8001850:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 8001854:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
	uint8_t tx_final_msg[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E',
 8001858:	f8ac 1000 	strh.w	r1, [ip]
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 800185c:	4669      	mov	r1, sp
	uint8_t rx_buffer[RX_BUF_LEN] = { 0 };
 800185e:	9412      	str	r4, [sp, #72]	@ 0x48
 8001860:	f8ad 404c 	strh.w	r4, [sp, #76]	@ 0x4c
	tx_poll_msg[ALL_MSG_SN_IDX] = (uint8_t) frame_seq_nb;
 8001864:	f88d 4002 	strb.w	r4, [sp, #2]
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8001868:	f001 f974 	bl	8002b54 <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_poll_msg) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */
 800186c:	200c      	movs	r0, #12
 800186e:	2201      	movs	r2, #1
 8001870:	4621      	mov	r1, r4
 8001872:	f001 f8ed 	bl	8002a50 <dwt_writetxfctrl>

	/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
	 * set by dwt_setrxaftertxdelay() has elapsed. */
	rets = dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001876:	2002      	movs	r0, #2
 8001878:	f002 fd18 	bl	80042ac <dwt_starttx>
	if (rets == DWT_SUCCESS) {
 800187c:	b9f0      	cbnz	r0, 80018bc <handle_sniffer_tag+0xa8>
		/* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */
		while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
				& (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO
 800187e:	4c29      	ldr	r4, [pc, #164]	@ (8001924 <handle_sniffer_tag+0x110>)
		while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
 8001880:	2100      	movs	r1, #0
 8001882:	2044      	movs	r0, #68	@ 0x44
 8001884:	f000 fad8 	bl	8001e38 <dwt_read32bitoffsetreg>
 8001888:	4220      	tst	r0, r4
 800188a:	d0f9      	beq.n	8001880 <handle_sniffer_tag+0x6c>
						| SYS_STATUS_ALL_RX_ERR))) {
		};

		if (status_reg & SYS_STATUS_RXFCG_BIT_MASK) {
 800188c:	f410 4180 	ands.w	r1, r0, #16384	@ 0x4000
 8001890:	d016      	beq.n	80018c0 <handle_sniffer_tag+0xac>
			uint32_t frame_len;

			/* Clear good RX frame event and TX frame sent in the DW IC status register. */
			dwt_write32bitreg(SYS_STATUS_ID,
 8001892:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8001896:	2100      	movs	r1, #0
 8001898:	2044      	movs	r0, #68	@ 0x44
 800189a:	f000 fedf 	bl	800265c <dwt_write32bitoffsetreg>
					SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);

			/* A frame has been received, read it into the local buffer. */
			frame_len =
			dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 800189e:	2100      	movs	r1, #0
 80018a0:	204c      	movs	r0, #76	@ 0x4c
 80018a2:	f000 fac9 	bl	8001e38 <dwt_read32bitoffsetreg>
			frame_len =
 80018a6:	f3c0 0109 	ubfx	r1, r0, #0, #10
			if (frame_len <= RX_BUF_LEN) {
 80018aa:	2916      	cmp	r1, #22
 80018ac:	d932      	bls.n	8001914 <handle_sniffer_tag+0x100>
				dwt_readrxdata(rx_buffer, (uint16_t) frame_len, 0);
			}
			/* Check that the frame is the expected response from the companion "DS TWR responder" example.
			 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
			rx_buffer[ALL_MSG_SN_IDX] = 0;
 80018ae:	2400      	movs	r4, #0
 80018b0:	f88d 403a 	strb.w	r4, [sp, #58]	@ 0x3a
			if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0) {
 80018b4:	9b03      	ldr	r3, [sp, #12]
 80018b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d007      	beq.n	80018cc <handle_sniffer_tag+0xb8>
			/* Clear RX error/timeout events in the DW IC status register. */
			dwt_write32bitreg(SYS_STATUS_ID,
					SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXFRS_BIT_MASK);
		}
	}
}
 80018bc:	b01d      	add	sp, #116	@ 0x74
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dwt_write32bitreg(SYS_STATUS_ID,
 80018c0:	2044      	movs	r0, #68	@ 0x44
 80018c2:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <handle_sniffer_tag+0x114>)
 80018c4:	f000 feca 	bl	800265c <dwt_write32bitoffsetreg>
}
 80018c8:	b01d      	add	sp, #116	@ 0x74
 80018ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0) {
 80018cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80018ce:	9b04      	ldr	r3, [sp, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1f3      	bne.n	80018bc <handle_sniffer_tag+0xa8>
 80018d4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80018d8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1ed      	bne.n	80018bc <handle_sniffer_tag+0xa8>
				tag.distance = calculate_tag_distance(rx_buffer, distance);
 80018e0:	4631      	mov	r1, r6
 80018e2:	a80e      	add	r0, sp, #56	@ 0x38
 80018e4:	f001 fa7c 	bl	8002de0 <calculate_tag_distance>
 80018e8:	4606      	mov	r6, r0
 80018ea:	460f      	mov	r7, r1
				send_message_with_timestamps(tx_final_msg, sizeof(tx_final_msg),
 80018ec:	4622      	mov	r2, r4
 80018ee:	2116      	movs	r1, #22
 80018f0:	a808      	add	r0, sp, #32
 80018f2:	f002 fd99 	bl	8004428 <send_message_with_timestamps>
				uint16_t size = sprintf((char*) dist_str, "distance:%.2f[m]\n\r",
 80018f6:	4632      	mov	r2, r6
 80018f8:	463b      	mov	r3, r7
 80018fa:	490c      	ldr	r1, [pc, #48]	@ (800192c <handle_sniffer_tag+0x118>)
 80018fc:	a814      	add	r0, sp, #80	@ 0x50
 80018fe:	f005 fd07 	bl	8007310 <siprintf>
 8001902:	4602      	mov	r2, r0
				HAL_UART_Transmit(&huart1, dist_str, (uint16_t) size,
 8001904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001908:	a914      	add	r1, sp, #80	@ 0x50
 800190a:	b292      	uxth	r2, r2
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <handle_sniffer_tag+0x11c>)
 800190e:	f004 fc15 	bl	800613c <HAL_UART_Transmit>
				memset(rx_buffer, 0, RX_BUF_LEN);
 8001912:	e7d3      	b.n	80018bc <handle_sniffer_tag+0xa8>
				dwt_readrxdata(rx_buffer, (uint16_t) frame_len, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	a80e      	add	r0, sp, #56	@ 0x38
 8001918:	f001 fc92 	bl	8003240 <dwt_readrxdata>
 800191c:	e7c7      	b.n	80018ae <handle_sniffer_tag+0x9a>
 800191e:	bf00      	nop
 8001920:	08009428 	.word	0x08009428
 8001924:	2427d000 	.word	0x2427d000
 8001928:	24279080 	.word	0x24279080
 800192c:	080094b8 	.word	0x080094b8
 8001930:	20000200 	.word	0x20000200

08001934 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_MspInit+0x3c>)
{
 8001936:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193a:	490e      	ldr	r1, [pc, #56]	@ (8001974 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	619a      	str	r2, [r3, #24]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	f002 0201 	and.w	r2, r2, #1
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001952:	61da      	str	r2, [r3, #28]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195e:	684b      	ldr	r3, [r1, #4]
 8001960:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001968:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	b002      	add	sp, #8
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 800197c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a3c <HAL_SPI_MspInit+0xc4>)
 800197e:	6803      	ldr	r3, [r0, #0]
{
 8001980:	b088      	sub	sp, #32
  if(hspi->Instance==SPI1)
 8001982:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001988:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 800198c:	d004      	beq.n	8001998 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 800198e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <HAL_SPI_MspInit+0xc8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d029      	beq.n	80019e8 <HAL_SPI_MspInit+0x70>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001994:	b008      	add	sp, #32
 8001996:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800199a:	26a0      	movs	r6, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800199e:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019ae:	9200      	str	r2, [sp, #0]
 80019b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	4824      	ldr	r0, [pc, #144]	@ (8001a48 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	f042 0204 	orr.w	r2, r2, #4
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019be:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f003 f8a9 	bl	8004b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <HAL_SPI_MspInit+0xd0>)
 80019d8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019da:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f003 f8a0 	bl	8004b24 <HAL_GPIO_Init>
}
 80019e4:	b008      	add	sp, #32
 80019e6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019ea:	f44f 4620 	mov.w	r6, #40960	@ 0xa000
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ee:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019f0:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019f6:	61da      	str	r2, [r3, #28]
 80019f8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001a00:	9202      	str	r2, [sp, #8]
 8001a02:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	4811      	ldr	r0, [pc, #68]	@ (8001a4c <HAL_SPI_MspInit+0xd4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	f042 0208 	orr.w	r2, r2, #8
 8001a0c:	619a      	str	r2, [r3, #24]
 8001a0e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a10:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f003 f880 	bl	8004b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a28:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <HAL_SPI_MspInit+0xd4>)
 8001a2c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f003 f876 	bl	8004b24 <HAL_GPIO_Init>
}
 8001a38:	b008      	add	sp, #32
 8001a3a:	bdd0      	pop	{r4, r6, r7, pc}
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	40003800 	.word	0x40003800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d000      	beq.n	8001a5a <HAL_TIM_Base_MspInit+0xa>
 8001a58:	4770      	bx	lr

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a5c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001a60:	69d9      	ldr	r1, [r3, #28]
{
 8001a62:	b500      	push	{lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a64:	f041 0104 	orr.w	r1, r1, #4
 8001a68:	61d9      	str	r1, [r3, #28]
 8001a6a:	69db      	ldr	r3, [r3, #28]
{
 8001a6c:	b083      	sub	sp, #12
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a74:	201e      	movs	r0, #30
 8001a76:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a78:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a7a:	f002 ff83 	bl	8004984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a7e:	201e      	movs	r0, #30
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a80:	b003      	add	sp, #12
 8001a82:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a86:	f002 bfb9 	b.w	80049fc <HAL_NVIC_EnableIRQ>
 8001a8a:	bf00      	nop
 8001a8c:	40000800 	.word	0x40000800

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_UART_MspInit+0x80>)
 8001a96:	6802      	ldr	r2, [r0, #0]
{
 8001a98:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8001a9a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001aa0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8001aa4:	d001      	beq.n	8001aaa <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa6:	b006      	add	sp, #24
 8001aa8:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aaa:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001aae:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab0:	f44f 7600 	mov.w	r6, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ab8:	619a      	str	r2, [r3, #24]
 8001aba:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001abc:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	f042 0204 	orr.w	r2, r2, #4
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	4810      	ldr	r0, [pc, #64]	@ (8001b14 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ada:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f003 f81e 	bl	8004b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	a902      	add	r1, sp, #8
 8001af0:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f003 f814 	bl	8004b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001afc:	4622      	mov	r2, r4
 8001afe:	4621      	mov	r1, r4
 8001b00:	2025      	movs	r0, #37	@ 0x25
 8001b02:	f002 ff3f 	bl	8004984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b06:	2025      	movs	r0, #37	@ 0x25
 8001b08:	f002 ff78 	bl	80049fc <HAL_NVIC_EnableIRQ>
}
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bdd0      	pop	{r4, r6, r7, pc}
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40010800 	.word	0x40010800

08001b18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler>
 8001b1a:	bf00      	nop

08001b1c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <HardFault_Handler>
 8001b1e:	bf00      	nop

08001b20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler>
 8001b22:	bf00      	nop

08001b24 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <BusFault_Handler>
 8001b26:	bf00      	nop

08001b28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler>
 8001b2a:	bf00      	nop

08001b2c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f002 beee 	b.w	8004918 <HAL_IncTick>

08001b3c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b3c:	4801      	ldr	r0, [pc, #4]	@ (8001b44 <TIM4_IRQHandler+0x8>)
 8001b3e:	f004 b9af 	b.w	8005ea0 <HAL_TIM_IRQHandler>
 8001b42:	bf00      	nop
 8001b44:	20000248 	.word	0x20000248

08001b48 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b48:	4801      	ldr	r0, [pc, #4]	@ (8001b50 <USART1_IRQHandler+0x8>)
 8001b4a:	f004 bc33 	b.w	80063b4 <HAL_UART_IRQHandler>
 8001b4e:	bf00      	nop
 8001b50:	20000200 	.word	0x20000200

08001b54 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001b54:	2001      	movs	r0, #1
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5a:	f005 fcc9 	bl	80074f0 <__errno>
 8001b5e:	2216      	movs	r2, #22
 8001b60:	4603      	mov	r3, r0
  return -1;
}
 8001b62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  errno = EINVAL;
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bd08      	pop	{r3, pc}
 8001b6a:	bf00      	nop

08001b6c <_exit>:

void _exit (int status)
{
 8001b6c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001b6e:	f005 fcbf 	bl	80074f0 <__errno>
 8001b72:	2316      	movs	r3, #22
 8001b74:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0xa>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	1e16      	subs	r6, r2, #0
 8001b7c:	dd07      	ble.n	8001b8e <_read+0x16>
 8001b7e:	460c      	mov	r4, r1
 8001b80:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	42a5      	cmp	r5, r4
 8001b8c:	d1f9      	bne.n	8001b82 <_read+0xa>
  }

  return len;
}
 8001b8e:	4630      	mov	r0, r6
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
 8001b92:	bf00      	nop

08001b94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	1e16      	subs	r6, r2, #0
 8001b98:	dd07      	ble.n	8001baa <_write+0x16>
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001b9e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ba2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	42ac      	cmp	r4, r5
 8001ba8:	d1f9      	bne.n	8001b9e <_write+0xa>
  }
  return len;
}
 8001baa:	4630      	mov	r0, r6
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	bf00      	nop

08001bb0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001bbc:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001bbe:	604b      	str	r3, [r1, #4]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001bc8:	2000      	movs	r0, #0
 8001bca:	4770      	bx	lr

08001bcc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <_sbrk+0x38>)
{
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <_sbrk+0x3c>)
 8001bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8001c0c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001bd6:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001bda:	b120      	cbz	r0, 8001be6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bdc:	4403      	add	r3, r0
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d807      	bhi.n	8001bf2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001be2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001be4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001be6:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <_sbrk+0x44>)
 8001be8:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4403      	add	r3, r0
 8001bec:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001bee:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001bf0:	d9f7      	bls.n	8001be2 <_sbrk+0x16>
    errno = ENOMEM;
 8001bf2:	f005 fc7d 	bl	80074f0 <__errno>
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4603      	mov	r3, r0
    return (void *)-1;
 8001bfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	bf00      	nop
 8001c04:	20000480 	.word	0x20000480
 8001c08:	20005000 	.word	0x20005000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200005d8 	.word	0x200005d8

08001c14 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <dwt_xfer3000.constprop.2>:
 * @param buffer        - pointer to buffer containing the 'length' bytes to be written
 * @param rw            - DW3000_SPI_WR_BIT/DW3000_SPI_RD_BIT
 *
 * no return value
 */
void dwt_xfer3000(const uint32_t regFileID, //0x0, 0x04-0x7F ; 0x10000, 0x10004, 0x10008-0x1007F; 0x20000 etc
 8001c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c1c:	4614      	mov	r4, r2
	 Sleep(10);
	 */
	uint8_t header[2];           // Buffer to compose header in
	uint16_t cnt = 0;             // Counter for length of a header

	uint16_t reg_file = 0x1F & ((regFileID + indx) >> 16);
 8001c1e:	4401      	add	r1, r0
	uint16_t reg_offset = 0x7F & (regFileID + indx);

	assert(reg_file <= 0x1F);
	assert(reg_offset <= 0x7F);
	assert(length < 0x3100);
 8001c20:	f5b4 5f44 	cmp.w	r4, #12544	@ 0x3100
void dwt_xfer3000(const uint32_t regFileID, //0x0, 0x04-0x7F ; 0x10000, 0x10004, 0x10008-0x1007F; 0x20000 etc
 8001c24:	b083      	sub	sp, #12
	uint16_t reg_file = 0x1F & ((regFileID + indx) >> 16);
 8001c26:	f3c1 4204 	ubfx	r2, r1, #16, #5
	assert(length < 0x3100);
 8001c2a:	d26e      	bcs.n	8001d0a <dwt_xfer3000.constprop.2+0xf2>
					|| mode == DW3000_SPI_AND_OR_16
					|| mode == DW3000_SPI_AND_OR_32);

	// Write message header selecting WRITE operation and addresses as appropriate
	uint16_t addr;
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8001c2c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8001c30:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8001c34:	461d      	mov	r5, r3
 8001c36:	ea4c 2342 	orr.w	r3, ip, r2, lsl #9

	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001c3a:	469c      	mov	ip, r3
 8001c3c:	ba5b      	rev16	r3, r3
 8001c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001c42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR

	if (/*reg_offset == 0 && */length == 0) { /* Fast Access Commands (FAC)
 8001c46:	b33c      	cbz	r4, 8001c98 <dwt_xfer3000.constprop.2+0x80>
		assert(mode == DW3000_SPI_WR_BIT);

		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
				| DW3000_SPI_FAC);
		cnt = 1;
	} else if (reg_offset == 0 /*&& length > 0*/
 8001c48:	4606      	mov	r6, r0
 8001c4a:	b361      	cbz	r1, 8001ca6 <dwt_xfer3000.constprop.2+0x8e>
		cnt = 1;
	} else { /* Extended Address Mode with Read/Write support (EAMRW)
	 * b[0] = bit_7 is R/W operation, bit_6 one = ExtendedAddressMode;
	 * b[1] = addr<<2 | (mode&0x3)
	 */
		header[0] |= DW3000_SPI_EAMRW;
 8001c4c:	f04f 0802 	mov.w	r8, #2
		cnt = 2;
 8001c50:	46c1      	mov	r9, r8
		header[0] |= DW3000_SPI_EAMRW;
 8001c52:	f04c 0c40 	orr.w	ip, ip, #64	@ 0x40
 8001c56:	f88d c004 	strb.w	ip, [sp, #4]
}

HAL_StatusTypeDef read(uint16_t headerLength, const uint8_t *headerBuffer,
		uint32_t readlength, uint8_t *readBuffer) {
	HAL_StatusTypeDef res;
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8001c5a:	4f2f      	ldr	r7, [pc, #188]	@ (8001d18 <dwt_xfer3000.constprop.2+0x100>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	8919      	ldrh	r1, [r3, #8]
 8001c62:	6858      	ldr	r0, [r3, #4]
 8001c64:	f003 f87a 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	a901      	add	r1, sp, #4
 8001c70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c74:	f003 fc80 	bl	8005578 <HAL_SPI_Transmit>
			0xffff);
	if (res == HAL_OK)
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d03d      	beq.n	8001cf8 <dwt_xfer3000.constprop.2+0xe0>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001c7c:	683b      	ldr	r3, [r7, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001c7e:	4f27      	ldr	r7, [pc, #156]	@ (8001d1c <dwt_xfer3000.constprop.2+0x104>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001c80:	8919      	ldrh	r1, [r3, #8]
 8001c82:	6858      	ldr	r0, [r3, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f003 f869 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7d1b      	ldrb	r3, [r3, #20]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d00d      	beq.n	8001cae <dwt_xfer3000.constprop.2+0x96>
} // end dwt_xfer3000()
 8001c92:	b003      	add	sp, #12
 8001c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		assert(mode == DW3000_SPI_WR_BIT);
 8001c98:	f240 216f 	movw	r1, #623	@ 0x26f
 8001c9c:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <dwt_xfer3000.constprop.2+0x108>)
 8001c9e:	4a21      	ldr	r2, [pc, #132]	@ (8001d24 <dwt_xfer3000.constprop.2+0x10c>)
 8001ca0:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <dwt_xfer3000.constprop.2+0x110>)
 8001ca2:	f004 fd31 	bl	8006708 <__assert_func>
 8001ca6:	f04f 0801 	mov.w	r8, #1
		cnt = 1;
 8001caa:	46c1      	mov	r9, r8
 8001cac:	e7d5      	b.n	8001c5a <dwt_xfer3000.constprop.2+0x42>
				&& (regFileID != SPICRC_CFG_ID)) {
 8001cae:	2e18      	cmp	r6, #24
 8001cb0:	d0ef      	beq.n	8001c92 <dwt_xfer3000.constprop.2+0x7a>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <dwt_xfer3000.constprop.2+0x114>)
 8001cb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
	for (byte = 0; byte < len; ++byte) {
 8001cb8:	f1b8 0f02 	cmp.w	r8, #2
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001cbc:	5cd6      	ldrb	r6, [r2, r3]
	for (byte = 0; byte < len; ++byte) {
 8001cbe:	d103      	bne.n	8001cc8 <dwt_xfer3000.constprop.2+0xb0>
		data = byteArray[byte] ^ crcRemainderInit;
 8001cc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001cc4:	4073      	eors	r3, r6
 8001cc6:	5cd6      	ldrb	r6, [r2, r3]
	for (byte = 0; byte < len; ++byte) {
 8001cc8:	442c      	add	r4, r5
		data = byteArray[byte] ^ crcRemainderInit;
 8001cca:	f815 3b01 	ldrb.w	r3, [r5], #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001cce:	4073      	eors	r3, r6
	for (byte = 0; byte < len; ++byte) {
 8001cd0:	42a5      	cmp	r5, r4
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001cd2:	5cd6      	ldrb	r6, [r2, r3]
	for (byte = 0; byte < len; ++byte) {
 8001cd4:	d1f9      	bne.n	8001cca <dwt_xfer3000.constprop.2+0xb2>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001cd6:	f10d 0303 	add.w	r3, sp, #3
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2018      	movs	r0, #24
 8001ce0:	f7ff ff9a 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8001ce4:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (crc8 != dwcrc8) {
 8001ce8:	429e      	cmp	r6, r3
 8001cea:	d0d2      	beq.n	8001c92 <dwt_xfer3000.constprop.2+0x7a>
				if (pdw3000local->cbSPIRDErr != NULL)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ce      	beq.n	8001c92 <dwt_xfer3000.constprop.2+0x7a>
					pdw3000local->cbSPIRDErr();
 8001cf4:	4798      	blx	r3
} // end dwt_xfer3000()
 8001cf6:	e7cc      	b.n	8001c92 <dwt_xfer3000.constprop.2+0x7a>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d04:	f003 fe7a 	bl	80059fc <HAL_SPI_Receive>
 8001d08:	e7b8      	b.n	8001c7c <dwt_xfer3000.constprop.2+0x64>
	assert(length < 0x3100);
 8001d0a:	f240 215d 	movw	r1, #605	@ 0x25d
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <dwt_xfer3000.constprop.2+0x118>)
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <dwt_xfer3000.constprop.2+0x10c>)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <dwt_xfer3000.constprop.2+0x110>)
 8001d14:	f004 fcf8 	bl	8006708 <__assert_func>
 8001d18:	20000444 	.word	0x20000444
 8001d1c:	20000440 	.word	0x20000440
 8001d20:	08009510 	.word	0x08009510
 8001d24:	08009548 	.word	0x08009548
 8001d28:	080094f4 	.word	0x080094f4
 8001d2c:	20000340 	.word	0x20000340
 8001d30:	080094e4 	.word	0x080094e4

08001d34 <dwt_read32bitoffsetreg.constprop.0>:
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 8001d36:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8001d3a:	008b      	lsls	r3, r1, #2
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001d3c:	4604      	mov	r4, r0
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8001d3e:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8001d42:	ea43 2240 	orr.w	r2, r3, r0, lsl #9
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001d46:	4613      	mov	r3, r2
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001d48:	b085      	sub	sp, #20
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001d4a:	ba52      	rev16	r2, r2
 8001d4c:	f8ad 2008 	strh.w	r2, [sp, #8]
	} else if (reg_offset == 0 /*&& length > 0*/
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d032      	beq.n	8001dba <dwt_read32bitoffsetreg.constprop.0+0x86>
		header[0] |= DW3000_SPI_EAMRW;
 8001d54:	2602      	movs	r6, #2
		cnt = 2;
 8001d56:	4637      	mov	r7, r6
 8001d58:	0a1b      	lsrs	r3, r3, #8
		header[0] |= DW3000_SPI_EAMRW;
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5e:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8001d62:	4d32      	ldr	r5, [pc, #200]	@ (8001e2c <dwt_read32bitoffsetreg.constprop.0+0xf8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	682b      	ldr	r3, [r5, #0]
 8001d68:	8919      	ldrh	r1, [r3, #8]
 8001d6a:	6858      	ldr	r0, [r3, #4]
 8001d6c:	f002 fff6 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	463a      	mov	r2, r7
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	a902      	add	r1, sp, #8
 8001d78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d7c:	f003 fbfc 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d04a      	beq.n	8001e1a <dwt_read32bitoffsetreg.constprop.0+0xe6>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001d84:	682b      	ldr	r3, [r5, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001d86:	4d2a      	ldr	r5, [pc, #168]	@ (8001e30 <dwt_read32bitoffsetreg.constprop.0+0xfc>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001d88:	8919      	ldrh	r1, [r3, #8]
 8001d8a:	6858      	ldr	r0, [r3, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f002 ffe5 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	7d1b      	ldrb	r3, [r3, #20]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d012      	beq.n	8001dc0 <dwt_read32bitoffsetreg.constprop.0+0x8c>
		regval = (regval << 8) + buffer[j];
 8001d9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8001d9e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001da2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001da6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001daa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001dae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
} // end dwt_read32bitoffsetreg()
 8001db2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001db6:	b005      	add	sp, #20
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dba:	2601      	movs	r6, #1
		cnt = 1;
 8001dbc:	4637      	mov	r7, r6
 8001dbe:	e7d0      	b.n	8001d62 <dwt_read32bitoffsetreg.constprop.0+0x2e>
				&& (regFileID != SPICRC_CFG_ID)) {
 8001dc0:	2c18      	cmp	r4, #24
 8001dc2:	d0ea      	beq.n	8001d9a <dwt_read32bitoffsetreg.constprop.0+0x66>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001dc4:	481b      	ldr	r0, [pc, #108]	@ (8001e34 <dwt_read32bitoffsetreg.constprop.0+0x100>)
 8001dc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	for (byte = 0; byte < len; ++byte) {
 8001dca:	2e02      	cmp	r6, #2
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001dcc:	5cc3      	ldrb	r3, [r0, r3]
	for (byte = 0; byte < len; ++byte) {
 8001dce:	d103      	bne.n	8001dd8 <dwt_read32bitoffsetreg.constprop.0+0xa4>
		data = byteArray[byte] ^ crcRemainderInit;
 8001dd0:	f89d 2009 	ldrb.w	r2, [sp, #9]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001dd4:	4053      	eors	r3, r2
 8001dd6:	5cc3      	ldrb	r3, [r0, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8001dd8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001ddc:	f89d 200d 	ldrb.w	r2, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001de0:	404b      	eors	r3, r1
 8001de2:	5cc3      	ldrb	r3, [r0, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8001de4:	f89d 400f 	ldrb.w	r4, [sp, #15]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001de8:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8001dea:	5cc3      	ldrb	r3, [r0, r3]
 8001dec:	f89d 200e 	ldrb.w	r2, [sp, #14]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001df0:	2100      	movs	r1, #0
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001df2:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8001df4:	5cc3      	ldrb	r3, [r0, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001df6:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001df8:	405c      	eors	r4, r3
 8001dfa:	5d04      	ldrb	r4, [r0, r4]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001dfc:	f10d 0307 	add.w	r3, sp, #7
 8001e00:	2018      	movs	r0, #24
 8001e02:	f7ff ff09 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8001e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 8001e0a:	429c      	cmp	r4, r3
 8001e0c:	d0c5      	beq.n	8001d9a <dwt_read32bitoffsetreg.constprop.0+0x66>
				if (pdw3000local->cbSPIRDErr != NULL)
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0c1      	beq.n	8001d9a <dwt_read32bitoffsetreg.constprop.0+0x66>
					pdw3000local->cbSPIRDErr();
 8001e16:	4798      	blx	r3
 8001e18:	e7bf      	b.n	8001d9a <dwt_read32bitoffsetreg.constprop.0+0x66>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8001e1a:	682a      	ldr	r2, [r5, #0]
 8001e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e20:	6810      	ldr	r0, [r2, #0]
 8001e22:	a903      	add	r1, sp, #12
 8001e24:	2204      	movs	r2, #4
 8001e26:	f003 fde9 	bl	80059fc <HAL_SPI_Receive>
 8001e2a:	e7ab      	b.n	8001d84 <dwt_read32bitoffsetreg.constprop.0+0x50>
 8001e2c:	20000444 	.word	0x20000444
 8001e30:	20000440 	.word	0x20000440
 8001e34:	20000340 	.word	0x20000340

08001e38 <dwt_read32bitoffsetreg>:
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 8001e3a:	4401      	add	r1, r0
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001e3c:	4604      	mov	r4, r0
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 8001e3e:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8001e42:	0083      	lsls	r3, r0, #2
 8001e44:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8001e48:	ea43 2241 	orr.w	r2, r3, r1, lsl #9
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001e4c:	4613      	mov	r3, r2
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8001e4e:	b085      	sub	sp, #20
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8001e50:	ba52      	rev16	r2, r2
 8001e52:	f8ad 2008 	strh.w	r2, [sp, #8]
	} else if (reg_offset == 0 /*&& length > 0*/
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d032      	beq.n	8001ec0 <dwt_read32bitoffsetreg+0x88>
		header[0] |= DW3000_SPI_EAMRW;
 8001e5a:	2602      	movs	r6, #2
		cnt = 2;
 8001e5c:	4637      	mov	r7, r6
 8001e5e:	0a1b      	lsrs	r3, r3, #8
		header[0] |= DW3000_SPI_EAMRW;
 8001e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e64:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8001e68:	4d32      	ldr	r5, [pc, #200]	@ (8001f34 <dwt_read32bitoffsetreg+0xfc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	8919      	ldrh	r1, [r3, #8]
 8001e70:	6858      	ldr	r0, [r3, #4]
 8001e72:	f002 ff73 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8001e76:	682b      	ldr	r3, [r5, #0]
 8001e78:	463a      	mov	r2, r7
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	a902      	add	r1, sp, #8
 8001e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e82:	f003 fb79 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d04a      	beq.n	8001f20 <dwt_read32bitoffsetreg+0xe8>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001e8a:	682b      	ldr	r3, [r5, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001e8c:	4d2a      	ldr	r5, [pc, #168]	@ (8001f38 <dwt_read32bitoffsetreg+0x100>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8001e8e:	8919      	ldrh	r1, [r3, #8]
 8001e90:	6858      	ldr	r0, [r3, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f002 ff62 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	7d1b      	ldrb	r3, [r3, #20]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d012      	beq.n	8001ec6 <dwt_read32bitoffsetreg+0x8e>
		regval = (regval << 8) + buffer[j];
 8001ea0:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8001ea4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8001ea8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001eac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001eb0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8001eb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
} // end dwt_read32bitoffsetreg()
 8001eb8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001ebc:	b005      	add	sp, #20
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec0:	2601      	movs	r6, #1
		cnt = 1;
 8001ec2:	4637      	mov	r7, r6
 8001ec4:	e7d0      	b.n	8001e68 <dwt_read32bitoffsetreg+0x30>
				&& (regFileID != SPICRC_CFG_ID)) {
 8001ec6:	2c18      	cmp	r4, #24
 8001ec8:	d0ea      	beq.n	8001ea0 <dwt_read32bitoffsetreg+0x68>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001eca:	481c      	ldr	r0, [pc, #112]	@ (8001f3c <dwt_read32bitoffsetreg+0x104>)
 8001ecc:	f89d 3008 	ldrb.w	r3, [sp, #8]
	for (byte = 0; byte < len; ++byte) {
 8001ed0:	2e02      	cmp	r6, #2
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001ed2:	5cc3      	ldrb	r3, [r0, r3]
	for (byte = 0; byte < len; ++byte) {
 8001ed4:	d103      	bne.n	8001ede <dwt_read32bitoffsetreg+0xa6>
		data = byteArray[byte] ^ crcRemainderInit;
 8001ed6:	f89d 2009 	ldrb.w	r2, [sp, #9]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001eda:	4053      	eors	r3, r2
 8001edc:	5cc3      	ldrb	r3, [r0, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8001ede:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001ee2:	f89d 200d 	ldrb.w	r2, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001ee6:	404b      	eors	r3, r1
 8001ee8:	5cc3      	ldrb	r3, [r0, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8001eea:	f89d 400f 	ldrb.w	r4, [sp, #15]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001eee:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8001ef0:	5cc3      	ldrb	r3, [r0, r3]
 8001ef2:	f89d 200e 	ldrb.w	r2, [sp, #14]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001ef6:	2100      	movs	r1, #0
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001ef8:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8001efa:	5cc3      	ldrb	r3, [r0, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001efc:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8001efe:	405c      	eors	r4, r3
 8001f00:	5d04      	ldrb	r4, [r0, r4]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001f02:	f10d 0307 	add.w	r3, sp, #7
 8001f06:	2018      	movs	r0, #24
 8001f08:	f7ff fe86 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8001f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 8001f10:	429c      	cmp	r4, r3
 8001f12:	d0c5      	beq.n	8001ea0 <dwt_read32bitoffsetreg+0x68>
				if (pdw3000local->cbSPIRDErr != NULL)
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0c1      	beq.n	8001ea0 <dwt_read32bitoffsetreg+0x68>
					pdw3000local->cbSPIRDErr();
 8001f1c:	4798      	blx	r3
 8001f1e:	e7bf      	b.n	8001ea0 <dwt_read32bitoffsetreg+0x68>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8001f20:	682a      	ldr	r2, [r5, #0]
 8001f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f26:	6810      	ldr	r0, [r2, #0]
 8001f28:	a903      	add	r1, sp, #12
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	f003 fd66 	bl	80059fc <HAL_SPI_Receive>
 8001f30:	e7ab      	b.n	8001e8a <dwt_read32bitoffsetreg+0x52>
 8001f32:	bf00      	nop
 8001f34:	20000444 	.word	0x20000444
 8001f38:	20000440 	.word	0x20000440
 8001f3c:	20000340 	.word	0x20000340

08001f40 <dwt_readclockoffset>:
int16_t dwt_readclockoffset(void) {
 8001f40:	b500      	push	{lr}
	switch (pdw3000local->dblbuffon) //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8001f42:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <dwt_readclockoffset+0x60>)
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001f44:	2202      	movs	r2, #2
	switch (pdw3000local->dblbuffon) //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8001f46:	681b      	ldr	r3, [r3, #0]
int16_t dwt_readclockoffset(void) {
 8001f48:	b083      	sub	sp, #12
	switch (pdw3000local->dblbuffon) //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 8001f4a:	7bdb      	ldrb	r3, [r3, #15]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d013      	beq.n	8001f78 <dwt_readclockoffset+0x38>
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d11b      	bne.n	8001f8c <dwt_readclockoffset+0x4c>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001f54:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 8001f58:	210c      	movs	r1, #12
 8001f5a:	ab01      	add	r3, sp, #4
 8001f5c:	f7ff fe5c 	bl	8001c18 <dwt_xfer3000.constprop.2>
	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 8001f60:	f8bd 0004 	ldrh.w	r0, [sp, #4]
		regval =
 8001f64:	f3c0 000c 	ubfx	r0, r0, #0, #13
	if (regval & B11_SIGN_EXTEND_TEST) {
 8001f68:	04c3      	lsls	r3, r0, #19
		regval |= B11_SIGN_EXTEND_MASK; // sign extend bit #12 to the whole short
 8001f6a:	bf48      	it	mi
 8001f6c:	f440 4060 	orrmi.w	r0, r0, #57344	@ 0xe000
}
 8001f70:	b200      	sxth	r0, r0
 8001f72:	b003      	add	sp, #12
 8001f74:	f85d fb04 	ldr.w	pc, [sp], #4
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001f78:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <dwt_readclockoffset+0x64>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	ab01      	add	r3, sp, #4
 8001f7e:	f7ff fe4b 	bl	8001c18 <dwt_xfer3000.constprop.2>
	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 8001f82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
		regval = dwt_read16bitoffsetreg(BUF0_CIA_DIAG_0,
 8001f86:	f3c0 000c 	ubfx	r0, r0, #0, #13
		break;
 8001f8a:	e7ed      	b.n	8001f68 <dwt_readclockoffset+0x28>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001f8c:	4806      	ldr	r0, [pc, #24]	@ (8001fa8 <dwt_readclockoffset+0x68>)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	ab01      	add	r3, sp, #4
 8001f92:	f7ff fe41 	bl	8001c18 <dwt_xfer3000.constprop.2>
	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 8001f96:	f8bd 0004 	ldrh.w	r0, [sp, #4]
		regval = dwt_read16bitoffsetreg(CIA_DIAG_0_ID,
 8001f9a:	f3c0 000c 	ubfx	r0, r0, #0, #13
		break;
 8001f9e:	e7e3      	b.n	8001f68 <dwt_readclockoffset+0x28>
 8001fa0:	20000440 	.word	0x20000440
 8001fa4:	0018000c 	.word	0x0018000c
 8001fa8:	000c0020 	.word	0x000c0020

08001fac <write>:
		uint32_t bodylength, uint8_t *bodyBuffer) {
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t buf[100] = { 0 };
 8001fb0:	2700      	movs	r7, #0
		uint32_t bodylength, uint8_t *bodyBuffer) {
 8001fb2:	460e      	mov	r6, r1
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b09a      	sub	sp, #104	@ 0x68
	uint8_t buf[100] = { 0 };
 8001fb8:	4639      	mov	r1, r7
		uint32_t bodylength, uint8_t *bodyBuffer) {
 8001fba:	4615      	mov	r5, r2
	uint8_t buf[100] = { 0 };
 8001fbc:	a802      	add	r0, sp, #8
 8001fbe:	2260      	movs	r2, #96	@ 0x60
 8001fc0:	9701      	str	r7, [sp, #4]
		buf[i] = headerBuffer[i];
 8001fc2:	f10d 0804 	add.w	r8, sp, #4
		uint32_t bodylength, uint8_t *bodyBuffer) {
 8001fc6:	4637      	mov	r7, r6
 8001fc8:	461e      	mov	r6, r3
	uint8_t buf[100] = { 0 };
 8001fca:	f005 fa2e 	bl	800742a <memset>
	for (i = 0; i < headerLength; i++)
 8001fce:	b124      	cbz	r4, 8001fda <write+0x2e>
		buf[i] = headerBuffer[i];
 8001fd0:	4639      	mov	r1, r7
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	4640      	mov	r0, r8
 8001fd6:	f005 fac6 	bl	8007566 <memcpy>
	for (j = 0; j < bodylength; j++)
 8001fda:	b13d      	cbz	r5, 8001fec <write+0x40>
		buf[i + j] = bodyBuffer[j];
 8001fdc:	462a      	mov	r2, r5
 8001fde:	eb08 0004 	add.w	r0, r8, r4
 8001fe2:	4631      	mov	r1, r6
 8001fe4:	f005 fabf 	bl	8007566 <memcpy>
	res = HAL_SPI_Transmit(hw->spi, buf, i + j, 0xffff);
 8001fe8:	4425      	add	r5, r4
 8001fea:	b2ac      	uxth	r4, r5
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8001fec:	4d0c      	ldr	r5, [pc, #48]	@ (8002020 <write+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	8919      	ldrh	r1, [r3, #8]
 8001ff4:	6858      	ldr	r0, [r3, #4]
 8001ff6:	f002 feb1 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, buf, i + j, 0xffff);
 8001ffa:	6828      	ldr	r0, [r5, #0]
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	4641      	mov	r1, r8
 8002000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002004:	6800      	ldr	r0, [r0, #0]
 8002006:	f003 fab7 	bl	8005578 <HAL_SPI_Transmit>
 800200a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	6858      	ldr	r0, [r3, #4]
 8002012:	8919      	ldrh	r1, [r3, #8]
 8002014:	f002 fea2 	bl	8004d5c <HAL_GPIO_WritePin>
}
 8002018:	4620      	mov	r0, r4
 800201a:	b01a      	add	sp, #104	@ 0x68
 800201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002020:	20000444 	.word	0x20000444

08002024 <dwt_xfer3000.constprop.1>:
void dwt_xfer3000(const uint32_t regFileID, //0x0, 0x04-0x7F ; 0x10000, 0x10004, 0x10008-0x1007F; 0x20000 etc
 8002024:	b510      	push	{r4, lr}
	uint16_t reg_file = 0x1F & ((regFileID + indx) >> 16);
 8002026:	eb01 0c00 	add.w	ip, r1, r0
	assert(length < 0x3100);
 800202a:	f5b2 5f44 	cmp.w	r2, #12544	@ 0x3100
void dwt_xfer3000(const uint32_t regFileID, //0x0, 0x04-0x7F ; 0x10000, 0x10004, 0x10008-0x1007F; 0x20000 etc
 800202e:	b082      	sub	sp, #8
	uint16_t reg_file = 0x1F & ((regFileID + indx) >> 16);
 8002030:	f3cc 4104 	ubfx	r1, ip, #16, #5
	assert(length < 0x3100);
 8002034:	d22a      	bcs.n	800208c <dwt_xfer3000.constprop.1+0x68>
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8002036:	f00c 047f 	and.w	r4, ip, #127	@ 0x7f
 800203a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800203e:	ea4c 2141 	orr.w	r1, ip, r1, lsl #9
 8002042:	0a09      	lsrs	r1, r1, #8
 8002044:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8002048:	f88d c005 	strb.w	ip, [sp, #5]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800204c:	f88d 1004 	strb.w	r1, [sp, #4]
	if (/*reg_offset == 0 && */length == 0) { /* Fast Access Commands (FAC)
 8002050:	b13a      	cbz	r2, 8002062 <dwt_xfer3000.constprop.1+0x3e>
	} else if (reg_offset == 0 /*&& length > 0*/
 8002052:	b964      	cbnz	r4, 800206e <dwt_xfer3000.constprop.1+0x4a>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002054:	4911      	ldr	r1, [pc, #68]	@ (800209c <dwt_xfer3000.constprop.1+0x78>)
		cnt = 1;
 8002056:	2001      	movs	r0, #1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002058:	6809      	ldr	r1, [r1, #0]
 800205a:	7d09      	ldrb	r1, [r1, #20]
 800205c:	b189      	cbz	r1, 8002082 <dwt_xfer3000.constprop.1+0x5e>
} // end dwt_xfer3000()
 800205e:	b002      	add	sp, #8
 8002060:	bd10      	pop	{r4, pc}
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8002062:	0041      	lsls	r1, r0, #1
 8002064:	f061 017e 	orn	r1, r1, #126	@ 0x7e
 8002068:	f88d 1004 	strb.w	r1, [sp, #4]
		cnt = 1;
 800206c:	e7f2      	b.n	8002054 <dwt_xfer3000.constprop.1+0x30>
		header[0] |= DW3000_SPI_EAMRW;
 800206e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8002072:	f88d 1004 	strb.w	r1, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002076:	4909      	ldr	r1, [pc, #36]	@ (800209c <dwt_xfer3000.constprop.1+0x78>)
		cnt = 2;
 8002078:	2002      	movs	r0, #2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800207a:	6809      	ldr	r1, [r1, #0]
 800207c:	7d09      	ldrb	r1, [r1, #20]
 800207e:	2900      	cmp	r1, #0
 8002080:	d1ed      	bne.n	800205e <dwt_xfer3000.constprop.1+0x3a>
			write(cnt, header, length, buffer);
 8002082:	a901      	add	r1, sp, #4
 8002084:	f7ff ff92 	bl	8001fac <write>
} // end dwt_xfer3000()
 8002088:	b002      	add	sp, #8
 800208a:	bd10      	pop	{r4, pc}
	assert(length < 0x3100);
 800208c:	f240 215d 	movw	r1, #605	@ 0x25d
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <dwt_xfer3000.constprop.1+0x7c>)
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <dwt_xfer3000.constprop.1+0x80>)
 8002094:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <dwt_xfer3000.constprop.1+0x84>)
 8002096:	f004 fb37 	bl	8006708 <__assert_func>
 800209a:	bf00      	nop
 800209c:	20000440 	.word	0x20000440
 80020a0:	080094e4 	.word	0x080094e4
 80020a4:	08009548 	.word	0x08009548
 80020a8:	080094f4 	.word	0x080094f4

080020ac <dwt_modify32bitoffsetreg.constprop.0>:
void dwt_modify32bitoffsetreg(const uint32_t regFileID,
 80020ac:	b510      	push	{r4, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <dwt_modify32bitoffsetreg.constprop.0+0x48>)
void dwt_modify32bitoffsetreg(const uint32_t regFileID,
 80020b0:	b084      	sub	sp, #16
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80020b2:	681b      	ldr	r3, [r3, #0]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80020b4:	e9cd 1202 	strd	r1, r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80020b8:	7d1c      	ldrb	r4, [r3, #20]
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 80020ba:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f3c0 4004 	ubfx	r0, r0, #16, #5
 80020c4:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80020c8:	0a1a      	lsrs	r2, r3, #8
		header[0] |= DW3000_SPI_EAMRW;
 80020ca:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 80020ce:	f043 0303 	orr.w	r3, r3, #3
 80020d2:	f88d 3005 	strb.w	r3, [sp, #5]
		header[0] |= DW3000_SPI_EAMRW;
 80020d6:	f88d 2004 	strb.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80020da:	b10c      	cbz	r4, 80020e0 <dwt_modify32bitoffsetreg.constprop.0+0x34>
}
 80020dc:	b004      	add	sp, #16
 80020de:	bd10      	pop	{r4, pc}
			write(cnt, header, length, buffer);
 80020e0:	2208      	movs	r2, #8
 80020e2:	a901      	add	r1, sp, #4
 80020e4:	eb0d 0302 	add.w	r3, sp, r2
 80020e8:	2002      	movs	r0, #2
 80020ea:	f7ff ff5f 	bl	8001fac <write>
}
 80020ee:	b004      	add	sp, #16
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	bf00      	nop
 80020f4:	20000440 	.word	0x20000440

080020f8 <dwt_setpreambledetecttimeout>:
		header[0] |= DW3000_SPI_EAMRW;
 80020f8:	f241 02cc 	movw	r2, #4300	@ 0x10cc
void dwt_setpreambledetecttimeout(uint16_t timeout) {
 80020fc:	b500      	push	{lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <dwt_setpreambledetecttimeout+0x30>)
void dwt_setpreambledetecttimeout(uint16_t timeout) {
 8002100:	b083      	sub	sp, #12
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002102:	681b      	ldr	r3, [r3, #0]
	buffer[0] = (uint8_t) regval;
 8002104:	f8ad 0000 	strh.w	r0, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002108:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 800210a:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800210e:	b113      	cbz	r3, 8002116 <dwt_setpreambledetecttimeout+0x1e>
}
 8002110:	b003      	add	sp, #12
 8002112:	f85d fb04 	ldr.w	pc, [sp], #4
			write(cnt, header, length, buffer);
 8002116:	2202      	movs	r2, #2
 8002118:	466b      	mov	r3, sp
 800211a:	4610      	mov	r0, r2
 800211c:	a901      	add	r1, sp, #4
 800211e:	f7ff ff45 	bl	8001fac <write>
}
 8002122:	b003      	add	sp, #12
 8002124:	f85d fb04 	ldr.w	pc, [sp], #4
 8002128:	20000440 	.word	0x20000440

0800212c <dwt_setdelayedtrxtime>:
		header[0] |= DW3000_SPI_EAMRW;
 800212c:	f24b 02c0 	movw	r2, #45248	@ 0xb0c0
void dwt_setdelayedtrxtime(uint32_t starttime) {
 8002130:	b500      	push	{lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <dwt_setdelayedtrxtime+0x30>)
void dwt_setdelayedtrxtime(uint32_t starttime) {
 8002134:	b083      	sub	sp, #12
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002136:	681b      	ldr	r3, [r3, #0]
		buffer[j] = (uint8_t) regval;
 8002138:	9001      	str	r0, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800213a:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 800213c:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002140:	b113      	cbz	r3, 8002148 <dwt_setdelayedtrxtime+0x1c>
} // end dwt_setdelayedtrxtime()
 8002142:	b003      	add	sp, #12
 8002144:	f85d fb04 	ldr.w	pc, [sp], #4
			write(cnt, header, length, buffer);
 8002148:	2204      	movs	r2, #4
 800214a:	4669      	mov	r1, sp
 800214c:	eb0d 0302 	add.w	r3, sp, r2
 8002150:	2002      	movs	r0, #2
 8002152:	f7ff ff2b 	bl	8001fac <write>
} // end dwt_setdelayedtrxtime()
 8002156:	b003      	add	sp, #12
 8002158:	f85d fb04 	ldr.w	pc, [sp], #4
 800215c:	20000440 	.word	0x20000440

08002160 <dwt_otp_read>:
uint32_t dwt_otp_read(uint16_t address) {
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffer[0] = (uint8_t) regval;
 8002162:	2201      	movs	r2, #1
		header[0] |= DW3000_SPI_EAMRW;
 8002164:	f242 07d6 	movw	r7, #8406	@ 0x20d6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002168:	4d49      	ldr	r5, [pc, #292]	@ (8002290 <dwt_otp_read+0x130>)
uint32_t dwt_otp_read(uint16_t address) {
 800216a:	b085      	sub	sp, #20
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800216c:	682b      	ldr	r3, [r5, #0]
	buffer[0] = (uint8_t) regval;
 800216e:	f8ad 2008 	strh.w	r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8002172:	f8ad 700c 	strh.w	r7, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002176:	7d1b      	ldrb	r3, [r3, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d061      	beq.n	8002240 <dwt_otp_read+0xe0>
 800217c:	ae02      	add	r6, sp, #8
		header[0] |= DW3000_SPI_EAMRW;
 800217e:	f244 0156 	movw	r1, #16470	@ 0x4056
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002182:	4c44      	ldr	r4, [pc, #272]	@ (8002294 <dwt_otp_read+0x134>)
		header[0] |= DW3000_SPI_EAMRW;
 8002184:	f8ad 1008 	strh.w	r1, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	8919      	ldrh	r1, [r3, #8]
 800218e:	6858      	ldr	r0, [r3, #4]
 8002190:	f002 fde4 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800219a:	6810      	ldr	r0, [r2, #0]
 800219c:	4631      	mov	r1, r6
 800219e:	2202      	movs	r2, #2
 80021a0:	f003 f9ea 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d042      	beq.n	800222e <dwt_otp_read+0xce>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	8919      	ldrh	r1, [r3, #8]
 80021ae:	6858      	ldr	r0, [r3, #4]
 80021b0:	f002 fdd4 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	7d1b      	ldrb	r3, [r3, #20]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d00f      	beq.n	80021dc <dwt_otp_read+0x7c>
		regval = (regval << 8) + buffer[j];
 80021bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80021c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80021c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80021c8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80021cc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80021d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 80021d4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80021d8:	b005      	add	sp, #20
 80021da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80021dc:	492e      	ldr	r1, [pc, #184]	@ (8002298 <dwt_otp_read+0x138>)
 80021de:	f89d 3008 	ldrb.w	r3, [sp, #8]
		data = byteArray[byte] ^ crcRemainderInit;
 80021e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80021ec:	4043      	eors	r3, r0
		data = byteArray[byte] ^ crcRemainderInit;
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f89d 000d 	ldrb.w	r0, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80021f4:	4053      	eors	r3, r2
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 80021f8:	f89d 200e 	ldrb.w	r2, [sp, #14]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80021fc:	4043      	eors	r3, r0
		data = byteArray[byte] ^ crcRemainderInit;
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002200:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8002202:	5cc8      	ldrb	r0, [r1, r3]
 8002204:	f89d 300f 	ldrb.w	r3, [sp, #15]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002208:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800220a:	4058      	eors	r0, r3
 800220c:	5c0c      	ldrb	r4, [r1, r0]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800220e:	f10d 0307 	add.w	r3, sp, #7
 8002212:	2100      	movs	r1, #0
 8002214:	2018      	movs	r0, #24
 8002216:	f7ff fcff 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 800221a:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 800221e:	429c      	cmp	r4, r3
 8002220:	d0cc      	beq.n	80021bc <dwt_otp_read+0x5c>
				if (pdw3000local->cbSPIRDErr != NULL)
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0c8      	beq.n	80021bc <dwt_otp_read+0x5c>
					pdw3000local->cbSPIRDErr();
 800222a:	4798      	blx	r3
 800222c:	e7c6      	b.n	80021bc <dwt_otp_read+0x5c>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 800222e:	6821      	ldr	r1, [r4, #0]
 8002230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002234:	2204      	movs	r2, #4
 8002236:	6808      	ldr	r0, [r1, #0]
 8002238:	a903      	add	r1, sp, #12
 800223a:	f003 fbdf 	bl	80059fc <HAL_SPI_Receive>
 800223e:	e7b3      	b.n	80021a8 <dwt_otp_read+0x48>
			write(cnt, header, length, buffer);
 8002240:	2202      	movs	r2, #2
 8002242:	ae02      	add	r6, sp, #8
 8002244:	4604      	mov	r4, r0
 8002246:	4633      	mov	r3, r6
 8002248:	4610      	mov	r0, r2
 800224a:	a903      	add	r1, sp, #12
 800224c:	f7ff feae 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002250:	f241 02d6 	movw	r2, #4310	@ 0x10d6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	7d1b      	ldrb	r3, [r3, #20]
	buffer[0] = (uint8_t) regval;
 8002258:	f8ad 4008 	strh.w	r4, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 800225c:	f8ad 200c 	strh.w	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002260:	2b00      	cmp	r3, #0
 8002262:	d18c      	bne.n	800217e <dwt_otp_read+0x1e>
			write(cnt, header, length, buffer);
 8002264:	2202      	movs	r2, #2
 8002266:	4633      	mov	r3, r6
 8002268:	4610      	mov	r0, r2
 800226a:	a903      	add	r1, sp, #12
 800226c:	f7ff fe9e 	bl	8001fac <write>
	buffer[0] = (uint8_t) regval;
 8002270:	2202      	movs	r2, #2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002272:	682b      	ldr	r3, [r5, #0]
 8002274:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 8002276:	f8ad 700c 	strh.w	r7, [sp, #12]
	buffer[0] = (uint8_t) regval;
 800227a:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f af7d 	bne.w	800217e <dwt_otp_read+0x1e>
			write(cnt, header, length, buffer);
 8002284:	4633      	mov	r3, r6
 8002286:	4610      	mov	r0, r2
 8002288:	a903      	add	r1, sp, #12
 800228a:	f7ff fe8f 	bl	8001fac <write>
 800228e:	e776      	b.n	800217e <dwt_otp_read+0x1e>
 8002290:	20000440 	.word	0x20000440
 8002294:	20000444 	.word	0x20000444
 8002298:	20000340 	.word	0x20000340

0800229c <dwt_setrxtimeout.part.0>:
		header[0] |= DW3000_SPI_EAMRW;
 800229c:	f24d 02c0 	movw	r2, #53440	@ 0xd0c0
void dwt_setrxtimeout(uint32_t time) {
 80022a0:	b510      	push	{r4, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022a2:	4c11      	ldr	r4, [pc, #68]	@ (80022e8 <dwt_setrxtimeout.part.0+0x4c>)
void dwt_setrxtimeout(uint32_t time) {
 80022a4:	b082      	sub	sp, #8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022a6:	6823      	ldr	r3, [r4, #0]
		buffer[j] = (uint8_t) regval;
 80022a8:	9001      	str	r0, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022aa:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 80022ac:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022b0:	b10b      	cbz	r3, 80022b6 <dwt_setrxtimeout.part.0+0x1a>
} // end dwt_setrxtimeout()
 80022b2:	b002      	add	sp, #8
 80022b4:	bd10      	pop	{r4, pc}
			write(cnt, header, length, buffer);
 80022b6:	2204      	movs	r2, #4
 80022b8:	4669      	mov	r1, sp
 80022ba:	ab01      	add	r3, sp, #4
 80022bc:	2002      	movs	r0, #2
 80022be:	f7ff fe75 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 80022c2:	f244 22c0 	movw	r2, #17088	@ 0x42c0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022c6:	6823      	ldr	r3, [r4, #0]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80022c8:	4908      	ldr	r1, [pc, #32]	@ (80022ec <dwt_setrxtimeout.part.0+0x50>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022ca:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80022cc:	9101      	str	r1, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80022ce:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ed      	bne.n	80022b2 <dwt_setrxtimeout.part.0+0x16>
			write(cnt, header, length, buffer);
 80022d6:	2204      	movs	r2, #4
 80022d8:	4669      	mov	r1, sp
 80022da:	ab01      	add	r3, sp, #4
 80022dc:	2002      	movs	r0, #2
 80022de:	f7ff fe65 	bl	8001fac <write>
} // end dwt_setrxtimeout()
 80022e2:	b002      	add	sp, #8
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	bf00      	nop
 80022e8:	20000440 	.word	0x20000440
 80022ec:	0200ffff 	.word	0x0200ffff

080022f0 <dwt_setrxaftertxdelay>:
		header[0] |= DW3000_SPI_EAMRW;
 80022f0:	f242 0142 	movw	r1, #8258	@ 0x2042
void dwt_setrxaftertxdelay(uint32_t rxDelayTime) {
 80022f4:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80022f6:	4d3c      	ldr	r5, [pc, #240]	@ (80023e8 <dwt_setrxaftertxdelay+0xf8>)
void dwt_setrxaftertxdelay(uint32_t rxDelayTime) {
 80022f8:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80022fa:	682b      	ldr	r3, [r5, #0]
		header[0] |= DW3000_SPI_EAMRW;
 80022fc:	f8ad 1008 	strh.w	r1, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002300:	8919      	ldrh	r1, [r3, #8]
 8002302:	2200      	movs	r2, #0
void dwt_setrxaftertxdelay(uint32_t rxDelayTime) {
 8002304:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002306:	6858      	ldr	r0, [r3, #4]
 8002308:	f002 fd28 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 800230c:	682a      	ldr	r2, [r5, #0]
 800230e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002312:	6810      	ldr	r0, [r2, #0]
 8002314:	a902      	add	r1, sp, #8
 8002316:	2202      	movs	r2, #2
 8002318:	f003 f92e 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 800231c:	2800      	cmp	r0, #0
 800231e:	d050      	beq.n	80023c2 <dwt_setrxaftertxdelay+0xd2>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002320:	682b      	ldr	r3, [r5, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002322:	4d32      	ldr	r5, [pc, #200]	@ (80023ec <dwt_setrxaftertxdelay+0xfc>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002324:	8919      	ldrh	r1, [r3, #8]
 8002326:	6858      	ldr	r0, [r3, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f002 fd17 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	7d19      	ldrb	r1, [r3, #20]
 8002332:	2902      	cmp	r1, #2
 8002334:	d01b      	beq.n	800236e <dwt_setrxaftertxdelay+0x7e>
		regval = (regval << 8) + buffer[j];
 8002336:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800233a:	f89d 300e 	ldrb.w	r3, [sp, #14]
	val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800233e:	f3c4 0413 	ubfx	r4, r4, #0, #20
		regval = (regval << 8) + buffer[j];
 8002342:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002346:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800234a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800234e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		header[0] |= DW3000_SPI_EAMRW;
 8002356:	f242 02c2 	movw	r2, #8386	@ 0x20c2
	val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 800235a:	0d1b      	lsrs	r3, r3, #20
 800235c:	051b      	lsls	r3, r3, #20
	val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800235e:	431c      	orrs	r4, r3
		buffer[j] = (uint8_t) regval;
 8002360:	9403      	str	r4, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8002362:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002366:	2900      	cmp	r1, #0
 8002368:	d034      	beq.n	80023d4 <dwt_setrxaftertxdelay+0xe4>
}
 800236a:	b004      	add	sp, #16
 800236c:	bd70      	pop	{r4, r5, r6, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <dwt_setrxaftertxdelay+0x100>)
 8002370:	f89d 2008 	ldrb.w	r2, [sp, #8]
		data = byteArray[byte] ^ crcRemainderInit;
 8002374:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002378:	5c9a      	ldrb	r2, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800237a:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800237c:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 800237e:	5c99      	ldrb	r1, [r3, r2]
 8002380:	f89d 200c 	ldrb.w	r2, [sp, #12]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002384:	404a      	eors	r2, r1
 8002386:	5c9a      	ldrb	r2, [r3, r2]
		data = byteArray[byte] ^ crcRemainderInit;
 8002388:	f89d 100d 	ldrb.w	r1, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800238c:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 800238e:	5c9a      	ldrb	r2, [r3, r2]
 8002390:	f89d 100e 	ldrb.w	r1, [sp, #14]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002394:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8002396:	5c99      	ldrb	r1, [r3, r2]
 8002398:	f89d 200f 	ldrb.w	r2, [sp, #15]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800239c:	404a      	eors	r2, r1
 800239e:	5c9e      	ldrb	r6, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80023a0:	2100      	movs	r1, #0
 80023a2:	f10d 0307 	add.w	r3, sp, #7
 80023a6:	2201      	movs	r2, #1
 80023a8:	f7ff fc36 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 80023ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 80023b0:	429e      	cmp	r6, r3
 80023b2:	d003      	beq.n	80023bc <dwt_setrxaftertxdelay+0xcc>
				if (pdw3000local->cbSPIRDErr != NULL)
 80023b4:	682a      	ldr	r2, [r5, #0]
 80023b6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80023b8:	b1a3      	cbz	r3, 80023e4 <dwt_setrxaftertxdelay+0xf4>
					pdw3000local->cbSPIRDErr();
 80023ba:	4798      	blx	r3
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	7d19      	ldrb	r1, [r3, #20]
 80023c0:	e7b9      	b.n	8002336 <dwt_setrxaftertxdelay+0x46>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 80023c2:	682a      	ldr	r2, [r5, #0]
 80023c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023c8:	6810      	ldr	r0, [r2, #0]
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	2204      	movs	r2, #4
 80023ce:	f003 fb15 	bl	80059fc <HAL_SPI_Receive>
 80023d2:	e7a5      	b.n	8002320 <dwt_setrxaftertxdelay+0x30>
			write(cnt, header, length, buffer);
 80023d4:	2204      	movs	r2, #4
 80023d6:	a902      	add	r1, sp, #8
 80023d8:	ab03      	add	r3, sp, #12
 80023da:	2002      	movs	r0, #2
 80023dc:	f7ff fde6 	bl	8001fac <write>
}
 80023e0:	b004      	add	sp, #16
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80023e4:	7d11      	ldrb	r1, [r2, #20]
 80023e6:	e7a6      	b.n	8002336 <dwt_setrxaftertxdelay+0x46>
 80023e8:	20000444 	.word	0x20000444
 80023ec:	20000440 	.word	0x20000440
 80023f0:	20000340 	.word	0x20000340

080023f4 <dwt_local_data_init>:
	dwt_local_data->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80023f4:	2200      	movs	r2, #0
	dwt_local_data->sleep_mode = DWT_RUNSAR; // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 80023f6:	2102      	movs	r1, #2
int dwt_local_data_init(dwt_local_data_t *dwt_local_data) {
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80023fa:	4d7a      	ldr	r5, [pc, #488]	@ (80025e4 <dwt_local_data_init+0x1f0>)
int dwt_local_data_init(dwt_local_data_t *dwt_local_data) {
 80023fc:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80023fe:	682b      	ldr	r3, [r5, #0]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002400:	f8ad 2008 	strh.w	r2, [sp, #8]
	dwt_local_data->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 8002404:	73c2      	strb	r2, [r0, #15]
	dwt_local_data->spicrc = 0;
 8002406:	8282      	strh	r2, [r0, #20]
	dwt_local_data->vBatP = 0;
 8002408:	8142      	strh	r2, [r0, #10]
	dwt_local_data->cbRxOk = NULL;
 800240a:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
	dwt_local_data->cbRxErr = NULL;
 800240e:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
	dwt_local_data->cbSPIErr = NULL;
 8002412:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
	dwt_local_data->sleep_mode = DWT_RUNSAR; // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8002416:	8201      	strh	r1, [r0, #16]
int dwt_local_data_init(dwt_local_data_t *dwt_local_data) {
 8002418:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800241a:	8919      	ldrh	r1, [r3, #8]
 800241c:	6858      	ldr	r0, [r3, #4]
 800241e:	f002 fc9d 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8002422:	682a      	ldr	r2, [r5, #0]
 8002424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002428:	6810      	ldr	r0, [r2, #0]
 800242a:	a902      	add	r1, sp, #8
 800242c:	2201      	movs	r2, #1
 800242e:	f003 f8a3 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8002432:	2800      	cmp	r0, #0
 8002434:	f000 809b 	beq.w	800256e <dwt_local_data_init+0x17a>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002438:	682b      	ldr	r3, [r5, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800243a:	4d6b      	ldr	r5, [pc, #428]	@ (80025e8 <dwt_local_data_init+0x1f4>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 800243c:	8919      	ldrh	r1, [r3, #8]
 800243e:	6858      	ldr	r0, [r3, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f002 fc8b 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	7d1b      	ldrb	r3, [r3, #20]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d068      	beq.n	8002520 <dwt_local_data_init+0x12c>
		regval = (regval << 8) + buffer[j];
 800244e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002452:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002456:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800245a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800245e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002462:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002466:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id))) {
 800246a:	4a60      	ldr	r2, [pc, #384]	@ (80025ec <dwt_local_data_init+0x1f8>)
 800246c:	f023 0310 	bic.w	r3, r3, #16
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <dwt_local_data_init+0x88>
		return DWT_ERROR;
 8002474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
} // end dwt_initialise()
 8002478:	b005      	add	sp, #20
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ldo_tune_lo = dwt_otp_read(LDOTUNELO_ADDRESS);
 800247c:	2004      	movs	r0, #4
 800247e:	f7ff fe6f 	bl	8002160 <dwt_otp_read>
 8002482:	4606      	mov	r6, r0
	ldo_tune_hi = dwt_otp_read(LDOTUNEHI_ADDRESS);
 8002484:	2005      	movs	r0, #5
 8002486:	f7ff fe6b 	bl	8002160 <dwt_otp_read>
 800248a:	4607      	mov	r7, r0
	dwt_local_data->bias_tune = (dwt_otp_read(BIAS_TUNE_ADDRESS) >> 16)
 800248c:	200a      	movs	r0, #10
 800248e:	f7ff fe67 	bl	8002160 <dwt_otp_read>
			& BIAS_CTRL_BIAS_MASK;
 8002492:	f3c0 4004 	ubfx	r0, r0, #16, #5
	dwt_local_data->bias_tune = (dwt_otp_read(BIAS_TUNE_ADDRESS) >> 16)
 8002496:	7220      	strb	r0, [r4, #8]
	if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0)
 8002498:	b116      	cbz	r6, 80024a0 <dwt_local_data_init+0xac>
 800249a:	b10f      	cbz	r7, 80024a0 <dwt_local_data_init+0xac>
			&& (dwt_local_data->bias_tune != 0)) {
 800249c:	2800      	cmp	r0, #0
 800249e:	d176      	bne.n	800258e <dwt_local_data_init+0x19a>
	if (dwt_otp_read(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0) {
 80024a0:	2020      	movs	r0, #32
 80024a2:	f7ff fe5d 	bl	8002160 <dwt_otp_read>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a51      	ldr	r2, [pc, #324]	@ (80025f0 <dwt_local_data_init+0x1fc>)
	dwt_local_data->partID = dwt_otp_read(PARTID_ADDRESS);
 80024aa:	2006      	movs	r0, #6
	if (dwt_otp_read(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0) {
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	7263      	strb	r3, [r4, #9]
	dwt_local_data->partID = dwt_otp_read(PARTID_ADDRESS);
 80024b6:	f7ff fe53 	bl	8002160 <dwt_otp_read>
 80024ba:	4603      	mov	r3, r0
	dwt_local_data->lotID = dwt_otp_read(LOTID_ADDRESS);
 80024bc:	2007      	movs	r0, #7
	dwt_local_data->partID = dwt_otp_read(PARTID_ADDRESS);
 80024be:	6023      	str	r3, [r4, #0]
	dwt_local_data->lotID = dwt_otp_read(LOTID_ADDRESS);
 80024c0:	f7ff fe4e 	bl	8002160 <dwt_otp_read>
 80024c4:	4603      	mov	r3, r0
	dwt_local_data->vBatP = (uint8_t) dwt_otp_read(VBAT_ADDRESS);
 80024c6:	2008      	movs	r0, #8
	dwt_local_data->lotID = dwt_otp_read(LOTID_ADDRESS);
 80024c8:	6063      	str	r3, [r4, #4]
	dwt_local_data->vBatP = (uint8_t) dwt_otp_read(VBAT_ADDRESS);
 80024ca:	f7ff fe49 	bl	8002160 <dwt_otp_read>
 80024ce:	4603      	mov	r3, r0
	dwt_local_data->tempP = (uint8_t) dwt_otp_read(VTEMP_ADDRESS);
 80024d0:	2009      	movs	r0, #9
	dwt_local_data->vBatP = (uint8_t) dwt_otp_read(VBAT_ADDRESS);
 80024d2:	72a3      	strb	r3, [r4, #10]
	dwt_local_data->tempP = (uint8_t) dwt_otp_read(VTEMP_ADDRESS);
 80024d4:	f7ff fe44 	bl	8002160 <dwt_otp_read>
		dwt_local_data->tempP = 0x85; //@temp of 20 deg
 80024d8:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80024dc:	bf08      	it	eq
 80024de:	2085      	moveq	r0, #133	@ 0x85
	if (dwt_local_data->vBatP == 0) { //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 80024e0:	7aa3      	ldrb	r3, [r4, #10]
 80024e2:	72e0      	strb	r0, [r4, #11]
 80024e4:	b1cb      	cbz	r3, 800251a <dwt_local_data_init+0x126>
	dwt_local_data->otprev = (uint8_t) dwt_otp_read(OTPREV_ADDRESS);
 80024e6:	201f      	movs	r0, #31
 80024e8:	f7ff fe3a 	bl	8002160 <dwt_otp_read>
 80024ec:	4603      	mov	r3, r0
	dwt_local_data->init_xtrim = dwt_otp_read(XTRIM_ADDRESS) & 0x7f;
 80024ee:	201e      	movs	r0, #30
	dwt_local_data->otprev = (uint8_t) dwt_otp_read(OTPREV_ADDRESS);
 80024f0:	7363      	strb	r3, [r4, #13]
	dwt_local_data->init_xtrim = dwt_otp_read(XTRIM_ADDRESS) & 0x7f;
 80024f2:	f7ff fe35 	bl	8002160 <dwt_otp_read>
		dwt_local_data->init_xtrim = 0x2E; //set default value
 80024f6:	f010 007f 	ands.w	r0, r0, #127	@ 0x7f
 80024fa:	bf08      	it	eq
 80024fc:	202e      	moveq	r0, #46	@ 0x2e
		header[0] |= DW3000_SPI_EAMRW;
 80024fe:	f245 02d2 	movw	r2, #20690	@ 0x50d2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002502:	682b      	ldr	r3, [r5, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8002504:	f8ad 200c 	strh.w	r2, [sp, #12]
 8002508:	73a0      	strb	r0, [r4, #14]
	dwt_write8bitoffsetreg(XTAL_ID, 0, dwt_local_data->init_xtrim);
 800250a:	f88d 0008 	strb.w	r0, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800250e:	7d1b      	ldrb	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d035      	beq.n	8002580 <dwt_local_data_init+0x18c>
	return DWT_SUCCESS;
 8002514:	2000      	movs	r0, #0
} // end dwt_initialise()
 8002516:	b005      	add	sp, #20
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dwt_local_data->vBatP = 0x74;  //@Vref of 3.0V
 800251a:	2374      	movs	r3, #116	@ 0x74
 800251c:	72a3      	strb	r3, [r4, #10]
 800251e:	e7e2      	b.n	80024e6 <dwt_local_data_init+0xf2>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002520:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <dwt_local_data_init+0x200>)
 8002522:	f89d 2008 	ldrb.w	r2, [sp, #8]
		data = byteArray[byte] ^ crcRemainderInit;
 8002526:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800252a:	5c9a      	ldrb	r2, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800252c:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800252e:	404a      	eors	r2, r1
 8002530:	5c9a      	ldrb	r2, [r3, r2]
		data = byteArray[byte] ^ crcRemainderInit;
 8002532:	f89d 100d 	ldrb.w	r1, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002536:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8002538:	5c9a      	ldrb	r2, [r3, r2]
 800253a:	f89d 100e 	ldrb.w	r1, [sp, #14]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800253e:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8002540:	5c99      	ldrb	r1, [r3, r2]
 8002542:	f89d 200f 	ldrb.w	r2, [sp, #15]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002546:	404a      	eors	r2, r1
 8002548:	5c9e      	ldrb	r6, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800254a:	2100      	movs	r1, #0
 800254c:	f10d 0307 	add.w	r3, sp, #7
 8002550:	2201      	movs	r2, #1
 8002552:	f7ff fb61 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8002556:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 800255a:	429e      	cmp	r6, r3
 800255c:	f43f af77 	beq.w	800244e <dwt_local_data_init+0x5a>
				if (pdw3000local->cbSPIRDErr != NULL)
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	f43f af72 	beq.w	800244e <dwt_local_data_init+0x5a>
					pdw3000local->cbSPIRDErr();
 800256a:	4798      	blx	r3
 800256c:	e76f      	b.n	800244e <dwt_local_data_init+0x5a>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 800256e:	682a      	ldr	r2, [r5, #0]
 8002570:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002574:	6810      	ldr	r0, [r2, #0]
 8002576:	a903      	add	r1, sp, #12
 8002578:	2204      	movs	r2, #4
 800257a:	f003 fa3f 	bl	80059fc <HAL_SPI_Receive>
 800257e:	e75b      	b.n	8002438 <dwt_local_data_init+0x44>
			write(cnt, header, length, buffer);
 8002580:	2201      	movs	r2, #1
 8002582:	ab02      	add	r3, sp, #8
 8002584:	a903      	add	r1, sp, #12
 8002586:	2002      	movs	r0, #2
 8002588:	f7ff fd10 	bl	8001fac <write>
 800258c:	e7c2      	b.n	8002514 <dwt_local_data_init+0x120>
		header[0] |= DW3000_SPI_EAMRW;
 800258e:	f242 22d6 	movw	r2, #8918	@ 0x22d6
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <dwt_local_data_init+0x204>)
		header[0] |= DW3000_SPI_EAMRW;
 8002594:	f8ad 2008 	strh.w	r2, [sp, #8]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002598:	9303      	str	r3, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800259a:	682b      	ldr	r3, [r5, #0]
 800259c:	7d1e      	ldrb	r6, [r3, #20]
 800259e:	2e00      	cmp	r6, #0
 80025a0:	f47f af7e 	bne.w	80024a0 <dwt_local_data_init+0xac>
			write(cnt, header, length, buffer);
 80025a4:	2204      	movs	r2, #4
 80025a6:	ab03      	add	r3, sp, #12
 80025a8:	a902      	add	r1, sp, #8
 80025aa:	2002      	movs	r0, #2
 80025ac:	f7ff fcfe 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 80025b0:	f647 62e2 	movw	r2, #32482	@ 0x7ee2
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80025b4:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 80025bc:	f8ad 2008 	strh.w	r2, [sp, #8]
		dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0,
 80025c0:	7a22      	ldrb	r2, [r4, #8]
	buf[3] = (uint8_t) (_or >> 8);    //   &0xFF;
 80025c2:	f88d 600f 	strb.w	r6, [sp, #15]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80025c6:	f8ad 100c 	strh.w	r1, [sp, #12]
	buf[2] = (uint8_t) _or;    //        &0xFF;
 80025ca:	f88d 200e 	strb.w	r2, [sp, #14]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af66 	bne.w	80024a0 <dwt_local_data_init+0xac>
			write(cnt, header, length, buffer);
 80025d4:	2204      	movs	r2, #4
 80025d6:	ab03      	add	r3, sp, #12
 80025d8:	a902      	add	r1, sp, #8
 80025da:	2002      	movs	r0, #2
 80025dc:	f7ff fce6 	bl	8001fac <write>
}
 80025e0:	e75e      	b.n	80024a0 <dwt_local_data_init+0xac>
 80025e2:	bf00      	nop
 80025e4:	20000444 	.word	0x20000444
 80025e8:	20000440 	.word	0x20000440
 80025ec:	deca0302 	.word	0xdeca0302
 80025f0:	10000240 	.word	0x10000240
 80025f4:	20000340 	.word	0x20000340
 80025f8:	0180ffff 	.word	0x0180ffff

080025fc <dwt_write32bitoffsetreg.constprop.0>:
void dwt_write32bitoffsetreg(uint32_t regFileID, uint16_t regOffset,
 80025fc:	b500      	push	{lr}
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 80025fe:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
void dwt_write32bitoffsetreg(uint32_t regFileID, uint16_t regOffset,
 8002602:	b083      	sub	sp, #12
		buffer[j] = (uint8_t) regval;
 8002604:	9101      	str	r1, [sp, #4]
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8002606:	f3c0 4304 	ubfx	r3, r0, #16, #5
 800260a:	0091      	lsls	r1, r2, #2
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800260c:	ea41 2343 	orr.w	r3, r1, r3, lsl #9
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002616:	f88d 3000 	strb.w	r3, [sp]
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 800261a:	f88d 1001 	strb.w	r1, [sp, #1]
	} else if (reg_offset == 0 /*&& length > 0*/
 800261e:	b15a      	cbz	r2, 8002638 <dwt_write32bitoffsetreg.constprop.0+0x3c>
		header[0] |= DW3000_SPI_EAMRW;
 8002620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002624:	f88d 3000 	strb.w	r3, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <dwt_write32bitoffsetreg.constprop.0+0x5c>)
		cnt = 2;
 800262a:	2002      	movs	r0, #2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	7d1b      	ldrb	r3, [r3, #20]
 8002630:	b143      	cbz	r3, 8002644 <dwt_write32bitoffsetreg.constprop.0+0x48>
} // end dwt_write32bitoffsetreg()
 8002632:	b003      	add	sp, #12
 8002634:	f85d fb04 	ldr.w	pc, [sp], #4
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002638:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <dwt_write32bitoffsetreg.constprop.0+0x5c>)
		cnt = 1;
 800263a:	2001      	movs	r0, #1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7d1b      	ldrb	r3, [r3, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f6      	bne.n	8002632 <dwt_write32bitoffsetreg.constprop.0+0x36>
			write(cnt, header, length, buffer);
 8002644:	2204      	movs	r2, #4
 8002646:	4669      	mov	r1, sp
 8002648:	eb0d 0302 	add.w	r3, sp, r2
 800264c:	f7ff fcae 	bl	8001fac <write>
} // end dwt_write32bitoffsetreg()
 8002650:	b003      	add	sp, #12
 8002652:	f85d fb04 	ldr.w	pc, [sp], #4
 8002656:	bf00      	nop
 8002658:	20000440 	.word	0x20000440

0800265c <dwt_write32bitoffsetreg>:
		uint32_t regval) {
 800265c:	b500      	push	{lr}
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 800265e:	4401      	add	r1, r0
 8002660:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8002664:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8002668:	f3c1 4304 	ubfx	r3, r1, #16, #5
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800266c:	ea4c 2343 	orr.w	r3, ip, r3, lsl #9
 8002670:	0a1b      	lsrs	r3, r3, #8
		uint32_t regval) {
 8002672:	b083      	sub	sp, #12
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
		buffer[j] = (uint8_t) regval;
 8002678:	9201      	str	r2, [sp, #4]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800267a:	f88d 3000 	strb.w	r3, [sp]
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 800267e:	f88d c001 	strb.w	ip, [sp, #1]
	} else if (reg_offset == 0 /*&& length > 0*/
 8002682:	b158      	cbz	r0, 800269c <dwt_write32bitoffsetreg+0x40>
		header[0] |= DW3000_SPI_EAMRW;
 8002684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002688:	f88d 3000 	strb.w	r3, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <dwt_write32bitoffsetreg+0x60>)
		cnt = 2;
 800268e:	2002      	movs	r0, #2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	7d1b      	ldrb	r3, [r3, #20]
 8002694:	b143      	cbz	r3, 80026a8 <dwt_write32bitoffsetreg+0x4c>
} // end dwt_write32bitoffsetreg()
 8002696:	b003      	add	sp, #12
 8002698:	f85d fb04 	ldr.w	pc, [sp], #4
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800269c:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <dwt_write32bitoffsetreg+0x60>)
		cnt = 1;
 800269e:	2001      	movs	r0, #1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	7d1b      	ldrb	r3, [r3, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f6      	bne.n	8002696 <dwt_write32bitoffsetreg+0x3a>
			write(cnt, header, length, buffer);
 80026a8:	2204      	movs	r2, #4
 80026aa:	4669      	mov	r1, sp
 80026ac:	eb0d 0302 	add.w	r3, sp, r2
 80026b0:	f7ff fc7c 	bl	8001fac <write>
} // end dwt_write32bitoffsetreg()
 80026b4:	b003      	add	sp, #12
 80026b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ba:	bf00      	nop
 80026bc:	20000440 	.word	0x20000440

080026c0 <dwt_setrxtimeout>:
void dwt_setrxtimeout(uint32_t time) {
 80026c0:	b510      	push	{r4, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80026c2:	4c1b      	ldr	r4, [pc, #108]	@ (8002730 <dwt_setrxtimeout+0x70>)
void dwt_setrxtimeout(uint32_t time) {
 80026c4:	b082      	sub	sp, #8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	7d1b      	ldrb	r3, [r3, #20]
	if (time > 0) {
 80026ca:	b138      	cbz	r0, 80026dc <dwt_setrxtimeout+0x1c>
		header[0] |= DW3000_SPI_EAMRW;
 80026cc:	f24d 02c0 	movw	r2, #53440	@ 0xd0c0
		buffer[j] = (uint8_t) regval;
 80026d0:	9001      	str	r0, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80026d2:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80026d6:	b19b      	cbz	r3, 8002700 <dwt_setrxtimeout+0x40>
} // end dwt_setrxtimeout()
 80026d8:	b002      	add	sp, #8
 80026da:	bd10      	pop	{r4, pc}
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80026dc:	f64f 51ff 	movw	r1, #65023	@ 0xfdff
		header[0] |= DW3000_SPI_EAMRW;
 80026e0:	f244 22c0 	movw	r2, #17088	@ 0x42c0
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80026e4:	9101      	str	r1, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80026e6:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f4      	bne.n	80026d8 <dwt_setrxtimeout+0x18>
			write(cnt, header, length, buffer);
 80026ee:	2204      	movs	r2, #4
 80026f0:	4669      	mov	r1, sp
 80026f2:	eb0d 0302 	add.w	r3, sp, r2
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7ff fc58 	bl	8001fac <write>
} // end dwt_setrxtimeout()
 80026fc:	b002      	add	sp, #8
 80026fe:	bd10      	pop	{r4, pc}
			write(cnt, header, length, buffer);
 8002700:	2204      	movs	r2, #4
 8002702:	4669      	mov	r1, sp
 8002704:	ab01      	add	r3, sp, #4
 8002706:	2002      	movs	r0, #2
 8002708:	f7ff fc50 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 800270c:	f244 22c0 	movw	r2, #17088	@ 0x42c0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002710:	6823      	ldr	r3, [r4, #0]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <dwt_setrxtimeout+0x74>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002714:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002716:	9101      	str	r1, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 8002718:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1db      	bne.n	80026d8 <dwt_setrxtimeout+0x18>
			write(cnt, header, length, buffer);
 8002720:	2204      	movs	r2, #4
 8002722:	4669      	mov	r1, sp
 8002724:	ab01      	add	r3, sp, #4
 8002726:	2002      	movs	r0, #2
 8002728:	f7ff fc40 	bl	8001fac <write>
} // end dwt_setrxtimeout()
 800272c:	b002      	add	sp, #8
 800272e:	bd10      	pop	{r4, pc}
 8002730:	20000440 	.word	0x20000440
 8002734:	0200ffff 	.word	0x0200ffff

08002738 <dwt_run_pgfcal>:
		header[0] |= DW3000_SPI_EAMRW;
 8002738:	f243 02c8 	movw	r2, #12488	@ 0x30c8
int dwt_run_pgfcal(void) {
 800273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002740:	4e9f      	ldr	r6, [pc, #636]	@ (80029c0 <dwt_run_pgfcal+0x288>)
		buffer[j] = (uint8_t) regval;
 8002742:	49a0      	ldr	r1, [pc, #640]	@ (80029c4 <dwt_run_pgfcal+0x28c>)
int dwt_run_pgfcal(void) {
 8002744:	b084      	sub	sp, #16
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002746:	6833      	ldr	r3, [r6, #0]
		buffer[j] = (uint8_t) regval;
 8002748:	9103      	str	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 800274a:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800274e:	7d1b      	ldrb	r3, [r3, #20]
 8002750:	af03      	add	r7, sp, #12
 8002752:	f10d 0808 	add.w	r8, sp, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8117 	beq.w	800298a <dwt_run_pgfcal+0x252>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PGF; cnt++) {
 800275c:	2403      	movs	r4, #3
		header[0] |= DW3000_SPI_EAMRW;
 800275e:	f248 0948 	movw	r9, #32840	@ 0x8048
 8002762:	4d99      	ldr	r5, [pc, #612]	@ (80029c8 <dwt_run_pgfcal+0x290>)
int dwt_run_pgfcal(void) {
 8002764:	22f0      	movs	r2, #240	@ 0xf0
void deca_usleep(unsigned int usec) {
	unsigned int i;

	usec *= 12;
	for (i = 0; i < usec; i++) {
		__NOP();
 8002766:	bf00      	nop
	for (i = 0; i < usec; i++) {
 8002768:	3a01      	subs	r2, #1
 800276a:	d1fc      	bne.n	8002766 <dwt_run_pgfcal+0x2e>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800276c:	682b      	ldr	r3, [r5, #0]
		header[0] |= DW3000_SPI_EAMRW;
 800276e:	f8ad 900c 	strh.w	r9, [sp, #12]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002772:	8919      	ldrh	r1, [r3, #8]
 8002774:	6858      	ldr	r0, [r3, #4]
 8002776:	f002 faf1 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 800277a:	6828      	ldr	r0, [r5, #0]
 800277c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002780:	2202      	movs	r2, #2
 8002782:	4639      	mov	r1, r7
 8002784:	6800      	ldr	r0, [r0, #0]
 8002786:	f002 fef7 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 800278a:	2800      	cmp	r0, #0
 800278c:	f000 8094 	beq.w	80028b8 <dwt_run_pgfcal+0x180>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	2201      	movs	r2, #1
 8002794:	8919      	ldrh	r1, [r3, #8]
 8002796:	6858      	ldr	r0, [r3, #4]
 8002798:	f002 fae0 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800279c:	6833      	ldr	r3, [r6, #0]
 800279e:	7d1b      	ldrb	r3, [r3, #20]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d065      	beq.n	8002870 <dwt_run_pgfcal+0x138>
	return regval;
 80027a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1) { //PGF cal is complete
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f000 8083 	beq.w	80028b4 <dwt_run_pgfcal+0x17c>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PGF; cnt++) {
 80027ae:	3c01      	subs	r4, #1
 80027b0:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80027b4:	d1d6      	bne.n	8002764 <dwt_run_pgfcal+0x2c>
 80027b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
	dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 80027ba:	2300      	movs	r3, #0
 80027bc:	f88d 3008 	strb.w	r3, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80027c0:	f243 03c8 	movw	r3, #12488	@ 0x30c8
 80027c4:	f8ad 300c 	strh.w	r3, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80027c8:	6833      	ldr	r3, [r6, #0]
 80027ca:	7d1b      	ldrb	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80b1 	beq.w	8002934 <dwt_run_pgfcal+0x1fc>
		header[0] |= DW3000_SPI_EAMRW;
 80027d2:	f245 0348 	movw	r3, #20552	@ 0x5048
 80027d6:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80027da:	682b      	ldr	r3, [r5, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	8919      	ldrh	r1, [r3, #8]
 80027e0:	6858      	ldr	r0, [r3, #4]
 80027e2:	f002 fabb 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	4641      	mov	r1, r8
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027f2:	f002 fec1 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 80027f6:	2800      	cmp	r0, #0
 80027f8:	f000 8093 	beq.w	8002922 <dwt_run_pgfcal+0x1ea>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80027fc:	682b      	ldr	r3, [r5, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	8919      	ldrh	r1, [r3, #8]
 8002802:	6858      	ldr	r0, [r3, #4]
 8002804:	f002 faaa 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002808:	6833      	ldr	r3, [r6, #0]
 800280a:	7d1b      	ldrb	r3, [r3, #20]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d05d      	beq.n	80028cc <dwt_run_pgfcal+0x194>
	if (val == ERR_RX_CAL_FAIL) {
 8002810:	f06f 4560 	mvn.w	r5, #3758096384	@ 0xe0000000
		regval = (regval << 8) + buffer[j];
 8002814:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002818:	f89d 100e 	ldrb.w	r1, [sp, #14]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800281c:	463b      	mov	r3, r7
		regval = (regval << 8) + buffer[j];
 800281e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8002822:	f89d 200d 	ldrb.w	r2, [sp, #13]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002826:	4869      	ldr	r0, [pc, #420]	@ (80029cc <dwt_run_pgfcal+0x294>)
		regval = (regval << 8) + buffer[j];
 8002828:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800282c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002830:	eb01 2102 	add.w	r1, r1, r2, lsl #8
		result = DWT_ERROR;
 8002834:	42a9      	cmp	r1, r5
 8002836:	bf08      	it	eq
 8002838:	f04f 34ff 	moveq.w	r4, #4294967295	@ 0xffffffff
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800283c:	2204      	movs	r2, #4
 800283e:	2100      	movs	r1, #0
 8002840:	f7ff f9ea 	bl	8001c18 <dwt_xfer3000.constprop.2>
		regval = (regval << 8) + buffer[j];
 8002844:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8002848:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800284c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002850:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8002854:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002858:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800285c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 8002860:	42ab      	cmp	r3, r5
 8002862:	bf14      	ite	ne
 8002864:	4620      	movne	r0, r4
 8002866:	f04f 30ff 	moveq.w	r0, #4294967295	@ 0xffffffff
 800286a:	b004      	add	sp, #16
 800286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002870:	4a57      	ldr	r2, [pc, #348]	@ (80029d0 <dwt_run_pgfcal+0x298>)
 8002872:	f89d 300c 	ldrb.w	r3, [sp, #12]
		data = byteArray[byte] ^ crcRemainderInit;
 8002876:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800287a:	5cd3      	ldrb	r3, [r2, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800287c:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800287e:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f89d 1007 	ldrb.w	r1, [sp, #7]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002886:	404b      	eors	r3, r1
 8002888:	f812 a003 	ldrb.w	sl, [r2, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800288c:	2100      	movs	r1, #0
 800288e:	4643      	mov	r3, r8
 8002890:	2201      	movs	r2, #1
 8002892:	f7ff f9c1 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8002896:	f89d 3008 	ldrb.w	r3, [sp, #8]
			if (crc8 != dwcrc8) {
 800289a:	459a      	cmp	sl, r3
 800289c:	d082      	beq.n	80027a4 <dwt_run_pgfcal+0x6c>
				if (pdw3000local->cbSPIRDErr != NULL)
 800289e:	6833      	ldr	r3, [r6, #0]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f43f af7e 	beq.w	80027a4 <dwt_run_pgfcal+0x6c>
					pdw3000local->cbSPIRDErr();
 80028a8:	4798      	blx	r3
	return regval;
 80028aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1) { //PGF cal is complete
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f47f af7d 	bne.w	80027ae <dwt_run_pgfcal+0x76>
 80028b4:	2400      	movs	r4, #0
 80028b6:	e780      	b.n	80027ba <dwt_run_pgfcal+0x82>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f10d 0107 	add.w	r1, sp, #7
 80028c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c6:	f003 f899 	bl	80059fc <HAL_SPI_Receive>
 80028ca:	e761      	b.n	8002790 <dwt_run_pgfcal+0x58>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028cc:	4b40      	ldr	r3, [pc, #256]	@ (80029d0 <dwt_run_pgfcal+0x298>)
 80028ce:	f89d 2008 	ldrb.w	r2, [sp, #8]
		data = byteArray[byte] ^ crcRemainderInit;
 80028d2:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80028d6:	5c9a      	ldrb	r2, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80028d8:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028da:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80028dc:	5c9a      	ldrb	r2, [r3, r2]
 80028de:	f89d 100c 	ldrb.w	r1, [sp, #12]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028e2:	404a      	eors	r2, r1
 80028e4:	5c9a      	ldrb	r2, [r3, r2]
		data = byteArray[byte] ^ crcRemainderInit;
 80028e6:	f89d 100d 	ldrb.w	r1, [sp, #13]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028ea:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80028ec:	5c99      	ldrb	r1, [r3, r2]
 80028ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028f2:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80028f4:	5c9a      	ldrb	r2, [r3, r2]
 80028f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80028fa:	404a      	eors	r2, r1
 80028fc:	5c9d      	ldrb	r5, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80028fe:	2100      	movs	r1, #0
 8002900:	f10d 0307 	add.w	r3, sp, #7
 8002904:	2201      	movs	r2, #1
 8002906:	f7ff f987 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 800290a:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (crc8 != dwcrc8) {
 800290e:	429d      	cmp	r5, r3
 8002910:	f43f af7e 	beq.w	8002810 <dwt_run_pgfcal+0xd8>
				if (pdw3000local->cbSPIRDErr != NULL)
 8002914:	6833      	ldr	r3, [r6, #0]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	f43f af79 	beq.w	8002810 <dwt_run_pgfcal+0xd8>
					pdw3000local->cbSPIRDErr();
 800291e:	4798      	blx	r3
 8002920:	e776      	b.n	8002810 <dwt_run_pgfcal+0xd8>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	2204      	movs	r2, #4
 8002926:	4639      	mov	r1, r7
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800292e:	f003 f865 	bl	80059fc <HAL_SPI_Receive>
 8002932:	e763      	b.n	80027fc <dwt_run_pgfcal+0xc4>
			write(cnt, header, length, buffer);
 8002934:	4643      	mov	r3, r8
 8002936:	2201      	movs	r2, #1
 8002938:	4639      	mov	r1, r7
 800293a:	2002      	movs	r0, #2
 800293c:	f7ff fb36 	bl	8001fac <write>
 8002940:	2201      	movs	r2, #1
		header[0] |= DW3000_SPI_EAMRW;
 8002942:	f248 01c8 	movw	r1, #32968	@ 0x80c8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002946:	6833      	ldr	r3, [r6, #0]
 8002948:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 800294a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800294e:	f88d 2008 	strb.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002952:	2b00      	cmp	r3, #0
 8002954:	f47f af3d 	bne.w	80027d2 <dwt_run_pgfcal+0x9a>
			write(cnt, header, length, buffer);
 8002958:	4643      	mov	r3, r8
 800295a:	4639      	mov	r1, r7
 800295c:	2002      	movs	r0, #2
 800295e:	f7ff fb25 	bl	8001fac <write>
	buf[0] = _and;
 8002962:	f240 11ff 	movw	r1, #511	@ 0x1ff
		header[0] |= DW3000_SPI_EAMRW;
 8002966:	f643 12c8 	movw	r2, #14792	@ 0x39c8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800296a:	6833      	ldr	r3, [r6, #0]
 800296c:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = _and;
 800296e:	f8ad 1008 	strh.w	r1, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8002972:	f8ad 200c 	strh.w	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f af2b 	bne.w	80027d2 <dwt_run_pgfcal+0x9a>
			write(cnt, header, length, buffer);
 800297c:	2202      	movs	r2, #2
 800297e:	4643      	mov	r3, r8
 8002980:	4639      	mov	r1, r7
 8002982:	4610      	mov	r0, r2
 8002984:	f7ff fb12 	bl	8001fac <write>
 8002988:	e723      	b.n	80027d2 <dwt_run_pgfcal+0x9a>
 800298a:	463b      	mov	r3, r7
 800298c:	2204      	movs	r2, #4
 800298e:	4641      	mov	r1, r8
 8002990:	2002      	movs	r0, #2
 8002992:	f7ff fb0b 	bl	8001fac <write>
	buf[0] = _and;
 8002996:	f241 01ff 	movw	r1, #4351	@ 0x10ff
		header[0] |= DW3000_SPI_EAMRW;
 800299a:	f243 12c8 	movw	r2, #12744	@ 0x31c8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800299e:	6833      	ldr	r3, [r6, #0]
 80029a0:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = _and;
 80029a2:	f8ad 1008 	strh.w	r1, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80029a6:	f8ad 200c 	strh.w	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f aed6 	bne.w	800275c <dwt_run_pgfcal+0x24>
			write(cnt, header, length, buffer);
 80029b0:	2202      	movs	r2, #2
 80029b2:	4643      	mov	r3, r8
 80029b4:	4639      	mov	r1, r7
 80029b6:	4610      	mov	r0, r2
 80029b8:	f7ff faf8 	bl	8001fac <write>
 80029bc:	e6ce      	b.n	800275c <dwt_run_pgfcal+0x24>
 80029be:	bf00      	nop
 80029c0:	20000440 	.word	0x20000440
 80029c4:	00020001 	.word	0x00020001
 80029c8:	20000444 	.word	0x20000444
 80029cc:	0004001c 	.word	0x0004001c
 80029d0:	20000340 	.word	0x20000340

080029d4 <dwt_pgf_cal>:
	if (ldoen == 1) {
 80029d4:	2801      	cmp	r0, #1
 80029d6:	d001      	beq.n	80029dc <dwt_pgf_cal+0x8>
	temp = dwt_run_pgfcal();
 80029d8:	f7ff beae 	b.w	8002738 <dwt_run_pgfcal>
int dwt_pgf_cal(int ldoen) {
 80029dc:	b530      	push	{r4, r5, lr}
 80029de:	b083      	sub	sp, #12
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80029e0:	2202      	movs	r2, #2
 80029e2:	2100      	movs	r1, #0
 80029e4:	ab01      	add	r3, sp, #4
 80029e6:	4817      	ldr	r0, [pc, #92]	@ (8002a44 <dwt_pgf_cal+0x70>)
 80029e8:	f7ff f916 	bl	8001c18 <dwt_xfer3000.constprop.2>
		header[0] |= DW3000_SPI_EAMRW;
 80029ec:	f242 22cf 	movw	r2, #8911	@ 0x22cf
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80029f0:	4c15      	ldr	r4, [pc, #84]	@ (8002a48 <dwt_pgf_cal+0x74>)
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80029f2:	4916      	ldr	r1, [pc, #88]	@ (8002a4c <dwt_pgf_cal+0x78>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f8bd 5004 	ldrh.w	r5, [sp, #4]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80029fa:	9101      	str	r1, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80029fc:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 80029fe:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a02:	b1c3      	cbz	r3, 8002a36 <dwt_pgf_cal+0x62>
	temp = dwt_run_pgfcal();
 8002a04:	f7ff fe98 	bl	8002738 <dwt_run_pgfcal>
	buf[2] = (uint8_t) _or;    //        &0xFF;
 8002a08:	2100      	movs	r1, #0
		header[0] |= DW3000_SPI_EAMRW;
 8002a0a:	f242 22cf 	movw	r2, #8911	@ 0x22cf
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a0e:	6823      	ldr	r3, [r4, #0]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002a10:	f8ad 5004 	strh.w	r5, [sp, #4]
	buf[2] = (uint8_t) _or;    //        &0xFF;
 8002a14:	f8ad 1006 	strh.w	r1, [sp, #6]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a18:	7d1b      	ldrb	r3, [r3, #20]
	temp = dwt_run_pgfcal();
 8002a1a:	4604      	mov	r4, r0
		header[0] |= DW3000_SPI_EAMRW;
 8002a1c:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a20:	b113      	cbz	r3, 8002a28 <dwt_pgf_cal+0x54>
}
 8002a22:	4620      	mov	r0, r4
 8002a24:	b003      	add	sp, #12
 8002a26:	bd30      	pop	{r4, r5, pc}
			write(cnt, header, length, buffer);
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4669      	mov	r1, sp
 8002a2c:	ab01      	add	r3, sp, #4
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f7ff fabc 	bl	8001fac <write>
	return temp;
 8002a34:	e7f5      	b.n	8002a22 <dwt_pgf_cal+0x4e>
			write(cnt, header, length, buffer);
 8002a36:	2204      	movs	r2, #4
 8002a38:	4669      	mov	r1, sp
 8002a3a:	ab01      	add	r3, sp, #4
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7ff fab5 	bl	8001fac <write>
 8002a42:	e7df      	b.n	8002a04 <dwt_pgf_cal+0x30>
 8002a44:	00070048 	.word	0x00070048
 8002a48:	20000440 	.word	0x20000440
 8002a4c:	0105ffff 	.word	0x0105ffff

08002a50 <dwt_writetxfctrl>:
		uint8_t ranging) {
 8002a50:	b570      	push	{r4, r5, r6, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a52:	4c3c      	ldr	r4, [pc, #240]	@ (8002b44 <dwt_writetxfctrl+0xf4>)
	if (txBufferOffset <= 127) {
 8002a54:	297f      	cmp	r1, #127	@ 0x7f
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a56:	6823      	ldr	r3, [r4, #0]
		uint8_t ranging) {
 8002a58:	b084      	sub	sp, #16
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a5a:	7d1b      	ldrb	r3, [r3, #20]
	if (txBufferOffset <= 127) {
 8002a5c:	ea40 20c2 	orr.w	r0, r0, r2, lsl #11
 8002a60:	d813      	bhi.n	8002a8a <dwt_writetxfctrl+0x3a>
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 8002a62:	2400      	movs	r4, #0
		header[0] |= DW3000_SPI_EAMRW;
 8002a64:	f249 32c0 	movw	r2, #37824	@ 0x93c0
		reg32 =
 8002a68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002a6c:	4936      	ldr	r1, [pc, #216]	@ (8002b48 <dwt_writetxfctrl+0xf8>)
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8002a6e:	f8ad 000c 	strh.w	r0, [sp, #12]
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8002a72:	0c00      	lsrs	r0, r0, #16
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002a74:	9102      	str	r1, [sp, #8]
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8002a76:	f88d 000e 	strb.w	r0, [sp, #14]
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 8002a7a:	f88d 400f 	strb.w	r4, [sp, #15]
		header[0] |= DW3000_SPI_EAMRW;
 8002a7e:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <dwt_writetxfctrl+0xc0>
} // end dwt_writetxfctrl()
 8002a86:	b004      	add	sp, #16
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
		header[0] |= DW3000_SPI_EAMRW;
 8002a8a:	f249 32c0 	movw	r2, #37824	@ 0x93c0
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002a8e:	4d2e      	ldr	r5, [pc, #184]	@ (8002b48 <dwt_writetxfctrl+0xf8>)
				| ((uint32_t) (txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST)
 8002a90:	3180      	adds	r1, #128	@ 0x80
		reg32 = txFrameLength
 8002a92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8002a96:	e9cd 5002 	strd	r5, r0, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8002a9a:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002a9e:	ae02      	add	r6, sp, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03e      	beq.n	8002b22 <dwt_writetxfctrl+0xd2>
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002aa4:	2110      	movs	r1, #16
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002aa6:	4d29      	ldr	r5, [pc, #164]	@ (8002b4c <dwt_writetxfctrl+0xfc>)
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002aa8:	f8ad 1008 	strh.w	r1, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	8919      	ldrh	r1, [r3, #8]
 8002ab2:	6858      	ldr	r0, [r3, #4]
 8002ab4:	f002 f952 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8002ab8:	682a      	ldr	r2, [r5, #0]
 8002aba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002abe:	6810      	ldr	r0, [r2, #0]
 8002ac0:	4631      	mov	r1, r6
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f002 fd58 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d031      	beq.n	8002b30 <dwt_writetxfctrl+0xe0>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	8919      	ldrh	r1, [r3, #8]
 8002ad2:	6858      	ldr	r0, [r3, #4]
 8002ad4:	f002 f942 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	7d1b      	ldrb	r3, [r3, #20]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d1d2      	bne.n	8002a86 <dwt_writetxfctrl+0x36>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002ae0:	481b      	ldr	r0, [pc, #108]	@ (8002b50 <dwt_writetxfctrl+0x100>)
 8002ae2:	f89d 2008 	ldrb.w	r2, [sp, #8]
		data = byteArray[byte] ^ crcRemainderInit;
 8002ae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002aea:	5c81      	ldrb	r1, [r0, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002aec:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002aee:	4059      	eors	r1, r3
 8002af0:	5c45      	ldrb	r5, [r0, r1]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002af2:	ab01      	add	r3, sp, #4
 8002af4:	2100      	movs	r1, #0
 8002af6:	2018      	movs	r0, #24
 8002af8:	f7ff f88e 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8002afc:	f89d 3004 	ldrb.w	r3, [sp, #4]
			if (crc8 != dwcrc8) {
 8002b00:	429d      	cmp	r5, r3
 8002b02:	d0c0      	beq.n	8002a86 <dwt_writetxfctrl+0x36>
				if (pdw3000local->cbSPIRDErr != NULL)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0bc      	beq.n	8002a86 <dwt_writetxfctrl+0x36>
					pdw3000local->cbSPIRDErr();
 8002b0c:	4798      	blx	r3
} // end dwt_writetxfctrl()
 8002b0e:	e7ba      	b.n	8002a86 <dwt_writetxfctrl+0x36>
			write(cnt, header, length, buffer);
 8002b10:	2208      	movs	r2, #8
 8002b12:	a901      	add	r1, sp, #4
 8002b14:	eb0d 0302 	add.w	r3, sp, r2
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f7ff fa47 	bl	8001fac <write>
} // end dwt_writetxfctrl()
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
			write(cnt, header, length, buffer);
 8002b22:	4633      	mov	r3, r6
 8002b24:	2208      	movs	r2, #8
 8002b26:	a901      	add	r1, sp, #4
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff fa3f 	bl	8001fac <write>
 8002b2e:	e7b9      	b.n	8002aa4 <dwt_writetxfctrl+0x54>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8002b30:	6829      	ldr	r1, [r5, #0]
 8002b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b36:	2201      	movs	r2, #1
 8002b38:	6808      	ldr	r0, [r1, #0]
 8002b3a:	f10d 0103 	add.w	r1, sp, #3
 8002b3e:	f002 ff5d 	bl	80059fc <HAL_SPI_Receive>
 8002b42:	e7c3      	b.n	8002acc <dwt_writetxfctrl+0x7c>
 8002b44:	20000440 	.word	0x20000440
 8002b48:	fc00f400 	.word	0xfc00f400
 8002b4c:	20000444 	.word	0x20000444
 8002b50:	20000340 	.word	0x20000340

08002b54 <dwt_writetxdata>:
	if ((offset + data_size) < TX_BUFFER_MAX_LEN) {
 8002b54:	eb02 0c00 	add.w	ip, r2, r0
 8002b58:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8002b5c:	da50      	bge.n	8002c00 <dwt_writetxdata+0xac>
int dwt_writetxdata(uint16_t data_size, uint8_t *data, uint16_t offset) {
 8002b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if (offset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002b62:	2a7f      	cmp	r2, #127	@ 0x7f
 8002b64:	4606      	mov	r6, r0
 8002b66:	4614      	mov	r4, r2
 8002b68:	460d      	mov	r5, r1
int dwt_writetxdata(uint16_t data_size, uint8_t *data, uint16_t offset) {
 8002b6a:	b083      	sub	sp, #12
		if (offset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002b6c:	d910      	bls.n	8002b90 <dwt_writetxdata+0x3c>
		buffer[j] = (uint8_t) regval;
 8002b6e:	2214      	movs	r2, #20
		header[0] |= DW3000_SPI_EAMRW;
 8002b70:	f241 03fe 	movw	r3, #4350	@ 0x10fe
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002b74:	4f24      	ldr	r7, [pc, #144]	@ (8002c08 <dwt_writetxdata+0xb4>)
		buffer[j] = (uint8_t) regval;
 8002b76:	9201      	str	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002b78:	6839      	ldr	r1, [r7, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8002b7a:	f8ad 3000 	strh.w	r3, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002b7e:	f891 8014 	ldrb.w	r8, [r1, #20]
 8002b82:	f1b8 0f00 	cmp.w	r8, #0
 8002b86:	d00e      	beq.n	8002ba6 <dwt_writetxdata+0x52>
		return DWT_SUCCESS;
 8002b88:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8002b8a:	b003      	add	sp, #12
 8002b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			dwt_xfer3000(TX_BUFFER_ID, offset, data_size, data,
 8002b90:	460b      	mov	r3, r1
 8002b92:	4602      	mov	r2, r0
 8002b94:	4621      	mov	r1, r4
 8002b96:	f44f 10a0 	mov.w	r0, #1310720	@ 0x140000
 8002b9a:	f7ff fa43 	bl	8002024 <dwt_xfer3000.constprop.1>
		return DWT_SUCCESS;
 8002b9e:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8002ba0:	b003      	add	sp, #12
 8002ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			write(cnt, header, length, buffer);
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	ab01      	add	r3, sp, #4
 8002baa:	4669      	mov	r1, sp
 8002bac:	2002      	movs	r0, #2
 8002bae:	f7ff f9fd 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002bb2:	f242 03fe 	movw	r3, #8446	@ 0x20fe
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	f892 9014 	ldrb.w	r9, [r2, #20]
		buffer[j] = (uint8_t) regval;
 8002bbc:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002bc0:	f8ad 8006 	strh.w	r8, [sp, #6]
		header[0] |= DW3000_SPI_EAMRW;
 8002bc4:	f8ad 3000 	strh.w	r3, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002bc8:	f1b9 0f00 	cmp.w	r9, #0
 8002bcc:	d1dc      	bne.n	8002b88 <dwt_writetxdata+0x34>
			write(cnt, header, length, buffer);
 8002bce:	2204      	movs	r2, #4
 8002bd0:	ab01      	add	r3, sp, #4
 8002bd2:	4669      	mov	r1, sp
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f7ff f9e9 	bl	8001fac <write>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	22ba      	movne	r2, #186	@ 0xba
 8002be0:	2281      	moveq	r2, #129	@ 0x81
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7d1b      	ldrb	r3, [r3, #20]
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8002be6:	f88d 9005 	strb.w	r9, [sp, #5]
	if (/*reg_offset == 0 && */length == 0) { /* Fast Access Commands (FAC)
 8002bea:	f88d 2004 	strb.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ca      	bne.n	8002b88 <dwt_writetxdata+0x34>
			write(cnt, header, length, buffer);
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	a901      	add	r1, sp, #4
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff f9d7 	bl	8001fac <write>
} // end dwt_xfer3000()
 8002bfe:	e7c3      	b.n	8002b88 <dwt_writetxdata+0x34>
		return DWT_ERROR;
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
} // end dwt_writetxdata()
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000440 	.word	0x20000440

08002c0c <dwt_configmrxlut>:
void dwt_configmrxlut(int channel) {
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (channel == 5) {
 8002c10:	2805      	cmp	r0, #5
void dwt_configmrxlut(int channel) {
 8002c12:	b085      	sub	sp, #20
	if (channel == 5) {
 8002c14:	d020      	beq.n	8002c58 <dwt_configmrxlut+0x4c>
 8002c16:	22af      	movs	r2, #175	@ 0xaf
 8002c18:	f64a 7bb5 	movw	fp, #44981	@ 0xafb5
 8002c1c:	f64a 787d 	movw	r8, #44925	@ 0xaf7d
 8002c20:	f64a 793e 	movw	r9, #44862	@ 0xaf3e
 8002c24:	f24a 57fe 	movw	r7, #42494	@ 0xa5fe
 8002c28:	f64a 4a36 	movw	sl, #44086	@ 0xac36
 8002c2c:	f64a 03fe 	movw	r3, #43262	@ 0xa8fe
 8002c30:	2502      	movs	r5, #2
 8002c32:	9200      	str	r2, [sp, #0]
		buffer[j] = (uint8_t) regval;
 8002c34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f88d 300f 	strb.w	r3, [sp, #15]
		header[0] |= DW3000_SPI_EAMRW;
 8002c3e:	f24e 03c6 	movw	r3, #57542	@ 0xe0c6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002c42:	4c63      	ldr	r4, [pc, #396]	@ (8002dd0 <dwt_configmrxlut+0x1c4>)
		header[0] |= DW3000_SPI_EAMRW;
 8002c44:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002c48:	6823      	ldr	r3, [r4, #0]
		buffer[j] = (uint8_t) regval;
 8002c4a:	f88d 500e 	strb.w	r5, [sp, #14]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002c4e:	7d1e      	ldrb	r6, [r3, #20]
 8002c50:	b196      	cbz	r6, 8002c78 <dwt_configmrxlut+0x6c>
}
 8002c52:	b005      	add	sp, #20
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (channel == 5) {
 8002c58:	22cf      	movs	r2, #207	@ 0xcf
 8002c5a:	f64c 7bf5 	movw	fp, #53237	@ 0xcff5
 8002c5e:	f64c 7836 	movw	r8, #53046	@ 0xcf36
 8002c62:	f24c 797e 	movw	r9, #51070	@ 0xc77e
 8002c66:	f24c 67be 	movw	r7, #50878	@ 0xc6be
 8002c6a:	f24c 4a3e 	movw	sl, #50238	@ 0xc43e
 8002c6e:	f24c 03fd 	movw	r3, #49405	@ 0xc0fd
 8002c72:	2501      	movs	r5, #1
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	e7dd      	b.n	8002c34 <dwt_configmrxlut+0x28>
			write(cnt, header, length, buffer);
 8002c78:	2204      	movs	r2, #4
 8002c7a:	ab03      	add	r3, sp, #12
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	a902      	add	r1, sp, #8
 8002c80:	f7ff f994 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002c84:	f24f 03c6 	movw	r3, #61638	@ 0xf0c6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002c88:	6822      	ldr	r2, [r4, #0]
 8002c8a:	7d12      	ldrb	r2, [r2, #20]
		buffer[j] = (uint8_t) regval;
 8002c8c:	f8ad a00c 	strh.w	sl, [sp, #12]
 8002c90:	f88d 600f 	strb.w	r6, [sp, #15]
 8002c94:	f88d 500e 	strb.w	r5, [sp, #14]
		header[0] |= DW3000_SPI_EAMRW;
 8002c98:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d1d7      	bne.n	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	ab03      	add	r3, sp, #12
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	a902      	add	r1, sp, #8
 8002caa:	f7ff f97f 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002cae:	23c7      	movs	r3, #199	@ 0xc7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	7d16      	ldrb	r6, [r2, #20]
		buffer[j] = (uint8_t) regval;
 8002cb4:	9a01      	ldr	r2, [sp, #4]
 8002cb6:	f8ad 700c 	strh.w	r7, [sp, #12]
 8002cba:	f88d 200f 	strb.w	r2, [sp, #15]
 8002cbe:	f88d 500e 	strb.w	r5, [sp, #14]
		header[0] |= DW3000_SPI_EAMRW;
 8002cc2:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002cc6:	2e00      	cmp	r6, #0
 8002cc8:	d1c3      	bne.n	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002cca:	2204      	movs	r2, #4
 8002ccc:	ab03      	add	r3, sp, #12
 8002cce:	2002      	movs	r0, #2
 8002cd0:	a902      	add	r1, sp, #8
 8002cd2:	f7ff f96b 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002cd6:	f241 03c7 	movw	r3, #4295	@ 0x10c7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	7d17      	ldrb	r7, [r2, #20]
		buffer[j] = (uint8_t) regval;
 8002cde:	f8ad 900c 	strh.w	r9, [sp, #12]
 8002ce2:	f88d 600f 	strb.w	r6, [sp, #15]
 8002ce6:	f88d 500e 	strb.w	r5, [sp, #14]
		header[0] |= DW3000_SPI_EAMRW;
 8002cea:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002cee:	2f00      	cmp	r7, #0
 8002cf0:	d1af      	bne.n	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	ab03      	add	r3, sp, #12
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	a902      	add	r1, sp, #8
 8002cfa:	f7ff f957 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002cfe:	f242 03c7 	movw	r3, #8391	@ 0x20c7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	f892 9014 	ldrb.w	r9, [r2, #20]
		buffer[j] = (uint8_t) regval;
 8002d08:	f8ad 800c 	strh.w	r8, [sp, #12]
 8002d0c:	f88d 700f 	strb.w	r7, [sp, #15]
 8002d10:	f88d 500e 	strb.w	r5, [sp, #14]
		header[0] |= DW3000_SPI_EAMRW;
 8002d14:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d18:	f1b9 0f00 	cmp.w	r9, #0
 8002d1c:	d199      	bne.n	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002d1e:	2204      	movs	r2, #4
 8002d20:	ab03      	add	r3, sp, #12
 8002d22:	a902      	add	r1, sp, #8
 8002d24:	2002      	movs	r0, #2
 8002d26:	f7ff f941 	bl	8001fac <write>
		buffer[j] = (uint8_t) regval;
 8002d2a:	22b5      	movs	r2, #181	@ 0xb5
		header[0] |= DW3000_SPI_EAMRW;
 8002d2c:	f243 03c7 	movw	r3, #12487	@ 0x30c7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d30:	6821      	ldr	r1, [r4, #0]
 8002d32:	7d0e      	ldrb	r6, [r1, #20]
		buffer[j] = (uint8_t) regval;
 8002d34:	9900      	ldr	r1, [sp, #0]
 8002d36:	f88d 900f 	strb.w	r9, [sp, #15]
 8002d3a:	f88d 100d 	strb.w	r1, [sp, #13]
 8002d3e:	f88d 500e 	strb.w	r5, [sp, #14]
 8002d42:	f88d 200c 	strb.w	r2, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8002d46:	f8ad 3008 	strh.w	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d181      	bne.n	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002d4e:	2204      	movs	r2, #4
 8002d50:	ab03      	add	r3, sp, #12
 8002d52:	2002      	movs	r0, #2
 8002d54:	a902      	add	r1, sp, #8
 8002d56:	f7ff f929 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002d5a:	f244 02c7 	movw	r2, #16583	@ 0x40c7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	7d1b      	ldrb	r3, [r3, #20]
		buffer[j] = (uint8_t) regval;
 8002d62:	f8ad b00c 	strh.w	fp, [sp, #12]
 8002d66:	f88d 500e 	strb.w	r5, [sp, #14]
 8002d6a:	f88d 600f 	strb.w	r6, [sp, #15]
		header[0] |= DW3000_SPI_EAMRW;
 8002d6e:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f47f af6d 	bne.w	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002d78:	2204      	movs	r2, #4
 8002d7a:	ab03      	add	r3, sp, #12
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	a902      	add	r1, sp, #8
 8002d80:	f7ff f914 	bl	8001fac <write>
		buffer[j] = (uint8_t) regval;
 8002d84:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <dwt_configmrxlut+0x1c8>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	7d1b      	ldrb	r3, [r3, #20]
		buffer[j] = (uint8_t) regval;
 8002d8a:	9203      	str	r2, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8002d8c:	f247 02c6 	movw	r2, #28870	@ 0x70c6
 8002d90:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f af5c 	bne.w	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	ab03      	add	r3, sp, #12
 8002d9e:	a902      	add	r1, sp, #8
 8002da0:	2002      	movs	r0, #2
 8002da2:	f7ff f903 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8002da6:	f248 02c6 	movw	r2, #32966	@ 0x80c6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002daa:	6823      	ldr	r3, [r4, #0]
		buffer[j] = (uint8_t) regval;
 8002dac:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <dwt_configmrxlut+0x1cc>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002dae:	7d1b      	ldrb	r3, [r3, #20]
		buffer[j] = (uint8_t) regval;
 8002db0:	9103      	str	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8002db2:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f af4b 	bne.w	8002c52 <dwt_configmrxlut+0x46>
			write(cnt, header, length, buffer);
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	ab03      	add	r3, sp, #12
 8002dc0:	a902      	add	r1, sp, #8
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f7ff f8f2 	bl	8001fac <write>
}
 8002dc8:	b005      	add	sp, #20
 8002dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000440 	.word	0x20000440
 8002dd4:	10000240 	.word	0x10000240
 8002dd8:	1b6da489 	.word	0x1b6da489
 8002ddc:	00000000 	.word	0x00000000

08002de0 <calculate_tag_distance>:
double calculate_tag_distance(uint8_t *rx_buffer, Distance_t *distance) {
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		header[0] |= DW3000_SPI_EAMRW;
 8002de4:	f24d 0441 	movw	r4, #53313	@ 0xd041
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002de8:	4e9b      	ldr	r6, [pc, #620]	@ (8003058 <calculate_tag_distance+0x278>)
double calculate_tag_distance(uint8_t *rx_buffer, Distance_t *distance) {
 8002dea:	b091      	sub	sp, #68	@ 0x44
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002dec:	6833      	ldr	r3, [r6, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8002dee:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002df2:	2200      	movs	r2, #0
double calculate_tag_distance(uint8_t *rx_buffer, Distance_t *distance) {
 8002df4:	4604      	mov	r4, r0
 8002df6:	468a      	mov	sl, r1
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8002df8:	6858      	ldr	r0, [r3, #4]
 8002dfa:	8919      	ldrh	r1, [r3, #8]
 8002dfc:	f001 ffae 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8002e00:	6833      	ldr	r3, [r6, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	a90d      	add	r1, sp, #52	@ 0x34
 8002e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e0c:	f002 fbb4 	bl	8005578 <HAL_SPI_Transmit>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8002e10:	ad0e      	add	r5, sp, #56	@ 0x38
	if (res == HAL_OK)
 8002e12:	2800      	cmp	r0, #0
 8002e14:	f000 8203 	beq.w	800321e <calculate_tag_distance+0x43e>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002e18:	6833      	ldr	r3, [r6, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002e1a:	4e90      	ldr	r6, [pc, #576]	@ (800305c <calculate_tag_distance+0x27c>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	8919      	ldrh	r1, [r3, #8]
 8002e20:	6858      	ldr	r0, [r3, #4]
 8002e22:	f001 ff9b 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8002e26:	6833      	ldr	r3, [r6, #0]
 8002e28:	7d1a      	ldrb	r2, [r3, #20]
 8002e2a:	2a02      	cmp	r2, #2
 8002e2c:	f000 81b6 	beq.w	800319c <calculate_tag_distance+0x3bc>
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8002e30:	7bd9      	ldrb	r1, [r3, #15]
		ts |= ts_tab[i];
 8002e32:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8002e36:	f89d 303b 	ldrb.w	r3, [sp, #59]	@ 0x3b
 8002e3a:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8002e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e42:	f89d 203a 	ldrb.w	r2, [sp, #58]	@ 0x3a
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8002e46:	2901      	cmp	r1, #1
		ts |= ts_tab[i];
 8002e48:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002e4c:	f89d 3039 	ldrb.w	r3, [sp, #57]	@ 0x39
 8002e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e54:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002e58:	f04f 0205 	mov.w	r2, #5
 8002e5c:	462b      	mov	r3, r5
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8002e5e:	f000 81cd 	beq.w	80031fc <calculate_tag_distance+0x41c>
 8002e62:	2903      	cmp	r1, #3
 8002e64:	f040 81cf 	bne.w	8003206 <calculate_tag_distance+0x426>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002e68:	2104      	movs	r1, #4
 8002e6a:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 8002e6e:	f7fe fed3 	bl	8001c18 <dwt_xfer3000.constprop.2>
		header[0] |= DW3000_SPI_EAMRW;
 8002e72:	f24b 03c0 	movw	r3, #45248	@ 0xb0c0
		buffer[j] = (uint8_t) regval;
 8002e76:	2100      	movs	r1, #0
		ts |= ts_tab[i];
 8002e78:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
		header[0] |= DW3000_SPI_EAMRW;
 8002e7c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
		ts |= ts_tab[i];
 8002e80:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8002e84:	f89d c039 	ldrb.w	ip, [sp, #57]	@ 0x39
 8002e88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002e8c:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002e90:	6830      	ldr	r0, [r6, #0]
		ts |= ts_tab[i];
 8002e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e96:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8002e9a:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
		ts <<= 8;
 8002e9e:	f3c3 4207 	ubfx	r2, r3, #16, #8
			+ (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <calculate_tag_distance+0x280>)
		ts |= ts_tab[i];
 8002ea4:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
			+ (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 8002ea8:	18f3      	adds	r3, r6, r3
 8002eaa:	f142 0200 	adc.w	r2, r2, #0
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		regval >>= 8;
 8002eb4:	0a1a      	lsrs	r2, r3, #8
		buffer[j] = (uint8_t) regval;
 8002eb6:	f363 0107 	bfi	r1, r3, #0, #8
 8002eba:	f362 210f 	bfi	r1, r2, #8, #8
		regval >>= 8;
 8002ebe:	0c1a      	lsrs	r2, r3, #16
		buffer[j] = (uint8_t) regval;
 8002ec0:	f362 4117 	bfi	r1, r2, #16, #8
		regval >>= 8;
 8002ec4:	0e1b      	lsrs	r3, r3, #24
		buffer[j] = (uint8_t) regval;
 8002ec6:	f363 611f 	bfi	r1, r3, #24, #8
 8002eca:	910e      	str	r1, [sp, #56]	@ 0x38
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8002ecc:	7d03      	ldrb	r3, [r0, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 819e 	beq.w	8003210 <calculate_tag_distance+0x430>
	clockOffsetRatio = ((float) dwt_readclockoffset()) / (uint32_t) (1 << 26);
 8002ed4:	f7ff f834 	bl	8001f40 <dwt_readclockoffset>
 8002ed8:	4605      	mov	r5, r0
	tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0)
 8002eda:	1bf0      	subs	r0, r6, r7
 8002edc:	f7fd fe8e 	bl	8000bfc <__aeabi_i2f>
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002ee0:	7be2      	ldrb	r2, [r4, #15]
 8002ee2:	7aa3      	ldrb	r3, [r4, #10]
	tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0)
 8002ee4:	4606      	mov	r6, r0
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002ee6:	ebc3 2302 	rsb	r3, r3, r2, lsl #8
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002eea:	7ba2      	ldrb	r2, [r4, #14]
 8002eec:	7b60      	ldrb	r0, [r4, #13]
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002eee:	4413      	add	r3, r2
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002ef0:	7c22      	ldrb	r2, [r4, #16]
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002ef2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002ef6:	7c62      	ldrb	r2, [r4, #17]
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002ef8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002efc:	7ae2      	ldrb	r2, [r4, #11]
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002efe:	eba3 2302 	sub.w	r3, r3, r2, lsl #8
		*ts += (uint32_t) ts_field[i] << (i * 8);
 8002f02:	7b22      	ldrb	r2, [r4, #12]
	rtd_resp = resp_tx_ts - poll_rx_ts;
 8002f04:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
	tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0)
 8002f08:	eba3 6000 	sub.w	r0, r3, r0, lsl #24
 8002f0c:	f7fd fe76 	bl	8000bfc <__aeabi_i2f>
 8002f10:	4604      	mov	r4, r0
	clockOffsetRatio = ((float) dwt_readclockoffset()) / (uint32_t) (1 << 26);
 8002f12:	4628      	mov	r0, r5
 8002f14:	f7fd fe72 	bl	8000bfc <__aeabi_i2f>
 8002f18:	f04f 514a 	mov.w	r1, #847249408	@ 0x32800000
 8002f1c:	f7fd fec2 	bl	8000ca4 <__aeabi_fmul>
 8002f20:	4601      	mov	r1, r0
	tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0)
 8002f22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f26:	f7fd fdb3 	bl	8000a90 <__aeabi_fsub>
 8002f2a:	4601      	mov	r1, r0
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7fd feb9 	bl	8000ca4 <__aeabi_fmul>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4630      	mov	r0, r6
 8002f36:	f7fd fdab 	bl	8000a90 <__aeabi_fsub>
 8002f3a:	f7fd fa75 	bl	8000428 <__aeabi_f2d>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b48      	ldr	r3, [pc, #288]	@ (8003064 <calculate_tag_distance+0x284>)
 8002f42:	f7fd fac9 	bl	80004d8 <__aeabi_dmul>
 8002f46:	a340      	add	r3, pc, #256	@ (adr r3, 8003048 <calculate_tag_distance+0x268>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fac4 	bl	80004d8 <__aeabi_dmul>
	distance->value = tof * SPEED_OF_LIGHT;
 8002f50:	a33f      	add	r3, pc, #252	@ (adr r3, 8003050 <calculate_tag_distance+0x270>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd fabf 	bl	80004d8 <__aeabi_dmul>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	460d      	mov	r5, r1
	if (distance->counter < 10) {
 8002f5e:	f89a 60c1 	ldrb.w	r6, [sl, #193]	@ 0xc1
	distance->value = tof * SPEED_OF_LIGHT;
 8002f62:	e9ca 4502 	strd	r4, r5, [sl, #8]
	if (distance->counter < 10) {
 8002f66:	2e09      	cmp	r6, #9
 8002f68:	d87e      	bhi.n	8003068 <calculate_tag_distance+0x288>
		distance->readings[distance->counter] = distance->value;
 8002f6a:	eb0a 03c6 	add.w	r3, sl, r6, lsl #3
 8002f6e:	e9c3 4504 	strd	r4, r5, [r3, #16]
		distance->counter++;
 8002f72:	3601      	adds	r6, #1
 8002f74:	b2f6      	uxtb	r6, r6
			distance->sum += distance->readings[i];
 8002f76:	2200      	movs	r2, #0
 8002f78:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8002f7c:	2300      	movs	r3, #0
		distance->counter++;
 8002f7e:	f88a 60c1 	strb.w	r6, [sl, #193]	@ 0xc1
			distance->sum += distance->readings[i];
 8002f82:	f7fd f8f3 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002f86:	2e01      	cmp	r6, #1
			distance->sum += distance->readings[i];
 8002f88:	4604      	mov	r4, r0
 8002f8a:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002f8c:	d045      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002f8e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8002f92:	f7fd f8eb 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002f96:	2e02      	cmp	r6, #2
			distance->sum += distance->readings[i];
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002f9c:	d03d      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002f9e:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8002fa2:	f7fd f8e3 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002fa6:	2e03      	cmp	r6, #3
			distance->sum += distance->readings[i];
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002fac:	d035      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002fae:	e9da 230a 	ldrd	r2, r3, [sl, #40]	@ 0x28
 8002fb2:	f7fd f8db 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002fb6:	2e04      	cmp	r6, #4
			distance->sum += distance->readings[i];
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002fbc:	d02d      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002fbe:	e9da 230c 	ldrd	r2, r3, [sl, #48]	@ 0x30
 8002fc2:	f7fd f8d3 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002fc6:	2e05      	cmp	r6, #5
			distance->sum += distance->readings[i];
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002fcc:	d025      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002fce:	e9da 230e 	ldrd	r2, r3, [sl, #56]	@ 0x38
 8002fd2:	f7fd f8cb 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002fd6:	2e06      	cmp	r6, #6
			distance->sum += distance->readings[i];
 8002fd8:	4604      	mov	r4, r0
 8002fda:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002fdc:	d01d      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002fde:	e9da 2310 	ldrd	r2, r3, [sl, #64]	@ 0x40
 8002fe2:	f7fd f8c3 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002fe6:	2e07      	cmp	r6, #7
			distance->sum += distance->readings[i];
 8002fe8:	4604      	mov	r4, r0
 8002fea:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002fec:	d015      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002fee:	e9da 2312 	ldrd	r2, r3, [sl, #72]	@ 0x48
 8002ff2:	f7fd f8bb 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8002ff6:	2e08      	cmp	r6, #8
			distance->sum += distance->readings[i];
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 8002ffc:	d00d      	beq.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 8002ffe:	e9da 2314 	ldrd	r2, r3, [sl, #80]	@ 0x50
 8003002:	f7fd f8b3 	bl	800016c <__adddf3>
		for (int i = 0; i < distance->counter; i++) {
 8003006:	2e0a      	cmp	r6, #10
			distance->sum += distance->readings[i];
 8003008:	4604      	mov	r4, r0
 800300a:	460d      	mov	r5, r1
		for (int i = 0; i < distance->counter; i++) {
 800300c:	d105      	bne.n	800301a <calculate_tag_distance+0x23a>
			distance->sum += distance->readings[i];
 800300e:	e9da 2316 	ldrd	r2, r3, [sl, #88]	@ 0x58
 8003012:	f7fd f8ab 	bl	800016c <__adddf3>
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
		distance->value = distance->sum / (double) distance->counter;
 800301a:	4630      	mov	r0, r6
 800301c:	e9ca 452c 	strd	r4, r5, [sl, #176]	@ 0xb0
 8003020:	f7fd f9e0 	bl	80003e4 <__aeabi_ui2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd fb7e 	bl	800072c <__aeabi_ddiv>
 8003030:	4680      	mov	r8, r0
 8003032:	4689      	mov	r9, r1
}
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
		distance->value = distance->sum / (double) distance->counter;
 8003038:	e9ca 8902 	strd	r8, r9, [sl, #8]
}
 800303c:	b011      	add	sp, #68	@ 0x44
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	f3af 8000 	nop.w
 8003048:	3bce48fa 	.word	0x3bce48fa
 800304c:	3db13518 	.word	0x3db13518
 8003050:	13000000 	.word	0x13000000
 8003054:	41b1dd19 	.word	0x41b1dd19
 8003058:	20000444 	.word	0x20000444
 800305c:	20000440 	.word	0x20000440
 8003060:	02aa8118 	.word	0x02aa8118
 8003064:	3fe00000 	.word	0x3fe00000
		if (fabs(distance->value - distance->last) < MAX_DISTANCE_ERROR) {
 8003068:	e9da 892e 	ldrd	r8, r9, [sl, #184]	@ 0xb8
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	f7fd f87a 	bl	8000168 <__aeabi_dsub>
 8003074:	2200      	movs	r2, #0
 8003076:	4b6e      	ldr	r3, [pc, #440]	@ (8003230 <calculate_tag_distance+0x450>)
 8003078:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800307c:	f7fd fc9e 	bl	80009bc <__aeabi_dcmplt>
 8003080:	2800      	cmp	r0, #0
 8003082:	d079      	beq.n	8003178 <calculate_tag_distance+0x398>
			distance->error_times = 0;
 8003084:	2300      	movs	r3, #0
				distance->new[i] = distance->readings[i + 1];
 8003086:	1e72      	subs	r2, r6, #1
 8003088:	f10a 0118 	add.w	r1, sl, #24
			distance->error_times = 0;
 800308c:	f88a 30c0 	strb.w	r3, [sl, #192]	@ 0xc0
				distance->new[i] = distance->readings[i + 1];
 8003090:	00d2      	lsls	r2, r2, #3
 8003092:	f10a 0060 	add.w	r0, sl, #96	@ 0x60
 8003096:	f004 f9ae 	bl	80073f6 <memmove>
				distance->sum += distance->new[i];
 800309a:	e9da 891a 	ldrd	r8, r9, [sl, #104]	@ 0x68
 800309e:	e9da 671c 	ldrd	r6, r7, [sl, #112]	@ 0x70
 80030a2:	e9da 231e 	ldrd	r2, r3, [sl, #120]	@ 0x78
 80030a6:	e9da bc24 	ldrd	fp, ip, [sl, #144]	@ 0x90
 80030aa:	e9da 0118 	ldrd	r0, r1, [sl, #96]	@ 0x60
				distance->readings[i] = distance->new[i];
 80030ae:	e9ca 8906 	strd	r8, r9, [sl, #24]
 80030b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80030b6:	e9ca 230a 	strd	r2, r3, [sl, #40]	@ 0x28
				distance->sum += distance->new[i];
 80030ba:	e9da 2320 	ldrd	r2, r3, [sl, #128]	@ 0x80
				distance->readings[i] = distance->new[i];
 80030be:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80030c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80030c6:	e9ca 230c 	strd	r2, r3, [sl, #48]	@ 0x30
				distance->sum += distance->new[i];
 80030ca:	e9da 2322 	ldrd	r2, r3, [sl, #136]	@ 0x88
				distance->readings[i] = distance->new[i];
 80030ce:	e9ca bc10 	strd	fp, ip, [sl, #64]	@ 0x40
				distance->sum += distance->new[i];
 80030d2:	e9da bc26 	ldrd	fp, ip, [sl, #152]	@ 0x98
				distance->readings[i] = distance->new[i];
 80030d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80030da:	e9ca 230e 	strd	r2, r3, [sl, #56]	@ 0x38
 80030de:	e9cd bc02 	strd	fp, ip, [sp, #8]
 80030e2:	e9ca bc12 	strd	fp, ip, [sl, #72]	@ 0x48
				distance->sum += distance->new[i];
 80030e6:	e9da bc28 	ldrd	fp, ip, [sl, #160]	@ 0xa0
 80030ea:	2200      	movs	r2, #0
				distance->readings[i] = distance->new[i];
 80030ec:	e9ca bc14 	strd	fp, ip, [sl, #80]	@ 0x50
				distance->sum += distance->new[i];
 80030f0:	2300      	movs	r3, #0
			distance->new[distance->counter - 1] = distance->value;
 80030f2:	e9ca 452a 	strd	r4, r5, [sl, #168]	@ 0xa8
				distance->readings[i] = distance->new[i];
 80030f6:	e9ca 0104 	strd	r0, r1, [sl, #16]
 80030fa:	e9ca 6708 	strd	r6, r7, [sl, #32]
 80030fe:	e9cd bc00 	strd	fp, ip, [sp]
				distance->sum += distance->new[i];
 8003102:	f7fd f833 	bl	800016c <__adddf3>
 8003106:	4642      	mov	r2, r8
 8003108:	464b      	mov	r3, r9
 800310a:	f7fd f82f 	bl	800016c <__adddf3>
 800310e:	4632      	mov	r2, r6
 8003110:	463b      	mov	r3, r7
 8003112:	f7fd f82b 	bl	800016c <__adddf3>
 8003116:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800311a:	f7fd f827 	bl	800016c <__adddf3>
 800311e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003122:	f7fd f823 	bl	800016c <__adddf3>
 8003126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800312a:	f7fd f81f 	bl	800016c <__adddf3>
 800312e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003132:	f7fd f81b 	bl	800016c <__adddf3>
 8003136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800313a:	f7fd f817 	bl	800016c <__adddf3>
 800313e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003142:	f7fd f813 	bl	800016c <__adddf3>
 8003146:	4622      	mov	r2, r4
 8003148:	462b      	mov	r3, r5
 800314a:	f7fd f80f 	bl	800016c <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
				distance->readings[i] = distance->new[i];
 8003152:	e9ca 4516 	strd	r4, r5, [sl, #88]	@ 0x58
			distance->last = distance->value;
 8003156:	e9ca 232c 	strd	r2, r3, [sl, #176]	@ 0xb0
 800315a:	e9ca 452e 	strd	r4, r5, [sl, #184]	@ 0xb8
			distance->value = distance->sum / (double) distance->counter;
 800315e:	2200      	movs	r2, #0
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <calculate_tag_distance+0x454>)
 8003162:	f7fd fae3 	bl	800072c <__aeabi_ddiv>
 8003166:	4680      	mov	r8, r0
 8003168:	4689      	mov	r9, r1
}
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
			distance->value = distance->sum / (double) distance->counter;
 800316e:	e9ca 8902 	strd	r8, r9, [sl, #8]
}
 8003172:	b011      	add	sp, #68	@ 0x44
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			distance->error_times++;
 8003178:	f89a 30c0 	ldrb.w	r3, [sl, #192]	@ 0xc0
}
 800317c:	4649      	mov	r1, r9
			distance->error_times++;
 800317e:	3301      	adds	r3, #1
 8003180:	b2db      	uxtb	r3, r3
			if (distance->error_times > 20) {
 8003182:	2b14      	cmp	r3, #20
				distance->error_times = 0;
 8003184:	bf88      	it	hi
 8003186:	f8aa 00c0 	strhhi.w	r0, [sl, #192]	@ 0xc0
}
 800318a:	4640      	mov	r0, r8
			distance->value = distance->last;
 800318c:	e9ca 8902 	strd	r8, r9, [sl, #8]
			distance->error_times++;
 8003190:	bf98      	it	ls
 8003192:	f88a 30c0 	strbls.w	r3, [sl, #192]	@ 0xc0
}
 8003196:	b011      	add	sp, #68	@ 0x44
 8003198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800319c:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <calculate_tag_distance+0x458>)
 800319e:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
		data = byteArray[byte] ^ crcRemainderInit;
 80031a2:	f89d 1035 	ldrb.w	r1, [sp, #53]	@ 0x35
 80031a6:	5c9a      	ldrb	r2, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80031a8:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031aa:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80031ac:	5c9a      	ldrb	r2, [r3, r2]
 80031ae:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031b2:	404a      	eors	r2, r1
 80031b4:	5c9a      	ldrb	r2, [r3, r2]
		data = byteArray[byte] ^ crcRemainderInit;
 80031b6:	f89d 1039 	ldrb.w	r1, [sp, #57]	@ 0x39
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031ba:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80031bc:	5c9a      	ldrb	r2, [r3, r2]
 80031be:	f89d 103a 	ldrb.w	r1, [sp, #58]	@ 0x3a
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031c2:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80031c4:	5c9a      	ldrb	r2, [r3, r2]
 80031c6:	f89d 103b 	ldrb.w	r1, [sp, #59]	@ 0x3b
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031ca:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80031cc:	5c99      	ldrb	r1, [r3, r2]
 80031ce:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80031d2:	404a      	eors	r2, r1
 80031d4:	5c9f      	ldrb	r7, [r3, r2]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80031d6:	2100      	movs	r1, #0
 80031d8:	f10d 0333 	add.w	r3, sp, #51	@ 0x33
 80031dc:	2201      	movs	r2, #1
 80031de:	f7fe fd1b 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 80031e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
			if (crc8 != dwcrc8) {
 80031e6:	429f      	cmp	r7, r3
				if (pdw3000local->cbSPIRDErr != NULL)
 80031e8:	6833      	ldr	r3, [r6, #0]
			if (crc8 != dwcrc8) {
 80031ea:	f43f ae21 	beq.w	8002e30 <calculate_tag_distance+0x50>
				if (pdw3000local->cbSPIRDErr != NULL)
 80031ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	f43f ae1d 	beq.w	8002e30 <calculate_tag_distance+0x50>
					pdw3000local->cbSPIRDErr();
 80031f6:	4790      	blx	r2
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	e619      	b.n	8002e30 <calculate_tag_distance+0x50>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80031fc:	2100      	movs	r1, #0
 80031fe:	480f      	ldr	r0, [pc, #60]	@ (800323c <calculate_tag_distance+0x45c>)
 8003200:	f7fe fd0a 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 8003204:	e635      	b.n	8002e72 <calculate_tag_distance+0x92>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003206:	2100      	movs	r1, #0
 8003208:	2064      	movs	r0, #100	@ 0x64
 800320a:	f7fe fd05 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 800320e:	e630      	b.n	8002e72 <calculate_tag_distance+0x92>
			write(cnt, header, length, buffer);
 8003210:	462b      	mov	r3, r5
 8003212:	2204      	movs	r2, #4
 8003214:	a90d      	add	r1, sp, #52	@ 0x34
 8003216:	2002      	movs	r0, #2
 8003218:	f7fe fec8 	bl	8001fac <write>
 800321c:	e65a      	b.n	8002ed4 <calculate_tag_distance+0xf4>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 800321e:	6833      	ldr	r3, [r6, #0]
 8003220:	2205      	movs	r2, #5
 8003222:	4629      	mov	r1, r5
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800322a:	f002 fbe7 	bl	80059fc <HAL_SPI_Receive>
 800322e:	e5f3      	b.n	8002e18 <calculate_tag_distance+0x38>
 8003230:	40340000 	.word	0x40340000
 8003234:	40240000 	.word	0x40240000
 8003238:	20000340 	.word	0x20000340
 800323c:	00180004 	.word	0x00180004

08003240 <dwt_readrxdata>:
void dwt_readrxdata(uint8_t *buffer, uint16_t length, uint16_t rxBufferOffset) {
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1) //if the flag is 0x3 we are reading from RX_BUFFER_1
 8003244:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 80032f0 <dwt_readrxdata+0xb0>
	if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN) {
 8003248:	eb02 0c01 	add.w	ip, r2, r1
	if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1) //if the flag is 0x3 we are reading from RX_BUFFER_1
 800324c:	f8d8 5000 	ldr.w	r5, [r8]
void dwt_readrxdata(uint8_t *buffer, uint16_t length, uint16_t rxBufferOffset) {
 8003250:	b082      	sub	sp, #8
	if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1) //if the flag is 0x3 we are reading from RX_BUFFER_1
 8003252:	7beb      	ldrb	r3, [r5, #15]
 8003254:	2b03      	cmp	r3, #3
 8003256:	bf15      	itete	ne
 8003258:	2312      	movne	r3, #18
 800325a:	2313      	moveq	r3, #19
 800325c:	f44f 1e90 	movne.w	lr, #1179648	@ 0x120000
 8003260:	f44f 1e98 	moveq.w	lr, #1245184	@ 0x130000
	if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN) {
 8003264:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8003268:	da0d      	bge.n	8003286 <dwt_readrxdata+0x46>
		if (rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN) {
 800326a:	2a7f      	cmp	r2, #127	@ 0x7f
 800326c:	460f      	mov	r7, r1
 800326e:	4614      	mov	r4, r2
 8003270:	4606      	mov	r6, r0
 8003272:	d80b      	bhi.n	800328c <dwt_readrxdata+0x4c>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003274:	4603      	mov	r3, r0
 8003276:	460a      	mov	r2, r1
 8003278:	4670      	mov	r0, lr
 800327a:	4621      	mov	r1, r4
}
 800327c:	b002      	add	sp, #8
 800327e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003282:	f7fe bcc9 	b.w	8001c18 <dwt_xfer3000.constprop.2>
}
 8003286:	b002      	add	sp, #8
 8003288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		header[0] |= DW3000_SPI_EAMRW;
 800328c:	f241 02fe 	movw	r2, #4350	@ 0x10fe
		buffer[j] = (uint8_t) regval;
 8003290:	f88d 3004 	strb.w	r3, [sp, #4]
 8003294:	2300      	movs	r3, #0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003296:	7d2d      	ldrb	r5, [r5, #20]
		header[0] |= DW3000_SPI_EAMRW;
 8003298:	f8ad 2000 	strh.w	r2, [sp]
		buffer[j] = (uint8_t) regval;
 800329c:	f88d 3005 	strb.w	r3, [sp, #5]
 80032a0:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80032a4:	b14d      	cbz	r5, 80032ba <dwt_readrxdata+0x7a>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80032a6:	4633      	mov	r3, r6
 80032a8:	463a      	mov	r2, r7
 80032aa:	2100      	movs	r1, #0
 80032ac:	f44f 10e8 	mov.w	r0, #1900544	@ 0x1d0000
}
 80032b0:	b002      	add	sp, #8
 80032b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80032b6:	f7fe bcaf 	b.w	8001c18 <dwt_xfer3000.constprop.2>
			write(cnt, header, length, buffer);
 80032ba:	2204      	movs	r2, #4
 80032bc:	ab01      	add	r3, sp, #4
 80032be:	4669      	mov	r1, sp
 80032c0:	2002      	movs	r0, #2
 80032c2:	f7fe fe73 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 80032c6:	f242 02fe 	movw	r2, #8446	@ 0x20fe
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80032ca:	f8d8 3000 	ldr.w	r3, [r8]
 80032ce:	7d1b      	ldrb	r3, [r3, #20]
		buffer[j] = (uint8_t) regval;
 80032d0:	f8ad 4004 	strh.w	r4, [sp, #4]
 80032d4:	f8ad 5006 	strh.w	r5, [sp, #6]
		header[0] |= DW3000_SPI_EAMRW;
 80032d8:	f8ad 2000 	strh.w	r2, [sp]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e2      	bne.n	80032a6 <dwt_readrxdata+0x66>
			write(cnt, header, length, buffer);
 80032e0:	2204      	movs	r2, #4
 80032e2:	4669      	mov	r1, sp
 80032e4:	ab01      	add	r3, sp, #4
 80032e6:	2002      	movs	r0, #2
 80032e8:	f7fe fe60 	bl	8001fac <write>
 80032ec:	e7db      	b.n	80032a6 <dwt_readrxdata+0x66>
 80032ee:	bf00      	nop
 80032f0:	20000440 	.word	0x20000440

080032f4 <dwt_rxenable>:
int dwt_rxenable(int mode) {
 80032f4:	b530      	push	{r4, r5, lr}
 80032f6:	b083      	sub	sp, #12
	if (mode == DWT_START_RX_IMMEDIATE) {
 80032f8:	b178      	cbz	r0, 800331a <dwt_rxenable+0x26>
		switch (mode & ~DWT_IDLE_ON_DLY_ERR) {
 80032fa:	f020 0302 	bic.w	r3, r0, #2
 80032fe:	3b01      	subs	r3, #1
 8003300:	4604      	mov	r4, r0
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d835      	bhi.n	8003372 <dwt_rxenable+0x7e>
 8003306:	e8df f003 	tbb	[pc, r3]
 800330a:	3413      	.short	0x3413
 800330c:	34343734 	.word	0x34343734
 8003310:	34343a34 	.word	0x34343a34
 8003314:	34343434 	.word	0x34343434
 8003318:	3d34      	.short	0x3d34
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 800331a:	f640 0285 	movw	r2, #2181	@ 0x885
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800331e:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <dwt_rxenable+0xb0>)
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8003320:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	7d1b      	ldrb	r3, [r3, #20]
 8003328:	b3ab      	cbz	r3, 8003396 <dwt_rxenable+0xa2>
	return DWT_SUCCESS;
 800332a:	2000      	movs	r0, #0
} // end dwt_rxenable()
 800332c:	b003      	add	sp, #12
 800332e:	bd30      	pop	{r4, r5, pc}
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8003330:	f241 0289 	movw	r2, #4233	@ 0x1089
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <dwt_rxenable+0xb0>)
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8003336:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	ad01      	add	r5, sp, #4
 800333e:	7d1b      	ldrb	r3, [r3, #20]
 8003340:	b31b      	cbz	r3, 800338a <dwt_rxenable+0x96>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003342:	462b      	mov	r3, r5
 8003344:	2201      	movs	r2, #1
 8003346:	2103      	movs	r1, #3
 8003348:	2044      	movs	r0, #68	@ 0x44
 800334a:	f7fe fc65 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 800334e:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8003352:	071b      	lsls	r3, r3, #28
 8003354:	d5e9      	bpl.n	800332a <dwt_rxenable+0x36>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 8003356:	2300      	movs	r3, #0
 8003358:	461a      	mov	r2, r3
 800335a:	4619      	mov	r1, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fe61 	bl	8002024 <dwt_xfer3000.constprop.1>
			if ((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8003362:	f014 0302 	ands.w	r3, r4, #2
 8003366:	d104      	bne.n	8003372 <dwt_rxenable+0x7e>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 8003368:	461a      	mov	r2, r3
 800336a:	4619      	mov	r1, r3
 800336c:	2002      	movs	r0, #2
 800336e:	f7fe fe59 	bl	8002024 <dwt_xfer3000.constprop.1>
			return DWT_ERROR; // return error
 8003372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003376:	e7d9      	b.n	800332c <dwt_rxenable+0x38>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8003378:	f642 0295 	movw	r2, #10389	@ 0x2895
 800337c:	e7da      	b.n	8003334 <dwt_rxenable+0x40>
 800337e:	f242 0291 	movw	r2, #8337	@ 0x2091
 8003382:	e7d7      	b.n	8003334 <dwt_rxenable+0x40>
 8003384:	f641 028d 	movw	r2, #6285	@ 0x188d
 8003388:	e7d4      	b.n	8003334 <dwt_rxenable+0x40>
			write(cnt, header, length, buffer);
 800338a:	461a      	mov	r2, r3
 800338c:	4629      	mov	r1, r5
 800338e:	2001      	movs	r0, #1
 8003390:	f7fe fe0c 	bl	8001fac <write>
} // end dwt_xfer3000()
 8003394:	e7d5      	b.n	8003342 <dwt_rxenable+0x4e>
			write(cnt, header, length, buffer);
 8003396:	461a      	mov	r2, r3
 8003398:	a901      	add	r1, sp, #4
 800339a:	2001      	movs	r0, #1
 800339c:	f7fe fe06 	bl	8001fac <write>
} // end dwt_xfer3000()
 80033a0:	e7c3      	b.n	800332a <dwt_rxenable+0x36>
 80033a2:	bf00      	nop
 80033a4:	20000440 	.word	0x20000440

080033a8 <dwt_calcbandwidthadj>:
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel) {
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		header[0] |= DW3000_SPI_EAMRW;
 80033ac:	f241 02e2 	movw	r2, #4322	@ 0x10e2
	buffer[0] = (uint8_t) regval;
 80033b0:	f641 0422 	movw	r4, #6178	@ 0x1822
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033b4:	4dac      	ldr	r5, [pc, #688]	@ (8003668 <dwt_calcbandwidthadj+0x2c0>)
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel) {
 80033b6:	b085      	sub	sp, #20
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033b8:	682b      	ldr	r3, [r5, #0]
	buffer[0] = (uint8_t) regval;
 80033ba:	f8ad 4004 	strh.w	r4, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80033be:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033c2:	7d1b      	ldrb	r3, [r3, #20]
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel) {
 80033c4:	4604      	mov	r4, r0
 80033c6:	460f      	mov	r7, r1
 80033c8:	ae01      	add	r6, sp, #4
 80033ca:	f10d 0908 	add.w	r9, sp, #8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80ab 	beq.w	800352a <dwt_calcbandwidthadj+0x182>
	if (channel == SEL_CHANNEL5) {
 80033d4:	2f05      	cmp	r7, #5
 80033d6:	f000 80a1 	beq.w	800351c <dwt_calcbandwidthadj+0x174>
	} else if (channel == SEL_CHANNEL9) {
 80033da:	2f09      	cmp	r7, #9
 80033dc:	f000 80ea 	beq.w	80035b4 <dwt_calcbandwidthadj+0x20c>
		header[0] |= DW3000_SPI_EAMRW;
 80033e0:	f247 02d0 	movw	r2, #28880	@ 0x70d0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033e4:	682b      	ldr	r3, [r5, #0]
	dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0,
 80033e6:	f3c4 040b 	ubfx	r4, r4, #0, #12
	buffer[0] = (uint8_t) regval;
 80033ea:	f8ad 4004 	strh.w	r4, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80033ee:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80033f2:	7d1b      	ldrb	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 811d 	beq.w	8003634 <dwt_calcbandwidthadj+0x28c>
		header[0] |= DW3000_SPI_EAMRW;
 80033fa:	f244 0850 	movw	r8, #16464	@ 0x4050
 80033fe:	4c9b      	ldr	r4, [pc, #620]	@ (800366c <dwt_calcbandwidthadj+0x2c4>)
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003400:	4f9b      	ldr	r7, [pc, #620]	@ (8003670 <dwt_calcbandwidthadj+0x2c8>)
}
 8003402:	e004      	b.n	800340e <dwt_calcbandwidthadj+0x66>
	return regval;
 8003404:	f89d 3002 	ldrb.w	r3, [sp, #2]
	while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK)
 8003408:	f013 0301 	ands.w	r3, r3, #1
 800340c:	d053      	beq.n	80034b6 <dwt_calcbandwidthadj+0x10e>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800340e:	6823      	ldr	r3, [r4, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8003410:	f8ad 8004 	strh.w	r8, [sp, #4]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003414:	8919      	ldrh	r1, [r3, #8]
 8003416:	6858      	ldr	r0, [r3, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f001 fc9f 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 800341e:	6820      	ldr	r0, [r4, #0]
 8003420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003424:	2202      	movs	r2, #2
 8003426:	4631      	mov	r1, r6
 8003428:	6800      	ldr	r0, [r0, #0]
 800342a:	f002 f8a5 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 800342e:	2800      	cmp	r0, #0
 8003430:	d057      	beq.n	80034e2 <dwt_calcbandwidthadj+0x13a>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	8919      	ldrh	r1, [r3, #8]
 8003438:	6858      	ldr	r0, [r3, #4]
 800343a:	f001 fc8f 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800343e:	682b      	ldr	r3, [r5, #0]
 8003440:	f893 a014 	ldrb.w	sl, [r3, #20]
 8003444:	f1ba 0f02 	cmp.w	sl, #2
 8003448:	d1dc      	bne.n	8003404 <dwt_calcbandwidthadj+0x5c>
		header[0] |= DW3000_SPI_EAMRW;
 800344a:	f246 0140 	movw	r1, #24640	@ 0x6040
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800344e:	f89d 2004 	ldrb.w	r2, [sp, #4]
		data = byteArray[byte] ^ crcRemainderInit;
 8003452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003456:	5cba      	ldrb	r2, [r7, r2]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003458:	6820      	ldr	r0, [r4, #0]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800345a:	405a      	eors	r2, r3
		data = byteArray[byte] ^ crcRemainderInit;
 800345c:	f817 c002 	ldrb.w	ip, [r7, r2]
 8003460:	f89d 3002 	ldrb.w	r3, [sp, #2]
		header[0] |= DW3000_SPI_EAMRW;
 8003464:	f8ad 1008 	strh.w	r1, [sp, #8]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003468:	8901      	ldrh	r1, [r0, #8]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800346a:	ea83 030c 	eor.w	r3, r3, ip
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800346e:	2200      	movs	r2, #0
 8003470:	6840      	ldr	r0, [r0, #4]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003472:	f817 b003 	ldrb.w	fp, [r7, r3]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003476:	f001 fc71 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003480:	4652      	mov	r2, sl
 8003482:	4649      	mov	r1, r9
 8003484:	6800      	ldr	r0, [r0, #0]
 8003486:	f002 f877 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 800348a:	2800      	cmp	r0, #0
 800348c:	d033      	beq.n	80034f6 <dwt_calcbandwidthadj+0x14e>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	8919      	ldrh	r1, [r3, #8]
 8003494:	6858      	ldr	r0, [r3, #4]
 8003496:	f001 fc61 	bl	8004d5c <HAL_GPIO_WritePin>
	return regval;
 800349a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800349e:	682a      	ldr	r2, [r5, #0]
			if (crc8 != dwcrc8) {
 80034a0:	459b      	cmp	fp, r3
 80034a2:	d0af      	beq.n	8003404 <dwt_calcbandwidthadj+0x5c>
				if (pdw3000local->cbSPIRDErr != NULL)
 80034a4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ac      	beq.n	8003404 <dwt_calcbandwidthadj+0x5c>
					pdw3000local->cbSPIRDErr();
 80034aa:	4798      	blx	r3
	return regval;
 80034ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
	while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK)
 80034b0:	f013 0301 	ands.w	r3, r3, #1
 80034b4:	d1ab      	bne.n	800340e <dwt_calcbandwidthadj+0x66>
		header[0] |= DW3000_SPI_EAMRW;
 80034b6:	f241 02ce 	movw	r2, #4302	@ 0x10ce
		buffer[j] = (uint8_t) regval;
 80034ba:	9302      	str	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80034bc:	682b      	ldr	r3, [r5, #0]
		header[0] |= DW3000_SPI_EAMRW;
 80034be:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80034c2:	7d1c      	ldrb	r4, [r3, #20]
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d07c      	beq.n	80035c2 <dwt_calcbandwidthadj+0x21a>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80034c8:	464b      	mov	r3, r9
 80034ca:	2201      	movs	r2, #1
 80034cc:	2100      	movs	r1, #0
 80034ce:	4869      	ldr	r0, [pc, #420]	@ (8003674 <dwt_calcbandwidthadj+0x2cc>)
 80034d0:	f7fe fba2 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 80034d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
}
 80034d8:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80034dc:	b005      	add	sp, #20
 80034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034e8:	2201      	movs	r2, #1
 80034ea:	f10d 0102 	add.w	r1, sp, #2
 80034ee:	6800      	ldr	r0, [r0, #0]
 80034f0:	f002 fa84 	bl	80059fc <HAL_SPI_Receive>
 80034f4:	e79d      	b.n	8003432 <dwt_calcbandwidthadj+0x8a>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f10d 0103 	add.w	r1, sp, #3
 8003500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003504:	f002 fa7a 	bl	80059fc <HAL_SPI_Receive>
 8003508:	e7c1      	b.n	800348e <dwt_calcbandwidthadj+0xe6>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800350a:	4a5b      	ldr	r2, [pc, #364]	@ (8003678 <dwt_calcbandwidthadj+0x2d0>)
 800350c:	9203      	str	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800350e:	b92b      	cbnz	r3, 800351c <dwt_calcbandwidthadj+0x174>
			write(cnt, header, length, buffer);
 8003510:	464b      	mov	r3, r9
 8003512:	2208      	movs	r2, #8
 8003514:	4631      	mov	r1, r6
 8003516:	2002      	movs	r0, #2
 8003518:	f7fe fd48 	bl	8001fac <write>
		dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0,
 800351c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003520:	4a55      	ldr	r2, [pc, #340]	@ (8003678 <dwt_calcbandwidthadj+0x2d0>)
 8003522:	4856      	ldr	r0, [pc, #344]	@ (800367c <dwt_calcbandwidthadj+0x2d4>)
 8003524:	f7fe fdc2 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
 8003528:	e75a      	b.n	80033e0 <dwt_calcbandwidthadj+0x38>
			write(cnt, header, length, buffer);
 800352a:	2202      	movs	r2, #2
 800352c:	4633      	mov	r3, r6
 800352e:	4610      	mov	r0, r2
 8003530:	4649      	mov	r1, r9
 8003532:	f7fe fd3b 	bl	8001fac <write>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003536:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
		header[0] |= DW3000_SPI_EAMRW;
 800353a:	f242 3acf 	movw	sl, #9167	@ 0x23cf
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800353e:	f04f 2208 	mov.w	r2, #134219776	@ 0x8000800
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003546:	f8cd 8008 	str.w	r8, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 800354a:	f8ad a004 	strh.w	sl, [sp, #4]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800354e:	9203      	str	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af3f 	bne.w	80033d4 <dwt_calcbandwidthadj+0x2c>
			write(cnt, header, length, buffer);
 8003556:	464b      	mov	r3, r9
 8003558:	2208      	movs	r2, #8
 800355a:	4631      	mov	r1, r6
 800355c:	2002      	movs	r0, #2
 800355e:	f7fe fd25 	bl	8001fac <write>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003562:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003566:	682b      	ldr	r3, [r5, #0]
 8003568:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800356a:	e9cd 8202 	strd	r8, r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 800356e:	f8ad a004 	strh.w	sl, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003572:	2b00      	cmp	r3, #0
 8003574:	f47f af2e 	bne.w	80033d4 <dwt_calcbandwidthadj+0x2c>
			write(cnt, header, length, buffer);
 8003578:	464b      	mov	r3, r9
 800357a:	2208      	movs	r2, #8
 800357c:	4631      	mov	r1, r6
 800357e:	2002      	movs	r0, #2
 8003580:	f7fe fd14 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 8003584:	f240 32ce 	movw	r2, #974	@ 0x3ce
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003588:	682b      	ldr	r3, [r5, #0]
	if (channel == SEL_CHANNEL5) {
 800358a:	2f05      	cmp	r7, #5
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800358c:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800358e:	f8cd 8008 	str.w	r8, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8003592:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (channel == SEL_CHANNEL5) {
 8003596:	d0b8      	beq.n	800350a <dwt_calcbandwidthadj+0x162>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003598:	4a39      	ldr	r2, [pc, #228]	@ (8003680 <dwt_calcbandwidthadj+0x2d8>)
 800359a:	9203      	str	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800359c:	2b00      	cmp	r3, #0
 800359e:	f47f af1c 	bne.w	80033da <dwt_calcbandwidthadj+0x32>
			write(cnt, header, length, buffer);
 80035a2:	464b      	mov	r3, r9
 80035a4:	2208      	movs	r2, #8
 80035a6:	4631      	mov	r1, r6
 80035a8:	2002      	movs	r0, #2
 80035aa:	f7fe fcff 	bl	8001fac <write>
	} else if (channel == SEL_CHANNEL9) {
 80035ae:	2f09      	cmp	r7, #9
 80035b0:	f47f af16 	bne.w	80033e0 <dwt_calcbandwidthadj+0x38>
		dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0,
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035b8:	4a31      	ldr	r2, [pc, #196]	@ (8003680 <dwt_calcbandwidthadj+0x2d8>)
 80035ba:	4830      	ldr	r0, [pc, #192]	@ (800367c <dwt_calcbandwidthadj+0x2d4>)
 80035bc:	f7fe fd76 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
}
 80035c0:	e70e      	b.n	80033e0 <dwt_calcbandwidthadj+0x38>
			write(cnt, header, length, buffer);
 80035c2:	464b      	mov	r3, r9
 80035c4:	2204      	movs	r2, #4
 80035c6:	4631      	mov	r1, r6
 80035c8:	2002      	movs	r0, #2
 80035ca:	f7fe fcef 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	7d1f      	ldrb	r7, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 80035d2:	f242 03cf 	movw	r3, #8399	@ 0x20cf
		buffer[j] = (uint8_t) regval;
 80035d6:	9402      	str	r4, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80035d8:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80035dc:	2f00      	cmp	r7, #0
 80035de:	f47f af73 	bne.w	80034c8 <dwt_calcbandwidthadj+0x120>
			write(cnt, header, length, buffer);
 80035e2:	464b      	mov	r3, r9
 80035e4:	2204      	movs	r2, #4
 80035e6:	4631      	mov	r1, r6
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7fe fcdf 	bl	8001fac <write>
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80035ee:	228e      	movs	r2, #142	@ 0x8e
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	7d1b      	ldrb	r3, [r3, #20]
		buffer[j] = (uint8_t) regval;
 80035f4:	9702      	str	r7, [sp, #8]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80035f6:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af64 	bne.w	80034c8 <dwt_calcbandwidthadj+0x120>
			write(cnt, header, length, buffer);
 8003600:	464b      	mov	r3, r9
 8003602:	2204      	movs	r2, #4
 8003604:	4631      	mov	r1, r6
 8003606:	2001      	movs	r0, #1
 8003608:	f7fe fcd0 	bl	8001fac <write>
	buffer[0] = (uint8_t) regval;
 800360c:	f44f 7100 	mov.w	r1, #512	@ 0x200
		header[0] |= DW3000_SPI_EAMRW;
 8003610:	f241 02e2 	movw	r2, #4322	@ 0x10e2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	7d1b      	ldrb	r3, [r3, #20]
	buffer[0] = (uint8_t) regval;
 8003618:	f8ad 1004 	strh.w	r1, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 800361c:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f af51 	bne.w	80034c8 <dwt_calcbandwidthadj+0x120>
			write(cnt, header, length, buffer);
 8003626:	2202      	movs	r2, #2
 8003628:	4633      	mov	r3, r6
 800362a:	4649      	mov	r1, r9
 800362c:	4610      	mov	r0, r2
 800362e:	f7fe fcbd 	bl	8001fac <write>
 8003632:	e749      	b.n	80034c8 <dwt_calcbandwidthadj+0x120>
 8003634:	2202      	movs	r2, #2
 8003636:	4633      	mov	r3, r6
 8003638:	4649      	mov	r1, r9
 800363a:	4610      	mov	r0, r2
 800363c:	f7fe fcb6 	bl	8001fac <write>
	buf[0] = _and;
 8003640:	f240 31ff 	movw	r1, #1023	@ 0x3ff
		header[0] |= DW3000_SPI_EAMRW;
 8003644:	f244 12d0 	movw	r2, #16848	@ 0x41d0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = _and;
 800364c:	f8ad 1004 	strh.w	r1, [sp, #4]
		header[0] |= DW3000_SPI_EAMRW;
 8003650:	f8ad 2008 	strh.w	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f aed0 	bne.w	80033fa <dwt_calcbandwidthadj+0x52>
			write(cnt, header, length, buffer);
 800365a:	2202      	movs	r2, #2
 800365c:	4633      	mov	r3, r6
 800365e:	4649      	mov	r1, r9
 8003660:	4610      	mov	r0, r2
 8003662:	f7fe fca3 	bl	8001fac <write>
 8003666:	e6c8      	b.n	80033fa <dwt_calcbandwidthadj+0x52>
 8003668:	20000440 	.word	0x20000440
 800366c:	20000444 	.word	0x20000444
 8003670:	20000340 	.word	0x20000340
 8003674:	0007001c 	.word	0x0007001c
 8003678:	02003c00 	.word	0x02003c00
 800367c:	00070004 	.word	0x00070004
 8003680:	02001c00 	.word	0x02001c00

08003684 <dwt_configuretxrf>:
void dwt_configuretxrf(dwt_txconfig_t *config) {
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (config->PGcount == 0) {
 8003686:	8903      	ldrh	r3, [r0, #8]
void dwt_configuretxrf(dwt_txconfig_t *config) {
 8003688:	4604      	mov	r4, r0
 800368a:	b085      	sub	sp, #20
	if (config->PGcount == 0) {
 800368c:	b96b      	cbnz	r3, 80036aa <dwt_configuretxrf+0x26>
		header[0] |= DW3000_SPI_EAMRW;
 800368e:	f247 02ce 	movw	r2, #28878	@ 0x70ce
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003692:	4d3c      	ldr	r5, [pc, #240]	@ (8003784 <dwt_configuretxrf+0x100>)
 8003694:	7801      	ldrb	r1, [r0, #0]
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	f88d 1008 	strb.w	r1, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 800369c:	f8ad 200c 	strh.w	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80036a0:	7d1b      	ldrb	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d05a      	beq.n	800375c <dwt_configuretxrf+0xd8>
}
 80036a6:	b005      	add	sp, #20
 80036a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		header[0] |= DW3000_SPI_EAMRW;
 80036aa:	f245 0142 	movw	r1, #20546	@ 0x5042
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80036ae:	4d36      	ldr	r5, [pc, #216]	@ (8003788 <dwt_configuretxrf+0x104>)
		header[0] |= DW3000_SPI_EAMRW;
 80036b0:	f8ad 100c 	strh.w	r1, [sp, #12]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	8919      	ldrh	r1, [r3, #8]
 80036ba:	6858      	ldr	r0, [r3, #4]
 80036bc:	f001 fb4e 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 80036c0:	682a      	ldr	r2, [r5, #0]
 80036c2:	ae03      	add	r6, sp, #12
 80036c4:	6810      	ldr	r0, [r2, #0]
 80036c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ca:	2202      	movs	r2, #2
 80036cc:	4631      	mov	r1, r6
 80036ce:	f001 ff53 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d04c      	beq.n	8003770 <dwt_configuretxrf+0xec>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80036d6:	682b      	ldr	r3, [r5, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80036d8:	4d2a      	ldr	r5, [pc, #168]	@ (8003784 <dwt_configuretxrf+0x100>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80036da:	8919      	ldrh	r1, [r3, #8]
 80036dc:	6858      	ldr	r0, [r3, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f001 fb3c 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	7d1b      	ldrb	r3, [r3, #20]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d01b      	beq.n	8003724 <dwt_configuretxrf+0xa0>
	return regval;
 80036ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dwt_calcbandwidthadj(config->PGcount, channel);
 80036f0:	8920      	ldrh	r0, [r4, #8]
		if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1) {
 80036f2:	f013 0f01 	tst.w	r3, #1
		dwt_calcbandwidthadj(config->PGcount, channel);
 80036f6:	bf14      	ite	ne
 80036f8:	2109      	movne	r1, #9
 80036fa:	2105      	moveq	r1, #5
 80036fc:	f7ff fe54 	bl	80033a8 <dwt_calcbandwidthadj>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 8003704:	f243 02c2 	movw	r2, #12482	@ 0x30c2
		buffer[j] = (uint8_t) regval;
 8003708:	6861      	ldr	r1, [r4, #4]
		header[0] |= DW3000_SPI_EAMRW;
 800370a:	f8ad 2008 	strh.w	r2, [sp, #8]
		buffer[j] = (uint8_t) regval;
 800370e:	9103      	str	r1, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1c8      	bne.n	80036a6 <dwt_configuretxrf+0x22>
			write(cnt, header, length, buffer);
 8003714:	4633      	mov	r3, r6
 8003716:	2204      	movs	r2, #4
 8003718:	a902      	add	r1, sp, #8
 800371a:	2002      	movs	r0, #2
 800371c:	f7fe fc46 	bl	8001fac <write>
}
 8003720:	b005      	add	sp, #20
 8003722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <dwt_configuretxrf+0x108>)
 8003726:	f89d 300c 	ldrb.w	r3, [sp, #12]
		data = byteArray[byte] ^ crcRemainderInit;
 800372a:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800372e:	5cd3      	ldrb	r3, [r2, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003730:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003732:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8003734:	5cd3      	ldrb	r3, [r2, r3]
 8003736:	f89d 1007 	ldrb.w	r1, [sp, #7]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800373a:	404b      	eors	r3, r1
 800373c:	5cd7      	ldrb	r7, [r2, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800373e:	2100      	movs	r1, #0
 8003740:	ab02      	add	r3, sp, #8
 8003742:	2201      	movs	r2, #1
 8003744:	f7fe fa68 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8003748:	f89d 3008 	ldrb.w	r3, [sp, #8]
			if (crc8 != dwcrc8) {
 800374c:	42bb      	cmp	r3, r7
 800374e:	d0cd      	beq.n	80036ec <dwt_configuretxrf+0x68>
				if (pdw3000local->cbSPIRDErr != NULL)
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0c9      	beq.n	80036ec <dwt_configuretxrf+0x68>
					pdw3000local->cbSPIRDErr();
 8003758:	4798      	blx	r3
 800375a:	e7c7      	b.n	80036ec <dwt_configuretxrf+0x68>
			write(cnt, header, length, buffer);
 800375c:	ae03      	add	r6, sp, #12
 800375e:	ab02      	add	r3, sp, #8
 8003760:	2201      	movs	r2, #1
 8003762:	4631      	mov	r1, r6
 8003764:	2002      	movs	r0, #2
 8003766:	f7fe fc21 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	7d1b      	ldrb	r3, [r3, #20]
 800376e:	e7c9      	b.n	8003704 <dwt_configuretxrf+0x80>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8003770:	682a      	ldr	r2, [r5, #0]
 8003772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003776:	6810      	ldr	r0, [r2, #0]
 8003778:	f10d 0107 	add.w	r1, sp, #7
 800377c:	2201      	movs	r2, #1
 800377e:	f002 f93d 	bl	80059fc <HAL_SPI_Receive>
 8003782:	e7a8      	b.n	80036d6 <dwt_configuretxrf+0x52>
 8003784:	20000440 	.word	0x20000440
 8003788:	20000444 	.word	0x20000444
 800378c:	20000340 	.word	0x20000340

08003790 <dwt_setleds>:
void dwt_setleds(uint8_t mode) {
 8003790:	b530      	push	{r4, r5, lr}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003792:	4d42      	ldr	r5, [pc, #264]	@ (800389c <dwt_setleds+0x10c>)
	if (mode & DWT_LEDS_ENABLE) {
 8003794:	f010 0201 	ands.w	r2, r0, #1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003798:	682b      	ldr	r3, [r5, #0]
void dwt_setleds(uint8_t mode) {
 800379a:	b085      	sub	sp, #20
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800379c:	7d1b      	ldrb	r3, [r3, #20]
	if (mode & DWT_LEDS_ENABLE) {
 800379e:	d00f      	beq.n	80037c0 <dwt_setleds+0x30>
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 80037a0:	4604      	mov	r4, r0
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037a2:	f46f 617c 	mvn.w	r1, #4032	@ 0xfc0
 80037a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
		header[0] |= DW3000_SPI_EAMRW;
 80037aa:	f240 30ca 	movw	r0, #970	@ 0x3ca
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80037b2:	f8ad 0004 	strh.w	r0, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80037b6:	b33b      	cbz	r3, 8003808 <dwt_setleds+0x78>
		if (mode & DWT_LEDS_INIT_BLINK) {
 80037b8:	07a3      	lsls	r3, r4, #30
 80037ba:	d451      	bmi.n	8003860 <dwt_setleds+0xd0>
}
 80037bc:	b005      	add	sp, #20
 80037be:	bd30      	pop	{r4, r5, pc}
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037c0:	f46f 607c 	mvn.w	r0, #4032	@ 0xfc0
		header[0] |= DW3000_SPI_EAMRW;
 80037c4:	f240 31ca 	movw	r1, #970	@ 0x3ca
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037c8:	e9cd 0202 	strd	r0, r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80037cc:	f8ad 1004 	strh.w	r1, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f3      	bne.n	80037bc <dwt_setleds+0x2c>
			write(cnt, header, length, buffer);
 80037d4:	2208      	movs	r2, #8
 80037d6:	ab02      	add	r3, sp, #8
 80037d8:	a901      	add	r1, sp, #4
 80037da:	2002      	movs	r0, #2
 80037dc:	f7fe fbe6 	bl	8001fac <write>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037e0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
		header[0] |= DW3000_SPI_EAMRW;
 80037e4:	f645 22e2 	movw	r2, #23266	@ 0x5ae2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80037ec:	9102      	str	r1, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 80037ee:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e2      	bne.n	80037bc <dwt_setleds+0x2c>
			write(cnt, header, length, buffer);
 80037f6:	2204      	movs	r2, #4
 80037f8:	ab02      	add	r3, sp, #8
 80037fa:	eb0d 0102 	add.w	r1, sp, r2
 80037fe:	2002      	movs	r0, #2
 8003800:	f7fe fbd4 	bl	8001fac <write>
}
 8003804:	b005      	add	sp, #20
 8003806:	bd30      	pop	{r4, r5, pc}
			write(cnt, header, length, buffer);
 8003808:	2208      	movs	r2, #8
 800380a:	ab02      	add	r3, sp, #8
 800380c:	a901      	add	r1, sp, #4
 800380e:	2002      	movs	r0, #2
 8003810:	f7fe fbcc 	bl	8001fac <write>
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003814:	f44f 0204 	mov.w	r2, #8650752	@ 0x840000
 8003818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003820:	e9cd 1202 	strd	r1, r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8003824:	f241 32e2 	movw	r2, #5090	@ 0x13e2
 8003828:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1c3      	bne.n	80037b8 <dwt_setleds+0x28>
			write(cnt, header, length, buffer);
 8003830:	2208      	movs	r2, #8
 8003832:	ab02      	add	r3, sp, #8
 8003834:	2002      	movs	r0, #2
 8003836:	a901      	add	r1, sp, #4
 8003838:	f7fe fbb8 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800383c:	682b      	ldr	r3, [r5, #0]
		if (mode & DWT_LEDS_INIT_BLINK) {
 800383e:	07a2      	lsls	r2, r4, #30
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003840:	7d1b      	ldrb	r3, [r3, #20]
		if (mode & DWT_LEDS_INIT_BLINK) {
 8003842:	d520      	bpl.n	8003886 <dwt_setleds+0xf6>
		buffer[j] = (uint8_t) regval;
 8003844:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <dwt_setleds+0x110>)
 8003846:	9202      	str	r2, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8003848:	f645 02e2 	movw	r2, #22754	@ 0x58e2
 800384c:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003850:	b933      	cbnz	r3, 8003860 <dwt_setleds+0xd0>
			write(cnt, header, length, buffer);
 8003852:	2204      	movs	r2, #4
 8003854:	2002      	movs	r0, #2
 8003856:	ab02      	add	r3, sp, #8
 8003858:	eb0d 0102 	add.w	r1, sp, r2
 800385c:	f7fe fba6 	bl	8001fac <write>
		buffer[j] = (uint8_t) regval;
 8003860:	f44f 7188 	mov.w	r1, #272	@ 0x110
		header[0] |= DW3000_SPI_EAMRW;
 8003864:	f645 02e2 	movw	r2, #22754	@ 0x58e2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003868:	682b      	ldr	r3, [r5, #0]
		buffer[j] = (uint8_t) regval;
 800386a:	9102      	str	r1, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800386c:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 800386e:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1a2      	bne.n	80037bc <dwt_setleds+0x2c>
			write(cnt, header, length, buffer);
 8003876:	2204      	movs	r2, #4
 8003878:	ab02      	add	r3, sp, #8
 800387a:	eb0d 0102 	add.w	r1, sp, r2
 800387e:	2002      	movs	r0, #2
 8003880:	f7fe fb94 	bl	8001fac <write>
} // end dwt_write32bitoffsetreg()
 8003884:	e79a      	b.n	80037bc <dwt_setleds+0x2c>
		buffer[j] = (uint8_t) regval;
 8003886:	f44f 7188 	mov.w	r1, #272	@ 0x110
		header[0] |= DW3000_SPI_EAMRW;
 800388a:	f645 02e2 	movw	r2, #22754	@ 0x58e2
		buffer[j] = (uint8_t) regval;
 800388e:	9102      	str	r1, [sp, #8]
		header[0] |= DW3000_SPI_EAMRW;
 8003890:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ae      	beq.n	80037f6 <dwt_setleds+0x66>
 8003898:	e790      	b.n	80037bc <dwt_setleds+0x2c>
 800389a:	bf00      	nop
 800389c:	20000440 	.word	0x20000440
 80038a0:	000f0110 	.word	0x000f0110

080038a4 <dwt_config2>:
int dwt_config2(dwt_config_t *config, dwt_local_data_t *dwt_local_data) {
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 80038a8:	7903      	ldrb	r3, [r0, #4]
int dwt_config2(dwt_config_t *config, dwt_local_data_t *dwt_local_data) {
 80038aa:	4689      	mov	r9, r1
	uint8_t channel = config->chan, cnt, flag;
 80038ac:	7801      	ldrb	r1, [r0, #0]
int dwt_config2(dwt_config_t *config, dwt_local_data_t *dwt_local_data) {
 80038ae:	b08b      	sub	sp, #44	@ 0x2c
	uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 80038b0:	2b18      	cmp	r3, #24
int dwt_config2(dwt_config_t *config, dwt_local_data_t *dwt_local_data) {
 80038b2:	4602      	mov	r2, r0
 80038b4:	9000      	str	r0, [sp, #0]
	uint8_t channel = config->chan, cnt, flag;
 80038b6:	9101      	str	r1, [sp, #4]
	uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 80038b8:	f200 81ca 	bhi.w	8003c50 <dwt_config2+0x3ac>
 80038bc:	f890 a003 	ldrb.w	sl, [r0, #3]
 80038c0:	f1ba 0f18 	cmp.w	sl, #24
 80038c4:	bf94      	ite	ls
 80038c6:	f04f 0a00 	movls.w	sl, #0
 80038ca:	f04f 0a01 	movhi.w	sl, #1
	uint16_t sts_length_factors[STS_LEN_SUPPORTED] = { 1024, 1448, 2048, 2896,
 80038ce:	4ba1      	ldr	r3, [pc, #644]	@ (8003b54 <dwt_config2+0x2b0>)
 80038d0:	ac06      	add	r4, sp, #24
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 80038d2:	f892 c007 	ldrb.w	ip, [r2, #7]
 80038d6:	7857      	ldrb	r7, [r2, #1]
	uint16_t sts_length_factors[STS_LEN_SUPPORTED] = { 1024, 1448, 2048, 2896,
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	c407      	stmia	r4!, {r0, r1, r2}
 80038dc:	8023      	strh	r3, [r4, #0]
	sts_len = (uint16_t) GET_STS_REG_SET_VALUE((uint16_t )(config->stsLength));
 80038de:	2401      	movs	r4, #1
 80038e0:	3f01      	subs	r7, #1
 80038e2:	b2ff      	uxtb	r7, r7
 80038e4:	2f06      	cmp	r7, #6
 80038e6:	bf98      	it	ls
 80038e8:	4b9b      	ldrls	r3, [pc, #620]	@ (8003b58 <dwt_config2+0x2b4>)
 80038ea:	f8dd 8000 	ldr.w	r8, [sp]
 80038ee:	bf98      	it	ls
 80038f0:	f853 5027 	ldrls.w	r5, [r3, r7, lsl #2]
	dwt_local_data->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3)); //clear the sleep mode ALT_OPS bit
 80038f4:	f8b9 3010 	ldrh.w	r3, [r9, #16]
	dwt_local_data->longFrames = config->phrMode;
 80038f8:	f889 c00c 	strb.w	ip, [r9, #12]
	dwt_local_data->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3)); //clear the sleep mode ALT_OPS bit
 80038fc:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003900:	f8a9 3010 	strh.w	r3, [r9, #16]
	sts_len = (uint16_t) GET_STS_REG_SET_VALUE((uint16_t )(config->stsLength));
 8003904:	f898 300d 	ldrb.w	r3, [r8, #13]
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 8003908:	f1ac 0601 	sub.w	r6, ip, #1
	sts_len = (uint16_t) GET_STS_REG_SET_VALUE((uint16_t )(config->stsLength));
 800390c:	f103 0302 	add.w	r3, r3, #2
 8003910:	fa04 f403 	lsl.w	r4, r4, r3
 8003914:	b2a7      	uxth	r7, r4
	dwt_local_data->ststhreshold = (int16_t) ((((uint32_t) sts_len) * 8)
 8003916:	ea4f 07c7 	mov.w	r7, r7, lsl #3
			* STSQUAL_THRESH_64);
 800391a:	4638      	mov	r0, r7
	switch (config->txPreambLength) {
 800391c:	bf88      	it	hi
 800391e:	f44f 7580 	movhi.w	r5, #256	@ 0x100
			* STSQUAL_THRESH_64);
 8003922:	f7fd f967 	bl	8000bf4 <__aeabi_ui2f>
 8003926:	498d      	ldr	r1, [pc, #564]	@ (8003b5c <dwt_config2+0x2b8>)
 8003928:	f7fd f9bc 	bl	8000ca4 <__aeabi_fmul>
	dwt_local_data->ststhreshold = (int16_t) ((((uint32_t) sts_len) * 8)
 800392c:	f7fd fb0a 	bl	8000f44 <__aeabi_f2iz>
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 8003930:	2300      	movs	r3, #0
 8003932:	f88d 3017 	strb.w	r3, [sp, #23]
		header[0] |= DW3000_SPI_EAMRW;
 8003936:	f244 33c0 	movw	r3, #17344	@ 0x43c0
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 800393a:	fab6 f686 	clz	r6, r6
	dwt_local_data->ststhreshold = (int16_t) ((((uint32_t) sts_len) * 8)
 800393e:	f8a9 0012 	strh.w	r0, [r9, #18]
		header[0] |= DW3000_SPI_EAMRW;
 8003942:	f8ad 300c 	strh.w	r3, [sp, #12]
	dwt_local_data->stsconfig = config->stsMode;
 8003946:	f898 300c 	ldrb.w	r3, [r8, #12]
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 800394a:	0976      	lsrs	r6, r6, #5
	dwt_local_data->stsconfig = config->stsMode;
 800394c:	f889 3015 	strb.w	r3, [r9, #21]
							<< SYS_CFG_CP_SPC_BIT_OFFSET
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	f403 4230 	and.w	r2, r3, #45056	@ 0xb000
							& ((uint32_t) config->phrRate
 8003956:	f898 3008 	ldrb.w	r3, [r8, #8]
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 800395a:	0136      	lsls	r6, r6, #4
									<< SYS_CFG_PHR_6M8_BIT_OFFSET)) | mode);
 800395c:	015b      	lsls	r3, r3, #5
							& ((uint32_t) config->phrRate
 800395e:	f003 0320 	and.w	r3, r3, #32
					| (SYS_CFG_PHR_6M8_BIT_MASK
 8003962:	4313      	orrs	r3, r2
			((uint32_t) config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8003964:	f898 200e 	ldrb.w	r2, [r8, #14]
 8003968:	f10d 0810 	add.w	r8, sp, #16
					| (SYS_CFG_PHR_6M8_BIT_MASK
 800396c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	dwt_modify32bitoffsetreg(SYS_CFG_ID, 0,
 8003970:	4333      	orrs	r3, r6
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8003972:	f8ad 3014 	strh.w	r3, [sp, #20]
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f88d 3016 	strb.w	r3, [sp, #22]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800397c:	4e78      	ldr	r6, [pc, #480]	@ (8003b60 <dwt_config2+0x2bc>)
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800397e:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <dwt_config2+0x2c0>)
 8003980:	9304      	str	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003982:	6833      	ldr	r3, [r6, #0]
 8003984:	7d1b      	ldrb	r3, [r3, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 816e 	beq.w	8003c68 <dwt_config2+0x3c4>
	if (scp) {
 800398c:	f1ba 0f00 	cmp.w	sl, #0
 8003990:	f040 8174 	bne.w	8003c7c <dwt_config2+0x3d8>
		if (config->stsMode != DWT_STS_MODE_OFF) {
 8003994:	9a00      	ldr	r2, [sp, #0]
 8003996:	7b13      	ldrb	r3, [r2, #12]
 8003998:	b373      	cbz	r3, 80039f8 <dwt_config2+0x154>
						sts_length_factors[(uint8_t) (config->stsLength)],
 800399a:	7b53      	ldrb	r3, [r2, #13]
			if ((config->pdoaMode == DWT_PDOA_M1)
 800399c:	7b92      	ldrb	r2, [r2, #14]
				sts_mnth = get_sts_mnth(
 800399e:	a90a      	add	r1, sp, #40	@ 0x28
 80039a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
			if ((config->pdoaMode == DWT_PDOA_M1)
 80039a4:	2a01      	cmp	r2, #1
	value = cipher * (uint32_t) threshold;
 80039a6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
			if ((config->pdoaMode == DWT_PDOA_M1)
 80039aa:	f240 82e5 	bls.w	8003f78 <dwt_config2+0x6d4>
	value = cipher * (uint32_t) threshold;
 80039ae:	011a      	lsls	r2, r3, #4
	mod_val = value % MOD_VALUE + HALF_MOD;
 80039b0:	f3c2 020a 	ubfx	r2, r2, #0, #11
	if (mod_val >= MOD_VALUE)
 80039b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039b8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
	value >>= SHIFT_VALUE;
 80039bc:	ea4f 13d3 	mov.w	r3, r3, lsr #7
	if (mod_val >= MOD_VALUE)
 80039c0:	d300      	bcc.n	80039c4 <dwt_config2+0x120>
		value += 1;
 80039c2:	3301      	adds	r3, #1
	return (uint16_t) value;
 80039c4:	b29b      	uxth	r3, r3
	buf[2] = (uint8_t) _or;    //        &0xFF;
 80039c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ca:	f88d 3012 	strb.w	r3, [sp, #18]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80039ce:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80039d2:	f8ad 3010 	strh.w	r3, [sp, #16]
	buf[3] = (uint8_t) (_or >> 8);    //   &0xFF;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f88d 3013 	strb.w	r3, [sp, #19]
		header[0] |= DW3000_SPI_EAMRW;
 80039dc:	f245 23dc 	movw	r3, #21212	@ 0x52dc
 80039e0:	f8ad 300c 	strh.w	r3, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80039e4:	6833      	ldr	r3, [r6, #0]
			preamble_len += (sts_len) * 8;
 80039e6:	443d      	add	r5, r7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80039e8:	7d1b      	ldrb	r3, [r3, #20]
 80039ea:	b92b      	cbnz	r3, 80039f8 <dwt_config2+0x154>
			write(cnt, header, length, buffer);
 80039ec:	4643      	mov	r3, r8
 80039ee:	2204      	movs	r2, #4
 80039f0:	2002      	movs	r0, #2
 80039f2:	a903      	add	r1, sp, #12
 80039f4:	f7fe fada 	bl	8001fac <write>
		if (preamble_len >= 256) {
 80039f8:	2dff      	cmp	r5, #255	@ 0xff
 80039fa:	f300 812c 	bgt.w	8003c56 <dwt_config2+0x3b2>
			dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 80039fe:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8003a02:	f46f 51c0 	mvn.w	r1, #6144	@ 0x1800
 8003a06:	4858      	ldr	r0, [pc, #352]	@ (8003b68 <dwt_config2+0x2c4>)
 8003a08:	f7fe fb50 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003a0c:	6833      	ldr	r3, [r6, #0]
 8003a0e:	7d1f      	ldrb	r7, [r3, #20]
	buf[0] = _and;
 8003a10:	23fc      	movs	r3, #252	@ 0xfc
 8003a12:	f88d 300c 	strb.w	r3, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003a16:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
			(uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 8003a1a:	9d00      	ldr	r5, [sp, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8003a1c:	f8ad 3010 	strh.w	r3, [sp, #16]
			(uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 8003a20:	78ab      	ldrb	r3, [r5, #2]
	buf[1] = _or;
 8003a22:	f88d 300d 	strb.w	r3, [sp, #13]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003a26:	2f00      	cmp	r7, #0
 8003a28:	f000 8166 	beq.w	8003cf8 <dwt_config2+0x454>
	if ((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND) {
 8003a2c:	9b00      	ldr	r3, [sp, #0]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	f000 8192 	beq.w	8003d5e <dwt_config2+0x4ba>
		header[0] |= DW3000_SPI_EAMRW;
 8003a3a:	f243 03cc 	movw	r3, #12492	@ 0x30cc
 8003a3e:	f8ad 300c 	strh.w	r3, [sp, #12]
		buffer[j] = (uint8_t) regval;
 8003a42:	f103 432f 	add.w	r3, r3, #2936012800	@ 0xaf000000
 8003a46:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 8003a4a:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 8003a4e:	9304      	str	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003a50:	6833      	ldr	r3, [r6, #0]
 8003a52:	7d1b      	ldrb	r3, [r3, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8271 	beq.w	8003f3c <dwt_config2+0x698>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003a5a:	4643      	mov	r3, r8
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4842      	ldr	r0, [pc, #264]	@ (8003b6c <dwt_config2+0x2c8>)
 8003a62:	f7fe f8d9 	bl	8001c18 <dwt_xfer3000.constprop.2>
		regval = (regval << 8) + buffer[j];
 8003a66:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a6a:	f89d 2012 	ldrb.w	r2, [sp, #18]
			& ((uint32_t) config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8003a6e:	9800      	ldr	r0, [sp, #0]
		regval = (regval << 8) + buffer[j];
 8003a70:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8003a74:	f89d 3011 	ldrb.w	r3, [sp, #17]
			& ((uint32_t) config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8003a78:	78c1      	ldrb	r1, [r0, #3]
		regval = (regval << 8) + buffer[j];
 8003a7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a7e:	f89d 2010 	ldrb.w	r2, [sp, #16]
			& ((uint32_t) config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8003a82:	00c9      	lsls	r1, r1, #3
		regval = (regval << 8) + buffer[j];
 8003a84:	eb02 2203 	add.w	r2, r2, r3, lsl #8
	if (channel == 9)
 8003a88:	9b01      	ldr	r3, [sp, #4]
			& ((uint32_t) config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8003a8a:	b2c9      	uxtb	r1, r1
	if (channel == 9)
 8003a8c:	2b09      	cmp	r3, #9
		header[0] |= DW3000_SPI_EAMRW;
 8003a8e:	f245 03c2 	movw	r3, #20674	@ 0x50c2
 8003a92:	f8ad 300c 	strh.w	r3, [sp, #12]
			& ((uint32_t) config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8003a96:	7903      	ldrb	r3, [r0, #4]
	temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK
 8003a98:	f422 52ff 	bic.w	r2, r2, #8160	@ 0x1fe0
			& ((uint32_t) config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8003a9c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003aa0:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
	temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK
 8003aa4:	ea43 0301 	orr.w	r3, r3, r1
			& ((uint32_t) config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 8003aa8:	7941      	ldrb	r1, [r0, #5]
	temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK
 8003aaa:	f022 021f 	bic.w	r2, r2, #31
			& ((uint32_t) config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 8003aae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003ab2:	f001 0106 	and.w	r1, r1, #6
		temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8003ab6:	bf08      	it	eq
 8003ab8:	f042 0201 	orreq.w	r2, r2, #1
	temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK
 8003abc:	430b      	orrs	r3, r1
 8003abe:	4313      	orrs	r3, r2
		buffer[j] = (uint8_t) regval;
 8003ac0:	9304      	str	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003ac2:	6833      	ldr	r3, [r6, #0]
 8003ac4:	7d1a      	ldrb	r2, [r3, #20]
 8003ac6:	2a00      	cmp	r2, #0
 8003ac8:	f000 81da 	beq.w	8003e80 <dwt_config2+0x5dc>
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8003acc:	2300      	movs	r3, #0
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003ace:	f46f 4174 	mvn.w	r1, #62464	@ 0xf400
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8003ad2:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 8003ad6:	f88d 3017 	strb.w	r3, [sp, #23]
		header[0] |= DW3000_SPI_EAMRW;
 8003ada:	f249 33c0 	movw	r3, #37824	@ 0x93c0
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003ade:	9104      	str	r1, [sp, #16]
					| ((uint32_t) config->txPreambLength)
 8003ae0:	9900      	ldr	r1, [sp, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8003ae2:	f8ad 300c 	strh.w	r3, [sp, #12]
					| ((uint32_t) config->txPreambLength)
 8003ae6:	784b      	ldrb	r3, [r1, #1]
			((uint32_t) config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 8003ae8:	7989      	ldrb	r1, [r1, #6]
							<< TX_FCTRL_TXPSR_BIT_OFFSET);
 8003aea:	031b      	lsls	r3, r3, #12
	dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0,
 8003aec:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	buf[5] = (uint8_t) (_or >> 8);    //   &0xFF;
 8003af0:	0a19      	lsrs	r1, r3, #8
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8003af2:	0c1b      	lsrs	r3, r3, #16
	buf[5] = (uint8_t) (_or >> 8);    //   &0xFF;
 8003af4:	f88d 1015 	strb.w	r1, [sp, #21]
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8003af8:	f88d 3016 	strb.w	r3, [sp, #22]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	f000 81b6 	beq.w	8003e6e <dwt_config2+0x5ca>
	if (config->sfdTO == 0) {
 8003b02:	9b00      	ldr	r3, [sp, #0]
 8003b04:	895b      	ldrh	r3, [r3, #10]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80f2 	beq.w	8003cf0 <dwt_config2+0x44c>
	buffer[0] = (uint8_t) regval;
 8003b0c:	b2d9      	uxtb	r1, r3
	buffer[1] = regval >> 8;
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f88d 300d 	strb.w	r3, [sp, #13]
		header[0] |= DW3000_SPI_EAMRW;
 8003b14:	f640 03cc 	movw	r3, #2252	@ 0x8cc
	buffer[0] = (uint8_t) regval;
 8003b18:	f88d 100c 	strb.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003b1c:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	f000 81b6 	beq.w	8003e92 <dwt_config2+0x5ee>
	if (channel == 9) {
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	f000 811d 	beq.w	8003d68 <dwt_config2+0x4c4>
		header[0] |= DW3000_SPI_EAMRW;
 8003b2e:	f247 03ce 	movw	r3, #28878	@ 0x70ce
 8003b32:	f8ad 300c 	strh.w	r3, [sp, #12]
		buffer[j] = (uint8_t) regval;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <dwt_config2+0x2cc>)
 8003b38:	9304      	str	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003b3a:	6833      	ldr	r3, [r6, #0]
 8003b3c:	7d1b      	ldrb	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 81e1 	beq.w	8003f06 <dwt_config2+0x662>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8003b44:	2406      	movs	r4, #6
		header[0] |= DW3000_SPI_EAMRW;
 8003b46:	f241 0b41 	movw	fp, #4161	@ 0x1041
 8003b4a:	4f0a      	ldr	r7, [pc, #40]	@ (8003b74 <dwt_config2+0x2d0>)
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003b4c:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8003b78 <dwt_config2+0x2d4>
 8003b50:	e01d      	b.n	8003b8e <dwt_config2+0x2ea>
 8003b52:	bf00      	nop
 8003b54:	08009460 	.word	0x08009460
 8003b58:	0800952c 	.word	0x0800952c
 8003b5c:	3f666666 	.word	0x3f666666
 8003b60:	20000440 	.word	0x20000440
 8003b64:	fffc4fcf 	.word	0xfffc4fcf
 8003b68:	000b0008 	.word	0x000b0008
 8003b6c:	00010014 	.word	0x00010014
 8003b70:	1c071134 	.word	0x1c071134
 8003b74:	20000444 	.word	0x20000444
 8003b78:	20000340 	.word	0x20000340
	return regval;
 8003b7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8003b80:	3c01      	subs	r4, #1
		if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0)
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d445      	bmi.n	8003c12 <dwt_config2+0x36e>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8003b86:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8003b8a:	f000 821d 	beq.w	8003fc8 <dwt_config2+0x724>
		HAL_Delay(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 fed4 	bl	800493c <HAL_Delay>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003b94:	683b      	ldr	r3, [r7, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8003b96:	f8ad b010 	strh.w	fp, [sp, #16]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003b9a:	8919      	ldrh	r1, [r3, #8]
 8003b9c:	6858      	ldr	r0, [r3, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f001 f8dc 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8003ba4:	6838      	ldr	r0, [r7, #0]
 8003ba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003baa:	2202      	movs	r2, #2
 8003bac:	4641      	mov	r1, r8
 8003bae:	6800      	ldr	r0, [r0, #0]
 8003bb0:	f001 fce2 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f000 8091 	beq.w	8003cdc <dwt_config2+0x438>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	8919      	ldrh	r1, [r3, #8]
 8003bc0:	6858      	ldr	r0, [r3, #4]
 8003bc2:	f001 f8cb 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8003bc6:	6833      	ldr	r3, [r6, #0]
 8003bc8:	7d1b      	ldrb	r3, [r3, #20]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d1d6      	bne.n	8003b7c <dwt_config2+0x2d8>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003bce:	f89d 3010 	ldrb.w	r3, [sp, #16]
		data = byteArray[byte] ^ crcRemainderInit;
 8003bd2:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8003bd6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8003bda:	f89d 200b 	ldrb.w	r2, [sp, #11]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003bde:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 8003be0:	f81a 0003 	ldrb.w	r0, [sl, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003be4:	2100      	movs	r1, #0
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8003be6:	4050      	eors	r0, r2
 8003be8:	f81a 5000 	ldrb.w	r5, [sl, r0]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003bec:	ab03      	add	r3, sp, #12
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2018      	movs	r0, #24
 8003bf2:	f7fe f811 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8003bf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
			if (crc8 != dwcrc8) {
 8003bfa:	42ab      	cmp	r3, r5
 8003bfc:	d0be      	beq.n	8003b7c <dwt_config2+0x2d8>
				if (pdw3000local->cbSPIRDErr != NULL)
 8003bfe:	6833      	ldr	r3, [r6, #0]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ba      	beq.n	8003b7c <dwt_config2+0x2d8>
					pdw3000local->cbSPIRDErr();
 8003c06:	4798      	blx	r3
	return regval;
 8003c08:	f89d 300b 	ldrb.w	r3, [sp, #11]
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8003c0c:	3c01      	subs	r4, #1
		if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0)
 8003c0e:	079b      	lsls	r3, r3, #30
 8003c10:	d5b9      	bpl.n	8003b86 <dwt_config2+0x2e2>
	if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 8003c12:	9b00      	ldr	r3, [sp, #0]
 8003c14:	791b      	ldrb	r3, [r3, #4]
 8003c16:	3b09      	subs	r3, #9
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	f200 8141 	bhi.w	8003ea0 <dwt_config2+0x5fc>
		if (dwt_local_data->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP) {
 8003c1e:	f899 3009 	ldrb.w	r3, [r9, #9]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f000 8154 	beq.w	8003ed0 <dwt_config2+0x62c>
			dwt_configmrxlut(channel);
 8003c28:	9801      	ldr	r0, [sp, #4]
 8003c2a:	f7fe ffef 	bl	8002c0c <dwt_configmrxlut>
		header[0] |= DW3000_SPI_EAMRW;
 8003c2e:	f246 22c6 	movw	r2, #25286	@ 0x62c6
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003c32:	49c6      	ldr	r1, [pc, #792]	@ (8003f4c <dwt_config2+0x6a8>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003c34:	6833      	ldr	r3, [r6, #0]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8003c36:	9104      	str	r1, [sp, #16]
		header[0] |= DW3000_SPI_EAMRW;
 8003c38:	f8ad 200c 	strh.w	r2, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003c3c:	7d1b      	ldrb	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8155 	beq.w	8003eee <dwt_config2+0x64a>
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003c44:	2001      	movs	r0, #1
} // end dwt_configure()
 8003c46:	b00b      	add	sp, #44	@ 0x2c
 8003c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003c4c:	f7fe bec2 	b.w	80029d4 <dwt_pgf_cal>
	uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8003c50:	f04f 0a01 	mov.w	sl, #1
 8003c54:	e63b      	b.n	80038ce <dwt_config2+0x2a>
			dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8003c56:	f8b9 3010 	ldrh.w	r3, [r9, #16]
			dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8003c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
			dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8003c5e:	f043 0320 	orr.w	r3, r3, #32
 8003c62:	f8a9 3010 	strh.w	r3, [r9, #16]
			dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8003c66:	e6cc      	b.n	8003a02 <dwt_config2+0x15e>
			write(cnt, header, length, buffer);
 8003c68:	4643      	mov	r3, r8
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	a903      	add	r1, sp, #12
 8003c70:	f7fe f99c 	bl	8001fac <write>
	if (scp) {
 8003c74:	f1ba 0f00 	cmp.w	sl, #0
 8003c78:	f43f ae8c 	beq.w	8003994 <dwt_config2+0xf0>
		dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1; //configure correct OPS table is kicked on wakeup
 8003c7c:	f8b9 3010 	ldrh.w	r3, [r9, #16]
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8003c80:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
		dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1; //configure correct OPS table is kicked on wakeup
 8003c84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c88:	f8a9 3010 	strh.w	r3, [r9, #16]
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8003c8c:	f46f 51c0 	mvn.w	r1, #6144	@ 0x1800
 8003c90:	48af      	ldr	r0, [pc, #700]	@ (8003f50 <dwt_config2+0x6ac>)
 8003c92:	f7fe fa0b 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
		dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP); //Set this if Ipatov analysis is used in SCP mode
 8003c96:	f240 3106 	movw	r1, #774	@ 0x306
 8003c9a:	48ae      	ldr	r0, [pc, #696]	@ (8003f54 <dwt_config2+0x6b0>)
 8003c9c:	f7fe fcae 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
		dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f04f 100e 	mov.w	r0, #917518	@ 0xe000e
 8003ca6:	f7fe fca9 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
		dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 8003caa:	49ab      	ldr	r1, [pc, #684]	@ (8003f58 <dwt_config2+0x6b4>)
 8003cac:	48ab      	ldr	r0, [pc, #684]	@ (8003f5c <dwt_config2+0x6b8>)
 8003cae:	f7fe fca5 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
		dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 8003cb2:	237d      	movs	r3, #125	@ 0x7d
 8003cb4:	f88d 300c 	strb.w	r3, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003cb8:	f645 03dc 	movw	r3, #22748	@ 0x58dc
 8003cbc:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003cc0:	6833      	ldr	r3, [r6, #0]
 8003cc2:	7d1b      	ldrb	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f aeb1 	bne.w	8003a2c <dwt_config2+0x188>
			write(cnt, header, length, buffer);
 8003cca:	ab03      	add	r3, sp, #12
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4641      	mov	r1, r8
 8003cd0:	2002      	movs	r0, #2
 8003cd2:	f7fe f96b 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	7d1f      	ldrb	r7, [r3, #20]
 8003cda:	e699      	b.n	8003a10 <dwt_config2+0x16c>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	f10d 010b 	add.w	r1, sp, #11
 8003cea:	f001 fe87 	bl	80059fc <HAL_SPI_Receive>
 8003cee:	e764      	b.n	8003bba <dwt_config2+0x316>
		config->sfdTO = DWT_SFDTOC_DEF;
 8003cf0:	2181      	movs	r1, #129	@ 0x81
 8003cf2:	9800      	ldr	r0, [sp, #0]
 8003cf4:	8141      	strh	r1, [r0, #10]
 8003cf6:	e70b      	b.n	8003b10 <dwt_config2+0x26c>
			write(cnt, header, length, buffer);
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	ab03      	add	r3, sp, #12
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4641      	mov	r1, r8
 8003d00:	f7fe f954 	bl	8001fac <write>
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003d04:	2284      	movs	r2, #132	@ 0x84
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d06:	6833      	ldr	r3, [r6, #0]
	dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t) (sts_len - 1)); /*Starts from 0 that is why -1*/
 8003d08:	3c01      	subs	r4, #1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d0a:	7d1b      	ldrb	r3, [r3, #20]
	dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t) (sts_len - 1)); /*Starts from 0 that is why -1*/
 8003d0c:	f88d 400c 	strb.w	r4, [sp, #12]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003d10:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f ae89 	bne.w	8003a2c <dwt_config2+0x188>
			write(cnt, header, length, buffer);
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	ab03      	add	r3, sp, #12
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4641      	mov	r1, r8
 8003d22:	f7fe f943 	bl	8001fac <write>
	if (config->txPreambLength == DWT_PLEN_72) {
 8003d26:	786a      	ldrb	r2, [r5, #1]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d28:	6833      	ldr	r3, [r6, #0]
	if (config->txPreambLength == DWT_PLEN_72) {
 8003d2a:	2a07      	cmp	r2, #7
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d2c:	7d1b      	ldrb	r3, [r3, #20]
	if (config->txPreambLength == DWT_PLEN_72) {
 8003d2e:	f000 8139 	beq.w	8003fa4 <dwt_config2+0x700>
		header[0] |= DW3000_SPI_EAMRW;
 8003d32:	f24a 42c0 	movw	r2, #42176	@ 0xa4c0
 8003d36:	f88d 700c 	strb.w	r7, [sp, #12]
 8003d3a:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f47f ae74 	bne.w	8003a2c <dwt_config2+0x188>
			write(cnt, header, length, buffer);
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	2201      	movs	r2, #1
 8003d48:	4641      	mov	r1, r8
 8003d4a:	2002      	movs	r0, #2
 8003d4c:	f7fe f92e 	bl	8001fac <write>
	if ((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND) {
 8003d50:	9b00      	ldr	r3, [sp, #0]
 8003d52:	7b1b      	ldrb	r3, [r3, #12]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	f47f ae6e 	bne.w	8003a3a <dwt_config2+0x196>
		dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 8003d5e:	4980      	ldr	r1, [pc, #512]	@ (8003f60 <dwt_config2+0x6bc>)
 8003d60:	4880      	ldr	r0, [pc, #512]	@ (8003f64 <dwt_config2+0x6c0>)
 8003d62:	f7fe fc4b 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
 8003d66:	e678      	b.n	8003a5a <dwt_config2+0x1b6>
		dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8003d68:	497f      	ldr	r1, [pc, #508]	@ (8003f68 <dwt_config2+0x6c4>)
 8003d6a:	4880      	ldr	r0, [pc, #512]	@ (8003f6c <dwt_config2+0x6c8>)
 8003d6c:	f7fe fc46 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
	buffer[0] = (uint8_t) regval;
 8003d70:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8003d74:	f8ad 300c 	strh.w	r3, [sp, #12]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003d78:	2392      	movs	r3, #146	@ 0x92
 8003d7a:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d7e:	6833      	ldr	r3, [r6, #0]
 8003d80:	7d1b      	ldrb	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8107 	beq.w	8003f96 <dwt_config2+0x6f2>
		dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 8003d88:	4979      	ldr	r1, [pc, #484]	@ (8003f70 <dwt_config2+0x6cc>)
 8003d8a:	487a      	ldr	r0, [pc, #488]	@ (8003f74 <dwt_config2+0x6d0>)
 8003d8c:	f7fe fc36 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	7d1a      	ldrb	r2, [r3, #20]
	dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 8003d94:	2314      	movs	r3, #20
 8003d96:	f88d 300c 	strb.w	r3, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003d9a:	f244 43cf 	movw	r3, #17615	@ 0x44cf
 8003d9e:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	f47f aece 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003da8:	2201      	movs	r2, #1
 8003daa:	4641      	mov	r1, r8
 8003dac:	ab03      	add	r3, sp, #12
 8003dae:	2002      	movs	r0, #2
 8003db0:	f7fe f8fc 	bl	8001fac <write>
 8003db4:	210e      	movs	r1, #14
		header[0] |= DW3000_SPI_EAMRW;
 8003db6:	f646 02ce 	movw	r2, #26830	@ 0x68ce
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003dba:	6833      	ldr	r3, [r6, #0]
 8003dbc:	7d1b      	ldrb	r3, [r3, #20]
	dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8003dbe:	f88d 100c 	strb.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003dc2:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f47f aebc 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4641      	mov	r1, r8
 8003dd0:	ab03      	add	r3, sp, #12
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f7fe f8ea 	bl	8001fac <write>
 8003dd8:	2181      	movs	r1, #129	@ 0x81
		header[0] |= DW3000_SPI_EAMRW;
 8003dda:	f242 02d2 	movw	r2, #8402	@ 0x20d2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003dde:	6833      	ldr	r3, [r6, #0]
 8003de0:	7d1b      	ldrb	r3, [r3, #20]
	dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD); // Extend the lock delay
 8003de2:	f88d 100c 	strb.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003de6:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f47f aeaa 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003df0:	2201      	movs	r2, #1
 8003df2:	ab03      	add	r3, sp, #12
 8003df4:	4641      	mov	r1, r8
 8003df6:	2002      	movs	r0, #2
 8003df8:	f7fe f8d8 	bl	8001fac <write>
 8003dfc:	2402      	movs	r4, #2
		header[0] |= DW3000_SPI_EAMRW;
 8003dfe:	f241 02c1 	movw	r2, #4289	@ 0x10c1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e02:	6833      	ldr	r3, [r6, #0]
 8003e04:	7d1b      	ldrb	r3, [r3, #20]
		header[0] |= DW3000_SPI_EAMRW;
 8003e06:	f8ad 2010 	strh.w	r2, [sp, #16]
 8003e0a:	f88d 400c 	strb.w	r4, [sp, #12]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f47f ae98 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003e14:	2201      	movs	r2, #1
 8003e16:	4641      	mov	r1, r8
 8003e18:	ab03      	add	r3, sp, #12
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7fe f8c6 	bl	8001fac <write>
	buffer[0] = (uint8_t) regval;
 8003e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
		header[0] |= DW3000_SPI_EAMRW;
 8003e24:	f241 02e2 	movw	r2, #4322	@ 0x10e2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e28:	6833      	ldr	r3, [r6, #0]
 8003e2a:	7d1b      	ldrb	r3, [r3, #20]
	buffer[0] = (uint8_t) regval;
 8003e2c:	f8ad 100c 	strh.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003e30:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f ae85 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	ab03      	add	r3, sp, #12
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7fe f8b3 	bl	8001fac <write>
	buf[0] = _and;
 8003e46:	f240 11ff 	movw	r1, #511	@ 0x1ff
		header[0] |= DW3000_SPI_EAMRW;
 8003e4a:	f242 52e2 	movw	r2, #9698	@ 0x25e2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e4e:	6833      	ldr	r3, [r6, #0]
 8003e50:	7d1b      	ldrb	r3, [r3, #20]
	buf[0] = _and;
 8003e52:	f8ad 100c 	strh.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003e56:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f47f ae72 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003e60:	4622      	mov	r2, r4
 8003e62:	4620      	mov	r0, r4
 8003e64:	4641      	mov	r1, r8
 8003e66:	ab03      	add	r3, sp, #12
 8003e68:	f7fe f8a0 	bl	8001fac <write>
 8003e6c:	e66a      	b.n	8003b44 <dwt_config2+0x2a0>
 8003e6e:	4643      	mov	r3, r8
 8003e70:	2208      	movs	r2, #8
 8003e72:	2002      	movs	r0, #2
 8003e74:	a903      	add	r1, sp, #12
 8003e76:	f7fe f899 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e7a:	6833      	ldr	r3, [r6, #0]
 8003e7c:	7d1a      	ldrb	r2, [r3, #20]
 8003e7e:	e640      	b.n	8003b02 <dwt_config2+0x25e>
			write(cnt, header, length, buffer);
 8003e80:	4643      	mov	r3, r8
 8003e82:	2204      	movs	r2, #4
 8003e84:	2002      	movs	r0, #2
 8003e86:	a903      	add	r1, sp, #12
 8003e88:	f7fe f890 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	7d1a      	ldrb	r2, [r3, #20]
 8003e90:	e61c      	b.n	8003acc <dwt_config2+0x228>
			write(cnt, header, length, buffer);
 8003e92:	2202      	movs	r2, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	4610      	mov	r0, r2
 8003e98:	ab03      	add	r3, sp, #12
 8003e9a:	f7fe f887 	bl	8001fac <write>
 8003e9e:	e642      	b.n	8003b26 <dwt_config2+0x282>
	buf[0] = _and;
 8003ea0:	21fe      	movs	r1, #254	@ 0xfe
		header[0] |= DW3000_SPI_EAMRW;
 8003ea2:	f246 12c6 	movw	r2, #25030	@ 0x61c6
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003ea6:	6833      	ldr	r3, [r6, #0]
	buf[0] = _and;
 8003ea8:	f8ad 100c 	strh.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003eac:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003eb0:	7d1b      	ldrb	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f aec6 	bne.w	8003c44 <dwt_config2+0x3a0>
			write(cnt, header, length, buffer);
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4641      	mov	r1, r8
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	ab03      	add	r3, sp, #12
 8003ec0:	f7fe f874 	bl	8001fac <write>
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003ec4:	2001      	movs	r0, #1
} // end dwt_configure()
 8003ec6:	b00b      	add	sp, #44	@ 0x2c
 8003ec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003ecc:	f7fe bd82 	b.w	80029d4 <dwt_pgf_cal>
			_dwt_kick_dgc_on_wakeup((int8_t) channel);
 8003ed0:	9a01      	ldr	r2, [sp, #4]
	if (channel == 5) {
 8003ed2:	2a05      	cmp	r2, #5
			_dwt_kick_dgc_on_wakeup((int8_t) channel);
 8003ed4:	b253      	sxtb	r3, r2
	if (channel == 5) {
 8003ed6:	d070      	beq.n	8003fba <dwt_config2+0x716>
	} else if (channel == 9) {
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	f47f aea8 	bne.w	8003c2e <dwt_config2+0x38a>
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8003ede:	f44f 5201 	mov.w	r2, #8256	@ 0x2040
 8003ee2:	f46f 5100 	mvn.w	r1, #8192	@ 0x2000
 8003ee6:	481a      	ldr	r0, [pc, #104]	@ (8003f50 <dwt_config2+0x6ac>)
 8003ee8:	f7fe f8e0 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
}
 8003eec:	e69f      	b.n	8003c2e <dwt_config2+0x38a>
			write(cnt, header, length, buffer);
 8003eee:	4643      	mov	r3, r8
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	a903      	add	r1, sp, #12
 8003ef4:	2002      	movs	r0, #2
 8003ef6:	f7fe f859 	bl	8001fac <write>
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003efa:	2001      	movs	r0, #1
} // end dwt_configure()
 8003efc:	b00b      	add	sp, #44	@ 0x2c
 8003efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003f02:	f7fe bd67 	b.w	80029d4 <dwt_pgf_cal>
			write(cnt, header, length, buffer);
 8003f06:	4643      	mov	r3, r8
 8003f08:	2204      	movs	r2, #4
 8003f0a:	a903      	add	r1, sp, #12
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f7fe f84d 	bl	8001fac <write>
	buffer[0] = (uint8_t) regval;
 8003f12:	f641 713c 	movw	r1, #7996	@ 0x1f3c
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003f16:	2292      	movs	r2, #146	@ 0x92
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	7d1b      	ldrb	r3, [r3, #20]
	buffer[0] = (uint8_t) regval;
 8003f1c:	f8ad 100c 	strh.w	r1, [sp, #12]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8003f20:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f ae0d 	bne.w	8003b44 <dwt_config2+0x2a0>
			write(cnt, header, length, buffer);
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	4641      	mov	r1, r8
 8003f30:	2001      	movs	r0, #1
 8003f32:	f7fe f83b 	bl	8001fac <write>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	7d1a      	ldrb	r2, [r3, #20]
} // end dwt_write16bitoffsetreg()
 8003f3a:	e72b      	b.n	8003d94 <dwt_config2+0x4f0>
			write(cnt, header, length, buffer);
 8003f3c:	4643      	mov	r3, r8
 8003f3e:	2204      	movs	r2, #4
 8003f40:	a903      	add	r1, sp, #12
 8003f42:	2002      	movs	r0, #2
 8003f44:	f7fe f832 	bl	8001fac <write>
} // end dwt_write32bitoffsetreg()
 8003f48:	e587      	b.n	8003a5a <dwt_config2+0x1b6>
 8003f4a:	bf00      	nop
 8003f4c:	640081ff 	.word	0x640081ff
 8003f50:	000b0008 	.word	0x000b0008
 8003f54:	000e000c 	.word	0x000e000c
 8003f58:	000c5a0a 	.word	0x000c5a0a
 8003f5c:	000e0012 	.word	0x000e0012
 8003f60:	af5f35cc 	.word	0xaf5f35cc
 8003f64:	0006000c 	.word	0x0006000c
 8003f68:	1c010034 	.word	0x1c010034
 8003f6c:	0007001c 	.word	0x0007001c
 8003f70:	08b5a833 	.word	0x08b5a833
 8003f74:	00070010 	.word	0x00070010
		value *= SQRT_FACTOR; //Factor to sqrt(2)
 8003f78:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
	mod_val = value % MOD_VALUE + HALF_MOD;
 8003f80:	f3c3 12ca 	ubfx	r2, r3, #7, #11
	if (mod_val >= MOD_VALUE)
 8003f84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f88:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
	value >>= SHIFT_VALUE;
 8003f8c:	ea4f 4393 	mov.w	r3, r3, lsr #18
	if (mod_val >= MOD_VALUE)
 8003f90:	f4ff ad18 	bcc.w	80039c4 <dwt_config2+0x120>
 8003f94:	e515      	b.n	80039c2 <dwt_config2+0x11e>
			write(cnt, header, length, buffer);
 8003f96:	2202      	movs	r2, #2
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ab03      	add	r3, sp, #12
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fe f805 	bl	8001fac <write>
 8003fa2:	e6f1      	b.n	8003d88 <dwt_config2+0x4e4>
	dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	f88d 200c 	strb.w	r2, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8003faa:	f24a 42c0 	movw	r2, #42176	@ 0xa4c0
 8003fae:	f8ad 2010 	strh.w	r2, [sp, #16]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f43f aec6 	beq.w	8003d44 <dwt_config2+0x4a0>
 8003fb8:	e538      	b.n	8003a2c <dwt_config2+0x188>
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8003fba:	2240      	movs	r2, #64	@ 0x40
 8003fbc:	f46f 5100 	mvn.w	r1, #8192	@ 0x2000
 8003fc0:	4804      	ldr	r0, [pc, #16]	@ (8003fd4 <dwt_config2+0x730>)
 8003fc2:	f7fe f873 	bl	80020ac <dwt_modify32bitoffsetreg.constprop.0>
 8003fc6:	e632      	b.n	8003c2e <dwt_config2+0x38a>
} // end dwt_configure()
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fcc:	b00b      	add	sp, #44	@ 0x2c
 8003fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	000b0008 	.word	0x000b0008

08003fd8 <tag_init>:
		dwt_local_data_t *dwt_local_data, uint8_t device, uint8_t rate) {
 8003fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fdc:	b089      	sub	sp, #36	@ 0x24
 8003fde:	4605      	mov	r5, r0
 8003fe0:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8003fe4:	468a      	mov	sl, r1
 8003fe6:	9003      	str	r0, [sp, #12]
	HAL_Delay(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8003fe8:	2002      	movs	r0, #2
		dwt_local_data_t *dwt_local_data, uint8_t device, uint8_t rate) {
 8003fea:	4693      	mov	fp, r2
 8003fec:	9302      	str	r3, [sp, #8]
	HAL_Delay(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8003fee:	f000 fca5 	bl	800493c <HAL_Delay>
	check_idle_rc_ticks = HAL_GetTick();
 8003ff2:	f000 fc9d 	bl	8004930 <HAL_GetTick>
		header[0] |= DW3000_SPI_EAMRW;
 8003ff6:	f641 0941 	movw	r9, #6209	@ 0x1841
	check_idle_rc_ticks = HAL_GetTick();
 8003ffa:	4680      	mov	r8, r0
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003ffc:	e9cd 5a00 	strd	r5, sl, [sp]
 8004000:	4ca2      	ldr	r4, [pc, #648]	@ (800428c <tag_init+0x2b4>)
 8004002:	4ea3      	ldr	r6, [pc, #652]	@ (8004290 <tag_init+0x2b8>)
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004004:	4fa3      	ldr	r7, [pc, #652]	@ (8004294 <tag_init+0x2bc>)
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8004006:	e00b      	b.n	8004020 <tag_init+0x48>
	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 8004008:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	d45d      	bmi.n	80040cc <tag_init+0xf4>
		if (HAL_GetTick() - check_idle_rc_ticks > check_idle_rc_timeout)
 8004010:	f000 fc8e 	bl	8004930 <HAL_GetTick>
 8004014:	eba0 0008 	sub.w	r0, r0, r8
 8004018:	f5b0 7f96 	cmp.w	r0, #300	@ 0x12c
 800401c:	f200 80e6 	bhi.w	80041ec <tag_init+0x214>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8004020:	6823      	ldr	r3, [r4, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8004022:	f8ad 9018 	strh.w	r9, [sp, #24]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8004026:	8919      	ldrh	r1, [r3, #8]
 8004028:	6858      	ldr	r0, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f000 fe96 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004036:	2202      	movs	r2, #2
 8004038:	6800      	ldr	r0, [r0, #0]
 800403a:	a906      	add	r1, sp, #24
 800403c:	f001 fa9c 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 8004040:	2800      	cmp	r0, #0
 8004042:	f000 80bc 	beq.w	80041be <tag_init+0x1e6>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	8919      	ldrh	r1, [r3, #8]
 800404c:	6858      	ldr	r0, [r3, #4]
 800404e:	f000 fe85 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	7d1d      	ldrb	r5, [r3, #20]
 8004056:	2d02      	cmp	r5, #2
 8004058:	d1d6      	bne.n	8004008 <tag_init+0x30>
		header[0] |= DW3000_SPI_EAMRW;
 800405a:	f246 0140 	movw	r1, #24640	@ 0x6040
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800405e:	f89d 3018 	ldrb.w	r3, [sp, #24]
		data = byteArray[byte] ^ crcRemainderInit;
 8004062:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8004066:	5cfa      	ldrb	r2, [r7, r3]
 8004068:	f89d 3014 	ldrb.w	r3, [sp, #20]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800406c:	4042      	eors	r2, r0
		data = byteArray[byte] ^ crcRemainderInit;
 800406e:	5cba      	ldrb	r2, [r7, r2]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8004070:	6820      	ldr	r0, [r4, #0]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004072:	4053      	eors	r3, r2
 8004074:	5cfb      	ldrb	r3, [r7, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8004076:	f89d c015 	ldrb.w	ip, [sp, #21]
		header[0] |= DW3000_SPI_EAMRW;
 800407a:	f8ad 101c 	strh.w	r1, [sp, #28]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800407e:	8901      	ldrh	r1, [r0, #8]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004080:	ea83 030c 	eor.w	r3, r3, ip
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8004084:	2200      	movs	r2, #0
 8004086:	6840      	ldr	r0, [r0, #4]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004088:	f817 a003 	ldrb.w	sl, [r7, r3]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800408c:	f000 fe66 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004096:	462a      	mov	r2, r5
 8004098:	6800      	ldr	r0, [r0, #0]
 800409a:	a907      	add	r1, sp, #28
 800409c:	f001 fa6c 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f000 8095 	beq.w	80041d0 <tag_init+0x1f8>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	8919      	ldrh	r1, [r3, #8]
 80040ac:	6858      	ldr	r0, [r3, #4]
 80040ae:	f000 fe55 	bl	8004d5c <HAL_GPIO_WritePin>
	return regval;
 80040b2:	f89d 3013 	ldrb.w	r3, [sp, #19]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80040b6:	6832      	ldr	r2, [r6, #0]
			if (crc8 != dwcrc8) {
 80040b8:	459a      	cmp	sl, r3
 80040ba:	d0a5      	beq.n	8004008 <tag_init+0x30>
				if (pdw3000local->cbSPIRDErr != NULL)
 80040bc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0a2      	beq.n	8004008 <tag_init+0x30>
					pdw3000local->cbSPIRDErr();
 80040c2:	4798      	blx	r3
	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 80040c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	d5a1      	bpl.n	8004010 <tag_init+0x38>
	if (dwt_local_data_init(dwt_local_data) == DWT_ERROR) {
 80040cc:	4658      	mov	r0, fp
 80040ce:	e9dd 5a00 	ldrd	r5, sl, [sp]
 80040d2:	f7fe f98f 	bl	80023f4 <dwt_local_data_init>
 80040d6:	3001      	adds	r0, #1
 80040d8:	f000 8084 	beq.w	80041e4 <tag_init+0x20c>
	dwt_txconfig->power = GAIN_30DB;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	if (dwt_config2(dwt_config, dwt_local_data)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 80040e0:	4659      	mov	r1, fp
 80040e2:	4628      	mov	r0, r5
	dwt_txconfig->power = GAIN_30DB;
 80040e4:	f8ca 3004 	str.w	r3, [sl, #4]
	if (dwt_config2(dwt_config, dwt_local_data)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 80040e8:	f7ff fbdc 	bl	80038a4 <dwt_config2>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d179      	bne.n	80041e4 <tag_init+0x20c>
	if (config->PGcount == 0) {
 80040f0:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d07d      	beq.n	80041f4 <tag_init+0x21c>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80040f8:	4601      	mov	r1, r0
 80040fa:	ab07      	add	r3, sp, #28
 80040fc:	4866      	ldr	r0, [pc, #408]	@ (8004298 <tag_init+0x2c0>)
 80040fe:	2201      	movs	r2, #1
 8004100:	f7fd fd8a 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8004104:	f89d 301c 	ldrb.w	r3, [sp, #28]
		dwt_calcbandwidthadj(config->PGcount, channel);
 8004108:	f8ba 0008 	ldrh.w	r0, [sl, #8]
		if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1) {
 800410c:	f013 0f01 	tst.w	r3, #1
		dwt_calcbandwidthadj(config->PGcount, channel);
 8004110:	bf14      	ite	ne
 8004112:	2109      	movne	r1, #9
 8004114:	2105      	moveq	r1, #5
 8004116:	f7ff f947 	bl	80033a8 <dwt_calcbandwidthadj>
	dwt_write32bitreg(TX_POWER_ID, config->power);
 800411a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800411e:	485f      	ldr	r0, [pc, #380]	@ (800429c <tag_init+0x2c4>)
 8004120:	f7fe fa6c 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
	if (device == DEV_UWB3000F27) {
 8004124:	9b02      	ldr	r3, [sp, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 8087 	bne.w	800423a <tag_init+0x262>
	buffer[0] = (uint8_t) regval;
 800412c:	f244 041a 	movw	r4, #16410	@ 0x401a
		header[0] |= DW3000_SPI_EAMRW;
 8004130:	f241 02c2 	movw	r2, #4290	@ 0x10c2
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004134:	6833      	ldr	r3, [r6, #0]
	buffer[0] = (uint8_t) regval;
 8004136:	f8ad 4018 	strh.w	r4, [sp, #24]
		header[0] |= DW3000_SPI_EAMRW;
 800413a:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800413e:	7d1b      	ldrb	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d07d      	beq.n	8004240 <tag_init+0x268>
	if (rate == RATE_6M8) {
 8004144:	9b03      	ldr	r3, [sp, #12]
	uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 8004146:	4856      	ldr	r0, [pc, #344]	@ (80042a0 <tag_init+0x2c8>)
	if (rate == RATE_6M8) {
 8004148:	2b00      	cmp	r3, #0
 800414a:	d166      	bne.n	800421a <tag_init+0x242>
	uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 800414c:	f7fd fdf2 	bl	8001d34 <dwt_read32bitoffsetreg.constprop.0>
 8004150:	4601      	mov	r1, r0
	val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 8004152:	0d09      	lsrs	r1, r1, #20
 8004154:	0509      	lsls	r1, r1, #20
	dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8004156:	f441 712f 	orr.w	r1, r1, #700	@ 0x2bc
 800415a:	4851      	ldr	r0, [pc, #324]	@ (80042a0 <tag_init+0x2c8>)
 800415c:	f7fe fa4e 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
	if (time > 0) {
 8004160:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004164:	f7fe f89a 	bl	800229c <dwt_setrxtimeout.part.0>
	buffer[0] = (uint8_t) regval;
 8004168:	2105      	movs	r1, #5
		header[0] |= DW3000_SPI_EAMRW;
 800416a:	f241 02cc 	movw	r2, #4300	@ 0x10cc
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800416e:	6833      	ldr	r3, [r6, #0]
	buffer[0] = (uint8_t) regval;
 8004170:	f8ad 1018 	strh.w	r1, [sp, #24]
		header[0] |= DW3000_SPI_EAMRW;
 8004174:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004178:	7d1b      	ldrb	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d07e      	beq.n	800427c <tag_init+0x2a4>
	uint32_t gpio_mode = dwt_read32bitreg(GPIO_MODE_ID);
 800417e:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8004182:	f7fd fdd7 	bl	8001d34 <dwt_read32bitoffsetreg.constprop.0>
 8004186:	4603      	mov	r3, r0
	gpio_mode &= (~(GPIO_MODE_MSGP0_MODE_BIT_MASK
 8004188:	4946      	ldr	r1, [pc, #280]	@ (80042a4 <tag_init+0x2cc>)
	dwt_write32bitreg(GPIO_MODE_ID, gpio_mode);
 800418a:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
	gpio_mode &= (~(GPIO_MODE_MSGP0_MODE_BIT_MASK
 800418e:	4019      	ands	r1, r3
	dwt_write32bitreg(GPIO_MODE_ID, gpio_mode);
 8004190:	f441 2192 	orr.w	r1, r1, #299008	@ 0x49000
 8004194:	f041 0112 	orr.w	r1, r1, #18
 8004198:	f7fe fa30 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
		header[0] |= DW3000_SPI_EAMRW;
 800419c:	f644 02e2 	movw	r2, #18658	@ 0x48e2
		buffer[j] = (uint8_t) regval;
 80041a0:	4941      	ldr	r1, [pc, #260]	@ (80042a8 <tag_init+0x2d0>)
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80041a2:	6833      	ldr	r3, [r6, #0]
		buffer[j] = (uint8_t) regval;
 80041a4:	9107      	str	r1, [sp, #28]
		header[0] |= DW3000_SPI_EAMRW;
 80041a6:	f8ad 2018 	strh.w	r2, [sp, #24]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80041aa:	7d1b      	ldrb	r3, [r3, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d05e      	beq.n	800426e <tag_init+0x296>
	dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80041b0:	2003      	movs	r0, #3
 80041b2:	f7ff faed 	bl	8003790 <dwt_setleds>
	return 0;
 80041b6:	2000      	movs	r0, #0
}
 80041b8:	b009      	add	sp, #36	@ 0x24
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041c4:	2202      	movs	r2, #2
 80041c6:	a905      	add	r1, sp, #20
 80041c8:	6800      	ldr	r0, [r0, #0]
 80041ca:	f001 fc17 	bl	80059fc <HAL_SPI_Receive>
 80041ce:	e73a      	b.n	8004046 <tag_init+0x6e>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	f10d 0113 	add.w	r1, sp, #19
 80041da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041de:	f001 fc0d 	bl	80059fc <HAL_SPI_Receive>
 80041e2:	e760      	b.n	80040a6 <tag_init+0xce>
		HAL_Delay(1000);
 80041e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041e8:	f000 fba8 	bl	800493c <HAL_Delay>
			return (1);
 80041ec:	2001      	movs	r0, #1
}
 80041ee:	b009      	add	sp, #36	@ 0x24
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		header[0] |= DW3000_SPI_EAMRW;
 80041f4:	f247 03ce 	movw	r3, #28878	@ 0x70ce
 80041f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80041fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004200:	f88d 3018 	strb.w	r3, [sp, #24]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	7d1b      	ldrb	r3, [r3, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d186      	bne.n	800411a <tag_init+0x142>
			write(cnt, header, length, buffer);
 800420c:	2201      	movs	r2, #1
 800420e:	ab06      	add	r3, sp, #24
 8004210:	a907      	add	r1, sp, #28
 8004212:	2002      	movs	r0, #2
 8004214:	f7fd feca 	bl	8001fac <write>
 8004218:	e77f      	b.n	800411a <tag_init+0x142>
	uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 800421a:	f7fd fd8b 	bl	8001d34 <dwt_read32bitoffsetreg.constprop.0>
 800421e:	4601      	mov	r1, r0
	val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 8004220:	0d09      	lsrs	r1, r1, #20
 8004222:	0509      	lsls	r1, r1, #20
	dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8004224:	f041 013c 	orr.w	r1, r1, #60	@ 0x3c
 8004228:	481d      	ldr	r0, [pc, #116]	@ (80042a0 <tag_init+0x2c8>)
 800422a:	f7fe f9e7 	bl	80025fc <dwt_write32bitoffsetreg.constprop.0>
	if (time > 0) {
 800422e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004232:	f7fe f833 	bl	800229c <dwt_setrxtimeout.part.0>
	buffer[0] = (uint8_t) regval;
 8004236:	2100      	movs	r1, #0
 8004238:	e797      	b.n	800416a <tag_init+0x192>
 800423a:	f643 74f2 	movw	r4, #16370	@ 0x3ff2
 800423e:	e777      	b.n	8004130 <tag_init+0x158>
			write(cnt, header, length, buffer);
 8004240:	2202      	movs	r2, #2
 8004242:	ab06      	add	r3, sp, #24
 8004244:	4610      	mov	r0, r2
 8004246:	a907      	add	r1, sp, #28
 8004248:	f7fd feb0 	bl	8001fac <write>
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 800424c:	229c      	movs	r2, #156	@ 0x9c
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	7d1b      	ldrb	r3, [r3, #20]
	buffer[0] = (uint8_t) regval;
 8004252:	f8ad 4018 	strh.w	r4, [sp, #24]
	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8004256:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800425a:	2b00      	cmp	r3, #0
 800425c:	f47f af72 	bne.w	8004144 <tag_init+0x16c>
			write(cnt, header, length, buffer);
 8004260:	2202      	movs	r2, #2
 8004262:	ab06      	add	r3, sp, #24
 8004264:	a907      	add	r1, sp, #28
 8004266:	2001      	movs	r0, #1
 8004268:	f7fd fea0 	bl	8001fac <write>
}
 800426c:	e76a      	b.n	8004144 <tag_init+0x16c>
			write(cnt, header, length, buffer);
 800426e:	2204      	movs	r2, #4
 8004270:	a906      	add	r1, sp, #24
 8004272:	ab07      	add	r3, sp, #28
 8004274:	2002      	movs	r0, #2
 8004276:	f7fd fe99 	bl	8001fac <write>
 800427a:	e799      	b.n	80041b0 <tag_init+0x1d8>
 800427c:	2202      	movs	r2, #2
 800427e:	ab06      	add	r3, sp, #24
 8004280:	4610      	mov	r0, r2
 8004282:	a907      	add	r1, sp, #28
 8004284:	f7fd fe92 	bl	8001fac <write>
}
 8004288:	e779      	b.n	800417e <tag_init+0x1a6>
 800428a:	bf00      	nop
 800428c:	20000444 	.word	0x20000444
 8004290:	20000440 	.word	0x20000440
 8004294:	20000340 	.word	0x20000340
 8004298:	00010014 	.word	0x00010014
 800429c:	0001000c 	.word	0x0001000c
 80042a0:	00010008 	.word	0x00010008
 80042a4:	ffe00fc0 	.word	0xffe00fc0
 80042a8:	00d20010 	.word	0x00d20010

080042ac <dwt_starttx>:
int dwt_starttx(uint8_t mode) {
 80042ac:	b510      	push	{r4, lr}
	if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 80042ae:	f010 0f1d 	tst.w	r0, #29
int dwt_starttx(uint8_t mode) {
 80042b2:	b082      	sub	sp, #8
 80042b4:	f000 0202 	and.w	r2, r0, #2
	if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 80042b8:	d032      	beq.n	8004320 <dwt_starttx+0x74>
		if (mode & DWT_START_TX_DELAYED) //delayed TX
 80042ba:	07c4      	lsls	r4, r0, #31
 80042bc:	d551      	bpl.n	8004362 <dwt_starttx+0xb6>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80042be:	4b58      	ldr	r3, [pc, #352]	@ (8004420 <dwt_starttx+0x174>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	7d1b      	ldrb	r3, [r3, #20]
			if (mode & DWT_RESPONSE_EXPECTED) {
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d160      	bne.n	800438a <dwt_starttx+0xde>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 80042c8:	f640 4287 	movw	r2, #3207	@ 0xc87
 80042cc:	ac01      	add	r4, sp, #4
 80042ce:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d053      	beq.n	800437e <dwt_starttx+0xd2>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80042d6:	2103      	movs	r1, #3
 80042d8:	4623      	mov	r3, r4
 80042da:	2201      	movs	r2, #1
 80042dc:	2044      	movs	r0, #68	@ 0x44
 80042de:	f7fd fc9b 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 80042e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
		if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) == 0) // Transmit Delayed Send set over Half a Period away.
 80042e6:	f011 0108 	ands.w	r1, r1, #8
 80042ea:	f040 808f 	bne.w	800440c <dwt_starttx+0x160>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80042ee:	4623      	mov	r3, r4
 80042f0:	2204      	movs	r2, #4
 80042f2:	484c      	ldr	r0, [pc, #304]	@ (8004424 <dwt_starttx+0x178>)
 80042f4:	f7fd fc90 	bl	8001c18 <dwt_xfer3000.constprop.2>
		regval = (regval << 8) + buffer[j];
 80042f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80042fc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004300:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004304:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004308:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800430c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8004310:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (sys_state == DW_SYS_STATE_TXERR) {
 8004314:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8004318:	d078      	beq.n	800440c <dwt_starttx+0x160>
	int retval = DWT_SUCCESS;
 800431a:	2000      	movs	r0, #0
} // end dwt_starttx()
 800431c:	b002      	add	sp, #8
 800431e:	bd10      	pop	{r4, pc}
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004320:	4b3f      	ldr	r3, [pc, #252]	@ (8004420 <dwt_starttx+0x174>)
	} else if (mode & DWT_START_TX_CCA) {
 8004322:	0681      	lsls	r1, r0, #26
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	7d1b      	ldrb	r3, [r3, #20]
	} else if (mode & DWT_START_TX_CCA) {
 8004328:	d50d      	bpl.n	8004346 <dwt_starttx+0x9a>
		if (mode & DWT_RESPONSE_EXPECTED) {
 800432a:	2a00      	cmp	r2, #0
 800432c:	d040      	beq.n	80043b0 <dwt_starttx+0x104>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 800432e:	f244 42a3 	movw	r2, #17571	@ 0x44a3
 8004332:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ef      	bne.n	800431a <dwt_starttx+0x6e>
			write(cnt, header, length, buffer);
 800433a:	461a      	mov	r2, r3
 800433c:	a901      	add	r1, sp, #4
 800433e:	2001      	movs	r0, #1
 8004340:	f7fd fe34 	bl	8001fac <write>
} // end dwt_xfer3000()
 8004344:	e7e9      	b.n	800431a <dwt_starttx+0x6e>
		if (mode & DWT_RESPONSE_EXPECTED) {
 8004346:	2a00      	cmp	r2, #0
 8004348:	d039      	beq.n	80043be <dwt_starttx+0x112>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 800434a:	f243 0299 	movw	r2, #12441	@ 0x3099
 800434e:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e1      	bne.n	800431a <dwt_starttx+0x6e>
			write(cnt, header, length, buffer);
 8004356:	461a      	mov	r2, r3
 8004358:	a901      	add	r1, sp, #4
 800435a:	2001      	movs	r0, #1
 800435c:	f7fd fe26 	bl	8001fac <write>
} // end dwt_xfer3000()
 8004360:	e7db      	b.n	800431a <dwt_starttx+0x6e>
		} else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8004362:	f010 0308 	ands.w	r3, r0, #8
 8004366:	d018      	beq.n	800439a <dwt_starttx+0xee>
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004368:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <dwt_starttx+0x174>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	7d1b      	ldrb	r3, [r3, #20]
			if (mode & DWT_RESPONSE_EXPECTED) {
 800436e:	b36a      	cbz	r2, 80043cc <dwt_starttx+0x120>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8004370:	f643 429f 	movw	r2, #15519	@ 0x3c9f
 8004374:	ac01      	add	r4, sp, #4
 8004376:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ab      	bne.n	80042d6 <dwt_starttx+0x2a>
			write(cnt, header, length, buffer);
 800437e:	461a      	mov	r2, r3
 8004380:	4621      	mov	r1, r4
 8004382:	2001      	movs	r0, #1
 8004384:	f7fd fe12 	bl	8001fac <write>
} // end dwt_xfer3000()
 8004388:	e7a5      	b.n	80042d6 <dwt_starttx+0x2a>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 800438a:	f243 429b 	movw	r2, #13467	@ 0x349b
 800438e:	ac01      	add	r4, sp, #4
 8004390:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004394:	2b00      	cmp	r3, #0
 8004396:	d19e      	bne.n	80042d6 <dwt_starttx+0x2a>
 8004398:	e7f1      	b.n	800437e <dwt_starttx+0xd2>
		} else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 800439a:	f010 0010 	ands.w	r0, r0, #16
 800439e:	d01e      	beq.n	80043de <dwt_starttx+0x132>
			if (mode & DWT_RESPONSE_EXPECTED) {
 80043a0:	b332      	cbz	r2, 80043f0 <dwt_starttx+0x144>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80043a2:	461a      	mov	r2, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	200e      	movs	r0, #14
 80043a8:	f7fd fe3c 	bl	8002024 <dwt_xfer3000.constprop.1>
 80043ac:	ac01      	add	r4, sp, #4
}
 80043ae:	e792      	b.n	80042d6 <dwt_starttx+0x2a>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 80043b0:	f642 4297 	movw	r2, #11415	@ 0x2c97
 80043b4:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ae      	bne.n	800431a <dwt_starttx+0x6e>
 80043bc:	e7bd      	b.n	800433a <dwt_starttx+0x8e>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 80043be:	f240 4283 	movw	r2, #1155	@ 0x483
 80043c2:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1a7      	bne.n	800431a <dwt_starttx+0x6e>
 80043ca:	e7b6      	b.n	800433a <dwt_starttx+0x8e>
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 80043cc:	f641 428f 	movw	r2, #7311	@ 0x1c8f
 80043d0:	ac01      	add	r4, sp, #4
 80043d2:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f af7d 	bne.w	80042d6 <dwt_starttx+0x2a>
 80043dc:	e7cf      	b.n	800437e <dwt_starttx+0xd2>
			if (mode & DWT_RESPONSE_EXPECTED) {
 80043de:	b172      	cbz	r2, 80043fe <dwt_starttx+0x152>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80043e0:	4603      	mov	r3, r0
 80043e2:	4602      	mov	r2, r0
 80043e4:	4601      	mov	r1, r0
 80043e6:	2010      	movs	r0, #16
 80043e8:	f7fd fe1c 	bl	8002024 <dwt_xfer3000.constprop.1>
 80043ec:	ac01      	add	r4, sp, #4
}
 80043ee:	e772      	b.n	80042d6 <dwt_starttx+0x2a>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80043f0:	4613      	mov	r3, r2
 80043f2:	4611      	mov	r1, r2
 80043f4:	2005      	movs	r0, #5
 80043f6:	f7fd fe15 	bl	8002024 <dwt_xfer3000.constprop.1>
 80043fa:	ac01      	add	r4, sp, #4
}
 80043fc:	e76b      	b.n	80042d6 <dwt_starttx+0x2a>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80043fe:	4613      	mov	r3, r2
 8004400:	4611      	mov	r1, r2
 8004402:	2009      	movs	r0, #9
 8004404:	f7fd fe0e 	bl	8002024 <dwt_xfer3000.constprop.1>
 8004408:	ac01      	add	r4, sp, #4
}
 800440a:	e764      	b.n	80042d6 <dwt_starttx+0x2a>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 800440c:	2300      	movs	r3, #0
 800440e:	4618      	mov	r0, r3
 8004410:	461a      	mov	r2, r3
 8004412:	4619      	mov	r1, r3
 8004414:	f7fd fe06 	bl	8002024 <dwt_xfer3000.constprop.1>
			retval = DWT_ERROR; // Failed !
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800441c:	e77e      	b.n	800431c <dwt_starttx+0x70>
 800441e:	bf00      	nop
 8004420:	20000440 	.word	0x20000440
 8004424:	000f0030 	.word	0x000f0030

08004428 <send_message_with_timestamps>:
		uint32_t frame_seq_nb) {
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	b085      	sub	sp, #20
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800442e:	ab02      	add	r3, sp, #8
		uint32_t frame_seq_nb) {
 8004430:	4607      	mov	r7, r0
 8004432:	4688      	mov	r8, r1
 8004434:	4616      	mov	r6, r2
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8004436:	2100      	movs	r1, #0
 8004438:	2205      	movs	r2, #5
 800443a:	2074      	movs	r0, #116	@ 0x74
 800443c:	f7fd fbec 	bl	8001c18 <dwt_xfer3000.constprop.2>
		ts |= ts_tab[i];
 8004440:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004444:	f89d 300b 	ldrb.w	r3, [sp, #11]
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8004448:	4d96      	ldr	r5, [pc, #600]	@ (80046a4 <send_message_with_timestamps+0x27c>)
		ts |= ts_tab[i];
 800444a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800444e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8004452:	f89d b008 	ldrb.w	fp, [sp, #8]
 8004456:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 800445a:	682b      	ldr	r3, [r5, #0]
 800445c:	7bd9      	ldrb	r1, [r3, #15]
		ts |= ts_tab[i];
 800445e:	f89d 3009 	ldrb.w	r3, [sp, #9]
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8004462:	2901      	cmp	r1, #1
		ts |= ts_tab[i];
 8004464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004468:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800446c:	f04f 0205 	mov.w	r2, #5
 8004470:	ab02      	add	r3, sp, #8
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8004472:	f000 80fc 	beq.w	800466e <send_message_with_timestamps+0x246>
 8004476:	2903      	cmp	r1, #3
 8004478:	f040 80fe 	bne.w	8004678 <send_message_with_timestamps+0x250>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800447c:	2104      	movs	r1, #4
 800447e:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 8004482:	f7fd fbc9 	bl	8001c18 <dwt_xfer3000.constprop.2>
		header[0] |= DW3000_SPI_EAMRW;
 8004486:	f24b 03c0 	movw	r3, #45248	@ 0xb0c0
		buffer[j] = (uint8_t) regval;
 800448a:	2200      	movs	r2, #0
		ts |= ts_tab[i];
 800448c:	f89d 100c 	ldrb.w	r1, [sp, #12]
		header[0] |= DW3000_SPI_EAMRW;
 8004490:	f8ad 3004 	strh.w	r3, [sp, #4]
		ts |= ts_tab[i];
 8004494:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004498:	f89d 900a 	ldrb.w	r9, [sp, #10]
 800449c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044a0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 80044a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80044a8:	f89d a008 	ldrb.w	sl, [sp, #8]
 80044ac:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
			+ (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 80044b0:	4c7d      	ldr	r4, [pc, #500]	@ (80046a8 <send_message_with_timestamps+0x280>)
		ts |= ts_tab[i];
 80044b2:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			+ (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 80044b6:	eb1a 0404 	adds.w	r4, sl, r4
		ts <<= 8;
 80044ba:	f3c9 4907 	ubfx	r9, r9, #16, #8
			+ (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 80044be:	f149 0900 	adc.w	r9, r9, #0
 80044c2:	0a23      	lsrs	r3, r4, #8
 80044c4:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
		regval >>= 8;
 80044c8:	0a19      	lsrs	r1, r3, #8
		buffer[j] = (uint8_t) regval;
 80044ca:	f363 0207 	bfi	r2, r3, #0, #8
 80044ce:	f361 220f 	bfi	r2, r1, #8, #8
		regval >>= 8;
 80044d2:	0c19      	lsrs	r1, r3, #16
		buffer[j] = (uint8_t) regval;
 80044d4:	f361 4217 	bfi	r2, r1, #16, #8
		regval >>= 8;
 80044d8:	0e1b      	lsrs	r3, r3, #24
		buffer[j] = (uint8_t) regval;
 80044da:	f363 621f 	bfi	r2, r3, #24, #8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80044de:	682b      	ldr	r3, [r5, #0]
		buffer[j] = (uint8_t) regval;
 80044e0:	9202      	str	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80044e2:	7d1b      	ldrb	r3, [r3, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80cc 	beq.w	8004682 <send_message_with_timestamps+0x25a>
	final_tx_timestamp = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
 80044ea:	f244 001a 	movw	r0, #16410	@ 0x401a
 80044ee:	f424 73ff 	bic.w	r3, r4, #510	@ 0x1fe
 80044f2:	2200      	movs	r2, #0
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	181b      	adds	r3, r3, r0
		ts_field[i] = (uint8_t) ts;
 80044fa:	f04f 001a 	mov.w	r0, #26
	final_tx_timestamp = (((uint64_t) (final_tx_time & 0xFFFFFFFEUL)) << 8)
 80044fe:	f009 01ff 	and.w	r1, r9, #255	@ 0xff
 8004502:	f141 0100 	adc.w	r1, r1, #0
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8004506:	4590      	cmp	r8, r2
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8004508:	f88d 2009 	strb.w	r2, [sp, #9]
		ts_field[i] = (uint8_t) ts;
 800450c:	f360 0207 	bfi	r2, r0, #0, #8
		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8004510:	bf14      	ite	ne
 8004512:	20a8      	movne	r0, #168	@ 0xa8
 8004514:	2081      	moveq	r0, #129	@ 0x81
 8004516:	f88d 0008 	strb.w	r0, [sp, #8]
		ts >>= 8;
 800451a:	0a18      	lsrs	r0, r3, #8
 800451c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
		ts_field[i] = (uint8_t) ts;
 8004520:	f360 220f 	bfi	r2, r0, #8, #8
		ts >>= 8;
 8004524:	0c18      	lsrs	r0, r3, #16
 8004526:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800452a:	0e1b      	lsrs	r3, r3, #24
	tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800452c:	b2f4      	uxtb	r4, r6
		ts >>= 8;
 800452e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8004532:	70bc      	strb	r4, [r7, #2]
		ts_field[i] = (uint8_t) ts;
 8004534:	f360 4217 	bfi	r2, r0, #16, #8
 8004538:	f363 621f 	bfi	r2, r3, #24, #8
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800453c:	682b      	ldr	r3, [r5, #0]
		ts_field[i] = (uint8_t) ts;
 800453e:	f8c7 b00a 	str.w	fp, [r7, #10]
 8004542:	f8c7 a00e 	str.w	sl, [r7, #14]
 8004546:	f8c7 2012 	str.w	r2, [r7, #18]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800454a:	f893 9014 	ldrb.w	r9, [r3, #20]
 800454e:	f1b9 0f00 	cmp.w	r9, #0
 8004552:	d06c      	beq.n	800462e <send_message_with_timestamps+0x206>
	ret = dwt_starttx(DWT_START_TX_DELAYED);
 8004554:	2001      	movs	r0, #1
 8004556:	f7ff fea9 	bl	80042ac <dwt_starttx>
	if (ret == DWT_SUCCESS) {
 800455a:	2800      	cmp	r0, #0
 800455c:	d15a      	bne.n	8004614 <send_message_with_timestamps+0x1ec>
		header[0] |= DW3000_SPI_EAMRW;
 800455e:	f241 0841 	movw	r8, #4161	@ 0x1041
 8004562:	4c52      	ldr	r4, [pc, #328]	@ (80046ac <send_message_with_timestamps+0x284>)
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004564:	4f52      	ldr	r7, [pc, #328]	@ (80046b0 <send_message_with_timestamps+0x288>)
 8004566:	e002      	b.n	800456e <send_message_with_timestamps+0x146>
		regval = (regval << 8) + buffer[j];
 8004568:	9b02      	ldr	r3, [sp, #8]
		while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK)) {
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	d446      	bmi.n	80045fc <send_message_with_timestamps+0x1d4>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800456e:	6823      	ldr	r3, [r4, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8004570:	f8ad 8004 	strh.w	r8, [sp, #4]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8004574:	8919      	ldrh	r1, [r3, #8]
 8004576:	6858      	ldr	r0, [r3, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f000 fbef 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004584:	2202      	movs	r2, #2
 8004586:	6800      	ldr	r0, [r0, #0]
 8004588:	a901      	add	r1, sp, #4
 800458a:	f000 fff5 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 800458e:	2800      	cmp	r0, #0
 8004590:	d044      	beq.n	800461c <send_message_with_timestamps+0x1f4>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	8919      	ldrh	r1, [r3, #8]
 8004598:	6858      	ldr	r0, [r3, #4]
 800459a:	f000 fbdf 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	7d1b      	ldrb	r3, [r3, #20]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d1e0      	bne.n	8004568 <send_message_with_timestamps+0x140>
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
		data = byteArray[byte] ^ crcRemainderInit;
 80045aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80045ae:	5cfa      	ldrb	r2, [r7, r3]
 80045b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045b4:	404a      	eors	r2, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80045b6:	5cba      	ldrb	r2, [r7, r2]
 80045b8:	f89d 1009 	ldrb.w	r1, [sp, #9]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045bc:	4053      	eors	r3, r2
 80045be:	5cfb      	ldrb	r3, [r7, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 80045c0:	f89d 200a 	ldrb.w	r2, [sp, #10]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045c4:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 80045c6:	5cfb      	ldrb	r3, [r7, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80045c8:	2018      	movs	r0, #24
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045ca:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 80045cc:	5cf9      	ldrb	r1, [r7, r3]
 80045ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80045d2:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 80045d4:	4059      	eors	r1, r3
 80045d6:	f817 9001 	ldrb.w	r9, [r7, r1]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80045da:	f10d 0303 	add.w	r3, sp, #3
 80045de:	2100      	movs	r1, #0
 80045e0:	f7fd fb1a 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 80045e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (crc8 != dwcrc8) {
 80045e8:	4599      	cmp	r9, r3
 80045ea:	d0bd      	beq.n	8004568 <send_message_with_timestamps+0x140>
				if (pdw3000local->cbSPIRDErr != NULL)
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0b9      	beq.n	8004568 <send_message_with_timestamps+0x140>
					pdw3000local->cbSPIRDErr();
 80045f4:	4798      	blx	r3
		regval = (regval << 8) + buffer[j];
 80045f6:	9b02      	ldr	r3, [sp, #8]
		while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK)) {
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	d5b8      	bpl.n	800456e <send_message_with_timestamps+0x146>
		buffer[j] = (uint8_t) regval;
 80045fc:	2280      	movs	r2, #128	@ 0x80
		header[0] |= DW3000_SPI_EAMRW;
 80045fe:	f241 01c1 	movw	r1, #4289	@ 0x10c1
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004602:	682b      	ldr	r3, [r5, #0]
		header[0] |= DW3000_SPI_EAMRW;
 8004604:	f8ad 1004 	strh.w	r1, [sp, #4]
		buffer[j] = (uint8_t) regval;
 8004608:	9202      	str	r2, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800460a:	7d1b      	ldrb	r3, [r3, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d040      	beq.n	8004692 <send_message_with_timestamps+0x26a>
		frame_seq_nb++;
 8004610:	3601      	adds	r6, #1
	return frame_seq_nb;
 8004612:	b2f4      	uxtb	r4, r6
}
 8004614:	4620      	mov	r0, r4
 8004616:	b005      	add	sp, #20
 8004618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 800461c:	6821      	ldr	r1, [r4, #0]
 800461e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004622:	2204      	movs	r2, #4
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	a902      	add	r1, sp, #8
 8004628:	f001 f9e8 	bl	80059fc <HAL_SPI_Receive>
 800462c:	e7b1      	b.n	8004592 <send_message_with_timestamps+0x16a>
			write(cnt, header, length, buffer);
 800462e:	463b      	mov	r3, r7
 8004630:	4642      	mov	r2, r8
 8004632:	a902      	add	r1, sp, #8
 8004634:	2001      	movs	r0, #1
 8004636:	f7fd fcb9 	bl	8001fac <write>
		header[0] |= DW3000_SPI_EAMRW;
 800463a:	f249 31c0 	movw	r1, #37824	@ 0x93c0
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800463e:	682a      	ldr	r2, [r5, #0]
	dwt_writetxfctrl(size + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */
 8004640:	f108 0302 	add.w	r3, r8, #2
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8004644:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 8004648:	7d12      	ldrb	r2, [r2, #20]
	buf[4] = (uint8_t) _or;    //        &0xFF;
 800464a:	f8ad 300c 	strh.w	r3, [sp, #12]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 800464e:	4b19      	ldr	r3, [pc, #100]	@ (80046b4 <send_message_with_timestamps+0x28c>)
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8004650:	f8ad 900e 	strh.w	r9, [sp, #14]
		header[0] |= DW3000_SPI_EAMRW;
 8004654:	f8ad 1004 	strh.w	r1, [sp, #4]
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8004658:	9302      	str	r3, [sp, #8]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 800465a:	2a00      	cmp	r2, #0
 800465c:	f47f af7a 	bne.w	8004554 <send_message_with_timestamps+0x12c>
			write(cnt, header, length, buffer);
 8004660:	2208      	movs	r2, #8
 8004662:	ab02      	add	r3, sp, #8
 8004664:	a901      	add	r1, sp, #4
 8004666:	2002      	movs	r0, #2
 8004668:	f7fd fca0 	bl	8001fac <write>
 800466c:	e772      	b.n	8004554 <send_message_with_timestamps+0x12c>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800466e:	2100      	movs	r1, #0
 8004670:	4811      	ldr	r0, [pc, #68]	@ (80046b8 <send_message_with_timestamps+0x290>)
 8004672:	f7fd fad1 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 8004676:	e706      	b.n	8004486 <send_message_with_timestamps+0x5e>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8004678:	2100      	movs	r1, #0
 800467a:	2064      	movs	r0, #100	@ 0x64
 800467c:	f7fd facc 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 8004680:	e701      	b.n	8004486 <send_message_with_timestamps+0x5e>
			write(cnt, header, length, buffer);
 8004682:	2204      	movs	r2, #4
 8004684:	ab02      	add	r3, sp, #8
 8004686:	eb0d 0102 	add.w	r1, sp, r2
 800468a:	2002      	movs	r0, #2
 800468c:	f7fd fc8e 	bl	8001fac <write>
 8004690:	e72b      	b.n	80044ea <send_message_with_timestamps+0xc2>
 8004692:	2204      	movs	r2, #4
 8004694:	ab02      	add	r3, sp, #8
 8004696:	eb0d 0102 	add.w	r1, sp, r2
 800469a:	2002      	movs	r0, #2
 800469c:	f7fd fc86 	bl	8001fac <write>
 80046a0:	e7b6      	b.n	8004610 <send_message_with_timestamps+0x1e8>
 80046a2:	bf00      	nop
 80046a4:	20000440 	.word	0x20000440
 80046a8:	02aa8118 	.word	0x02aa8118
 80046ac:	20000444 	.word	0x20000444
 80046b0:	20000340 	.word	0x20000340
 80046b4:	fc00f400 	.word	0xfc00f400
 80046b8:	00180004 	.word	0x00180004

080046bc <get_tx_timestamp_u64>:
		header[0] |= DW3000_SPI_EAMRW;
 80046bc:	f24d 0c41 	movw	ip, #53313	@ 0xd041
uint64_t get_tx_timestamp_u64(void) {
 80046c0:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80046c2:	4c36      	ldr	r4, [pc, #216]	@ (800479c <get_tx_timestamp_u64+0xe0>)
uint64_t get_tx_timestamp_u64(void) {
 80046c4:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	2200      	movs	r2, #0
 80046ca:	8919      	ldrh	r1, [r3, #8]
 80046cc:	6858      	ldr	r0, [r3, #4]
		header[0] |= DW3000_SPI_EAMRW;
 80046ce:	f8ad c004 	strh.w	ip, [sp, #4]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 80046d2:	f000 fb43 	bl	8004d5c <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 80046d6:	6821      	ldr	r1, [r4, #0]
 80046d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046dc:	6808      	ldr	r0, [r1, #0]
 80046de:	2202      	movs	r2, #2
 80046e0:	a901      	add	r1, sp, #4
 80046e2:	f000 ff49 	bl	8005578 <HAL_SPI_Transmit>
	if (res == HAL_OK)
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d04e      	beq.n	8004788 <get_tx_timestamp_u64+0xcc>
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80046ea:	6823      	ldr	r3, [r4, #0]
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80046ec:	4c2c      	ldr	r4, [pc, #176]	@ (80047a0 <get_tx_timestamp_u64+0xe4>)
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80046ee:	8919      	ldrh	r1, [r3, #8]
 80046f0:	6858      	ldr	r0, [r3, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f000 fb32 	bl	8004d5c <HAL_GPIO_WritePin>
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	7d1b      	ldrb	r3, [r3, #20]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d014      	beq.n	800472a <get_tx_timestamp_u64+0x6e>
		ts |= ts_tab[i];
 8004700:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004704:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8004708:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800470c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004710:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004714:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8004718:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800471c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 8004720:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004724:	0c09      	lsrs	r1, r1, #16
 8004726:	b005      	add	sp, #20
 8004728:	bd30      	pop	{r4, r5, pc}
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800472a:	481e      	ldr	r0, [pc, #120]	@ (80047a4 <get_tx_timestamp_u64+0xe8>)
 800472c:	f89d 3004 	ldrb.w	r3, [sp, #4]
		data = byteArray[byte] ^ crcRemainderInit;
 8004730:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004734:	5cc3      	ldrb	r3, [r0, r3]
 8004736:	f89d 2008 	ldrb.w	r2, [sp, #8]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800473a:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 800473c:	5cc3      	ldrb	r3, [r0, r3]
 800473e:	f89d 1009 	ldrb.w	r1, [sp, #9]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004742:	4053      	eors	r3, r2
 8004744:	5cc3      	ldrb	r3, [r0, r3]
		data = byteArray[byte] ^ crcRemainderInit;
 8004746:	f89d 200a 	ldrb.w	r2, [sp, #10]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800474a:	404b      	eors	r3, r1
		data = byteArray[byte] ^ crcRemainderInit;
 800474c:	5cc3      	ldrb	r3, [r0, r3]
 800474e:	f89d c00c 	ldrb.w	ip, [sp, #12]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004752:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 8004754:	5cc3      	ldrb	r3, [r0, r3]
 8004756:	f89d 200b 	ldrb.w	r2, [sp, #11]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800475a:	2100      	movs	r1, #0
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 800475c:	4053      	eors	r3, r2
		data = byteArray[byte] ^ crcRemainderInit;
 800475e:	5cc3      	ldrb	r3, [r0, r3]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8004760:	2201      	movs	r2, #1
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8004762:	ea8c 0c03 	eor.w	ip, ip, r3
 8004766:	f810 500c 	ldrb.w	r5, [r0, ip]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 800476a:	f10d 0303 	add.w	r3, sp, #3
 800476e:	2018      	movs	r0, #24
 8004770:	f7fd fa52 	bl	8001c18 <dwt_xfer3000.constprop.2>
	return regval;
 8004774:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (crc8 != dwcrc8) {
 8004778:	429d      	cmp	r5, r3
 800477a:	d0c1      	beq.n	8004700 <get_tx_timestamp_u64+0x44>
				if (pdw3000local->cbSPIRDErr != NULL)
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0bd      	beq.n	8004700 <get_tx_timestamp_u64+0x44>
					pdw3000local->cbSPIRDErr();
 8004784:	4798      	blx	r3
 8004786:	e7bb      	b.n	8004700 <get_tx_timestamp_u64+0x44>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 8004788:	6821      	ldr	r1, [r4, #0]
 800478a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800478e:	2205      	movs	r2, #5
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	a902      	add	r1, sp, #8
 8004794:	f001 f932 	bl	80059fc <HAL_SPI_Receive>
 8004798:	e7a7      	b.n	80046ea <get_tx_timestamp_u64+0x2e>
 800479a:	bf00      	nop
 800479c:	20000444 	.word	0x20000444
 80047a0:	20000440 	.word	0x20000440
 80047a4:	20000340 	.word	0x20000340

080047a8 <get_rx_timestamp_u64>:
uint64_t get_rx_timestamp_u64(void) {
 80047a8:	b500      	push	{lr}
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <get_rx_timestamp_u64+0x64>)
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80047ac:	2205      	movs	r2, #5
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 80047ae:	681b      	ldr	r3, [r3, #0]
uint64_t get_rx_timestamp_u64(void) {
 80047b0:	b083      	sub	sp, #12
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 80047b2:	7bdb      	ldrb	r3, [r3, #15]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d01d      	beq.n	80047f4 <get_rx_timestamp_u64+0x4c>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d121      	bne.n	8004800 <get_rx_timestamp_u64+0x58>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80047bc:	2104      	movs	r1, #4
 80047be:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 80047c2:	466b      	mov	r3, sp
 80047c4:	f7fd fa28 	bl	8001c18 <dwt_xfer3000.constprop.2>
		ts |= ts_tab[i];
 80047c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80047cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80047d0:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80047d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80047d8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80047dc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80047e0:	f89d 0000 	ldrb.w	r0, [sp]
 80047e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 80047e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80047ec:	0c09      	lsrs	r1, r1, #16
 80047ee:	b003      	add	sp, #12
 80047f0:	f85d fb04 	ldr.w	pc, [sp], #4
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80047f4:	2100      	movs	r1, #0
 80047f6:	466b      	mov	r3, sp
 80047f8:	4805      	ldr	r0, [pc, #20]	@ (8004810 <get_rx_timestamp_u64+0x68>)
 80047fa:	f7fd fa0d 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 80047fe:	e7e3      	b.n	80047c8 <get_rx_timestamp_u64+0x20>
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8004800:	2100      	movs	r1, #0
 8004802:	2064      	movs	r0, #100	@ 0x64
 8004804:	466b      	mov	r3, sp
 8004806:	f7fd fa07 	bl	8001c18 <dwt_xfer3000.constprop.2>
}
 800480a:	e7dd      	b.n	80047c8 <get_rx_timestamp_u64+0x20>
 800480c:	20000440 	.word	0x20000440
 8004810:	00180004 	.word	0x00180004

08004814 <final_msg_get_ts>:
	*ts = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	600b      	str	r3, [r1, #0]
		*ts += ((uint32_t) ts_field[i] << (i * 8));
 8004818:	7803      	ldrb	r3, [r0, #0]
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	7842      	ldrb	r2, [r0, #1]
 800481e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004822:	600b      	str	r3, [r1, #0]
 8004824:	7882      	ldrb	r2, [r0, #2]
 8004826:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800482a:	600b      	str	r3, [r1, #0]
 800482c:	78c2      	ldrb	r2, [r0, #3]
 800482e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004832:	600b      	str	r3, [r1, #0]
}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <resp_msg_set_ts>:
		ts_field[i] = (uint8_t) (ts >> (i * 8));
 8004838:	6002      	str	r2, [r0, #0]
}
 800483a:	4770      	bx	lr

0800483c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800483c:	f7fd f9ea 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004840:	480b      	ldr	r0, [pc, #44]	@ (8004870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004842:	490c      	ldr	r1, [pc, #48]	@ (8004874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004844:	4a0c      	ldr	r2, [pc, #48]	@ (8004878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004848:	e002      	b.n	8004850 <LoopCopyDataInit>

0800484a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800484a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800484c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800484e:	3304      	adds	r3, #4

08004850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004854:	d3f9      	bcc.n	800484a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004856:	4a09      	ldr	r2, [pc, #36]	@ (800487c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004858:	4c09      	ldr	r4, [pc, #36]	@ (8004880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800485a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800485c:	e001      	b.n	8004862 <LoopFillZerobss>

0800485e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800485e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004860:	3204      	adds	r2, #4

08004862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004864:	d3fb      	bcc.n	800485e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004866:	f002 fe49 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800486a:	f7fc fc1d 	bl	80010a8 <main>
  bx lr
 800486e:	4770      	bx	lr
  ldr r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004874:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004878:	080098ec 	.word	0x080098ec
  ldr r2, =_sbss
 800487c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004880:	200005d4 	.word	0x200005d4

08004884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004884:	e7fe      	b.n	8004884 <ADC1_2_IRQHandler>
	...

08004888 <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop

0800488c <HAL_DeInit>:
{
 800488c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800488e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 8004892:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8004894:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <HAL_DeInit+0x1c>)
 8004896:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8004898:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800489a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800489c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800489e:	f7ff fff3 	bl	8004888 <HAL_MspDeInit>
}
 80048a2:	4620      	mov	r0, r4
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000

080048ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048b2:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <HAL_InitTick+0x3c>)
{
 80048b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048b6:	7811      	ldrb	r1, [r2, #0]
 80048b8:	4a0c      	ldr	r2, [pc, #48]	@ (80048ec <HAL_InitTick+0x40>)
 80048ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	fbb2 f0f3 	udiv	r0, r2, r3
 80048c4:	f000 f8a8 	bl	8004a18 <HAL_SYSTICK_Config>
 80048c8:	b908      	cbnz	r0, 80048ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ca:	2d0f      	cmp	r5, #15
 80048cc:	d901      	bls.n	80048d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80048ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048d4:	4602      	mov	r2, r0
 80048d6:	4629      	mov	r1, r5
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048dc:	f000 f852 	bl	8004984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_InitTick+0x44>)
 80048e2:	4620      	mov	r0, r4
 80048e4:	601d      	str	r5, [r3, #0]
}
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	20000010 	.word	0x20000010
 80048ec:	2000000c 	.word	0x2000000c
 80048f0:	20000014 	.word	0x20000014

080048f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048f4:	4a07      	ldr	r2, [pc, #28]	@ (8004914 <HAL_Init+0x20>)
{
 80048f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048f8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048fa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048fc:	f043 0310 	orr.w	r3, r3, #16
 8004900:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004902:	f000 f82d 	bl	8004960 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004906:	200f      	movs	r0, #15
 8004908:	f7ff ffd0 	bl	80048ac <HAL_InitTick>
  HAL_MspInit();
 800490c:	f7fd f812 	bl	8001934 <HAL_MspInit>
}
 8004910:	2000      	movs	r0, #0
 8004912:	bd08      	pop	{r3, pc}
 8004914:	40022000 	.word	0x40022000

08004918 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004918:	4a03      	ldr	r2, [pc, #12]	@ (8004928 <HAL_IncTick+0x10>)
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <HAL_IncTick+0x14>)
 800491c:	6811      	ldr	r1, [r2, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	440b      	add	r3, r1
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000484 	.word	0x20000484
 800492c:	20000010 	.word	0x20000010

08004930 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004930:	4b01      	ldr	r3, [pc, #4]	@ (8004938 <HAL_GetTick+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000484 	.word	0x20000484

0800493c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004940:	f7ff fff6 	bl	8004930 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004944:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004946:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004948:	d002      	beq.n	8004950 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800494a:	4b04      	ldr	r3, [pc, #16]	@ (800495c <HAL_Delay+0x20>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004950:	f7ff ffee 	bl	8004930 <HAL_GetTick>
 8004954:	1b40      	subs	r0, r0, r5
 8004956:	42a0      	cmp	r0, r4
 8004958:	d3fa      	bcc.n	8004950 <HAL_Delay+0x14>
  {
  }
}
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000010 	.word	0x20000010

08004960 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004960:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004964:	4906      	ldr	r1, [pc, #24]	@ (8004980 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004966:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800496a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800497c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004984:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004986:	b500      	push	{lr}
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800498e:	f1c3 0e07 	rsb	lr, r3, #7
 8004992:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004996:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499a:	bf28      	it	cs
 800499c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a0:	f1bc 0f06 	cmp.w	ip, #6
 80049a4:	d91c      	bls.n	80049e0 <HAL_NVIC_SetPriority+0x5c>
 80049a6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ae:	fa03 f30c 	lsl.w	r3, r3, ip
 80049b2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ba:	fa03 f30e 	lsl.w	r3, r3, lr
 80049be:	ea21 0303 	bic.w	r3, r1, r3
 80049c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80049c6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80049ca:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049cc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80049ce:	db0a      	blt.n	80049e6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80049d4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80049d8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80049e0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e2:	4694      	mov	ip, r2
 80049e4:	e7e7      	b.n	80049b6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e6:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_NVIC_SetPriority+0x74>)
 80049e8:	f000 000f 	and.w	r0, r0, #15
 80049ec:	4402      	add	r2, r0
 80049ee:	7613      	strb	r3, [r2, #24]
 80049f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f4:	e000ed00 	.word	0xe000ed00
 80049f8:	e000ecfc 	.word	0xe000ecfc

080049fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049fc:	2800      	cmp	r0, #0
 80049fe:	db07      	blt.n	8004a10 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a00:	2301      	movs	r3, #1
 8004a02:	f000 011f 	and.w	r1, r0, #31
 8004a06:	4a03      	ldr	r2, [pc, #12]	@ (8004a14 <HAL_NVIC_EnableIRQ+0x18>)
 8004a08:	0940      	lsrs	r0, r0, #5
 8004a0a:	408b      	lsls	r3, r1
 8004a0c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	3801      	subs	r0, #1
 8004a1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004a1e:	d301      	bcc.n	8004a24 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a20:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a22:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a2e:	2107      	movs	r1, #7
{
 8004a30:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	4c04      	ldr	r4, [pc, #16]	@ (8004a44 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a36:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a3a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a3c:	619a      	str	r2, [r3, #24]
}
 8004a3e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a40:	6119      	str	r1, [r3, #16]
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a48:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8004a4c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a4e:	2a02      	cmp	r2, #2
 8004a50:	d006      	beq.n	8004a60 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a52:	2204      	movs	r2, #4
 8004a54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a56:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004a5a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8004a5e:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a60:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a64:	681a      	ldr	r2, [r3, #0]
  return status; 
 8004a66:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a68:	6811      	ldr	r1, [r2, #0]
 8004a6a:	f021 010e 	bic.w	r1, r1, #14
 8004a6e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a70:	6811      	ldr	r1, [r2, #0]
 8004a72:	f021 0101 	bic.w	r1, r1, #1
 8004a76:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a78:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	@ 0x3c
 8004a7c:	fa0c f202 	lsl.w	r2, ip, r2
 8004a80:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004a82:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004a84:	f883 c021 	strb.w	ip, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004a88:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a90:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{  
 8004a94:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a96:	2a02      	cmp	r2, #2
 8004a98:	d003      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a9a:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8004aa0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aa2:	6802      	ldr	r2, [r0, #0]
{  
 8004aa4:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aa6:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004aa8:	481b      	ldr	r0, [pc, #108]	@ (8004b18 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aaa:	f021 010e 	bic.w	r1, r1, #14
 8004aae:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ab0:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ab2:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8004ab4:	f021 0101 	bic.w	r1, r1, #1
 8004ab8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004aba:	d022      	beq.n	8004b02 <HAL_DMA_Abort_IT+0x72>
 8004abc:	4917      	ldr	r1, [pc, #92]	@ (8004b1c <HAL_DMA_Abort_IT+0x8c>)
 8004abe:	428a      	cmp	r2, r1
 8004ac0:	d01d      	beq.n	8004afe <HAL_DMA_Abort_IT+0x6e>
 8004ac2:	3114      	adds	r1, #20
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	d01e      	beq.n	8004b06 <HAL_DMA_Abort_IT+0x76>
 8004ac8:	3114      	adds	r1, #20
 8004aca:	428a      	cmp	r2, r1
 8004acc:	d01e      	beq.n	8004b0c <HAL_DMA_Abort_IT+0x7c>
 8004ace:	3114      	adds	r1, #20
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d01e      	beq.n	8004b12 <HAL_DMA_Abort_IT+0x82>
 8004ad4:	3114      	adds	r1, #20
 8004ad6:	428a      	cmp	r2, r1
 8004ad8:	bf14      	ite	ne
 8004ada:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 8004ade:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
    hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004ae4:	2100      	movs	r1, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ae6:	4c0e      	ldr	r4, [pc, #56]	@ (8004b20 <HAL_DMA_Abort_IT+0x90>)
 8004ae8:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8004aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004aec:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004af0:	f883 1020 	strb.w	r1, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8004af4:	b10a      	cbz	r2, 8004afa <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8004af6:	4618      	mov	r0, r3
 8004af8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2000      	movs	r0, #0
}
 8004afc:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004afe:	2210      	movs	r2, #16
 8004b00:	e7ef      	b.n	8004ae2 <HAL_DMA_Abort_IT+0x52>
 8004b02:	2201      	movs	r2, #1
 8004b04:	e7ed      	b.n	8004ae2 <HAL_DMA_Abort_IT+0x52>
 8004b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b0a:	e7ea      	b.n	8004ae2 <HAL_DMA_Abort_IT+0x52>
 8004b0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b10:	e7e7      	b.n	8004ae2 <HAL_DMA_Abort_IT+0x52>
 8004b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b16:	e7e4      	b.n	8004ae2 <HAL_DMA_Abort_IT+0x52>
 8004b18:	40020008 	.word	0x40020008
 8004b1c:	4002001c 	.word	0x4002001c
 8004b20:	40020000 	.word	0x40020000

08004b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b28:	680d      	ldr	r5, [r1, #0]
{
 8004b2a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	f000 80c3 	beq.w	8004cb8 <HAL_GPIO_Init+0x194>
 8004b32:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b34:	4e80      	ldr	r6, [pc, #512]	@ (8004d38 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8004b36:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8004b38:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8004b3a:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 8004d3c <HAL_GPIO_Init+0x218>
 8004b3e:	4f80      	ldr	r7, [pc, #512]	@ (8004d40 <HAL_GPIO_Init+0x21c>)
 8004b40:	e006      	b.n	8004b50 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8004b42:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b44:	fa35 f403 	lsrs.w	r4, r5, r3
 8004b48:	f102 0204 	add.w	r2, r2, #4
 8004b4c:	f000 80b4 	beq.w	8004cb8 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8004b50:	2401      	movs	r4, #1
 8004b52:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8004b54:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b58:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8004b5c:	d1f1      	bne.n	8004b42 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8004b5e:	684d      	ldr	r5, [r1, #4]
 8004b60:	2d12      	cmp	r5, #18
 8004b62:	f200 80ac 	bhi.w	8004cbe <HAL_GPIO_Init+0x19a>
 8004b66:	2d12      	cmp	r5, #18
 8004b68:	d81a      	bhi.n	8004ba0 <HAL_GPIO_Init+0x7c>
 8004b6a:	e8df f005 	tbb	[pc, r5]
 8004b6e:	c5b3      	.short	0xc5b3
 8004b70:	1919ccc1 	.word	0x1919ccc1
 8004b74:	19191919 	.word	0x19191919
 8004b78:	19191919 	.word	0x19191919
 8004b7c:	bd191919 	.word	0xbd191919
 8004b80:	c8          	.byte	0xc8
 8004b81:	00          	.byte	0x00
 8004b82:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8004d44 <HAL_GPIO_Init+0x220>
 8004b86:	4575      	cmp	r5, lr
 8004b88:	f000 80a4 	beq.w	8004cd4 <HAL_GPIO_Init+0x1b0>
 8004b8c:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8004b90:	4575      	cmp	r5, lr
 8004b92:	f000 809f 	beq.w	8004cd4 <HAL_GPIO_Init+0x1b0>
 8004b96:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8004b9a:	4575      	cmp	r5, lr
 8004b9c:	f000 809a 	beq.w	8004cd4 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ba0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8004ba4:	bf9c      	itt	ls
 8004ba6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ba8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004baa:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bae:	bf84      	itt	hi
 8004bb0:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004bb4:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bb8:	f8de 4000 	ldr.w	r4, [lr]
 8004bbc:	fa0a f90b 	lsl.w	r9, sl, fp
 8004bc0:	fa05 fb0b 	lsl.w	fp, r5, fp
 8004bc4:	ea24 040b 	bic.w	r4, r4, fp
 8004bc8:	ea44 0409 	orr.w	r4, r4, r9
 8004bcc:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bd0:	684c      	ldr	r4, [r1, #4]
 8004bd2:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8004bd6:	f000 8085 	beq.w	8004ce4 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bda:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bde:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004be2:	f04e 0e01 	orr.w	lr, lr, #1
 8004be6:	f8c6 e018 	str.w	lr, [r6, #24]
 8004bea:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bee:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bf2:	f00e 0e01 	and.w	lr, lr, #1
 8004bf6:	f8cd e004 	str.w	lr, [sp, #4]
 8004bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8004bfe:	f023 0e03 	bic.w	lr, r3, #3
 8004c02:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8004c06:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 8004c0a:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c0e:	fa05 f509 	lsl.w	r5, r5, r9
 8004c12:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c16:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8004d48 <HAL_GPIO_Init+0x224>
 8004c1a:	4558      	cmp	r0, fp
 8004c1c:	d013      	beq.n	8004c46 <HAL_GPIO_Init+0x122>
 8004c1e:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8004c22:	4558      	cmp	r0, fp
 8004c24:	d079      	beq.n	8004d1a <HAL_GPIO_Init+0x1f6>
 8004c26:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8004d4c <HAL_GPIO_Init+0x228>
 8004c2a:	4558      	cmp	r0, fp
 8004c2c:	d06e      	beq.n	8004d0c <HAL_GPIO_Init+0x1e8>
 8004c2e:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8004d50 <HAL_GPIO_Init+0x22c>
 8004c32:	4558      	cmp	r0, fp
 8004c34:	bf0c      	ite	eq
 8004c36:	f04f 0b03 	moveq.w	fp, #3
 8004c3a:	f04f 0b04 	movne.w	fp, #4
 8004c3e:	fa0b f909 	lsl.w	r9, fp, r9
 8004c42:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004c46:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c4a:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8004d54 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c4e:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c52:	f8de 5008 	ldr.w	r5, [lr, #8]
 8004c56:	bf14      	ite	ne
 8004c58:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c5c:	ea25 050c 	biceq.w	r5, r5, ip
 8004c60:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c64:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 8004d54 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c68:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c6c:	f8de 500c 	ldr.w	r5, [lr, #12]
 8004c70:	bf14      	ite	ne
 8004c72:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c76:	ea25 050c 	biceq.w	r5, r5, ip
 8004c7a:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8004c7e:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8004d54 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c82:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004c86:	f8de 5004 	ldr.w	r5, [lr, #4]
 8004c8a:	bf14      	ite	ne
 8004c8c:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c90:	ea25 050c 	biceq.w	r5, r5, ip
 8004c94:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8004c98:	4d2e      	ldr	r5, [pc, #184]	@ (8004d54 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c9a:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004c9e:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ca0:	d01d      	beq.n	8004cde <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 8004ca2:	ea44 040c 	orr.w	r4, r4, ip
 8004ca6:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ca8:	680d      	ldr	r5, [r1, #0]
	position++;
 8004caa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cac:	fa35 f403 	lsrs.w	r4, r5, r3
 8004cb0:	f102 0204 	add.w	r2, r2, #4
 8004cb4:	f47f af4c 	bne.w	8004b50 <HAL_GPIO_Init+0x2c>
  }
}
 8004cb8:	b003      	add	sp, #12
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8004cbe:	4545      	cmp	r5, r8
 8004cc0:	d008      	beq.n	8004cd4 <HAL_GPIO_Init+0x1b0>
 8004cc2:	f67f af5e 	bls.w	8004b82 <HAL_GPIO_Init+0x5e>
 8004cc6:	42bd      	cmp	r5, r7
 8004cc8:	d004      	beq.n	8004cd4 <HAL_GPIO_Init+0x1b0>
 8004cca:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8004d58 <HAL_GPIO_Init+0x234>
 8004cce:	4575      	cmp	r5, lr
 8004cd0:	f47f af66 	bne.w	8004ba0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004cd4:	688d      	ldr	r5, [r1, #8]
 8004cd6:	bb3d      	cbnz	r5, 8004d28 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004cd8:	f04f 0a04 	mov.w	sl, #4
 8004cdc:	e760      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004cde:	ea24 040c 	bic.w	r4, r4, ip
 8004ce2:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce4:	680d      	ldr	r5, [r1, #0]
 8004ce6:	e72c      	b.n	8004b42 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ce8:	68cc      	ldr	r4, [r1, #12]
 8004cea:	f104 0a04 	add.w	sl, r4, #4
          break;
 8004cee:	e757      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004cf0:	68cc      	ldr	r4, [r1, #12]
 8004cf2:	f104 0a08 	add.w	sl, r4, #8
          break;
 8004cf6:	e753      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004cf8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8004cfc:	e750      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004cfe:	68cc      	ldr	r4, [r1, #12]
 8004d00:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8004d04:	e74c      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 8004d06:	f04f 0a00 	mov.w	sl, #0
 8004d0a:	e749      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d0c:	f04f 0b02 	mov.w	fp, #2
 8004d10:	fa0b f909 	lsl.w	r9, fp, r9
 8004d14:	ea45 0509 	orr.w	r5, r5, r9
 8004d18:	e795      	b.n	8004c46 <HAL_GPIO_Init+0x122>
 8004d1a:	f04f 0b01 	mov.w	fp, #1
 8004d1e:	fa0b f909 	lsl.w	r9, fp, r9
 8004d22:	ea45 0509 	orr.w	r5, r5, r9
 8004d26:	e78e      	b.n	8004c46 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d28:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d2a:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8004d2e:	bf0c      	ite	eq
 8004d30:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8004d32:	6144      	strne	r4, [r0, #20]
 8004d34:	e734      	b.n	8004ba0 <HAL_GPIO_Init+0x7c>
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	10220000 	.word	0x10220000
 8004d40:	10310000 	.word	0x10310000
 8004d44:	10120000 	.word	0x10120000
 8004d48:	40010800 	.word	0x40010800
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40011400 	.word	0x40011400
 8004d54:	40010400 	.word	0x40010400
 8004d58:	10320000 	.word	0x10320000

08004d5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d5c:	b902      	cbnz	r2, 8004d60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d5e:	0409      	lsls	r1, r1, #16
 8004d60:	6101      	str	r1, [r0, #16]
  }
}
 8004d62:	4770      	bx	lr

08004d64 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004d66:	f7ff fde3 	bl	8004930 <HAL_GetTick>

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d6a:	4c32      	ldr	r4, [pc, #200]	@ (8004e34 <HAL_RCC_DeInit+0xd0>)
  tickstart = HAL_GetTick();
 8004d6c:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004d76:	e004      	b.n	8004d82 <HAL_RCC_DeInit+0x1e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d78:	f7ff fdda 	bl	8004930 <HAL_GetTick>
 8004d7c:	1b40      	subs	r0, r0, r5
 8004d7e:	2802      	cmp	r0, #2
 8004d80:	d826      	bhi.n	8004dd0 <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	079b      	lsls	r3, r3, #30
 8004d86:	d5f7      	bpl.n	8004d78 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8004d88:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d8a:	f241 3788 	movw	r7, #5000	@ 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8004d8e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d96:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004d98:	f7ff fdca 	bl	8004930 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8004d9c:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8004d9e:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004da0:	4e24      	ldr	r6, [pc, #144]	@ (8004e34 <HAL_RCC_DeInit+0xd0>)
  CLEAR_REG(RCC->CFGR);
 8004da2:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004da4:	e004      	b.n	8004db0 <HAL_RCC_DeInit+0x4c>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7ff fdc3 	bl	8004930 <HAL_GetTick>
 8004daa:	1b40      	subs	r0, r0, r5
 8004dac:	42b8      	cmp	r0, r7
 8004dae:	d80f      	bhi.n	8004dd0 <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004db0:	6873      	ldr	r3, [r6, #4]
 8004db2:	f013 0f0c 	tst.w	r3, #12
 8004db6:	d1f6      	bne.n	8004da6 <HAL_RCC_DeInit+0x42>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004db8:	491f      	ldr	r1, [pc, #124]	@ (8004e38 <HAL_RCC_DeInit+0xd4>)
  SystemCoreClock = HSI_VALUE;
 8004dba:	4b20      	ldr	r3, [pc, #128]	@ (8004e3c <HAL_RCC_DeInit+0xd8>)
 8004dbc:	4a20      	ldr	r2, [pc, #128]	@ (8004e40 <HAL_RCC_DeInit+0xdc>)
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dbe:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HSI_VALUE;
 8004dc0:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc2:	f7ff fd73 	bl	80048ac <HAL_InitTick>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	b128      	cbz	r0, 8004dd6 <HAL_RCC_DeInit+0x72>
  {
    return HAL_ERROR;
 8004dca:	2401      	movs	r4, #1

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);

  return HAL_OK;
}
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8004dd0:	2403      	movs	r4, #3
}
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004dd6:	f7ff fdab 	bl	8004930 <HAL_GetTick>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004dda:	6833      	ldr	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004ddc:	4d15      	ldr	r5, [pc, #84]	@ (8004e34 <HAL_RCC_DeInit+0xd0>)
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004de2:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8004de4:	4606      	mov	r6, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004de6:	e004      	b.n	8004df2 <HAL_RCC_DeInit+0x8e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7ff fda2 	bl	8004930 <HAL_GetTick>
 8004dec:	1b83      	subs	r3, r0, r6
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d8ee      	bhi.n	8004dd0 <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8004df8:	d1f6      	bne.n	8004de8 <HAL_RCC_DeInit+0x84>
  CLEAR_REG(RCC->CFGR);
 8004dfa:	606b      	str	r3, [r5, #4]
  tickstart = HAL_GetTick();
 8004dfc:	f7ff fd98 	bl	8004930 <HAL_GetTick>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8004e00:	682b      	ldr	r3, [r5, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004e02:	4e0c      	ldr	r6, [pc, #48]	@ (8004e34 <HAL_RCC_DeInit+0xd0>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8004e04:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004e08:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8004e0a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004e0c:	e004      	b.n	8004e18 <HAL_RCC_DeInit+0xb4>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0e:	f7ff fd8f 	bl	8004930 <HAL_GetTick>
 8004e12:	1b40      	subs	r0, r0, r5
 8004e14:	2864      	cmp	r0, #100	@ 0x64
 8004e16:	d8db      	bhi.n	8004dd0 <HAL_RCC_DeInit+0x6c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8004e1e:	d1f6      	bne.n	8004e0e <HAL_RCC_DeInit+0xaa>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e26:	6032      	str	r2, [r6, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004e28:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004e2a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004e2e:	6272      	str	r2, [r6, #36]	@ 0x24
  CLEAR_REG(RCC->CIR);
 8004e30:	60b3      	str	r3, [r6, #8]
  return HAL_OK;
 8004e32:	e7ce      	b.n	8004dd2 <HAL_RCC_DeInit+0x6e>
 8004e34:	40021000 	.word	0x40021000
 8004e38:	20000014 	.word	0x20000014
 8004e3c:	2000000c 	.word	0x2000000c
 8004e40:	007a1200 	.word	0x007a1200

08004e44 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f000 81e4 	beq.w	8005212 <HAL_RCC_OscConfig+0x3ce>
{
 8004e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	6803      	ldr	r3, [r0, #0]
 8004e50:	4604      	mov	r4, r0
 8004e52:	07dd      	lsls	r5, r3, #31
{
 8004e54:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e56:	d535      	bpl.n	8004ec4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e58:	4999      	ldr	r1, [pc, #612]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	684a      	ldr	r2, [r1, #4]
 8004e5c:	f002 020c 	and.w	r2, r2, #12
 8004e60:	2a04      	cmp	r2, #4
 8004e62:	f000 80ed 	beq.w	8005040 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e66:	684a      	ldr	r2, [r1, #4]
 8004e68:	f002 020c 	and.w	r2, r2, #12
 8004e6c:	2a08      	cmp	r2, #8
 8004e6e:	f000 80e3 	beq.w	8005038 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e72:	6863      	ldr	r3, [r4, #4]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e78:	d010      	beq.n	8004e9c <HAL_RCC_OscConfig+0x58>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 810a 	beq.w	8005094 <HAL_RCC_OscConfig+0x250>
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e84:	f000 8180 	beq.w	8005188 <HAL_RCC_OscConfig+0x344>
 8004e88:	4b8d      	ldr	r3, [pc, #564]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e98:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9c:	4a88      	ldr	r2, [pc, #544]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7ff fd43 	bl	8004930 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4e85      	ldr	r6, [pc, #532]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8004eac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	e005      	b.n	8004ebc <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7ff fd3e 	bl	8004930 <HAL_GetTick>
 8004eb4:	1b40      	subs	r0, r0, r5
 8004eb6:	2864      	cmp	r0, #100	@ 0x64
 8004eb8:	f200 80e8 	bhi.w	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	039a      	lsls	r2, r3, #14
 8004ec0:	d5f6      	bpl.n	8004eb0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	079f      	lsls	r7, r3, #30
 8004ec6:	d528      	bpl.n	8004f1a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	6851      	ldr	r1, [r2, #4]
 8004ecc:	f011 0f0c 	tst.w	r1, #12
 8004ed0:	f000 8096 	beq.w	8005000 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ed4:	6851      	ldr	r1, [r2, #4]
 8004ed6:	f001 010c 	and.w	r1, r1, #12
 8004eda:	2908      	cmp	r1, #8
 8004edc:	f000 808c 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8116 	beq.w	8005114 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4b76      	ldr	r3, [pc, #472]	@ (80050c4 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4e74      	ldr	r6, [pc, #464]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8004eee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ef0:	f7ff fd1e 	bl	8004930 <HAL_GetTick>
 8004ef4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef6:	e005      	b.n	8004f04 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef8:	f7ff fd1a 	bl	8004930 <HAL_GetTick>
 8004efc:	1b40      	subs	r0, r0, r5
 8004efe:	2802      	cmp	r0, #2
 8004f00:	f200 80c4 	bhi.w	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0798      	lsls	r0, r3, #30
 8004f08:	d5f6      	bpl.n	8004ef8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0a:	6833      	ldr	r3, [r6, #0]
 8004f0c:	6962      	ldr	r2, [r4, #20]
 8004f0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004f12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f16:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	071a      	lsls	r2, r3, #28
 8004f1c:	d429      	bmi.n	8004f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1e:	075d      	lsls	r5, r3, #29
 8004f20:	d54b      	bpl.n	8004fba <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f22:	4b67      	ldr	r3, [pc, #412]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	00d0      	lsls	r0, r2, #3
 8004f28:	f100 8084 	bmi.w	8005034 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004f2c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004f34:	61da      	str	r2, [r3, #28]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4e61      	ldr	r6, [pc, #388]	@ (80050c8 <HAL_RCC_OscConfig+0x284>)
 8004f42:	6833      	ldr	r3, [r6, #0]
 8004f44:	05d9      	lsls	r1, r3, #23
 8004f46:	f140 8091 	bpl.w	800506c <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f000 80f2 	beq.w	8005136 <HAL_RCC_OscConfig+0x2f2>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80be 	beq.w	80050d4 <HAL_RCC_OscConfig+0x290>
 8004f58:	2b05      	cmp	r3, #5
 8004f5a:	4b59      	ldr	r3, [pc, #356]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	f000 8120 	beq.w	80051a2 <HAL_RCC_OscConfig+0x35e>
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	621a      	str	r2, [r3, #32]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f70:	e0e6      	b.n	8005140 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f72:	69a3      	ldr	r3, [r4, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d04c      	beq.n	8005012 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4b52      	ldr	r3, [pc, #328]	@ (80050c4 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7c:	4e50      	ldr	r6, [pc, #320]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004f82:	f7ff fcd5 	bl	8004930 <HAL_GetTick>
 8004f86:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f88:	e004      	b.n	8004f94 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7ff fcd1 	bl	8004930 <HAL_GetTick>
 8004f8e:	1b40      	subs	r0, r0, r5
 8004f90:	2802      	cmp	r0, #2
 8004f92:	d87b      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f94:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	d5f7      	bpl.n	8004f8a <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80050cc <HAL_RCC_OscConfig+0x288>)
 8004f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80050d0 <HAL_RCC_OscConfig+0x28c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	0a5b      	lsrs	r3, r3, #9
 8004fa6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004fa8:	bf00      	nop
  }
  while (Delay --);
 8004faa:	9b01      	ldr	r3, [sp, #4]
 8004fac:	1e5a      	subs	r2, r3, #1
 8004fae:	9201      	str	r2, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	075d      	lsls	r5, r3, #29
 8004fb8:	d4b3      	bmi.n	8004f22 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fba:	69e3      	ldr	r3, [r4, #28]
 8004fbc:	b1c3      	cbz	r3, 8004ff0 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fbe:	4d40      	ldr	r5, [pc, #256]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	686a      	ldr	r2, [r5, #4]
 8004fc2:	f002 020c 	and.w	r2, r2, #12
 8004fc6:	2a08      	cmp	r2, #8
 8004fc8:	f000 80cd 	beq.w	8005166 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8004fcc:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fce:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80050c4 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd4:	f000 80ed 	beq.w	80051b2 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8004fd8:	f7ff fcaa 	bl	8004930 <HAL_GetTick>
 8004fdc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	e004      	b.n	8004fea <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7ff fca6 	bl	8004930 <HAL_GetTick>
 8004fe4:	1b00      	subs	r0, r0, r4
 8004fe6:	2802      	cmp	r0, #2
 8004fe8:	d850      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	d4f7      	bmi.n	8004fe0 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8004ff0:	2000      	movs	r0, #0
}
 8004ff2:	b002      	add	sp, #8
 8004ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	03d6      	lsls	r6, r2, #15
 8004ffc:	f53f af70 	bmi.w	8004ee0 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005000:	4a2f      	ldr	r2, [pc, #188]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	0795      	lsls	r5, r2, #30
 8005006:	d525      	bpl.n	8005054 <HAL_RCC_OscConfig+0x210>
 8005008:	6922      	ldr	r2, [r4, #16]
 800500a:	2a01      	cmp	r2, #1
 800500c:	d022      	beq.n	8005054 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
 8005010:	e7ef      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 8005012:	4a2c      	ldr	r2, [pc, #176]	@ (80050c4 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	4e2a      	ldr	r6, [pc, #168]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 8005016:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800501a:	f7ff fc89 	bl	8004930 <HAL_GetTick>
 800501e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	e004      	b.n	800502c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005022:	f7ff fc85 	bl	8004930 <HAL_GetTick>
 8005026:	1b40      	subs	r0, r0, r5
 8005028:	2802      	cmp	r0, #2
 800502a:	d82f      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800502e:	079f      	lsls	r7, r3, #30
 8005030:	d4f7      	bmi.n	8005022 <HAL_RCC_OscConfig+0x1de>
 8005032:	e7bf      	b.n	8004fb4 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 8005034:	2500      	movs	r5, #0
 8005036:	e783      	b.n	8004f40 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005038:	684a      	ldr	r2, [r1, #4]
 800503a:	03d0      	lsls	r0, r2, #15
 800503c:	f57f af19 	bpl.w	8004e72 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	4a1f      	ldr	r2, [pc, #124]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	0391      	lsls	r1, r2, #14
 8005046:	f57f af3d 	bpl.w	8004ec4 <HAL_RCC_OscConfig+0x80>
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	2a00      	cmp	r2, #0
 800504e:	f47f af39 	bne.w	8004ec4 <HAL_RCC_OscConfig+0x80>
 8005052:	e7dc      	b.n	800500e <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005054:	491a      	ldr	r1, [pc, #104]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005056:	6960      	ldr	r0, [r4, #20]
 8005058:	680a      	ldr	r2, [r1, #0]
 800505a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800505e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005062:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005064:	071a      	lsls	r2, r3, #28
 8005066:	f57f af5a 	bpl.w	8004f1e <HAL_RCC_OscConfig+0xda>
 800506a:	e782      	b.n	8004f72 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005072:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005074:	f7ff fc5c 	bl	8004930 <HAL_GetTick>
 8005078:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507a:	6833      	ldr	r3, [r6, #0]
 800507c:	05da      	lsls	r2, r3, #23
 800507e:	f53f af64 	bmi.w	8004f4a <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005082:	f7ff fc55 	bl	8004930 <HAL_GetTick>
 8005086:	1bc0      	subs	r0, r0, r7
 8005088:	2864      	cmp	r0, #100	@ 0x64
 800508a:	d9f6      	bls.n	800507a <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 800508c:	2003      	movs	r0, #3
}
 800508e:	b002      	add	sp, #8
 8005090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005094:	4d0a      	ldr	r5, [pc, #40]	@ (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80050a6:	f7ff fc43 	bl	8004930 <HAL_GetTick>
 80050aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ac:	e004      	b.n	80050b8 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ae:	f7ff fc3f 	bl	8004930 <HAL_GetTick>
 80050b2:	1b80      	subs	r0, r0, r6
 80050b4:	2864      	cmp	r0, #100	@ 0x64
 80050b6:	d8e9      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	039b      	lsls	r3, r3, #14
 80050bc:	d4f7      	bmi.n	80050ae <HAL_RCC_OscConfig+0x26a>
 80050be:	e700      	b.n	8004ec2 <HAL_RCC_OscConfig+0x7e>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	42420000 	.word	0x42420000
 80050c8:	40007000 	.word	0x40007000
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d4:	4e50      	ldr	r6, [pc, #320]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050da:	6a33      	ldr	r3, [r6, #32]
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6233      	str	r3, [r6, #32]
 80050e2:	6a33      	ldr	r3, [r6, #32]
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80050ea:	f7ff fc21 	bl	8004930 <HAL_GetTick>
 80050ee:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f0:	e004      	b.n	80050fc <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7ff fc1d 	bl	8004930 <HAL_GetTick>
 80050f6:	1bc0      	subs	r0, r0, r7
 80050f8:	4540      	cmp	r0, r8
 80050fa:	d8c7      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fc:	6a33      	ldr	r3, [r6, #32]
 80050fe:	0798      	lsls	r0, r3, #30
 8005100:	d4f7      	bmi.n	80050f2 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 8005102:	2d00      	cmp	r5, #0
 8005104:	f43f af59 	beq.w	8004fba <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4a43      	ldr	r2, [pc, #268]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
 800510a:	69d3      	ldr	r3, [r2, #28]
 800510c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005110:	61d3      	str	r3, [r2, #28]
 8005112:	e752      	b.n	8004fba <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 8005114:	4a41      	ldr	r2, [pc, #260]	@ (800521c <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005116:	4e40      	ldr	r6, [pc, #256]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 8005118:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800511a:	f7ff fc09 	bl	8004930 <HAL_GetTick>
 800511e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005120:	e004      	b.n	800512c <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005122:	f7ff fc05 	bl	8004930 <HAL_GetTick>
 8005126:	1b40      	subs	r0, r0, r5
 8005128:	2802      	cmp	r0, #2
 800512a:	d8af      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	0799      	lsls	r1, r3, #30
 8005130:	d4f7      	bmi.n	8005122 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	e6f1      	b.n	8004f1a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005136:	4a38      	ldr	r2, [pc, #224]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
 8005138:	6a13      	ldr	r3, [r2, #32]
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8005140:	f7ff fbf6 	bl	8004930 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005148:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514a:	4f33      	ldr	r7, [pc, #204]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
 800514c:	e004      	b.n	8005158 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7ff fbef 	bl	8004930 <HAL_GetTick>
 8005152:	1b80      	subs	r0, r0, r6
 8005154:	4540      	cmp	r0, r8
 8005156:	d899      	bhi.n	800508c <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	079b      	lsls	r3, r3, #30
 800515c:	d5f7      	bpl.n	800514e <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 800515e:	2d00      	cmp	r5, #0
 8005160:	f43f af2b 	beq.w	8004fba <HAL_RCC_OscConfig+0x176>
 8005164:	e7d0      	b.n	8005108 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005166:	2b01      	cmp	r3, #1
 8005168:	f43f af51 	beq.w	800500e <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 800516c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	6a22      	ldr	r2, [r4, #32]
 8005170:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8005174:	4291      	cmp	r1, r2
 8005176:	f47f af4a 	bne.w	800500e <HAL_RCC_OscConfig+0x1ca>
 800517a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800517c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	1a18      	subs	r0, r3, r0
 8005182:	bf18      	it	ne
 8005184:	2001      	movne	r0, #1
 8005186:	e734      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800518c:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800519e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a0:	e681      	b.n	8004ea6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a2:	f042 0204 	orr.w	r2, r2, #4
 80051a6:	621a      	str	r2, [r3, #32]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b0:	e7c6      	b.n	8005140 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 80051b2:	f7ff fbbd 	bl	8004930 <HAL_GetTick>
 80051b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b8:	e005      	b.n	80051c6 <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7ff fbb9 	bl	8004930 <HAL_GetTick>
 80051be:	1b80      	subs	r0, r0, r6
 80051c0:	2802      	cmp	r0, #2
 80051c2:	f63f af63 	bhi.w	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c6:	682b      	ldr	r3, [r5, #0]
 80051c8:	0199      	lsls	r1, r3, #6
 80051ca:	d4f6      	bmi.n	80051ba <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051cc:	6a23      	ldr	r3, [r4, #32]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051d4:	686a      	ldr	r2, [r5, #4]
 80051d6:	68a1      	ldr	r1, [r4, #8]
 80051d8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80051dc:	430a      	orrs	r2, r1
 80051de:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80051e0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005218 <HAL_RCC_OscConfig+0x3d4>)
 80051e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051e6:	686a      	ldr	r2, [r5, #4]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80051ee:	490b      	ldr	r1, [pc, #44]	@ (800521c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051f0:	4313      	orrs	r3, r2
 80051f2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80051f4:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80051f6:	f7ff fb9b 	bl	8004930 <HAL_GetTick>
 80051fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051fc:	e005      	b.n	800520a <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fe:	f7ff fb97 	bl	8004930 <HAL_GetTick>
 8005202:	1b00      	subs	r0, r0, r4
 8005204:	2802      	cmp	r0, #2
 8005206:	f63f af41 	bhi.w	800508c <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	019a      	lsls	r2, r3, #6
 800520e:	d5f6      	bpl.n	80051fe <HAL_RCC_OscConfig+0x3ba>
 8005210:	e6ee      	b.n	8004ff0 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8005212:	2001      	movs	r0, #1
}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	42420000 	.word	0x42420000

08005220 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005220:	2800      	cmp	r0, #0
 8005222:	f000 80ab 	beq.w	800537c <HAL_RCC_ClockConfig+0x15c>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005226:	4a5b      	ldr	r2, [pc, #364]	@ (8005394 <HAL_RCC_ClockConfig+0x174>)
{
 8005228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	4604      	mov	r4, r0
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	428b      	cmp	r3, r1
 8005236:	460d      	mov	r5, r1
 8005238:	d20c      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	f023 0307 	bic.w	r3, r3, #7
 8005240:	430b      	orrs	r3, r1
 8005242:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005244:	6813      	ldr	r3, [r2, #0]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	428b      	cmp	r3, r1
 800524c:	d002      	beq.n	8005254 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800524e:	2001      	movs	r0, #1
}
 8005250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	079e      	lsls	r6, r3, #30
 8005258:	d514      	bpl.n	8005284 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525a:	0758      	lsls	r0, r3, #29
 800525c:	d504      	bpl.n	8005268 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800525e:	494e      	ldr	r1, [pc, #312]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 8005260:	684a      	ldr	r2, [r1, #4]
 8005262:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005266:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005268:	0719      	lsls	r1, r3, #28
 800526a:	d504      	bpl.n	8005276 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800526c:	494a      	ldr	r1, [pc, #296]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 800526e:	684a      	ldr	r2, [r1, #4]
 8005270:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8005274:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005276:	4948      	ldr	r1, [pc, #288]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 8005278:	68a0      	ldr	r0, [r4, #8]
 800527a:	684a      	ldr	r2, [r1, #4]
 800527c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005280:	4302      	orrs	r2, r0
 8005282:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005284:	07da      	lsls	r2, r3, #31
 8005286:	d520      	bpl.n	80052ca <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005288:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528a:	4b43      	ldr	r3, [pc, #268]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005290:	d076      	beq.n	8005380 <HAL_RCC_ClockConfig+0x160>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005292:	2a02      	cmp	r2, #2
 8005294:	d06f      	beq.n	8005376 <HAL_RCC_ClockConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005296:	079e      	lsls	r6, r3, #30
 8005298:	d5d9      	bpl.n	800524e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4e3f      	ldr	r6, [pc, #252]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052a0:	6873      	ldr	r3, [r6, #4]
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80052aa:	f7ff fb41 	bl	8004930 <HAL_GetTick>
 80052ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b0:	e004      	b.n	80052bc <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b2:	f7ff fb3d 	bl	8004930 <HAL_GetTick>
 80052b6:	1bc0      	subs	r0, r0, r7
 80052b8:	4540      	cmp	r0, r8
 80052ba:	d864      	bhi.n	8005386 <HAL_RCC_ClockConfig+0x166>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052bc:	6873      	ldr	r3, [r6, #4]
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052c8:	d1f3      	bne.n	80052b2 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ca:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <HAL_RCC_ClockConfig+0x174>)
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	42ab      	cmp	r3, r5
 80052d4:	d909      	bls.n	80052ea <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	f023 0307 	bic.w	r3, r3, #7
 80052dc:	432b      	orrs	r3, r5
 80052de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	42ab      	cmp	r3, r5
 80052e8:	d1b1      	bne.n	800524e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	0758      	lsls	r0, r3, #29
 80052ee:	d506      	bpl.n	80052fe <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4929      	ldr	r1, [pc, #164]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 80052f2:	68e0      	ldr	r0, [r4, #12]
 80052f4:	684a      	ldr	r2, [r1, #4]
 80052f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052fa:	4302      	orrs	r2, r0
 80052fc:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	0719      	lsls	r1, r3, #28
 8005300:	d418      	bmi.n	8005334 <HAL_RCC_ClockConfig+0x114>
  tmpreg = RCC->CFGR;
 8005302:	4925      	ldr	r1, [pc, #148]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 8005304:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005306:	f002 030c 	and.w	r3, r2, #12
 800530a:	2b04      	cmp	r3, #4
 800530c:	d020      	beq.n	8005350 <HAL_RCC_ClockConfig+0x130>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d020      	beq.n	8005354 <HAL_RCC_ClockConfig+0x134>
 8005312:	4b22      	ldr	r3, [pc, #136]	@ (800539c <HAL_RCC_ClockConfig+0x17c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005314:	4a20      	ldr	r2, [pc, #128]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 8005316:	4822      	ldr	r0, [pc, #136]	@ (80053a0 <HAL_RCC_ClockConfig+0x180>)
 8005318:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800531a:	4922      	ldr	r1, [pc, #136]	@ (80053a4 <HAL_RCC_ClockConfig+0x184>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005320:	5c80      	ldrb	r0, [r0, r2]
 8005322:	4a21      	ldr	r2, [pc, #132]	@ (80053a8 <HAL_RCC_ClockConfig+0x188>)
 8005324:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8005326:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005328:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800532a:	f7ff fabf 	bl	80048ac <HAL_InitTick>
  return HAL_OK;
 800532e:	2000      	movs	r0, #0
}
 8005330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
 8005336:	6921      	ldr	r1, [r4, #16]
 8005338:	6853      	ldr	r3, [r2, #4]
 800533a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800533e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  tmpreg = RCC->CFGR;
 8005342:	4915      	ldr	r1, [pc, #84]	@ (8005398 <HAL_RCC_ClockConfig+0x178>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005344:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8005346:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005348:	f002 030c 	and.w	r3, r2, #12
 800534c:	2b04      	cmp	r3, #4
 800534e:	d1de      	bne.n	800530e <HAL_RCC_ClockConfig+0xee>
      sysclockfreq = HSE_VALUE;
 8005350:	4b16      	ldr	r3, [pc, #88]	@ (80053ac <HAL_RCC_ClockConfig+0x18c>)
 8005352:	e7df      	b.n	8005314 <HAL_RCC_ClockConfig+0xf4>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005354:	4816      	ldr	r0, [pc, #88]	@ (80053b0 <HAL_RCC_ClockConfig+0x190>)
 8005356:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800535a:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800535c:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800535e:	d514      	bpl.n	800538a <HAL_RCC_ClockConfig+0x16a>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005360:	4812      	ldr	r0, [pc, #72]	@ (80053ac <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005362:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005364:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005368:	4912      	ldr	r1, [pc, #72]	@ (80053b4 <HAL_RCC_ClockConfig+0x194>)
 800536a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800536e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005370:	fbb3 f3f2 	udiv	r3, r3, r2
 8005374:	e7ce      	b.n	8005314 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005376:	019f      	lsls	r7, r3, #6
 8005378:	d48f      	bmi.n	800529a <HAL_RCC_ClockConfig+0x7a>
 800537a:	e768      	b.n	800524e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800537c:	2001      	movs	r0, #1
}
 800537e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005380:	039b      	lsls	r3, r3, #14
 8005382:	d48a      	bmi.n	800529a <HAL_RCC_ClockConfig+0x7a>
 8005384:	e763      	b.n	800524e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005386:	2003      	movs	r0, #3
 8005388:	e762      	b.n	8005250 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800538a:	4a0b      	ldr	r2, [pc, #44]	@ (80053b8 <HAL_RCC_ClockConfig+0x198>)
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	e7c0      	b.n	8005314 <HAL_RCC_ClockConfig+0xf4>
 8005392:	bf00      	nop
 8005394:	40022000 	.word	0x40022000
 8005398:	40021000 	.word	0x40021000
 800539c:	007a1200 	.word	0x007a1200
 80053a0:	080094d4 	.word	0x080094d4
 80053a4:	20000014 	.word	0x20000014
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	0800955c 	.word	0x0800955c
 80053b4:	08009558 	.word	0x08009558
 80053b8:	003d0900 	.word	0x003d0900

080053bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053bc:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80053be:	4a05      	ldr	r2, [pc, #20]	@ (80053d4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4905      	ldr	r1, [pc, #20]	@ (80053d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	6810      	ldr	r0, [r2, #0]
}
 80053cc:	40d8      	lsrs	r0, r3
 80053ce:	4770      	bx	lr
 80053d0:	40021000 	.word	0x40021000
 80053d4:	2000000c 	.word	0x2000000c
 80053d8:	080094cc 	.word	0x080094cc

080053dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80053de:	4a05      	ldr	r2, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4905      	ldr	r1, [pc, #20]	@ (80053f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80053e4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053e8:	5ccb      	ldrb	r3, [r1, r3]
 80053ea:	6810      	ldr	r0, [r2, #0]
}
 80053ec:	40d8      	lsrs	r0, r3
 80053ee:	4770      	bx	lr
 80053f0:	40021000 	.word	0x40021000
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	080094cc 	.word	0x080094cc

080053fc <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	4617      	mov	r7, r2
 8005402:	461d      	mov	r5, r3
 8005404:	b082      	sub	sp, #8
 8005406:	460c      	mov	r4, r1
 8005408:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800540a:	f7ff fa91 	bl	8004930 <HAL_GetTick>
 800540e:	443d      	add	r5, r7
 8005410:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005412:	f7ff fa8d 	bl	8004930 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005416:	4b28      	ldr	r3, [pc, #160]	@ (80054b8 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xbc>)
 8005418:	3701      	adds	r7, #1
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	bf18      	it	ne
 800541e:	4680      	movne	r8, r0
 8005420:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005424:	fb05 f303 	mul.w	r3, r5, r3

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005428:	6831      	ldr	r1, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	d115      	bne.n	800545a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x5e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542e:	688b      	ldr	r3, [r1, #8]
 8005430:	ea34 0303 	bics.w	r3, r4, r3
 8005434:	d0fb      	beq.n	800542e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8005436:	2000      	movs	r0, #0
}
 8005438:	b002      	add	sp, #8
 800543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800543e:	f7ff fa77 	bl	8004930 <HAL_GetTick>
 8005442:	eba0 0008 	sub.w	r0, r0, r8
 8005446:	42a8      	cmp	r0, r5
 8005448:	d20c      	bcs.n	8005464 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x68>
      if (count == 0U)
 800544a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800544c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800544e:	2a00      	cmp	r2, #0
 8005450:	bf08      	it	eq
 8005452:	2500      	moveq	r5, #0
      count--;
 8005454:	3b01      	subs	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005456:	6831      	ldr	r1, [r6, #0]
      count--;
 8005458:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800545a:	688b      	ldr	r3, [r1, #8]
 800545c:	ea34 0303 	bics.w	r3, r4, r3
 8005460:	d0ed      	beq.n	800543e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x42>
 8005462:	e7e8      	b.n	8005436 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005464:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005468:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800546e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005472:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005474:	d013      	beq.n	800549e <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005476:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8005478:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800547c:	d107      	bne.n	800548e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x92>
          SPI_RESET_CRC(hspi);
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800548c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800548e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005490:	2300      	movs	r3, #0
 8005492:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8005494:	f886 2051 	strb.w	r2, [r6, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005498:	f886 3050 	strb.w	r3, [r6, #80]	@ 0x50
        return HAL_TIMEOUT;
 800549c:	e7cc      	b.n	8005438 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549e:	68b2      	ldr	r2, [r6, #8]
 80054a0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80054a4:	d002      	beq.n	80054ac <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80054aa:	d1e4      	bne.n	8005476 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e7df      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7a>
 80054b6:	bf00      	nop
 80054b8:	2000000c 	.word	0x2000000c

080054bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80054bc:	2800      	cmp	r0, #0
 80054be:	d058      	beq.n	8005572 <HAL_SPI_Init+0xb6>
{
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80054c4:	4604      	mov	r4, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d044      	beq.n	8005554 <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d0:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d6:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d03f      	beq.n	8005560 <HAL_SPI_Init+0xa4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80054e4:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 80054e6:	f04f 0c01 	mov.w	ip, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ea:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054ec:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80054f0:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80054f4:	4313      	orrs	r3, r2
 80054f6:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80054f8:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054fc:	6926      	ldr	r6, [r4, #16]
 80054fe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005502:	4313      	orrs	r3, r2
 8005504:	f006 0602 	and.w	r6, r6, #2
 8005508:	4333      	orrs	r3, r6
 800550a:	6966      	ldr	r6, [r4, #20]
 800550c:	69a1      	ldr	r1, [r4, #24]
 800550e:	6a27      	ldr	r7, [r4, #32]
 8005510:	ea06 060c 	and.w	r6, r6, ip
 8005514:	4333      	orrs	r3, r6
 8005516:	69e6      	ldr	r6, [r4, #28]
 8005518:	f007 0e80 	and.w	lr, r7, #128	@ 0x80
 800551c:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 8005520:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8005524:	433b      	orrs	r3, r7
  __HAL_SPI_DISABLE(hspi);
 8005526:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005528:	4333      	orrs	r3, r6
 800552a:	ea43 030e 	orr.w	r3, r3, lr
 800552e:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8005530:	6810      	ldr	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005532:	0c09      	lsrs	r1, r1, #16
 8005534:	f001 0104 	and.w	r1, r1, #4
  __HAL_SPI_DISABLE(hspi);
 8005538:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800553c:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800553e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005540:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005542:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 8005544:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005546:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554c:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800554e:	f884 c051 	strb.w	ip, [r4, #81]	@ 0x51
}
 8005552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005554:	6842      	ldr	r2, [r0, #4]
 8005556:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800555a:	d0b9      	beq.n	80054d0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800555c:	61c3      	str	r3, [r0, #28]
 800555e:	e7b7      	b.n	80054d0 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8005560:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005562:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8005566:	f7fc fa07 	bl	8001978 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800556c:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8005570:	e7b6      	b.n	80054e0 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8005572:	2001      	movs	r0, #1
}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <HAL_SPI_Transmit>:
{
 8005578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800557c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800557e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8005582:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005584:	2b01      	cmp	r3, #1
 8005586:	d076      	beq.n	8005676 <HAL_SPI_Transmit+0xfe>
 8005588:	2301      	movs	r3, #1
 800558a:	4604      	mov	r4, r0
 800558c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 8005590:	4689      	mov	r9, r1
 8005592:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8005594:	f7ff f9cc 	bl	8004930 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005598:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 800559c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800559e:	2b01      	cmp	r3, #1
 80055a0:	b2df      	uxtb	r7, r3
 80055a2:	d007      	beq.n	80055b4 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 80055a4:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 80055aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	d0f5      	beq.n	80055a6 <HAL_SPI_Transmit+0x2e>
 80055ba:	f1b8 0f00 	cmp.w	r8, #0
 80055be:	d0f2      	beq.n	80055a6 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c0:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c2:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055c4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c6:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
  hspi->RxXferSize  = 0U;
 80055ca:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055cc:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80055ce:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80055d0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055d4:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80055d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80055da:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 80055e0:	4684      	mov	ip, r0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055e2:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055e6:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ea:	d075      	beq.n	80056d8 <HAL_SPI_Transmit+0x160>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	065b      	lsls	r3, r3, #25
 80055f0:	d403      	bmi.n	80055fa <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 80055f2:	6803      	ldr	r3, [r0, #0]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055f8:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055fa:	68e3      	ldr	r3, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fc:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005602:	d03d      	beq.n	8005680 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005604:	2a00      	cmp	r2, #0
 8005606:	f000 808c 	beq.w	8005722 <HAL_SPI_Transmit+0x1aa>
 800560a:	f1b8 0f01 	cmp.w	r8, #1
 800560e:	f000 8088 	beq.w	8005722 <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 8005612:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005614:	b29b      	uxth	r3, r3
 8005616:	b1a3      	cbz	r3, 8005642 <HAL_SPI_Transmit+0xca>
 8005618:	1c68      	adds	r0, r5, #1
 800561a:	d174      	bne.n	8005706 <HAL_SPI_Transmit+0x18e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	0791      	lsls	r1, r2, #30
 8005622:	f140 8089 	bpl.w	8005738 <HAL_SPI_Transmit+0x1c0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005626:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800562c:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800562e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005630:	3901      	subs	r1, #1
 8005632:	b289      	uxth	r1, r1
 8005634:	86e1      	strh	r1, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005636:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005638:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 800563a:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800563c:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 800563e:	2900      	cmp	r1, #0
 8005640:	d1ec      	bne.n	800561c <HAL_SPI_Transmit+0xa4>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005642:	4633      	mov	r3, r6
 8005644:	462a      	mov	r2, r5
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	4620      	mov	r0, r4
 800564a:	f7ff fed7 	bl	80053fc <SPI_WaitFlagStateUntilTimeout.constprop.1>
 800564e:	2800      	cmp	r0, #0
 8005650:	f040 8099 	bne.w	8005786 <HAL_SPI_Transmit+0x20e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	b933      	cbnz	r3, 8005666 <HAL_SPI_Transmit+0xee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	68d3      	ldr	r3, [r2, #12]
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	6893      	ldr	r3, [r2, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005666:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005668:	2b00      	cmp	r3, #0
 800566a:	d19c      	bne.n	80055a6 <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 800566c:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 800566e:	461f      	mov	r7, r3
    hspi->State = HAL_SPI_STATE_READY;
 8005670:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 8005674:	e797      	b.n	80055a6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8005676:	2702      	movs	r7, #2
}
 8005678:	4638      	mov	r0, r7
 800567a:	b003      	add	sp, #12
 800567c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005680:	2a00      	cmp	r2, #0
 8005682:	d17c      	bne.n	800577e <HAL_SPI_Transmit+0x206>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005684:	4649      	mov	r1, r9
 8005686:	f831 3b02 	ldrh.w	r3, [r1], #2
 800568a:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800568c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005690:	3b01      	subs	r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005696:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0d1      	beq.n	8005642 <HAL_SPI_Transmit+0xca>
 800569e:	1c69      	adds	r1, r5, #1
 80056a0:	d163      	bne.n	800576a <HAL_SPI_Transmit+0x1f2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a2:	6883      	ldr	r3, [r0, #8]
 80056a4:	079a      	lsls	r2, r3, #30
 80056a6:	d50f      	bpl.n	80056c8 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80056aa:	f832 3b02 	ldrh.w	r3, [r2], #2
 80056ae:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80056b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b2:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80056ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0bf      	beq.n	8005642 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c2:	6883      	ldr	r3, [r0, #8]
 80056c4:	079a      	lsls	r2, r3, #30
 80056c6:	d4ef      	bmi.n	80056a8 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c8:	f7ff f932 	bl	8004930 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80056cc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0b6      	beq.n	8005642 <HAL_SPI_Transmit+0xca>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	e7e4      	b.n	80056a2 <HAL_SPI_Transmit+0x12a>
    __HAL_SPI_DISABLE(hspi);
 80056d8:	6803      	ldr	r3, [r0, #0]
 80056da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056de:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80056e0:	6803      	ldr	r3, [r0, #0]
 80056e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056e6:	6003      	str	r3, [r0, #0]
 80056e8:	e780      	b.n	80055ec <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80056f0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80056f4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80056f8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056fa:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80056fc:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80056fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d09d      	beq.n	8005642 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	0792      	lsls	r2, r2, #30
 800570c:	d4ed      	bmi.n	80056ea <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570e:	f7ff f90f 	bl	8004930 <HAL_GetTick>
 8005712:	1b83      	subs	r3, r0, r6
 8005714:	42ab      	cmp	r3, r5
 8005716:	d3f2      	bcc.n	80056fe <HAL_SPI_Transmit+0x186>
          hspi->State = HAL_SPI_STATE_READY;
 8005718:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 800571a:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 800571c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          goto error;
 8005720:	e741      	b.n	80055a6 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005722:	f899 3000 	ldrb.w	r3, [r9]
 8005726:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800572a:	3301      	adds	r3, #1
 800572c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800572e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005730:	3b01      	subs	r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005736:	e76c      	b.n	8005612 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005738:	f7ff f8fa 	bl	8004930 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800573c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f47f af6b 	bne.w	800561c <HAL_SPI_Transmit+0xa4>
 8005746:	e77c      	b.n	8005642 <HAL_SPI_Transmit+0xca>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005748:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800574a:	f832 3b02 	ldrh.w	r3, [r2], #2
 800574e:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 8005752:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005754:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005756:	3b01      	subs	r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800575c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	f43f af6e 	beq.w	8005642 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005766:	f8d4 c000 	ldr.w	ip, [r4]
 800576a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800576e:	079b      	lsls	r3, r3, #30
 8005770:	d4ea      	bmi.n	8005748 <HAL_SPI_Transmit+0x1d0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005772:	f7ff f8dd 	bl	8004930 <HAL_GetTick>
 8005776:	1b83      	subs	r3, r0, r6
 8005778:	42ab      	cmp	r3, r5
 800577a:	d3ef      	bcc.n	800575c <HAL_SPI_Transmit+0x1e4>
 800577c:	e7cc      	b.n	8005718 <HAL_SPI_Transmit+0x1a0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577e:	f1b8 0f01 	cmp.w	r8, #1
 8005782:	d188      	bne.n	8005696 <HAL_SPI_Transmit+0x11e>
 8005784:	e77e      	b.n	8005684 <HAL_SPI_Transmit+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005786:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005788:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800578a:	4313      	orrs	r3, r2
 800578c:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578e:	6562      	str	r2, [r4, #84]	@ 0x54
 8005790:	e760      	b.n	8005654 <HAL_SPI_Transmit+0xdc>
 8005792:	bf00      	nop

08005794 <HAL_SPI_TransmitReceive>:
{
 8005794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800579a:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
{
 800579e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80057a0:	2801      	cmp	r0, #1
{
 80057a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 80057a4:	f000 808c 	beq.w	80058c0 <HAL_SPI_TransmitReceive+0x12c>
 80057a8:	4698      	mov	r8, r3
 80057aa:	2301      	movs	r3, #1
 80057ac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80057b0:	468a      	mov	sl, r1
 80057b2:	4691      	mov	r9, r2
 80057b4:	f7ff f8bc 	bl	8004930 <HAL_GetTick>
  tmp_state           = hspi->State;
 80057b8:	f894 7051 	ldrb.w	r7, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80057bc:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057be:	2f01      	cmp	r7, #1
  tmp_mode            = hspi->Init.Mode;
 80057c0:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 80057c2:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057c4:	d00e      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x50>
 80057c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ca:	d006      	beq.n	80057da <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 80057cc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80057d4:	b002      	add	sp, #8
 80057d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057da:	68a2      	ldr	r2, [r4, #8]
 80057dc:	2a00      	cmp	r2, #0
 80057de:	d1f5      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x38>
 80057e0:	2904      	cmp	r1, #4
 80057e2:	d1f3      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057e4:	f1ba 0f00 	cmp.w	sl, #0
 80057e8:	f000 80d1 	beq.w	800598e <HAL_SPI_TransmitReceive+0x1fa>
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	f000 80cd 	beq.w	800598e <HAL_SPI_TransmitReceive+0x1fa>
 80057f4:	f1b8 0f00 	cmp.w	r8, #0
 80057f8:	f000 80c9 	beq.w	800598e <HAL_SPI_TransmitReceive+0x1fa>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057fc:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005800:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005802:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005804:	bf1c      	itt	ne
 8005806:	2205      	movne	r2, #5
 8005808:	f884 2051 	strbne.w	r2, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800580c:	2200      	movs	r2, #0
 800580e:	6562      	str	r2, [r4, #84]	@ 0x54
  hspi->RxXferCount = Size;
 8005810:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005814:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005818:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581c:	6802      	ldr	r2, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800581e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005822:	0652      	lsls	r2, r2, #25
  hspi->RxXferSize  = Size;
 8005824:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005828:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800582c:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005830:	d403      	bmi.n	800583a <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 8005832:	6802      	ldr	r2, [r0, #0]
 8005834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005838:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800583a:	68e2      	ldr	r2, [r4, #12]
 800583c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8005840:	d04d      	beq.n	80058de <HAL_SPI_TransmitReceive+0x14a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	2b00      	cmp	r3, #0
 8005844:	d040      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x134>
 8005846:	f1b8 0f01 	cmp.w	r8, #1
 800584a:	d03d      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 800584c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005850:	b292      	uxth	r2, r2
 8005852:	b91a      	cbnz	r2, 800585c <HAL_SPI_TransmitReceive+0xc8>
 8005854:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d07d      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x1c4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	0792      	lsls	r2, r2, #30
 8005862:	d50f      	bpl.n	8005884 <HAL_SPI_TransmitReceive+0xf0>
 8005864:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8005866:	b292      	uxth	r2, r2
 8005868:	b162      	cbz	r2, 8005884 <HAL_SPI_TransmitReceive+0xf0>
 800586a:	b15f      	cbz	r7, 8005884 <HAL_SPI_TransmitReceive+0xf0>
        txallowed = 0U;
 800586c:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800586e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005870:	7812      	ldrb	r2, [r2, #0]
 8005872:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005874:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 8005876:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005878:	3b01      	subs	r3, #1
 800587a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800587c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800587e:	86e3      	strh	r3, [r4, #54]	@ 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005880:	6823      	ldr	r3, [r4, #0]
        hspi->pTxBuffPtr++;
 8005882:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	f012 0201 	ands.w	r2, r2, #1
 800588a:	d00d      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x114>
 800588c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800588e:	b289      	uxth	r1, r1
 8005890:	b151      	cbz	r1, 80058a8 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 1U;
 8005892:	4617      	mov	r7, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800589a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800589c:	3301      	adds	r3, #1
 800589e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058a8:	f7ff f842 	bl	8004930 <HAL_GetTick>
 80058ac:	1b40      	subs	r0, r0, r5
 80058ae:	42b0      	cmp	r0, r6
 80058b0:	d3cd      	bcc.n	800584e <HAL_SPI_TransmitReceive+0xba>
 80058b2:	1c73      	adds	r3, r6, #1
 80058b4:	d0cb      	beq.n	800584e <HAL_SPI_TransmitReceive+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 80058b6:	2301      	movs	r3, #1
        errorcode = HAL_TIMEOUT;
 80058b8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80058ba:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        goto error;
 80058be:	e786      	b.n	80057ce <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80058c0:	2002      	movs	r0, #2
}
 80058c2:	b002      	add	sp, #8
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058c8:	f89a 3000 	ldrb.w	r3, [sl]
 80058cc:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80058ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80058d2:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d4:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80058d6:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d8:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80058da:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80058dc:	e7b6      	b.n	800584c <HAL_SPI_TransmitReceive+0xb8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d157      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x1fe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e2:	4651      	mov	r1, sl
 80058e4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80058e8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80058ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ec:	6321      	str	r1, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80058f4:	1c73      	adds	r3, r6, #1
{
 80058f6:	f04f 0701 	mov.w	r7, #1
 80058fa:	d025      	beq.n	8005948 <HAL_SPI_TransmitReceive+0x1b4>
 80058fc:	e04d      	b.n	800599a <HAL_SPI_TransmitReceive+0x206>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	6893      	ldr	r3, [r2, #8]
 8005902:	0798      	lsls	r0, r3, #30
 8005904:	d50d      	bpl.n	8005922 <HAL_SPI_TransmitReceive+0x18e>
 8005906:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005908:	b29b      	uxth	r3, r3
 800590a:	b153      	cbz	r3, 8005922 <HAL_SPI_TransmitReceive+0x18e>
 800590c:	b147      	cbz	r7, 8005920 <HAL_SPI_TransmitReceive+0x18c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800590e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005910:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005914:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005916:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005918:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800591a:	3b01      	subs	r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005920:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005922:	6893      	ldr	r3, [r2, #8]
 8005924:	f013 0301 	ands.w	r3, r3, #1
 8005928:	d00c      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1b0>
 800592a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800592c:	b289      	uxth	r1, r1
 800592e:	b149      	cbz	r1, 8005944 <HAL_SPI_TransmitReceive+0x1b0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005930:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 8005932:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005934:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005936:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800593a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800593c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800593e:	3b01      	subs	r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005944:	f7fe fff4 	bl	8004930 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005948:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1d6      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x16a>
 8005950:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1d2      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x16a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	462b      	mov	r3, r5
 800595a:	4632      	mov	r2, r6
 800595c:	2180      	movs	r1, #128	@ 0x80
 800595e:	4620      	mov	r0, r4
 8005960:	f7ff fd4c 	bl	80053fc <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8005964:	b970      	cbnz	r0, 8005984 <HAL_SPI_TransmitReceive+0x1f0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	b933      	cbnz	r3, 8005978 <HAL_SPI_TransmitReceive+0x1e4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	9001      	str	r0, [sp, #4]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	9201      	str	r2, [sp, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005978:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800597a:	b943      	cbnz	r3, 800598e <HAL_SPI_TransmitReceive+0x1fa>
    hspi->State = HAL_SPI_STATE_READY;
 800597c:	2301      	movs	r3, #1
 800597e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 8005982:	e724      	b.n	80057ce <HAL_SPI_TransmitReceive+0x3a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005984:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005988:	4313      	orrs	r3, r2
 800598a:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598c:	6562      	str	r2, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800598e:	2001      	movs	r0, #1
 8005990:	e71d      	b.n	80057ce <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005992:	f1b8 0f01 	cmp.w	r8, #1
 8005996:	d1ad      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x160>
 8005998:	e7a3      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x14e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800599c:	b29b      	uxth	r3, r3
 800599e:	b91b      	cbnz	r3, 80059a8 <HAL_SPI_TransmitReceive+0x214>
 80059a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0d7      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x1c4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	6893      	ldr	r3, [r2, #8]
 80059ac:	0799      	lsls	r1, r3, #30
 80059ae:	d50d      	bpl.n	80059cc <HAL_SPI_TransmitReceive+0x238>
 80059b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	b153      	cbz	r3, 80059cc <HAL_SPI_TransmitReceive+0x238>
 80059b6:	b147      	cbz	r7, 80059ca <HAL_SPI_TransmitReceive+0x236>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80059be:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80059c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80059ca:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059cc:	6893      	ldr	r3, [r2, #8]
 80059ce:	f013 0301 	ands.w	r3, r3, #1
 80059d2:	d00c      	beq.n	80059ee <HAL_SPI_TransmitReceive+0x25a>
 80059d4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80059d6:	b289      	uxth	r1, r1
 80059d8:	b149      	cbz	r1, 80059ee <HAL_SPI_TransmitReceive+0x25a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059da:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80059dc:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80059e0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80059e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ee:	f7fe ff9f 	bl	8004930 <HAL_GetTick>
 80059f2:	1b40      	subs	r0, r0, r5
 80059f4:	42b0      	cmp	r0, r6
 80059f6:	d3d0      	bcc.n	800599a <HAL_SPI_TransmitReceive+0x206>
 80059f8:	e75d      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x122>
 80059fa:	bf00      	nop

080059fc <HAL_SPI_Receive>:
{
 80059fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a00:	f890 7051 	ldrb.w	r7, [r0, #81]	@ 0x51
{
 8005a04:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a06:	2f01      	cmp	r7, #1
{
 8005a08:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8005a0a:	d16a      	bne.n	8005ae2 <HAL_SPI_Receive+0xe6>
 8005a0c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a0e:	6843      	ldr	r3, [r0, #4]
 8005a10:	4691      	mov	r9, r2
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a16:	4688      	mov	r8, r1
 8005a18:	b2fe      	uxtb	r6, r7
 8005a1a:	d06a      	beq.n	8005af2 <HAL_SPI_Receive+0xf6>
  __HAL_LOCK(hspi);
 8005a1c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	f000 8096 	beq.w	8005b52 <HAL_SPI_Receive+0x156>
 8005a26:	2301      	movs	r3, #1
 8005a28:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005a2c:	f7fe ff80 	bl	8004930 <HAL_GetTick>
 8005a30:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	d055      	beq.n	8005ae4 <HAL_SPI_Receive+0xe8>
 8005a38:	f1b9 0f00 	cmp.w	r9, #0
 8005a3c:	d052      	beq.n	8005ae4 <HAL_SPI_Receive+0xe8>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a3e:	2204      	movs	r2, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a40:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a42:	68a1      	ldr	r1, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a44:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
    __HAL_SPI_DISABLE(hspi);
 8005a48:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005a50:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a54:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->RxXferCount = Size;
 8005a56:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = 0U;
 8005a5a:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a5c:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a5e:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
    __HAL_SPI_DISABLE(hspi);
 8005a62:	4613      	mov	r3, r2
  hspi->RxXferSize  = Size;
 8005a64:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a68:	d107      	bne.n	8005a7a <HAL_SPI_Receive+0x7e>
    __HAL_SPI_DISABLE(hspi);
 8005a6a:	6811      	ldr	r1, [r2, #0]
 8005a6c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005a70:	6011      	str	r1, [r2, #0]
    SPI_1LINE_RX(hspi);
 8005a72:	6811      	ldr	r1, [r2, #0]
 8005a74:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005a78:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a7a:	6811      	ldr	r1, [r2, #0]
 8005a7c:	0649      	lsls	r1, r1, #25
 8005a7e:	d403      	bmi.n	8005a88 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8005a86:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a88:	68e1      	ldr	r1, [r4, #12]
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d066      	beq.n	8005b5c <HAL_SPI_Receive+0x160>
    while (hspi->RxXferCount > 0U)
 8005a8e:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8005a90:	b289      	uxth	r1, r1
 8005a92:	b189      	cbz	r1, 8005ab8 <HAL_SPI_Receive+0xbc>
 8005a94:	1c68      	adds	r0, r5, #1
 8005a96:	d147      	bne.n	8005b28 <HAL_SPI_Receive+0x12c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a98:	6893      	ldr	r3, [r2, #8]
 8005a9a:	07d9      	lsls	r1, r3, #31
 8005a9c:	d551      	bpl.n	8005b42 <HAL_SPI_Receive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a9e:	68d1      	ldr	r1, [r2, #12]
 8005aa0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005aa2:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 8005aa6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aa8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aaa:	3901      	subs	r1, #1
 8005aac:	b289      	uxth	r1, r1
 8005aae:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005ab0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ef      	bne.n	8005a98 <HAL_SPI_Receive+0x9c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005abe:	f000 8086 	beq.w	8005bce <HAL_SPI_Receive+0x1d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	2180      	movs	r1, #128	@ 0x80
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff fc97 	bl	80053fc <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f040 8093 	bne.w	8005bfa <HAL_SPI_Receive+0x1fe>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005ad6:	b92b      	cbnz	r3, 8005ae4 <HAL_SPI_Receive+0xe8>
    hspi->State = HAL_SPI_STATE_READY;
 8005ad8:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ada:	461e      	mov	r6, r3
    hspi->State = HAL_SPI_STATE_READY;
 8005adc:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
 8005ae0:	e000      	b.n	8005ae4 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8005ae2:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005aea:	4630      	mov	r0, r6
 8005aec:	b003      	add	sp, #12
 8005aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005af2:	6883      	ldr	r3, [r0, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d191      	bne.n	8005a1c <HAL_SPI_Receive+0x20>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005af8:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005afa:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005afc:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005afe:	f880 5051 	strb.w	r5, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b02:	460a      	mov	r2, r1
 8005b04:	f7ff fe46 	bl	8005794 <HAL_SPI_TransmitReceive>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	e7ee      	b.n	8005aea <HAL_SPI_Receive+0xee>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005b10:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8005b14:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b16:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005b1e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c8      	beq.n	8005ab8 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	07d2      	lsls	r2, r2, #31
 8005b2c:	d4ee      	bmi.n	8005b0c <HAL_SPI_Receive+0x110>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2e:	f7fe feff 	bl	8004930 <HAL_GetTick>
 8005b32:	1bc3      	subs	r3, r0, r7
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	d3f2      	bcc.n	8005b1e <HAL_SPI_Receive+0x122>
          hspi->State = HAL_SPI_STATE_READY;
 8005b38:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8005b3a:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          goto error;
 8005b40:	e7d0      	b.n	8005ae4 <HAL_SPI_Receive+0xe8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b42:	f7fe fef5 	bl	8004930 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8005b46:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0b4      	beq.n	8005ab8 <HAL_SPI_Receive+0xbc>
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	e7a2      	b.n	8005a98 <HAL_SPI_Receive+0x9c>
  __HAL_LOCK(hspi);
 8005b52:	2602      	movs	r6, #2
}
 8005b54:	4630      	mov	r0, r6
 8005b56:	b003      	add	sp, #12
 8005b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 8005b5c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d0a9      	beq.n	8005ab8 <HAL_SPI_Receive+0xbc>
 8005b64:	1c6a      	adds	r2, r5, #1
 8005b66:	d00f      	beq.n	8005b88 <HAL_SPI_Receive+0x18c>
 8005b68:	e028      	b.n	8005bbc <HAL_SPI_Receive+0x1c0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b6a:	7b1a      	ldrb	r2, [r3, #12]
 8005b6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005b6e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005b70:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b72:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b74:	3901      	subs	r1, #1
 8005b76:	b289      	uxth	r1, r1
 8005b78:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005b7a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b7c:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8005b7e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b80:	63a2      	str	r2, [r4, #56]	@ 0x38
    while (hspi->RxXferCount > 0U)
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d098      	beq.n	8005ab8 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	07d0      	lsls	r0, r2, #31
 8005b8c:	d4ed      	bmi.n	8005b6a <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8e:	f7fe fecf 	bl	8004930 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8005b92:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f5      	bne.n	8005b86 <HAL_SPI_Receive+0x18a>
 8005b9a:	e78d      	b.n	8005ab8 <HAL_SPI_Receive+0xbc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b9c:	7b1a      	ldrb	r2, [r3, #12]
 8005b9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005ba0:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005ba2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ba6:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba8:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8005baa:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bac:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005bb0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f43f af7f 	beq.w	8005ab8 <HAL_SPI_Receive+0xbc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	07d1      	lsls	r1, r2, #31
 8005bc0:	d4ec      	bmi.n	8005b9c <HAL_SPI_Receive+0x1a0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc2:	f7fe feb5 	bl	8004930 <HAL_GetTick>
 8005bc6:	1bc3      	subs	r3, r0, r7
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	d3f1      	bcc.n	8005bb0 <HAL_SPI_Receive+0x1b4>
 8005bcc:	e7b4      	b.n	8005b38 <HAL_SPI_Receive+0x13c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd4:	d018      	beq.n	8005c08 <HAL_SPI_Receive+0x20c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bda:	f47f af72 	bne.w	8005ac2 <HAL_SPI_Receive+0xc6>
    __HAL_SPI_DISABLE(hspi);
 8005bde:	6820      	ldr	r0, [r4, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005be0:	463b      	mov	r3, r7
    __HAL_SPI_DISABLE(hspi);
 8005be2:	6801      	ldr	r1, [r0, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005be4:	462a      	mov	r2, r5
    __HAL_SPI_DISABLE(hspi);
 8005be6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005bea:	6001      	str	r1, [r0, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bec:	2101      	movs	r1, #1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fc04 	bl	80053fc <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f43f af6d 	beq.w	8005ad4 <HAL_SPI_Receive+0xd8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005bfc:	f043 0320 	orr.w	r3, r3, #32
 8005c00:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c02:	2320      	movs	r3, #32
 8005c04:	6563      	str	r3, [r4, #84]	@ 0x54
 8005c06:	e765      	b.n	8005ad4 <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c10:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005c12:	e756      	b.n	8005ac2 <HAL_SPI_Receive+0xc6>

08005c14 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d060      	beq.n	8005cda <HAL_TIM_Base_Init+0xc6>
{
 8005c18:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d042      	beq.n	8005cae <HAL_TIM_Base_Init+0x9a>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c28:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2e:	4e2c      	ldr	r6, [pc, #176]	@ (8005ce0 <HAL_TIM_Base_Init+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c36:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8005c3a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	d03c      	beq.n	8005cb8 <HAL_TIM_Base_Init+0xa4>
 8005c3e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005c42:	d00e      	beq.n	8005c62 <HAL_TIM_Base_Init+0x4e>
 8005c44:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005c48:	42b2      	cmp	r2, r6
 8005c4a:	d00a      	beq.n	8005c62 <HAL_TIM_Base_Init+0x4e>
 8005c4c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005c50:	42b2      	cmp	r2, r6
 8005c52:	d006      	beq.n	8005c62 <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c58:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005c5a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c5e:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c60:	e00d      	b.n	8005c7e <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8005c62:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c68:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c70:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c76:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8005c78:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c7a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c7c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c82:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005c8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005c8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005c92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005ca2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005caa:	2000      	movs	r0, #0
}
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cae:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cb2:	f7fb fecd 	bl	8001a50 <HAL_TIM_Base_MspInit>
 8005cb6:	e7b7      	b.n	8005c28 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005cb8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cbe:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ccc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005cce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cd2:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd4:	6963      	ldr	r3, [r4, #20]
 8005cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cd8:	e7d1      	b.n	8005c7e <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 8005cda:	2001      	movs	r0, #1
}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40012c00 	.word	0x40012c00

08005ce4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d11f      	bne.n	8005d2c <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cee:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf6:	490e      	ldr	r1, [pc, #56]	@ (8005d30 <HAL_TIM_Base_Start_IT+0x4c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cfe:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	d009      	beq.n	8005d16 <HAL_TIM_Base_Start_IT+0x32>
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d06:	d006      	beq.n	8005d16 <HAL_TIM_Base_Start_IT+0x32>
 8005d08:	4a0a      	ldr	r2, [pc, #40]	@ (8005d34 <HAL_TIM_Base_Start_IT+0x50>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_Base_Start_IT+0x32>
 8005d0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d104      	bne.n	8005d20 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1c:	2a06      	cmp	r2, #6
 8005d1e:	d003      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d28:	2000      	movs	r0, #0
 8005d2a:	4770      	bx	lr
    return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
}
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400

08005d38 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005d38:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d071      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0xec>
 8005d40:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005d44:	2001      	movs	r0, #1
{
 8005d46:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8005d4a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005d52:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d58:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005d5e:	680b      	ldr	r3, [r1, #0]
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d061      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0xf0>
 8005d64:	d824      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x78>
 8005d66:	2b40      	cmp	r3, #64	@ 0x40
 8005d68:	d077      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x122>
 8005d6a:	d94a      	bls.n	8005e02 <HAL_TIM_ConfigClockSource+0xca>
 8005d6c:	2b50      	cmp	r3, #80	@ 0x50
 8005d6e:	d117      	bne.n	8005da0 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8005d70:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005d72:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d74:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005d7a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7c:	6a23      	ldr	r3, [r4, #32]
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d84:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d90:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d92:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d98:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005da2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005da8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005dac:	bc30      	pop	{r4, r5}
 8005dae:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db4:	d0f3      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x66>
 8005db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dba:	d110      	bne.n	8005dde <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dbc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005dc0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc2:	432b      	orrs	r3, r5
 8005dc4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005dce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd2:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd4:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dda:	60a3      	str	r3, [r4, #8]
      break;
 8005ddc:	e7e0      	b.n	8005da0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005dde:	2b70      	cmp	r3, #112	@ 0x70
 8005de0:	d1de      	bne.n	8005da0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005de6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de8:	432b      	orrs	r3, r5
 8005dea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005df4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005df6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005df8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dfa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005dfe:	60a3      	str	r3, [r4, #8]
      break;
 8005e00:	e7cd      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d002      	beq.n	8005e0c <HAL_TIM_ConfigClockSource+0xd4>
 8005e06:	d909      	bls.n	8005e1c <HAL_TIM_ConfigClockSource+0xe4>
 8005e08:	2b30      	cmp	r3, #48	@ 0x30
 8005e0a:	d1c9      	bne.n	8005da0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005e0c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e12:	430b      	orrs	r3, r1
 8005e14:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005e18:	60a3      	str	r3, [r4, #8]
}
 8005e1a:	e7c0      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005e1c:	f033 0110 	bics.w	r1, r3, #16
 8005e20:	d1be      	bne.n	8005da0 <HAL_TIM_ConfigClockSource+0x68>
 8005e22:	e7f3      	b.n	8005e0c <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8005e24:	2002      	movs	r0, #2
}
 8005e26:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8005e28:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8005e2a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e2e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e34:	f021 0110 	bic.w	r1, r1, #16
 8005e38:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3a:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e40:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e44:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005e48:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005e4a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005e4c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e52:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005e56:	60a3      	str	r3, [r4, #8]
}
 8005e58:	e7a1      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8005e5a:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005e5e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e60:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005e64:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e66:	6a23      	ldr	r3, [r4, #32]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e74:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005e78:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005e7a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005e7c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e82:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005e86:	60a3      	str	r3, [r4, #8]
}
 8005e88:	e789      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x66>
 8005e8a:	bf00      	nop

08005e8c <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop

08005e98 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea0:	6803      	ldr	r3, [r0, #0]
{
 8005ea2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea4:	691a      	ldr	r2, [r3, #16]
{
 8005ea6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea8:	0791      	lsls	r1, r2, #30
 8005eaa:	d502      	bpl.n	8005eb2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	0792      	lsls	r2, r2, #30
 8005eb0:	d45f      	bmi.n	8005f72 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	0750      	lsls	r0, r2, #29
 8005eb6:	d502      	bpl.n	8005ebe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	0751      	lsls	r1, r2, #29
 8005ebc:	d446      	bmi.n	8005f4c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	0712      	lsls	r2, r2, #28
 8005ec2:	d502      	bpl.n	8005eca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	0710      	lsls	r0, r2, #28
 8005ec8:	d42e      	bmi.n	8005f28 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	06d2      	lsls	r2, r2, #27
 8005ece:	d502      	bpl.n	8005ed6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	06d0      	lsls	r0, r2, #27
 8005ed4:	d418      	bmi.n	8005f08 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	07d1      	lsls	r1, r2, #31
 8005eda:	d502      	bpl.n	8005ee2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	07d2      	lsls	r2, r2, #31
 8005ee0:	d45d      	bmi.n	8005f9e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	0610      	lsls	r0, r2, #24
 8005ee6:	d502      	bpl.n	8005eee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	0611      	lsls	r1, r2, #24
 8005eec:	d45f      	bmi.n	8005fae <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	0652      	lsls	r2, r2, #25
 8005ef2:	d502      	bpl.n	8005efa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	0650      	lsls	r0, r2, #25
 8005ef8:	d461      	bmi.n	8005fbe <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	0691      	lsls	r1, r2, #26
 8005efe:	d502      	bpl.n	8005f06 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	0692      	lsls	r2, r2, #26
 8005f04:	d443      	bmi.n	8005f8e <HAL_TIM_IRQHandler+0xee>
}
 8005f06:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f08:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f0e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f12:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005f14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f16:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005f1a:	d064      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1c:	f7ff ffba 	bl	8005e94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f20:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f22:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f24:	7722      	strb	r2, [r4, #28]
 8005f26:	e7d6      	b.n	8005ed6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f32:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005f34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f36:	0799      	lsls	r1, r3, #30
 8005f38:	d152      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	f7ff ffa9 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ffaa 	bl	8005e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f44:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f46:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f48:	7722      	strb	r2, [r4, #28]
 8005f4a:	e7be      	b.n	8005eca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f4c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f50:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f52:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f56:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8005f58:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f5a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005f5e:	d13c      	bne.n	8005fda <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f60:	f7ff ff96 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff ff97 	bl	8005e98 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f6c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	7722      	strb	r2, [r4, #28]
 8005f70:	e7a5      	b.n	8005ebe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f72:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f76:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f78:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	079b      	lsls	r3, r3, #30
 8005f80:	d025      	beq.n	8005fce <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	f7ff ff87 	bl	8005e94 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f88:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	7722      	strb	r2, [r4, #28]
 8005f8c:	e791      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005f92:	4620      	mov	r0, r4
}
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005f9a:	f000 b85d 	b.w	8006058 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f9e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa6:	f7ff ff71 	bl	8005e8c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	e799      	b.n	8005ee2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005fb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005fb6:	f000 f851 	bl	800605c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	e797      	b.n	8005eee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005fc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005fc6:	f7ff ff69 	bl	8005e9c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	e795      	b.n	8005efa <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	f7ff ff5f 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff ff60 	bl	8005e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fd8:	e7d5      	b.n	8005f86 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	f7ff ff5b 	bl	8005e94 <HAL_TIM_IC_CaptureCallback>
 8005fde:	e7c4      	b.n	8005f6a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe0:	f7ff ff58 	bl	8005e94 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e7ae      	b.n	8005f44 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	f7ff ff53 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fea:	4620      	mov	r0, r4
 8005fec:	f7ff ff54 	bl	8005e98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ff0:	e796      	b.n	8005f20 <HAL_TIM_IRQHandler+0x80>
 8005ff2:	bf00      	nop

08005ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005ff8:	2a01      	cmp	r2, #1
 8005ffa:	d027      	beq.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8005ffc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffe:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006000:	681a      	ldr	r2, [r3, #0]
{
 8006002:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006008:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600a:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800600c:	4d10      	ldr	r5, [pc, #64]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800600e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006012:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006014:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8006016:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8006018:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601a:	d009      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800601c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006020:	d006      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006022:	480c      	ldr	r0, [pc, #48]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006024:	4282      	cmp	r2, r0
 8006026:	d003      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006028:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800602c:	4282      	cmp	r2, r0
 800602e:	d104      	bne.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006030:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006032:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006036:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006038:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800603a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800603c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8006042:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006046:	4610      	mov	r0, r2
}
 8006048:	bc30      	pop	{r4, r5}
 800604a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800604c:	2002      	movs	r0, #2
}
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40000400 	.word	0x40000400

08006058 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006060:	2800      	cmp	r0, #0
 8006062:	d065      	beq.n	8006130 <HAL_UART_Init+0xd0>
{
 8006064:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006066:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800606a:	4604      	mov	r4, r0
 800606c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006070:	2b00      	cmp	r3, #0
 8006072:	d055      	beq.n	8006120 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006074:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8006078:	2124      	movs	r1, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800607a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800607c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006080:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006082:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8006084:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006088:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800608a:	4302      	orrs	r2, r0
 800608c:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800608e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006090:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006092:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006094:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006098:	4331      	orrs	r1, r6
 800609a:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800609c:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 800609e:	4825      	ldr	r0, [pc, #148]	@ (8006134 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 80060a0:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80060a4:	f021 010c 	bic.w	r1, r1, #12
 80060a8:	430a      	orrs	r2, r1
 80060aa:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ac:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 80060ae:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80060b4:	ea42 0205 	orr.w	r2, r2, r5
 80060b8:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80060ba:	d036      	beq.n	800612a <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7ff f97e 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c0:	6862      	ldr	r2, [r4, #4]
 80060c2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d0:	f04f 0e64 	mov.w	lr, #100	@ 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80060d6:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060da:	4817      	ldr	r0, [pc, #92]	@ (8006138 <HAL_UART_Init+0xd8>)
 80060dc:	6821      	ldr	r1, [r4, #0]
 80060de:	fba0 6203 	umull	r6, r2, r0, r3
 80060e2:	0952      	lsrs	r2, r2, #5
 80060e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	3332      	adds	r3, #50	@ 0x32
 80060ec:	fba0 0303 	umull	r0, r3, r0, r3
 80060f0:	0112      	lsls	r2, r2, #4
 80060f2:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80060f6:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f8:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 80060fa:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006100:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006102:	694b      	ldr	r3, [r1, #20]
 8006104:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006108:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 800610a:	68cb      	ldr	r3, [r1, #12]
 800610c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006110:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	6465      	str	r5, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006114:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006118:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611c:	6365      	str	r5, [r4, #52]	@ 0x34
}
 800611e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8006120:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006124:	f7fb fcb4 	bl	8001a90 <HAL_UART_MspInit>
 8006128:	e7a4      	b.n	8006074 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800612a:	f7ff f957 	bl	80053dc <HAL_RCC_GetPCLK2Freq>
 800612e:	e7c7      	b.n	80060c0 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8006130:	2001      	movs	r0, #1
}
 8006132:	4770      	bx	lr
 8006134:	40013800 	.word	0x40013800
 8006138:	51eb851f 	.word	0x51eb851f

0800613c <HAL_UART_Transmit>:
{
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006142:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006146:	2b20      	cmp	r3, #32
 8006148:	d16e      	bne.n	8006228 <HAL_UART_Transmit+0xec>
    if ((pData == NULL) || (Size == 0U))
 800614a:	4688      	mov	r8, r1
 800614c:	b109      	cbz	r1, 8006152 <HAL_UART_Transmit+0x16>
 800614e:	4617      	mov	r7, r2
 8006150:	b912      	cbnz	r2, 8006158 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8006152:	2001      	movs	r0, #1
}
 8006154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006158:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	4604      	mov	r4, r0
 8006160:	f8c0 9044 	str.w	r9, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006164:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006168:	f7fe fbe2 	bl	8004930 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800616e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8006174:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006176:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	d064      	beq.n	8006244 <HAL_UART_Transmit+0x108>
    while (huart->TxXferCount > 0U)
 800617a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 800617e:	b292      	uxth	r2, r2
 8006180:	b192      	cbz	r2, 80061a8 <HAL_UART_Transmit+0x6c>
 8006182:	1c69      	adds	r1, r5, #1
 8006184:	d122      	bne.n	80061cc <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	0612      	lsls	r2, r2, #24
 800618a:	d5fc      	bpl.n	8006186 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 800618c:	f1b8 0f00 	cmp.w	r8, #0
 8006190:	d022      	beq.n	80061d8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006192:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006196:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8006198:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800619a:	3a01      	subs	r2, #1
 800619c:	b292      	uxth	r2, r2
 800619e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061a0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80061a2:	b292      	uxth	r2, r2
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	d1ec      	bne.n	8006182 <HAL_UART_Transmit+0x46>
 80061a8:	1c68      	adds	r0, r5, #1
 80061aa:	d147      	bne.n	800623c <HAL_UART_Transmit+0x100>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	0651      	lsls	r1, r2, #25
 80061b0:	d5fc      	bpl.n	80061ac <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80061b2:	2320      	movs	r3, #32
 80061b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80061b8:	2000      	movs	r0, #0
}
 80061ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061be:	b185      	cbz	r5, 80061e2 <HAL_UART_Transmit+0xa6>
 80061c0:	f7fe fbb6 	bl	8004930 <HAL_GetTick>
 80061c4:	1b80      	subs	r0, r0, r6
 80061c6:	4285      	cmp	r5, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c8:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061ca:	d30a      	bcc.n	80061e2 <HAL_UART_Transmit+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	0617      	lsls	r7, r2, #24
 80061d0:	d5f5      	bpl.n	80061be <HAL_UART_Transmit+0x82>
      if (pdata8bits == NULL)
 80061d2:	f1b8 0f00 	cmp.w	r8, #0
 80061d6:	d1dc      	bne.n	8006192 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d8:	f839 2b02 	ldrh.w	r2, [r9], #2
 80061dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e0:	e7d9      	b.n	8006196 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	f103 020c 	add.w	r2, r3, #12
 80061e6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ea:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	f103 000c 	add.w	r0, r3, #12
 80061f2:	e840 2100 	strex	r1, r2, [r0]
 80061f6:	2900      	cmp	r1, #0
 80061f8:	d1f3      	bne.n	80061e2 <HAL_UART_Transmit+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	f103 0214 	add.w	r2, r3, #20
 80061fe:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f103 0014 	add.w	r0, r3, #20
 800620a:	e840 2100 	strex	r1, r2, [r0]
 800620e:	2900      	cmp	r1, #0
 8006210:	d1f3      	bne.n	80061fa <HAL_UART_Transmit+0xbe>
        huart->gState  = HAL_UART_STATE_READY;
 8006212:	2320      	movs	r3, #32
 8006214:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 800621c:	2300      	movs	r3, #0
 800621e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8006222:	2003      	movs	r0, #3
}
 8006224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006228:	2002      	movs	r0, #2
}
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800622e:	b17d      	cbz	r5, 8006250 <HAL_UART_Transmit+0x114>
 8006230:	f7fe fb7e 	bl	8004930 <HAL_GetTick>
 8006234:	1b83      	subs	r3, r0, r6
 8006236:	429d      	cmp	r5, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006238:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800623a:	d309      	bcc.n	8006250 <HAL_UART_Transmit+0x114>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	0652      	lsls	r2, r2, #25
 8006240:	d5f5      	bpl.n	800622e <HAL_UART_Transmit+0xf2>
 8006242:	e7b6      	b.n	80061b2 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d197      	bne.n	800617a <HAL_UART_Transmit+0x3e>
 800624a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800624c:	4698      	mov	r8, r3
 800624e:	e794      	b.n	800617a <HAL_UART_Transmit+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f103 020c 	add.w	r2, r3, #12
 8006254:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006258:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	f103 000c 	add.w	r0, r3, #12
 8006260:	e840 2100 	strex	r1, r2, [r0]
 8006264:	2900      	cmp	r1, #0
 8006266:	d1f3      	bne.n	8006250 <HAL_UART_Transmit+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	f103 0214 	add.w	r2, r3, #20
 800626c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	f103 0014 	add.w	r0, r3, #20
 8006278:	e840 2100 	strex	r1, r2, [r0]
 800627c:	2900      	cmp	r1, #0
 800627e:	d1f3      	bne.n	8006268 <HAL_UART_Transmit+0x12c>
 8006280:	e7c7      	b.n	8006212 <HAL_UART_Transmit+0xd6>
 8006282:	bf00      	nop

08006284 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006284:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8006288:	2b20      	cmp	r3, #32
 800628a:	d120      	bne.n	80062ce <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800628c:	b101      	cbz	r1, 8006290 <HAL_UART_Receive_IT+0xc>
 800628e:	b90a      	cbnz	r2, 8006294 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8006290:	2001      	movs	r0, #1
}
 8006292:	4770      	bx	lr
{
 8006294:	b410      	push	{r4}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006296:	f04f 0c22 	mov.w	ip, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	2400      	movs	r4, #0
  huart->pRxBuffPtr = pData;
 800629c:	6281      	str	r1, [r0, #40]	@ 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 800629e:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	6304      	str	r4, [r0, #48]	@ 0x30
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062a2:	6803      	ldr	r3, [r0, #0]
  huart->RxXferCount = Size;
 80062a4:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->RxXferSize = Size;
 80062a6:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a8:	6444      	str	r4, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062aa:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ae:	b119      	cbz	r1, 80062b8 <HAL_UART_Receive_IT+0x34>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b6:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062b8:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80062ba:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062c2:	68da      	ldr	r2, [r3, #12]
}
 80062c4:	bc10      	pop	{r4}
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062c6:	f042 0220 	orr.w	r2, r2, #32
 80062ca:	60da      	str	r2, [r3, #12]
}
 80062cc:	4770      	bx	lr
    return HAL_BUSY;
 80062ce:	2002      	movs	r0, #2
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop

080062d4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop

080062d8 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop

080062dc <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop

080062e0 <UART_DMAAbortOnError>:
{
 80062e0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80062e2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80062e6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062e8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80062ea:	f7ff fff7 	bl	80062dc <HAL_UART_ErrorCallback>
}
 80062ee:	bd08      	pop	{r3, pc}

080062f0 <HAL_UARTEx_RxEventCallback>:
}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop

080062f4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f6:	6801      	ldr	r1, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062fc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fe:	d042      	beq.n	8006386 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006300:	2b00      	cmp	r3, #0
 8006302:	d039      	beq.n	8006378 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006304:	684b      	ldr	r3, [r1, #4]
 8006306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800630a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800630c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800630e:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8006310:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8006312:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8006314:	3b01      	subs	r3, #1
 8006316:	b29b      	uxth	r3, r3
 8006318:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800631a:	2b00      	cmp	r3, #0
 800631c:	d132      	bne.n	8006384 <UART_Receive_IT.part.0.isra.0+0x90>
      huart->RxState = HAL_UART_STATE_READY;
 800631e:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006322:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006324:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006326:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006328:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800632a:	f021 0120 	bic.w	r1, r1, #32
 800632e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006330:	68d1      	ldr	r1, [r2, #12]
 8006332:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8006336:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006338:	6951      	ldr	r1, [r2, #20]
 800633a:	f021 0101 	bic.w	r1, r1, #1
 800633e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006340:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006344:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006346:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006348:	2901      	cmp	r1, #1
 800634a:	d125      	bne.n	8006398 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	f102 030c 	add.w	r3, r2, #12
 8006352:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006356:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	f102 0c0c 	add.w	ip, r2, #12
 800635e:	e84c 3100 	strex	r1, r3, [ip]
 8006362:	2900      	cmp	r1, #0
 8006364:	d1f3      	bne.n	800634e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	06db      	lsls	r3, r3, #27
 800636a:	d41a      	bmi.n	80063a2 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800636e:	f7ff ffbf 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
}
 8006372:	b003      	add	sp, #12
 8006374:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006378:	6903      	ldr	r3, [r0, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1c2      	bne.n	8006304 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800637e:	684b      	ldr	r3, [r1, #4]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e7c2      	b.n	800630a <UART_Receive_IT.part.0.isra.0+0x16>
 8006384:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006386:	6903      	ldr	r3, [r0, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f8      	bne.n	800637e <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800638c:	684b      	ldr	r3, [r1, #4]
 800638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006392:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8006396:	e7bb      	b.n	8006310 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8006398:	f7ff ff9e 	bl	80062d8 <HAL_UART_RxCpltCallback>
}
 800639c:	b003      	add	sp, #12
 800639e:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a2:	2300      	movs	r3, #0
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	6853      	ldr	r3, [r2, #4]
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	e7dc      	b.n	800636c <UART_Receive_IT.part.0.isra.0+0x78>
 80063b2:	bf00      	nop

080063b4 <HAL_UART_IRQHandler>:
{
 80063b4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063b6:	6803      	ldr	r3, [r0, #0]
{
 80063b8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063ba:	681a      	ldr	r2, [r3, #0]
{
 80063bc:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80063be:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063c2:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c4:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 80063c6:	d16f      	bne.n	80064a8 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c8:	0691      	lsls	r1, r2, #26
 80063ca:	d502      	bpl.n	80063d2 <HAL_UART_IRQHandler+0x1e>
 80063cc:	06a9      	lsls	r1, r5, #26
 80063ce:	f100 80a0 	bmi.w	8006512 <HAL_UART_IRQHandler+0x15e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80063d4:	2901      	cmp	r1, #1
 80063d6:	d00b      	beq.n	80063f0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063d8:	0610      	lsls	r0, r2, #24
 80063da:	d502      	bpl.n	80063e2 <HAL_UART_IRQHandler+0x2e>
 80063dc:	0629      	lsls	r1, r5, #24
 80063de:	f100 80a2 	bmi.w	8006526 <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063e2:	0652      	lsls	r2, r2, #25
 80063e4:	d502      	bpl.n	80063ec <HAL_UART_IRQHandler+0x38>
 80063e6:	0668      	lsls	r0, r5, #25
 80063e8:	f100 80bc 	bmi.w	8006564 <HAL_UART_IRQHandler+0x1b0>
}
 80063ec:	b003      	add	sp, #12
 80063ee:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063f0:	06d0      	lsls	r0, r2, #27
 80063f2:	d5f1      	bpl.n	80063d8 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063f4:	06e9      	lsls	r1, r5, #27
 80063f6:	d5ef      	bpl.n	80063d8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f8:	2200      	movs	r2, #0
 80063fa:	9201      	str	r2, [sp, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	9201      	str	r2, [sp, #4]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	9201      	str	r2, [sp, #4]
 8006404:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	0655      	lsls	r5, r2, #25
 800640a:	f140 8135 	bpl.w	8006678 <HAL_UART_IRQHandler+0x2c4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800640e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006410:	6802      	ldr	r2, [r0, #0]
 8006412:	6852      	ldr	r2, [r2, #4]
 8006414:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006416:	2a00      	cmp	r2, #0
 8006418:	d0e8      	beq.n	80063ec <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800641a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800641c:	4291      	cmp	r1, r2
 800641e:	d9e5      	bls.n	80063ec <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8006420:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006422:	6982      	ldr	r2, [r0, #24]
 8006424:	2a20      	cmp	r2, #32
 8006426:	d036      	beq.n	8006496 <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	f103 020c 	add.w	r2, r3, #12
 800642c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	f103 050c 	add.w	r5, r3, #12
 8006438:	e845 2100 	strex	r1, r2, [r5]
 800643c:	2900      	cmp	r1, #0
 800643e:	d1f3      	bne.n	8006428 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	f103 0214 	add.w	r2, r3, #20
 8006444:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	f103 0514 	add.w	r5, r3, #20
 8006450:	e845 2100 	strex	r1, r2, [r5]
 8006454:	2900      	cmp	r1, #0
 8006456:	d1f3      	bne.n	8006440 <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f103 0214 	add.w	r2, r3, #20
 800645c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	f103 0514 	add.w	r5, r3, #20
 8006468:	e845 2100 	strex	r1, r2, [r5]
 800646c:	2900      	cmp	r1, #0
 800646e:	d1f3      	bne.n	8006458 <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 8006470:	2220      	movs	r2, #32
 8006472:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	f103 020c 	add.w	r2, r3, #12
 800647c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006480:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	f103 050c 	add.w	r5, r3, #12
 8006488:	e845 2100 	strex	r1, r2, [r5]
 800648c:	2900      	cmp	r1, #0
 800648e:	d1f3      	bne.n	8006478 <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006490:	f7fe fada 	bl	8004a48 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006494:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006496:	2302      	movs	r3, #2
 8006498:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800649a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800649c:	4620      	mov	r0, r4
 800649e:	1ac9      	subs	r1, r1, r3
 80064a0:	b289      	uxth	r1, r1
 80064a2:	f7ff ff25 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 80064a6:	e7a1      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064a8:	f011 0101 	ands.w	r1, r1, #1
 80064ac:	d178      	bne.n	80065a0 <HAL_UART_IRQHandler+0x1ec>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064ae:	f415 7f90 	tst.w	r5, #288	@ 0x120
 80064b2:	d08e      	beq.n	80063d2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064b4:	07d0      	lsls	r0, r2, #31
 80064b6:	d50a      	bpl.n	80064ce <HAL_UART_IRQHandler+0x11a>
 80064b8:	05e8      	lsls	r0, r5, #23
 80064ba:	f140 80d9 	bpl.w	8006670 <HAL_UART_IRQHandler+0x2bc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064be:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80064c0:	f040 0001 	orr.w	r0, r0, #1
 80064c4:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c6:	0750      	lsls	r0, r2, #29
 80064c8:	d55b      	bpl.n	8006582 <HAL_UART_IRQHandler+0x1ce>
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d16c      	bne.n	80065a8 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ce:	0790      	lsls	r0, r2, #30
 80064d0:	d570      	bpl.n	80065b4 <HAL_UART_IRQHandler+0x200>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064d2:	0710      	lsls	r0, r2, #28
 80064d4:	f100 80c9 	bmi.w	800666a <HAL_UART_IRQHandler+0x2b6>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064da:	2900      	cmp	r1, #0
 80064dc:	d086      	beq.n	80063ec <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064de:	0691      	lsls	r1, r2, #26
 80064e0:	d509      	bpl.n	80064f6 <HAL_UART_IRQHandler+0x142>
 80064e2:	06aa      	lsls	r2, r5, #26
 80064e4:	d507      	bpl.n	80064f6 <HAL_UART_IRQHandler+0x142>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e6:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80064ea:	2a22      	cmp	r2, #34	@ 0x22
 80064ec:	d103      	bne.n	80064f6 <HAL_UART_IRQHandler+0x142>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff ff00 	bl	80062f4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064fa:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064fe:	f001 0108 	and.w	r1, r1, #8
 8006502:	ea52 0501 	orrs.w	r5, r2, r1
 8006506:	d15c      	bne.n	80065c2 <HAL_UART_IRQHandler+0x20e>
        HAL_UART_ErrorCallback(huart);
 8006508:	4620      	mov	r0, r4
 800650a:	f7ff fee7 	bl	80062dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650e:	6465      	str	r5, [r4, #68]	@ 0x44
 8006510:	e76c      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006512:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8006516:	2b22      	cmp	r3, #34	@ 0x22
 8006518:	f47f af68 	bne.w	80063ec <HAL_UART_IRQHandler+0x38>
}
 800651c:	b003      	add	sp, #12
 800651e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006522:	f7ff bee7 	b.w	80062f4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006526:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800652a:	2a21      	cmp	r2, #33	@ 0x21
 800652c:	f47f af5e 	bne.w	80063ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006530:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006532:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006534:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006538:	f000 80d9 	beq.w	80066ee <HAL_UART_IRQHandler+0x33a>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800653c:	1c51      	adds	r1, r2, #1
 800653e:	6221      	str	r1, [r4, #32]
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006544:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8006546:	3a01      	subs	r2, #1
 8006548:	b292      	uxth	r2, r2
 800654a:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800654c:	2a00      	cmp	r2, #0
 800654e:	f47f af4d 	bne.w	80063ec <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006558:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	e743      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8006564:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006566:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8006568:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800656a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800656e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006570:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8006574:	f7ff feae 	bl	80062d4 <HAL_UART_TxCpltCallback>
    return;
 8006578:	e738      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657a:	05e8      	lsls	r0, r5, #23
 800657c:	d49f      	bmi.n	80064be <HAL_UART_IRQHandler+0x10a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800657e:	0750      	lsls	r0, r2, #29
 8006580:	d412      	bmi.n	80065a8 <HAL_UART_IRQHandler+0x1f4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006582:	0790      	lsls	r0, r2, #30
 8006584:	d516      	bpl.n	80065b4 <HAL_UART_IRQHandler+0x200>
 8006586:	2900      	cmp	r1, #0
 8006588:	d0a3      	beq.n	80064d2 <HAL_UART_IRQHandler+0x11e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800658a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800658c:	f041 0104 	orr.w	r1, r1, #4
 8006590:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006592:	0711      	lsls	r1, r2, #28
 8006594:	d5a0      	bpl.n	80064d8 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006596:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006598:	f041 0108 	orr.w	r1, r1, #8
 800659c:	6461      	str	r1, [r4, #68]	@ 0x44
 800659e:	e79b      	b.n	80064d8 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065a0:	07d0      	lsls	r0, r2, #31
 80065a2:	d4ea      	bmi.n	800657a <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a4:	0750      	lsls	r0, r2, #29
 80065a6:	d55b      	bpl.n	8006660 <HAL_UART_IRQHandler+0x2ac>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80065aa:	f040 0002 	orr.w	r0, r0, #2
 80065ae:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b0:	0790      	lsls	r0, r2, #30
 80065b2:	d4ea      	bmi.n	800658a <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065b4:	0710      	lsls	r0, r2, #28
 80065b6:	d58f      	bpl.n	80064d8 <HAL_UART_IRQHandler+0x124>
 80065b8:	f005 0020 	and.w	r0, r5, #32
 80065bc:	4308      	orrs	r0, r1
 80065be:	d08b      	beq.n	80064d8 <HAL_UART_IRQHandler+0x124>
 80065c0:	e7e9      	b.n	8006596 <HAL_UART_IRQHandler+0x1e2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	f103 020c 	add.w	r2, r3, #12
 80065c6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ca:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	f103 000c 	add.w	r0, r3, #12
 80065d2:	e840 2100 	strex	r1, r2, [r0]
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d1f3      	bne.n	80065c2 <HAL_UART_IRQHandler+0x20e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	f103 0214 	add.w	r2, r3, #20
 80065de:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	f103 0014 	add.w	r0, r3, #20
 80065ea:	e840 2100 	strex	r1, r2, [r0]
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d1f3      	bne.n	80065da <HAL_UART_IRQHandler+0x226>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80065f4:	2a01      	cmp	r2, #1
 80065f6:	d022      	beq.n	800663e <HAL_UART_IRQHandler+0x28a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80065fa:	2120      	movs	r1, #32
 80065fc:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	0655      	lsls	r5, r2, #25
 8006606:	d527      	bpl.n	8006658 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	f103 0214 	add.w	r2, r3, #20
 800660c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	f103 0014 	add.w	r0, r3, #20
 8006618:	e840 2100 	strex	r1, r2, [r0]
 800661c:	2900      	cmp	r1, #0
 800661e:	d1f3      	bne.n	8006608 <HAL_UART_IRQHandler+0x254>
          if (huart->hdmarx != NULL)
 8006620:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006622:	b1c8      	cbz	r0, 8006658 <HAL_UART_IRQHandler+0x2a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006624:	4b37      	ldr	r3, [pc, #220]	@ (8006704 <HAL_UART_IRQHandler+0x350>)
 8006626:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006628:	f7fe fa32 	bl	8004a90 <HAL_DMA_Abort_IT>
 800662c:	2800      	cmp	r0, #0
 800662e:	f43f aedd 	beq.w	80063ec <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006632:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006634:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8006636:	b003      	add	sp, #12
 8006638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800663c:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	f103 020c 	add.w	r2, r3, #12
 8006642:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	f103 000c 	add.w	r0, r3, #12
 800664e:	e840 2100 	strex	r1, r2, [r0]
 8006652:	2900      	cmp	r1, #0
 8006654:	d1f3      	bne.n	800663e <HAL_UART_IRQHandler+0x28a>
 8006656:	e7cf      	b.n	80065f8 <HAL_UART_IRQHandler+0x244>
            HAL_UART_ErrorCallback(huart);
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fe3f 	bl	80062dc <HAL_UART_ErrorCallback>
 800665e:	e6c5      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006660:	0791      	lsls	r1, r2, #30
 8006662:	d492      	bmi.n	800658a <HAL_UART_IRQHandler+0x1d6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006664:	0711      	lsls	r1, r2, #28
 8006666:	d496      	bmi.n	8006596 <HAL_UART_IRQHandler+0x1e2>
 8006668:	e736      	b.n	80064d8 <HAL_UART_IRQHandler+0x124>
 800666a:	06a9      	lsls	r1, r5, #26
 800666c:	d493      	bmi.n	8006596 <HAL_UART_IRQHandler+0x1e2>
 800666e:	e733      	b.n	80064d8 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006670:	0750      	lsls	r0, r2, #29
 8006672:	f53f af2c 	bmi.w	80064ce <HAL_UART_IRQHandler+0x11a>
 8006676:	e784      	b.n	8006582 <HAL_UART_IRQHandler+0x1ce>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006678:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 800667a:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800667c:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 800667e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006680:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006682:	2a00      	cmp	r2, #0
 8006684:	f43f aeb2 	beq.w	80063ec <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006688:	1a41      	subs	r1, r0, r1
 800668a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800668c:	2900      	cmp	r1, #0
 800668e:	f43f aead 	beq.w	80063ec <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	f103 020c 	add.w	r2, r3, #12
 8006696:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	f103 050c 	add.w	r5, r3, #12
 80066a2:	e845 2000 	strex	r0, r2, [r5]
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d1f3      	bne.n	8006692 <HAL_UART_IRQHandler+0x2de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	f103 0214 	add.w	r2, r3, #20
 80066ae:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	f103 0514 	add.w	r5, r3, #20
 80066ba:	e845 2000 	strex	r0, r2, [r5]
 80066be:	2800      	cmp	r0, #0
 80066c0:	d1f3      	bne.n	80066aa <HAL_UART_IRQHandler+0x2f6>
        huart->RxState = HAL_UART_STATE_READY;
 80066c2:	2220      	movs	r2, #32
 80066c4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	f103 020c 	add.w	r2, r3, #12
 80066ce:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	f103 050c 	add.w	r5, r3, #12
 80066da:	e845 2000 	strex	r0, r2, [r5]
 80066de:	2800      	cmp	r0, #0
 80066e0:	d1f3      	bne.n	80066ca <HAL_UART_IRQHandler+0x316>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e4:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e6:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066e8:	f7ff fe02 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 80066ec:	e67e      	b.n	80063ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ee:	6921      	ldr	r1, [r4, #16]
 80066f0:	2900      	cmp	r1, #0
 80066f2:	f47f af23 	bne.w	800653c <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066f6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80066fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80066fe:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006700:	6222      	str	r2, [r4, #32]
 8006702:	e71f      	b.n	8006544 <HAL_UART_IRQHandler+0x190>
 8006704:	080062e1 	.word	0x080062e1

08006708 <__assert_func>:
 8006708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800670a:	4614      	mov	r4, r2
 800670c:	461a      	mov	r2, r3
 800670e:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <__assert_func+0x2c>)
 8006710:	4605      	mov	r5, r0
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68d8      	ldr	r0, [r3, #12]
 8006716:	b954      	cbnz	r4, 800672e <__assert_func+0x26>
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <__assert_func+0x30>)
 800671a:	461c      	mov	r4, r3
 800671c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006720:	9100      	str	r1, [sp, #0]
 8006722:	462b      	mov	r3, r5
 8006724:	4905      	ldr	r1, [pc, #20]	@ (800673c <__assert_func+0x34>)
 8006726:	f000 fdc3 	bl	80072b0 <fiprintf>
 800672a:	f000 ff2a 	bl	8007582 <abort>
 800672e:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <__assert_func+0x38>)
 8006730:	e7f4      	b.n	800671c <__assert_func+0x14>
 8006732:	bf00      	nop
 8006734:	20000024 	.word	0x20000024
 8006738:	080095a7 	.word	0x080095a7
 800673c:	08009579 	.word	0x08009579
 8006740:	0800956c 	.word	0x0800956c

08006744 <malloc>:
 8006744:	4b02      	ldr	r3, [pc, #8]	@ (8006750 <malloc+0xc>)
 8006746:	4601      	mov	r1, r0
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	f000 b825 	b.w	8006798 <_malloc_r>
 800674e:	bf00      	nop
 8006750:	20000024 	.word	0x20000024

08006754 <sbrk_aligned>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	4e0f      	ldr	r6, [pc, #60]	@ (8006794 <sbrk_aligned+0x40>)
 8006758:	460c      	mov	r4, r1
 800675a:	6831      	ldr	r1, [r6, #0]
 800675c:	4605      	mov	r5, r0
 800675e:	b911      	cbnz	r1, 8006766 <sbrk_aligned+0x12>
 8006760:	f000 fea4 	bl	80074ac <_sbrk_r>
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 fe9f 	bl	80074ac <_sbrk_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d103      	bne.n	800677a <sbrk_aligned+0x26>
 8006772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006776:	4620      	mov	r0, r4
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	1cc4      	adds	r4, r0, #3
 800677c:	f024 0403 	bic.w	r4, r4, #3
 8006780:	42a0      	cmp	r0, r4
 8006782:	d0f8      	beq.n	8006776 <sbrk_aligned+0x22>
 8006784:	1a21      	subs	r1, r4, r0
 8006786:	4628      	mov	r0, r5
 8006788:	f000 fe90 	bl	80074ac <_sbrk_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d1f2      	bne.n	8006776 <sbrk_aligned+0x22>
 8006790:	e7ef      	b.n	8006772 <sbrk_aligned+0x1e>
 8006792:	bf00      	nop
 8006794:	20000488 	.word	0x20000488

08006798 <_malloc_r>:
 8006798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800679c:	1ccd      	adds	r5, r1, #3
 800679e:	f025 0503 	bic.w	r5, r5, #3
 80067a2:	3508      	adds	r5, #8
 80067a4:	2d0c      	cmp	r5, #12
 80067a6:	bf38      	it	cc
 80067a8:	250c      	movcc	r5, #12
 80067aa:	2d00      	cmp	r5, #0
 80067ac:	4606      	mov	r6, r0
 80067ae:	db01      	blt.n	80067b4 <_malloc_r+0x1c>
 80067b0:	42a9      	cmp	r1, r5
 80067b2:	d904      	bls.n	80067be <_malloc_r+0x26>
 80067b4:	230c      	movs	r3, #12
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	2000      	movs	r0, #0
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006894 <_malloc_r+0xfc>
 80067c2:	f000 f869 	bl	8006898 <__malloc_lock>
 80067c6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ca:	461c      	mov	r4, r3
 80067cc:	bb44      	cbnz	r4, 8006820 <_malloc_r+0x88>
 80067ce:	4629      	mov	r1, r5
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff ffbf 	bl	8006754 <sbrk_aligned>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	4604      	mov	r4, r0
 80067da:	d158      	bne.n	800688e <_malloc_r+0xf6>
 80067dc:	f8d8 4000 	ldr.w	r4, [r8]
 80067e0:	4627      	mov	r7, r4
 80067e2:	2f00      	cmp	r7, #0
 80067e4:	d143      	bne.n	800686e <_malloc_r+0xd6>
 80067e6:	2c00      	cmp	r4, #0
 80067e8:	d04b      	beq.n	8006882 <_malloc_r+0xea>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	4639      	mov	r1, r7
 80067ee:	4630      	mov	r0, r6
 80067f0:	eb04 0903 	add.w	r9, r4, r3
 80067f4:	f000 fe5a 	bl	80074ac <_sbrk_r>
 80067f8:	4581      	cmp	r9, r0
 80067fa:	d142      	bne.n	8006882 <_malloc_r+0xea>
 80067fc:	6821      	ldr	r1, [r4, #0]
 80067fe:	4630      	mov	r0, r6
 8006800:	1a6d      	subs	r5, r5, r1
 8006802:	4629      	mov	r1, r5
 8006804:	f7ff ffa6 	bl	8006754 <sbrk_aligned>
 8006808:	3001      	adds	r0, #1
 800680a:	d03a      	beq.n	8006882 <_malloc_r+0xea>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	442b      	add	r3, r5
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	f8d8 3000 	ldr.w	r3, [r8]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	bb62      	cbnz	r2, 8006874 <_malloc_r+0xdc>
 800681a:	f8c8 7000 	str.w	r7, [r8]
 800681e:	e00f      	b.n	8006840 <_malloc_r+0xa8>
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	1b52      	subs	r2, r2, r5
 8006824:	d420      	bmi.n	8006868 <_malloc_r+0xd0>
 8006826:	2a0b      	cmp	r2, #11
 8006828:	d917      	bls.n	800685a <_malloc_r+0xc2>
 800682a:	1961      	adds	r1, r4, r5
 800682c:	42a3      	cmp	r3, r4
 800682e:	6025      	str	r5, [r4, #0]
 8006830:	bf18      	it	ne
 8006832:	6059      	strne	r1, [r3, #4]
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	bf08      	it	eq
 8006838:	f8c8 1000 	streq.w	r1, [r8]
 800683c:	5162      	str	r2, [r4, r5]
 800683e:	604b      	str	r3, [r1, #4]
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f82f 	bl	80068a4 <__malloc_unlock>
 8006846:	f104 000b 	add.w	r0, r4, #11
 800684a:	1d23      	adds	r3, r4, #4
 800684c:	f020 0007 	bic.w	r0, r0, #7
 8006850:	1ac2      	subs	r2, r0, r3
 8006852:	bf1c      	itt	ne
 8006854:	1a1b      	subne	r3, r3, r0
 8006856:	50a3      	strne	r3, [r4, r2]
 8006858:	e7af      	b.n	80067ba <_malloc_r+0x22>
 800685a:	6862      	ldr	r2, [r4, #4]
 800685c:	42a3      	cmp	r3, r4
 800685e:	bf0c      	ite	eq
 8006860:	f8c8 2000 	streq.w	r2, [r8]
 8006864:	605a      	strne	r2, [r3, #4]
 8006866:	e7eb      	b.n	8006840 <_malloc_r+0xa8>
 8006868:	4623      	mov	r3, r4
 800686a:	6864      	ldr	r4, [r4, #4]
 800686c:	e7ae      	b.n	80067cc <_malloc_r+0x34>
 800686e:	463c      	mov	r4, r7
 8006870:	687f      	ldr	r7, [r7, #4]
 8006872:	e7b6      	b.n	80067e2 <_malloc_r+0x4a>
 8006874:	461a      	mov	r2, r3
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	42a3      	cmp	r3, r4
 800687a:	d1fb      	bne.n	8006874 <_malloc_r+0xdc>
 800687c:	2300      	movs	r3, #0
 800687e:	6053      	str	r3, [r2, #4]
 8006880:	e7de      	b.n	8006840 <_malloc_r+0xa8>
 8006882:	230c      	movs	r3, #12
 8006884:	4630      	mov	r0, r6
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	f000 f80c 	bl	80068a4 <__malloc_unlock>
 800688c:	e794      	b.n	80067b8 <_malloc_r+0x20>
 800688e:	6005      	str	r5, [r0, #0]
 8006890:	e7d6      	b.n	8006840 <_malloc_r+0xa8>
 8006892:	bf00      	nop
 8006894:	2000048c 	.word	0x2000048c

08006898 <__malloc_lock>:
 8006898:	4801      	ldr	r0, [pc, #4]	@ (80068a0 <__malloc_lock+0x8>)
 800689a:	f000 be54 	b.w	8007546 <__retarget_lock_acquire_recursive>
 800689e:	bf00      	nop
 80068a0:	200005d0 	.word	0x200005d0

080068a4 <__malloc_unlock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	@ (80068ac <__malloc_unlock+0x8>)
 80068a6:	f000 be4f 	b.w	8007548 <__retarget_lock_release_recursive>
 80068aa:	bf00      	nop
 80068ac:	200005d0 	.word	0x200005d0

080068b0 <__cvt>:
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b6:	461d      	mov	r5, r3
 80068b8:	bfbb      	ittet	lt
 80068ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80068be:	461d      	movlt	r5, r3
 80068c0:	2300      	movge	r3, #0
 80068c2:	232d      	movlt	r3, #45	@ 0x2d
 80068c4:	b088      	sub	sp, #32
 80068c6:	4614      	mov	r4, r2
 80068c8:	bfb8      	it	lt
 80068ca:	4614      	movlt	r4, r2
 80068cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068d8:	f023 0820 	bic.w	r8, r3, #32
 80068dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068e0:	d005      	beq.n	80068ee <__cvt+0x3e>
 80068e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068e6:	d100      	bne.n	80068ea <__cvt+0x3a>
 80068e8:	3601      	adds	r6, #1
 80068ea:	2302      	movs	r3, #2
 80068ec:	e000      	b.n	80068f0 <__cvt+0x40>
 80068ee:	2303      	movs	r3, #3
 80068f0:	aa07      	add	r2, sp, #28
 80068f2:	9204      	str	r2, [sp, #16]
 80068f4:	aa06      	add	r2, sp, #24
 80068f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068fa:	e9cd 3600 	strd	r3, r6, [sp]
 80068fe:	4622      	mov	r2, r4
 8006900:	462b      	mov	r3, r5
 8006902:	f000 fecd 	bl	80076a0 <_dtoa_r>
 8006906:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800690a:	4607      	mov	r7, r0
 800690c:	d119      	bne.n	8006942 <__cvt+0x92>
 800690e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006910:	07db      	lsls	r3, r3, #31
 8006912:	d50e      	bpl.n	8006932 <__cvt+0x82>
 8006914:	eb00 0906 	add.w	r9, r0, r6
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7fa f842 	bl	80009a8 <__aeabi_dcmpeq>
 8006924:	b108      	cbz	r0, 800692a <__cvt+0x7a>
 8006926:	f8cd 901c 	str.w	r9, [sp, #28]
 800692a:	2230      	movs	r2, #48	@ 0x30
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	454b      	cmp	r3, r9
 8006930:	d31e      	bcc.n	8006970 <__cvt+0xc0>
 8006932:	4638      	mov	r0, r7
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006938:	1bdb      	subs	r3, r3, r7
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	b008      	add	sp, #32
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006946:	eb00 0906 	add.w	r9, r0, r6
 800694a:	d1e5      	bne.n	8006918 <__cvt+0x68>
 800694c:	7803      	ldrb	r3, [r0, #0]
 800694e:	2b30      	cmp	r3, #48	@ 0x30
 8006950:	d10a      	bne.n	8006968 <__cvt+0xb8>
 8006952:	2200      	movs	r2, #0
 8006954:	2300      	movs	r3, #0
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7fa f825 	bl	80009a8 <__aeabi_dcmpeq>
 800695e:	b918      	cbnz	r0, 8006968 <__cvt+0xb8>
 8006960:	f1c6 0601 	rsb	r6, r6, #1
 8006964:	f8ca 6000 	str.w	r6, [sl]
 8006968:	f8da 3000 	ldr.w	r3, [sl]
 800696c:	4499      	add	r9, r3
 800696e:	e7d3      	b.n	8006918 <__cvt+0x68>
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	9107      	str	r1, [sp, #28]
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	e7d9      	b.n	800692c <__cvt+0x7c>

08006978 <__exponent>:
 8006978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800697a:	2900      	cmp	r1, #0
 800697c:	bfb6      	itet	lt
 800697e:	232d      	movlt	r3, #45	@ 0x2d
 8006980:	232b      	movge	r3, #43	@ 0x2b
 8006982:	4249      	neglt	r1, r1
 8006984:	2909      	cmp	r1, #9
 8006986:	7002      	strb	r2, [r0, #0]
 8006988:	7043      	strb	r3, [r0, #1]
 800698a:	dd29      	ble.n	80069e0 <__exponent+0x68>
 800698c:	f10d 0307 	add.w	r3, sp, #7
 8006990:	461d      	mov	r5, r3
 8006992:	270a      	movs	r7, #10
 8006994:	fbb1 f6f7 	udiv	r6, r1, r7
 8006998:	461a      	mov	r2, r3
 800699a:	fb07 1416 	mls	r4, r7, r6, r1
 800699e:	3430      	adds	r4, #48	@ 0x30
 80069a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069a4:	460c      	mov	r4, r1
 80069a6:	2c63      	cmp	r4, #99	@ 0x63
 80069a8:	4631      	mov	r1, r6
 80069aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069ae:	dcf1      	bgt.n	8006994 <__exponent+0x1c>
 80069b0:	3130      	adds	r1, #48	@ 0x30
 80069b2:	1e94      	subs	r4, r2, #2
 80069b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069b8:	4623      	mov	r3, r4
 80069ba:	1c41      	adds	r1, r0, #1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	d30a      	bcc.n	80069d6 <__exponent+0x5e>
 80069c0:	f10d 0309 	add.w	r3, sp, #9
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	42ac      	cmp	r4, r5
 80069c8:	bf88      	it	hi
 80069ca:	2300      	movhi	r3, #0
 80069cc:	3302      	adds	r3, #2
 80069ce:	4403      	add	r3, r0
 80069d0:	1a18      	subs	r0, r3, r0
 80069d2:	b003      	add	sp, #12
 80069d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069de:	e7ed      	b.n	80069bc <__exponent+0x44>
 80069e0:	2330      	movs	r3, #48	@ 0x30
 80069e2:	3130      	adds	r1, #48	@ 0x30
 80069e4:	7083      	strb	r3, [r0, #2]
 80069e6:	70c1      	strb	r1, [r0, #3]
 80069e8:	1d03      	adds	r3, r0, #4
 80069ea:	e7f1      	b.n	80069d0 <__exponent+0x58>

080069ec <_printf_float>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	b091      	sub	sp, #68	@ 0x44
 80069f2:	460c      	mov	r4, r1
 80069f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069f8:	4616      	mov	r6, r2
 80069fa:	461f      	mov	r7, r3
 80069fc:	4605      	mov	r5, r0
 80069fe:	f000 fd1d 	bl	800743c <_localeconv_r>
 8006a02:	6803      	ldr	r3, [r0, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	9308      	str	r3, [sp, #32]
 8006a08:	f7f9 fba2 	bl	8000150 <strlen>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a10:	f8d8 3000 	ldr.w	r3, [r8]
 8006a14:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a16:	3307      	adds	r3, #7
 8006a18:	f023 0307 	bic.w	r3, r3, #7
 8006a1c:	f103 0208 	add.w	r2, r3, #8
 8006a20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a24:	f8d4 b000 	ldr.w	fp, [r4]
 8006a28:	f8c8 2000 	str.w	r2, [r8]
 8006a2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a36:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a46:	4b9c      	ldr	r3, [pc, #624]	@ (8006cb8 <_printf_float+0x2cc>)
 8006a48:	f7f9 ffe0 	bl	8000a0c <__aeabi_dcmpun>
 8006a4c:	bb70      	cbnz	r0, 8006aac <_printf_float+0xc0>
 8006a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a56:	4b98      	ldr	r3, [pc, #608]	@ (8006cb8 <_printf_float+0x2cc>)
 8006a58:	f7f9 ffba 	bl	80009d0 <__aeabi_dcmple>
 8006a5c:	bb30      	cbnz	r0, 8006aac <_printf_float+0xc0>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2300      	movs	r3, #0
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 ffa9 	bl	80009bc <__aeabi_dcmplt>
 8006a6a:	b110      	cbz	r0, 8006a72 <_printf_float+0x86>
 8006a6c:	232d      	movs	r3, #45	@ 0x2d
 8006a6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a72:	4a92      	ldr	r2, [pc, #584]	@ (8006cbc <_printf_float+0x2d0>)
 8006a74:	4b92      	ldr	r3, [pc, #584]	@ (8006cc0 <_printf_float+0x2d4>)
 8006a76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a7a:	bf94      	ite	ls
 8006a7c:	4690      	movls	r8, r2
 8006a7e:	4698      	movhi	r8, r3
 8006a80:	2303      	movs	r3, #3
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	f02b 0304 	bic.w	r3, fp, #4
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	4633      	mov	r3, r6
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	9700      	str	r7, [sp, #0]
 8006a96:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a98:	f000 f9d4 	bl	8006e44 <_printf_common>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f040 8090 	bne.w	8006bc2 <_printf_float+0x1d6>
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aa6:	b011      	add	sp, #68	@ 0x44
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7f9 ffaa 	bl	8000a0c <__aeabi_dcmpun>
 8006ab8:	b148      	cbz	r0, 8006ace <_printf_float+0xe2>
 8006aba:	464b      	mov	r3, r9
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfb8      	it	lt
 8006ac0:	232d      	movlt	r3, #45	@ 0x2d
 8006ac2:	4a80      	ldr	r2, [pc, #512]	@ (8006cc4 <_printf_float+0x2d8>)
 8006ac4:	bfb8      	it	lt
 8006ac6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006aca:	4b7f      	ldr	r3, [pc, #508]	@ (8006cc8 <_printf_float+0x2dc>)
 8006acc:	e7d3      	b.n	8006a76 <_printf_float+0x8a>
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	d13f      	bne.n	8006b58 <_printf_float+0x16c>
 8006ad8:	2306      	movs	r3, #6
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	9206      	str	r2, [sp, #24]
 8006ae6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ae8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006aec:	aa0d      	add	r2, sp, #52	@ 0x34
 8006aee:	9203      	str	r2, [sp, #12]
 8006af0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006af4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	4642      	mov	r2, r8
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4628      	mov	r0, r5
 8006b00:	464b      	mov	r3, r9
 8006b02:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b04:	f7ff fed4 	bl	80068b0 <__cvt>
 8006b08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	2947      	cmp	r1, #71	@ 0x47
 8006b0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006b10:	d128      	bne.n	8006b64 <_printf_float+0x178>
 8006b12:	1cc8      	adds	r0, r1, #3
 8006b14:	db02      	blt.n	8006b1c <_printf_float+0x130>
 8006b16:	6863      	ldr	r3, [r4, #4]
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	dd40      	ble.n	8006b9e <_printf_float+0x1b2>
 8006b1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b20:	fa5f fa8a 	uxtb.w	sl, sl
 8006b24:	4652      	mov	r2, sl
 8006b26:	3901      	subs	r1, #1
 8006b28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b2c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b2e:	f7ff ff23 	bl	8006978 <__exponent>
 8006b32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b34:	4681      	mov	r9, r0
 8006b36:	1813      	adds	r3, r2, r0
 8006b38:	2a01      	cmp	r2, #1
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	dc02      	bgt.n	8006b44 <_printf_float+0x158>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	07d2      	lsls	r2, r2, #31
 8006b42:	d501      	bpl.n	8006b48 <_printf_float+0x15c>
 8006b44:	3301      	adds	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d09e      	beq.n	8006a8e <_printf_float+0xa2>
 8006b50:	232d      	movs	r3, #45	@ 0x2d
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b56:	e79a      	b.n	8006a8e <_printf_float+0xa2>
 8006b58:	2947      	cmp	r1, #71	@ 0x47
 8006b5a:	d1bf      	bne.n	8006adc <_printf_float+0xf0>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1bd      	bne.n	8006adc <_printf_float+0xf0>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e7ba      	b.n	8006ada <_printf_float+0xee>
 8006b64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b68:	d9dc      	bls.n	8006b24 <_printf_float+0x138>
 8006b6a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b6e:	d118      	bne.n	8006ba2 <_printf_float+0x1b6>
 8006b70:	2900      	cmp	r1, #0
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	dd0b      	ble.n	8006b8e <_printf_float+0x1a2>
 8006b76:	6121      	str	r1, [r4, #16]
 8006b78:	b913      	cbnz	r3, 8006b80 <_printf_float+0x194>
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	07d0      	lsls	r0, r2, #31
 8006b7e:	d502      	bpl.n	8006b86 <_printf_float+0x19a>
 8006b80:	3301      	adds	r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b8c:	e7dc      	b.n	8006b48 <_printf_float+0x15c>
 8006b8e:	b913      	cbnz	r3, 8006b96 <_printf_float+0x1aa>
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	07d2      	lsls	r2, r2, #31
 8006b94:	d501      	bpl.n	8006b9a <_printf_float+0x1ae>
 8006b96:	3302      	adds	r3, #2
 8006b98:	e7f4      	b.n	8006b84 <_printf_float+0x198>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e7f2      	b.n	8006b84 <_printf_float+0x198>
 8006b9e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	db05      	blt.n	8006bb4 <_printf_float+0x1c8>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	6121      	str	r1, [r4, #16]
 8006bac:	07d8      	lsls	r0, r3, #31
 8006bae:	d5ea      	bpl.n	8006b86 <_printf_float+0x19a>
 8006bb0:	1c4b      	adds	r3, r1, #1
 8006bb2:	e7e7      	b.n	8006b84 <_printf_float+0x198>
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	bfcc      	ite	gt
 8006bb8:	2201      	movgt	r2, #1
 8006bba:	f1c1 0202 	rsble	r2, r1, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	e7e0      	b.n	8006b84 <_printf_float+0x198>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	055a      	lsls	r2, r3, #21
 8006bc6:	d407      	bmi.n	8006bd8 <_printf_float+0x1ec>
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	4642      	mov	r2, r8
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d12b      	bne.n	8006c2e <_printf_float+0x242>
 8006bd6:	e764      	b.n	8006aa2 <_printf_float+0xb6>
 8006bd8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bdc:	f240 80dc 	bls.w	8006d98 <_printf_float+0x3ac>
 8006be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	f7f9 fede 	bl	80009a8 <__aeabi_dcmpeq>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d033      	beq.n	8006c58 <_printf_float+0x26c>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	4a35      	ldr	r2, [pc, #212]	@ (8006ccc <_printf_float+0x2e0>)
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f af51 	beq.w	8006aa2 <_printf_float+0xb6>
 8006c00:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006c04:	4543      	cmp	r3, r8
 8006c06:	db02      	blt.n	8006c0e <_printf_float+0x222>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	07d8      	lsls	r0, r3, #31
 8006c0c:	d50f      	bpl.n	8006c2e <_printf_float+0x242>
 8006c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f af42 	beq.w	8006aa2 <_printf_float+0xb6>
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c26:	f104 0a1a 	add.w	sl, r4, #26
 8006c2a:	45c8      	cmp	r8, r9
 8006c2c:	dc09      	bgt.n	8006c42 <_printf_float+0x256>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	079b      	lsls	r3, r3, #30
 8006c32:	f100 8102 	bmi.w	8006e3a <_printf_float+0x44e>
 8006c36:	68e0      	ldr	r0, [r4, #12]
 8006c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c3a:	4298      	cmp	r0, r3
 8006c3c:	bfb8      	it	lt
 8006c3e:	4618      	movlt	r0, r3
 8006c40:	e731      	b.n	8006aa6 <_printf_float+0xba>
 8006c42:	2301      	movs	r3, #1
 8006c44:	4652      	mov	r2, sl
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f43f af28 	beq.w	8006aa2 <_printf_float+0xb6>
 8006c52:	f109 0901 	add.w	r9, r9, #1
 8006c56:	e7e8      	b.n	8006c2a <_printf_float+0x23e>
 8006c58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dc38      	bgt.n	8006cd0 <_printf_float+0x2e4>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	4a19      	ldr	r2, [pc, #100]	@ (8006ccc <_printf_float+0x2e0>)
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f af1a 	beq.w	8006aa2 <_printf_float+0xb6>
 8006c6e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c72:	ea59 0303 	orrs.w	r3, r9, r3
 8006c76:	d102      	bne.n	8006c7e <_printf_float+0x292>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	07d9      	lsls	r1, r3, #31
 8006c7c:	d5d7      	bpl.n	8006c2e <_printf_float+0x242>
 8006c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f43f af0a 	beq.w	8006aa2 <_printf_float+0xb6>
 8006c8e:	f04f 0a00 	mov.w	sl, #0
 8006c92:	f104 0b1a 	add.w	fp, r4, #26
 8006c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c98:	425b      	negs	r3, r3
 8006c9a:	4553      	cmp	r3, sl
 8006c9c:	dc01      	bgt.n	8006ca2 <_printf_float+0x2b6>
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	e793      	b.n	8006bca <_printf_float+0x1de>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	465a      	mov	r2, fp
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f aef8 	beq.w	8006aa2 <_printf_float+0xb6>
 8006cb2:	f10a 0a01 	add.w	sl, sl, #1
 8006cb6:	e7ee      	b.n	8006c96 <_printf_float+0x2aa>
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	080095a8 	.word	0x080095a8
 8006cc0:	080095ac 	.word	0x080095ac
 8006cc4:	080095b0 	.word	0x080095b0
 8006cc8:	080095b4 	.word	0x080095b4
 8006ccc:	080095b8 	.word	0x080095b8
 8006cd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cd2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cd6:	4553      	cmp	r3, sl
 8006cd8:	bfa8      	it	ge
 8006cda:	4653      	movge	r3, sl
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	4699      	mov	r9, r3
 8006ce0:	dc36      	bgt.n	8006d50 <_printf_float+0x364>
 8006ce2:	f04f 0b00 	mov.w	fp, #0
 8006ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cea:	f104 021a 	add.w	r2, r4, #26
 8006cee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf2:	eba3 0309 	sub.w	r3, r3, r9
 8006cf6:	455b      	cmp	r3, fp
 8006cf8:	dc31      	bgt.n	8006d5e <_printf_float+0x372>
 8006cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cfc:	459a      	cmp	sl, r3
 8006cfe:	dc3a      	bgt.n	8006d76 <_printf_float+0x38a>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d437      	bmi.n	8006d76 <_printf_float+0x38a>
 8006d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d08:	ebaa 0903 	sub.w	r9, sl, r3
 8006d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d12:	4599      	cmp	r9, r3
 8006d14:	bfa8      	it	ge
 8006d16:	4699      	movge	r9, r3
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	dc33      	bgt.n	8006d86 <_printf_float+0x39a>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d26:	f104 0b1a 	add.w	fp, r4, #26
 8006d2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d2c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d30:	eba3 0309 	sub.w	r3, r3, r9
 8006d34:	4543      	cmp	r3, r8
 8006d36:	f77f af7a 	ble.w	8006c2e <_printf_float+0x242>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	465a      	mov	r2, fp
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f aeac 	beq.w	8006aa2 <_printf_float+0xb6>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	e7ec      	b.n	8006d2a <_printf_float+0x33e>
 8006d50:	4642      	mov	r2, r8
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1c2      	bne.n	8006ce2 <_printf_float+0x2f6>
 8006d5c:	e6a1      	b.n	8006aa2 <_printf_float+0xb6>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f ae9a 	beq.w	8006aa2 <_printf_float+0xb6>
 8006d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d70:	f10b 0b01 	add.w	fp, fp, #1
 8006d74:	e7bb      	b.n	8006cee <_printf_float+0x302>
 8006d76:	4631      	mov	r1, r6
 8006d78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	d1c0      	bne.n	8006d06 <_printf_float+0x31a>
 8006d84:	e68d      	b.n	8006aa2 <_printf_float+0xb6>
 8006d86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d88:	464b      	mov	r3, r9
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	4442      	add	r2, r8
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d1c3      	bne.n	8006d1e <_printf_float+0x332>
 8006d96:	e684      	b.n	8006aa2 <_printf_float+0xb6>
 8006d98:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d9c:	f1ba 0f01 	cmp.w	sl, #1
 8006da0:	dc01      	bgt.n	8006da6 <_printf_float+0x3ba>
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d536      	bpl.n	8006e14 <_printf_float+0x428>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae76 	beq.w	8006aa2 <_printf_float+0xb6>
 8006db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f ae6e 	beq.w	8006aa2 <_printf_float+0xb6>
 8006dc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006dd2:	f7f9 fde9 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd6:	b9c0      	cbnz	r0, 8006e0a <_printf_float+0x41e>
 8006dd8:	4653      	mov	r3, sl
 8006dda:	f108 0201 	add.w	r2, r8, #1
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	d10c      	bne.n	8006e02 <_printf_float+0x416>
 8006de8:	e65b      	b.n	8006aa2 <_printf_float+0xb6>
 8006dea:	2301      	movs	r3, #1
 8006dec:	465a      	mov	r2, fp
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	f43f ae54 	beq.w	8006aa2 <_printf_float+0xb6>
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	45d0      	cmp	r8, sl
 8006e00:	dbf3      	blt.n	8006dea <_printf_float+0x3fe>
 8006e02:	464b      	mov	r3, r9
 8006e04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e08:	e6e0      	b.n	8006bcc <_printf_float+0x1e0>
 8006e0a:	f04f 0800 	mov.w	r8, #0
 8006e0e:	f104 0b1a 	add.w	fp, r4, #26
 8006e12:	e7f4      	b.n	8006dfe <_printf_float+0x412>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4642      	mov	r2, r8
 8006e18:	e7e1      	b.n	8006dde <_printf_float+0x3f2>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	464a      	mov	r2, r9
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f ae3c 	beq.w	8006aa2 <_printf_float+0xb6>
 8006e2a:	f108 0801 	add.w	r8, r8, #1
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	4543      	cmp	r3, r8
 8006e36:	dcf0      	bgt.n	8006e1a <_printf_float+0x42e>
 8006e38:	e6fd      	b.n	8006c36 <_printf_float+0x24a>
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	f104 0919 	add.w	r9, r4, #25
 8006e42:	e7f4      	b.n	8006e2e <_printf_float+0x442>

08006e44 <_printf_common>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	4616      	mov	r6, r2
 8006e4a:	4698      	mov	r8, r3
 8006e4c:	688a      	ldr	r2, [r1, #8]
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	4607      	mov	r7, r0
 8006e52:	4293      	cmp	r3, r2
 8006e54:	bfb8      	it	lt
 8006e56:	4613      	movlt	r3, r2
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e5e:	460c      	mov	r4, r1
 8006e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e64:	b10a      	cbz	r2, 8006e6a <_printf_common+0x26>
 8006e66:	3301      	adds	r3, #1
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	0699      	lsls	r1, r3, #26
 8006e6e:	bf42      	ittt	mi
 8006e70:	6833      	ldrmi	r3, [r6, #0]
 8006e72:	3302      	addmi	r3, #2
 8006e74:	6033      	strmi	r3, [r6, #0]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d106      	bne.n	8006e8c <_printf_common+0x48>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc2b      	bgt.n	8006ee4 <_printf_common+0xa0>
 8006e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	3b00      	subs	r3, #0
 8006e94:	bf18      	it	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	0692      	lsls	r2, r2, #26
 8006e9a:	d430      	bmi.n	8006efe <_printf_common+0xba>
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea4:	47c8      	blx	r9
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d023      	beq.n	8006ef2 <_printf_common+0xae>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	bf14      	ite	ne
 8006eb6:	2500      	movne	r5, #0
 8006eb8:	6833      	ldreq	r3, [r6, #0]
 8006eba:	f04f 0600 	mov.w	r6, #0
 8006ebe:	bf08      	it	eq
 8006ec0:	68e5      	ldreq	r5, [r4, #12]
 8006ec2:	f104 041a 	add.w	r4, r4, #26
 8006ec6:	bf08      	it	eq
 8006ec8:	1aed      	subeq	r5, r5, r3
 8006eca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ece:	bf08      	it	eq
 8006ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	bfc4      	itt	gt
 8006ed8:	1a9b      	subgt	r3, r3, r2
 8006eda:	18ed      	addgt	r5, r5, r3
 8006edc:	42b5      	cmp	r5, r6
 8006ede:	d11a      	bne.n	8006f16 <_printf_common+0xd2>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	e008      	b.n	8006ef6 <_printf_common+0xb2>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4652      	mov	r2, sl
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c8      	blx	r9
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d103      	bne.n	8006efa <_printf_common+0xb6>
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efa:	3501      	adds	r5, #1
 8006efc:	e7c1      	b.n	8006e82 <_printf_common+0x3e>
 8006efe:	2030      	movs	r0, #48	@ 0x30
 8006f00:	18e1      	adds	r1, r4, r3
 8006f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f0c:	4422      	add	r2, r4
 8006f0e:	3302      	adds	r3, #2
 8006f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f14:	e7c2      	b.n	8006e9c <_printf_common+0x58>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	47c8      	blx	r9
 8006f20:	3001      	adds	r0, #1
 8006f22:	d0e6      	beq.n	8006ef2 <_printf_common+0xae>
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7d9      	b.n	8006edc <_printf_common+0x98>

08006f28 <_printf_i>:
 8006f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2c:	7e0f      	ldrb	r7, [r1, #24]
 8006f2e:	4691      	mov	r9, r2
 8006f30:	2f78      	cmp	r7, #120	@ 0x78
 8006f32:	4680      	mov	r8, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	469a      	mov	sl, r3
 8006f38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f3e:	d807      	bhi.n	8006f50 <_printf_i+0x28>
 8006f40:	2f62      	cmp	r7, #98	@ 0x62
 8006f42:	d80a      	bhi.n	8006f5a <_printf_i+0x32>
 8006f44:	2f00      	cmp	r7, #0
 8006f46:	f000 80d3 	beq.w	80070f0 <_printf_i+0x1c8>
 8006f4a:	2f58      	cmp	r7, #88	@ 0x58
 8006f4c:	f000 80ba 	beq.w	80070c4 <_printf_i+0x19c>
 8006f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f58:	e03a      	b.n	8006fd0 <_printf_i+0xa8>
 8006f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f5e:	2b15      	cmp	r3, #21
 8006f60:	d8f6      	bhi.n	8006f50 <_printf_i+0x28>
 8006f62:	a101      	add	r1, pc, #4	@ (adr r1, 8006f68 <_printf_i+0x40>)
 8006f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f68:	08006fc1 	.word	0x08006fc1
 8006f6c:	08006fd5 	.word	0x08006fd5
 8006f70:	08006f51 	.word	0x08006f51
 8006f74:	08006f51 	.word	0x08006f51
 8006f78:	08006f51 	.word	0x08006f51
 8006f7c:	08006f51 	.word	0x08006f51
 8006f80:	08006fd5 	.word	0x08006fd5
 8006f84:	08006f51 	.word	0x08006f51
 8006f88:	08006f51 	.word	0x08006f51
 8006f8c:	08006f51 	.word	0x08006f51
 8006f90:	08006f51 	.word	0x08006f51
 8006f94:	080070d7 	.word	0x080070d7
 8006f98:	08006fff 	.word	0x08006fff
 8006f9c:	08007091 	.word	0x08007091
 8006fa0:	08006f51 	.word	0x08006f51
 8006fa4:	08006f51 	.word	0x08006f51
 8006fa8:	080070f9 	.word	0x080070f9
 8006fac:	08006f51 	.word	0x08006f51
 8006fb0:	08006fff 	.word	0x08006fff
 8006fb4:	08006f51 	.word	0x08006f51
 8006fb8:	08006f51 	.word	0x08006f51
 8006fbc:	08007099 	.word	0x08007099
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6032      	str	r2, [r6, #0]
 8006fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e09e      	b.n	8007112 <_printf_i+0x1ea>
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	1d19      	adds	r1, r3, #4
 8006fda:	6031      	str	r1, [r6, #0]
 8006fdc:	0606      	lsls	r6, r0, #24
 8006fde:	d501      	bpl.n	8006fe4 <_printf_i+0xbc>
 8006fe0:	681d      	ldr	r5, [r3, #0]
 8006fe2:	e003      	b.n	8006fec <_printf_i+0xc4>
 8006fe4:	0645      	lsls	r5, r0, #25
 8006fe6:	d5fb      	bpl.n	8006fe0 <_printf_i+0xb8>
 8006fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	da03      	bge.n	8006ff8 <_printf_i+0xd0>
 8006ff0:	232d      	movs	r3, #45	@ 0x2d
 8006ff2:	426d      	negs	r5, r5
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff8:	230a      	movs	r3, #10
 8006ffa:	4859      	ldr	r0, [pc, #356]	@ (8007160 <_printf_i+0x238>)
 8006ffc:	e011      	b.n	8007022 <_printf_i+0xfa>
 8006ffe:	6821      	ldr	r1, [r4, #0]
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	0608      	lsls	r0, r1, #24
 8007004:	f853 5b04 	ldr.w	r5, [r3], #4
 8007008:	d402      	bmi.n	8007010 <_printf_i+0xe8>
 800700a:	0649      	lsls	r1, r1, #25
 800700c:	bf48      	it	mi
 800700e:	b2ad      	uxthmi	r5, r5
 8007010:	2f6f      	cmp	r7, #111	@ 0x6f
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	bf14      	ite	ne
 8007016:	230a      	movne	r3, #10
 8007018:	2308      	moveq	r3, #8
 800701a:	4851      	ldr	r0, [pc, #324]	@ (8007160 <_printf_i+0x238>)
 800701c:	2100      	movs	r1, #0
 800701e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007022:	6866      	ldr	r6, [r4, #4]
 8007024:	2e00      	cmp	r6, #0
 8007026:	bfa8      	it	ge
 8007028:	6821      	ldrge	r1, [r4, #0]
 800702a:	60a6      	str	r6, [r4, #8]
 800702c:	bfa4      	itt	ge
 800702e:	f021 0104 	bicge.w	r1, r1, #4
 8007032:	6021      	strge	r1, [r4, #0]
 8007034:	b90d      	cbnz	r5, 800703a <_printf_i+0x112>
 8007036:	2e00      	cmp	r6, #0
 8007038:	d04b      	beq.n	80070d2 <_printf_i+0x1aa>
 800703a:	4616      	mov	r6, r2
 800703c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007040:	fb03 5711 	mls	r7, r3, r1, r5
 8007044:	5dc7      	ldrb	r7, [r0, r7]
 8007046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800704a:	462f      	mov	r7, r5
 800704c:	42bb      	cmp	r3, r7
 800704e:	460d      	mov	r5, r1
 8007050:	d9f4      	bls.n	800703c <_printf_i+0x114>
 8007052:	2b08      	cmp	r3, #8
 8007054:	d10b      	bne.n	800706e <_printf_i+0x146>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	07df      	lsls	r7, r3, #31
 800705a:	d508      	bpl.n	800706e <_printf_i+0x146>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	6861      	ldr	r1, [r4, #4]
 8007060:	4299      	cmp	r1, r3
 8007062:	bfde      	ittt	le
 8007064:	2330      	movle	r3, #48	@ 0x30
 8007066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800706a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800706e:	1b92      	subs	r2, r2, r6
 8007070:	6122      	str	r2, [r4, #16]
 8007072:	464b      	mov	r3, r9
 8007074:	4621      	mov	r1, r4
 8007076:	4640      	mov	r0, r8
 8007078:	f8cd a000 	str.w	sl, [sp]
 800707c:	aa03      	add	r2, sp, #12
 800707e:	f7ff fee1 	bl	8006e44 <_printf_common>
 8007082:	3001      	adds	r0, #1
 8007084:	d14a      	bne.n	800711c <_printf_i+0x1f4>
 8007086:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800708a:	b004      	add	sp, #16
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	f043 0320 	orr.w	r3, r3, #32
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	2778      	movs	r7, #120	@ 0x78
 800709a:	4832      	ldr	r0, [pc, #200]	@ (8007164 <_printf_i+0x23c>)
 800709c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	6831      	ldr	r1, [r6, #0]
 80070a4:	061f      	lsls	r7, r3, #24
 80070a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80070aa:	d402      	bmi.n	80070b2 <_printf_i+0x18a>
 80070ac:	065f      	lsls	r7, r3, #25
 80070ae:	bf48      	it	mi
 80070b0:	b2ad      	uxthmi	r5, r5
 80070b2:	6031      	str	r1, [r6, #0]
 80070b4:	07d9      	lsls	r1, r3, #31
 80070b6:	bf44      	itt	mi
 80070b8:	f043 0320 	orrmi.w	r3, r3, #32
 80070bc:	6023      	strmi	r3, [r4, #0]
 80070be:	b11d      	cbz	r5, 80070c8 <_printf_i+0x1a0>
 80070c0:	2310      	movs	r3, #16
 80070c2:	e7ab      	b.n	800701c <_printf_i+0xf4>
 80070c4:	4826      	ldr	r0, [pc, #152]	@ (8007160 <_printf_i+0x238>)
 80070c6:	e7e9      	b.n	800709c <_printf_i+0x174>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	f023 0320 	bic.w	r3, r3, #32
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	e7f6      	b.n	80070c0 <_printf_i+0x198>
 80070d2:	4616      	mov	r6, r2
 80070d4:	e7bd      	b.n	8007052 <_printf_i+0x12a>
 80070d6:	6833      	ldr	r3, [r6, #0]
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	1d18      	adds	r0, r3, #4
 80070dc:	6961      	ldr	r1, [r4, #20]
 80070de:	6030      	str	r0, [r6, #0]
 80070e0:	062e      	lsls	r6, r5, #24
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	d501      	bpl.n	80070ea <_printf_i+0x1c2>
 80070e6:	6019      	str	r1, [r3, #0]
 80070e8:	e002      	b.n	80070f0 <_printf_i+0x1c8>
 80070ea:	0668      	lsls	r0, r5, #25
 80070ec:	d5fb      	bpl.n	80070e6 <_printf_i+0x1be>
 80070ee:	8019      	strh	r1, [r3, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	4616      	mov	r6, r2
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	e7bc      	b.n	8007072 <_printf_i+0x14a>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	2100      	movs	r1, #0
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	6032      	str	r2, [r6, #0]
 8007100:	681e      	ldr	r6, [r3, #0]
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	4630      	mov	r0, r6
 8007106:	f000 fa20 	bl	800754a <memchr>
 800710a:	b108      	cbz	r0, 8007110 <_printf_i+0x1e8>
 800710c:	1b80      	subs	r0, r0, r6
 800710e:	6060      	str	r0, [r4, #4]
 8007110:	6863      	ldr	r3, [r4, #4]
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	2300      	movs	r3, #0
 8007116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711a:	e7aa      	b.n	8007072 <_printf_i+0x14a>
 800711c:	4632      	mov	r2, r6
 800711e:	4649      	mov	r1, r9
 8007120:	4640      	mov	r0, r8
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	47d0      	blx	sl
 8007126:	3001      	adds	r0, #1
 8007128:	d0ad      	beq.n	8007086 <_printf_i+0x15e>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	079b      	lsls	r3, r3, #30
 800712e:	d413      	bmi.n	8007158 <_printf_i+0x230>
 8007130:	68e0      	ldr	r0, [r4, #12]
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	4298      	cmp	r0, r3
 8007136:	bfb8      	it	lt
 8007138:	4618      	movlt	r0, r3
 800713a:	e7a6      	b.n	800708a <_printf_i+0x162>
 800713c:	2301      	movs	r3, #1
 800713e:	4632      	mov	r2, r6
 8007140:	4649      	mov	r1, r9
 8007142:	4640      	mov	r0, r8
 8007144:	47d0      	blx	sl
 8007146:	3001      	adds	r0, #1
 8007148:	d09d      	beq.n	8007086 <_printf_i+0x15e>
 800714a:	3501      	adds	r5, #1
 800714c:	68e3      	ldr	r3, [r4, #12]
 800714e:	9903      	ldr	r1, [sp, #12]
 8007150:	1a5b      	subs	r3, r3, r1
 8007152:	42ab      	cmp	r3, r5
 8007154:	dcf2      	bgt.n	800713c <_printf_i+0x214>
 8007156:	e7eb      	b.n	8007130 <_printf_i+0x208>
 8007158:	2500      	movs	r5, #0
 800715a:	f104 0619 	add.w	r6, r4, #25
 800715e:	e7f5      	b.n	800714c <_printf_i+0x224>
 8007160:	080095ba 	.word	0x080095ba
 8007164:	080095cb 	.word	0x080095cb

08007168 <std>:
 8007168:	2300      	movs	r3, #0
 800716a:	b510      	push	{r4, lr}
 800716c:	4604      	mov	r4, r0
 800716e:	e9c0 3300 	strd	r3, r3, [r0]
 8007172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007176:	6083      	str	r3, [r0, #8]
 8007178:	8181      	strh	r1, [r0, #12]
 800717a:	6643      	str	r3, [r0, #100]	@ 0x64
 800717c:	81c2      	strh	r2, [r0, #14]
 800717e:	6183      	str	r3, [r0, #24]
 8007180:	4619      	mov	r1, r3
 8007182:	2208      	movs	r2, #8
 8007184:	305c      	adds	r0, #92	@ 0x5c
 8007186:	f000 f950 	bl	800742a <memset>
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <std+0x58>)
 800718c:	6224      	str	r4, [r4, #32]
 800718e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007190:	4b0c      	ldr	r3, [pc, #48]	@ (80071c4 <std+0x5c>)
 8007192:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <std+0x60>)
 8007196:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007198:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <std+0x64>)
 800719a:	6323      	str	r3, [r4, #48]	@ 0x30
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <std+0x68>)
 800719e:	429c      	cmp	r4, r3
 80071a0:	d006      	beq.n	80071b0 <std+0x48>
 80071a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071a6:	4294      	cmp	r4, r2
 80071a8:	d002      	beq.n	80071b0 <std+0x48>
 80071aa:	33d0      	adds	r3, #208	@ 0xd0
 80071ac:	429c      	cmp	r4, r3
 80071ae:	d105      	bne.n	80071bc <std+0x54>
 80071b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b8:	f000 b9c4 	b.w	8007544 <__retarget_lock_init_recursive>
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop
 80071c0:	08007351 	.word	0x08007351
 80071c4:	08007373 	.word	0x08007373
 80071c8:	080073ab 	.word	0x080073ab
 80071cc:	080073cf 	.word	0x080073cf
 80071d0:	20000490 	.word	0x20000490

080071d4 <stdio_exit_handler>:
 80071d4:	4a02      	ldr	r2, [pc, #8]	@ (80071e0 <stdio_exit_handler+0xc>)
 80071d6:	4903      	ldr	r1, [pc, #12]	@ (80071e4 <stdio_exit_handler+0x10>)
 80071d8:	4803      	ldr	r0, [pc, #12]	@ (80071e8 <stdio_exit_handler+0x14>)
 80071da:	f000 b87b 	b.w	80072d4 <_fwalk_sglue>
 80071de:	bf00      	nop
 80071e0:	20000018 	.word	0x20000018
 80071e4:	08008ff1 	.word	0x08008ff1
 80071e8:	20000028 	.word	0x20000028

080071ec <cleanup_stdio>:
 80071ec:	6841      	ldr	r1, [r0, #4]
 80071ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007220 <cleanup_stdio+0x34>)
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4299      	cmp	r1, r3
 80071f4:	4604      	mov	r4, r0
 80071f6:	d001      	beq.n	80071fc <cleanup_stdio+0x10>
 80071f8:	f001 fefa 	bl	8008ff0 <_fflush_r>
 80071fc:	68a1      	ldr	r1, [r4, #8]
 80071fe:	4b09      	ldr	r3, [pc, #36]	@ (8007224 <cleanup_stdio+0x38>)
 8007200:	4299      	cmp	r1, r3
 8007202:	d002      	beq.n	800720a <cleanup_stdio+0x1e>
 8007204:	4620      	mov	r0, r4
 8007206:	f001 fef3 	bl	8008ff0 <_fflush_r>
 800720a:	68e1      	ldr	r1, [r4, #12]
 800720c:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <cleanup_stdio+0x3c>)
 800720e:	4299      	cmp	r1, r3
 8007210:	d004      	beq.n	800721c <cleanup_stdio+0x30>
 8007212:	4620      	mov	r0, r4
 8007214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007218:	f001 beea 	b.w	8008ff0 <_fflush_r>
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	20000490 	.word	0x20000490
 8007224:	200004f8 	.word	0x200004f8
 8007228:	20000560 	.word	0x20000560

0800722c <global_stdio_init.part.0>:
 800722c:	b510      	push	{r4, lr}
 800722e:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <global_stdio_init.part.0+0x30>)
 8007230:	4c0b      	ldr	r4, [pc, #44]	@ (8007260 <global_stdio_init.part.0+0x34>)
 8007232:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <global_stdio_init.part.0+0x38>)
 8007234:	4620      	mov	r0, r4
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	2104      	movs	r1, #4
 800723a:	2200      	movs	r2, #0
 800723c:	f7ff ff94 	bl	8007168 <std>
 8007240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007244:	2201      	movs	r2, #1
 8007246:	2109      	movs	r1, #9
 8007248:	f7ff ff8e 	bl	8007168 <std>
 800724c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007250:	2202      	movs	r2, #2
 8007252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007256:	2112      	movs	r1, #18
 8007258:	f7ff bf86 	b.w	8007168 <std>
 800725c:	200005c8 	.word	0x200005c8
 8007260:	20000490 	.word	0x20000490
 8007264:	080071d5 	.word	0x080071d5

08007268 <__sfp_lock_acquire>:
 8007268:	4801      	ldr	r0, [pc, #4]	@ (8007270 <__sfp_lock_acquire+0x8>)
 800726a:	f000 b96c 	b.w	8007546 <__retarget_lock_acquire_recursive>
 800726e:	bf00      	nop
 8007270:	200005d1 	.word	0x200005d1

08007274 <__sfp_lock_release>:
 8007274:	4801      	ldr	r0, [pc, #4]	@ (800727c <__sfp_lock_release+0x8>)
 8007276:	f000 b967 	b.w	8007548 <__retarget_lock_release_recursive>
 800727a:	bf00      	nop
 800727c:	200005d1 	.word	0x200005d1

08007280 <__sinit>:
 8007280:	b510      	push	{r4, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	f7ff fff0 	bl	8007268 <__sfp_lock_acquire>
 8007288:	6a23      	ldr	r3, [r4, #32]
 800728a:	b11b      	cbz	r3, 8007294 <__sinit+0x14>
 800728c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007290:	f7ff bff0 	b.w	8007274 <__sfp_lock_release>
 8007294:	4b04      	ldr	r3, [pc, #16]	@ (80072a8 <__sinit+0x28>)
 8007296:	6223      	str	r3, [r4, #32]
 8007298:	4b04      	ldr	r3, [pc, #16]	@ (80072ac <__sinit+0x2c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f5      	bne.n	800728c <__sinit+0xc>
 80072a0:	f7ff ffc4 	bl	800722c <global_stdio_init.part.0>
 80072a4:	e7f2      	b.n	800728c <__sinit+0xc>
 80072a6:	bf00      	nop
 80072a8:	080071ed 	.word	0x080071ed
 80072ac:	200005c8 	.word	0x200005c8

080072b0 <fiprintf>:
 80072b0:	b40e      	push	{r1, r2, r3}
 80072b2:	b503      	push	{r0, r1, lr}
 80072b4:	4601      	mov	r1, r0
 80072b6:	ab03      	add	r3, sp, #12
 80072b8:	4805      	ldr	r0, [pc, #20]	@ (80072d0 <fiprintf+0x20>)
 80072ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	f001 fcfd 	bl	8008cc0 <_vfiprintf_r>
 80072c6:	b002      	add	sp, #8
 80072c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072cc:	b003      	add	sp, #12
 80072ce:	4770      	bx	lr
 80072d0:	20000024 	.word	0x20000024

080072d4 <_fwalk_sglue>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4607      	mov	r7, r0
 80072da:	4688      	mov	r8, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	2600      	movs	r6, #0
 80072e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072e4:	f1b9 0901 	subs.w	r9, r9, #1
 80072e8:	d505      	bpl.n	80072f6 <_fwalk_sglue+0x22>
 80072ea:	6824      	ldr	r4, [r4, #0]
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	d1f7      	bne.n	80072e0 <_fwalk_sglue+0xc>
 80072f0:	4630      	mov	r0, r6
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	89ab      	ldrh	r3, [r5, #12]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d907      	bls.n	800730c <_fwalk_sglue+0x38>
 80072fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007300:	3301      	adds	r3, #1
 8007302:	d003      	beq.n	800730c <_fwalk_sglue+0x38>
 8007304:	4629      	mov	r1, r5
 8007306:	4638      	mov	r0, r7
 8007308:	47c0      	blx	r8
 800730a:	4306      	orrs	r6, r0
 800730c:	3568      	adds	r5, #104	@ 0x68
 800730e:	e7e9      	b.n	80072e4 <_fwalk_sglue+0x10>

08007310 <siprintf>:
 8007310:	b40e      	push	{r1, r2, r3}
 8007312:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007316:	b500      	push	{lr}
 8007318:	b09c      	sub	sp, #112	@ 0x70
 800731a:	ab1d      	add	r3, sp, #116	@ 0x74
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	9006      	str	r0, [sp, #24]
 8007320:	9107      	str	r1, [sp, #28]
 8007322:	9104      	str	r1, [sp, #16]
 8007324:	4808      	ldr	r0, [pc, #32]	@ (8007348 <siprintf+0x38>)
 8007326:	4909      	ldr	r1, [pc, #36]	@ (800734c <siprintf+0x3c>)
 8007328:	f853 2b04 	ldr.w	r2, [r3], #4
 800732c:	9105      	str	r1, [sp, #20]
 800732e:	6800      	ldr	r0, [r0, #0]
 8007330:	a902      	add	r1, sp, #8
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	f001 fba0 	bl	8008a78 <_svfiprintf_r>
 8007338:	2200      	movs	r2, #0
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	b01c      	add	sp, #112	@ 0x70
 8007340:	f85d eb04 	ldr.w	lr, [sp], #4
 8007344:	b003      	add	sp, #12
 8007346:	4770      	bx	lr
 8007348:	20000024 	.word	0x20000024
 800734c:	ffff0208 	.word	0xffff0208

08007350 <__sread>:
 8007350:	b510      	push	{r4, lr}
 8007352:	460c      	mov	r4, r1
 8007354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007358:	f000 f896 	bl	8007488 <_read_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	bfab      	itete	ge
 8007360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007362:	89a3      	ldrhlt	r3, [r4, #12]
 8007364:	181b      	addge	r3, r3, r0
 8007366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800736a:	bfac      	ite	ge
 800736c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800736e:	81a3      	strhlt	r3, [r4, #12]
 8007370:	bd10      	pop	{r4, pc}

08007372 <__swrite>:
 8007372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007376:	461f      	mov	r7, r3
 8007378:	898b      	ldrh	r3, [r1, #12]
 800737a:	4605      	mov	r5, r0
 800737c:	05db      	lsls	r3, r3, #23
 800737e:	460c      	mov	r4, r1
 8007380:	4616      	mov	r6, r2
 8007382:	d505      	bpl.n	8007390 <__swrite+0x1e>
 8007384:	2302      	movs	r3, #2
 8007386:	2200      	movs	r2, #0
 8007388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738c:	f000 f86a 	bl	8007464 <_lseek_r>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	4632      	mov	r2, r6
 8007394:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	4628      	mov	r0, r5
 800739c:	463b      	mov	r3, r7
 800739e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	f000 b891 	b.w	80074cc <_write_r>

080073aa <__sseek>:
 80073aa:	b510      	push	{r4, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b2:	f000 f857 	bl	8007464 <_lseek_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	bf15      	itete	ne
 80073bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073c6:	81a3      	strheq	r3, [r4, #12]
 80073c8:	bf18      	it	ne
 80073ca:	81a3      	strhne	r3, [r4, #12]
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__sclose>:
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 b837 	b.w	8007444 <_close_r>

080073d6 <memcmp>:
 80073d6:	b510      	push	{r4, lr}
 80073d8:	3901      	subs	r1, #1
 80073da:	4402      	add	r2, r0
 80073dc:	4290      	cmp	r0, r2
 80073de:	d101      	bne.n	80073e4 <memcmp+0xe>
 80073e0:	2000      	movs	r0, #0
 80073e2:	e005      	b.n	80073f0 <memcmp+0x1a>
 80073e4:	7803      	ldrb	r3, [r0, #0]
 80073e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	d001      	beq.n	80073f2 <memcmp+0x1c>
 80073ee:	1b18      	subs	r0, r3, r4
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	3001      	adds	r0, #1
 80073f4:	e7f2      	b.n	80073dc <memcmp+0x6>

080073f6 <memmove>:
 80073f6:	4288      	cmp	r0, r1
 80073f8:	b510      	push	{r4, lr}
 80073fa:	eb01 0402 	add.w	r4, r1, r2
 80073fe:	d902      	bls.n	8007406 <memmove+0x10>
 8007400:	4284      	cmp	r4, r0
 8007402:	4623      	mov	r3, r4
 8007404:	d807      	bhi.n	8007416 <memmove+0x20>
 8007406:	1e43      	subs	r3, r0, #1
 8007408:	42a1      	cmp	r1, r4
 800740a:	d008      	beq.n	800741e <memmove+0x28>
 800740c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007410:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007414:	e7f8      	b.n	8007408 <memmove+0x12>
 8007416:	4601      	mov	r1, r0
 8007418:	4402      	add	r2, r0
 800741a:	428a      	cmp	r2, r1
 800741c:	d100      	bne.n	8007420 <memmove+0x2a>
 800741e:	bd10      	pop	{r4, pc}
 8007420:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007424:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007428:	e7f7      	b.n	800741a <memmove+0x24>

0800742a <memset>:
 800742a:	4603      	mov	r3, r0
 800742c:	4402      	add	r2, r0
 800742e:	4293      	cmp	r3, r2
 8007430:	d100      	bne.n	8007434 <memset+0xa>
 8007432:	4770      	bx	lr
 8007434:	f803 1b01 	strb.w	r1, [r3], #1
 8007438:	e7f9      	b.n	800742e <memset+0x4>
	...

0800743c <_localeconv_r>:
 800743c:	4800      	ldr	r0, [pc, #0]	@ (8007440 <_localeconv_r+0x4>)
 800743e:	4770      	bx	lr
 8007440:	20000164 	.word	0x20000164

08007444 <_close_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	2300      	movs	r3, #0
 8007448:	4d05      	ldr	r5, [pc, #20]	@ (8007460 <_close_r+0x1c>)
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	f7fa fbae 	bl	8001bb0 <_close>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_close_r+0x1a>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_close_r+0x1a>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	200005cc 	.word	0x200005cc

08007464 <_lseek_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	2200      	movs	r2, #0
 800746e:	4d05      	ldr	r5, [pc, #20]	@ (8007484 <_lseek_r+0x20>)
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7fa fba8 	bl	8001bc8 <_lseek>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_lseek_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_lseek_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	200005cc 	.word	0x200005cc

08007488 <_read_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	2200      	movs	r2, #0
 8007492:	4d05      	ldr	r5, [pc, #20]	@ (80074a8 <_read_r+0x20>)
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f7fa fb6e 	bl	8001b78 <_read>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_read_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_read_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	200005cc 	.word	0x200005cc

080074ac <_sbrk_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	2300      	movs	r3, #0
 80074b0:	4d05      	ldr	r5, [pc, #20]	@ (80074c8 <_sbrk_r+0x1c>)
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f7fa fb88 	bl	8001bcc <_sbrk>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_sbrk_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_sbrk_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200005cc 	.word	0x200005cc

080074cc <_write_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	2200      	movs	r2, #0
 80074d6:	4d05      	ldr	r5, [pc, #20]	@ (80074ec <_write_r+0x20>)
 80074d8:	602a      	str	r2, [r5, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	f7fa fb5a 	bl	8001b94 <_write>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_write_r+0x1e>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_write_r+0x1e>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200005cc 	.word	0x200005cc

080074f0 <__errno>:
 80074f0:	4b01      	ldr	r3, [pc, #4]	@ (80074f8 <__errno+0x8>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	20000024 	.word	0x20000024

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	2600      	movs	r6, #0
 8007500:	4d0c      	ldr	r5, [pc, #48]	@ (8007534 <__libc_init_array+0x38>)
 8007502:	4c0d      	ldr	r4, [pc, #52]	@ (8007538 <__libc_init_array+0x3c>)
 8007504:	1b64      	subs	r4, r4, r5
 8007506:	10a4      	asrs	r4, r4, #2
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	f001 ff5c 	bl	80093c8 <_init>
 8007510:	2600      	movs	r6, #0
 8007512:	4d0a      	ldr	r5, [pc, #40]	@ (800753c <__libc_init_array+0x40>)
 8007514:	4c0a      	ldr	r4, [pc, #40]	@ (8007540 <__libc_init_array+0x44>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	080098e4 	.word	0x080098e4
 8007538:	080098e4 	.word	0x080098e4
 800753c:	080098e4 	.word	0x080098e4
 8007540:	080098e8 	.word	0x080098e8

08007544 <__retarget_lock_init_recursive>:
 8007544:	4770      	bx	lr

08007546 <__retarget_lock_acquire_recursive>:
 8007546:	4770      	bx	lr

08007548 <__retarget_lock_release_recursive>:
 8007548:	4770      	bx	lr

0800754a <memchr>:
 800754a:	4603      	mov	r3, r0
 800754c:	b510      	push	{r4, lr}
 800754e:	b2c9      	uxtb	r1, r1
 8007550:	4402      	add	r2, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	4618      	mov	r0, r3
 8007556:	d101      	bne.n	800755c <memchr+0x12>
 8007558:	2000      	movs	r0, #0
 800755a:	e003      	b.n	8007564 <memchr+0x1a>
 800755c:	7804      	ldrb	r4, [r0, #0]
 800755e:	3301      	adds	r3, #1
 8007560:	428c      	cmp	r4, r1
 8007562:	d1f6      	bne.n	8007552 <memchr+0x8>
 8007564:	bd10      	pop	{r4, pc}

08007566 <memcpy>:
 8007566:	440a      	add	r2, r1
 8007568:	4291      	cmp	r1, r2
 800756a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800756e:	d100      	bne.n	8007572 <memcpy+0xc>
 8007570:	4770      	bx	lr
 8007572:	b510      	push	{r4, lr}
 8007574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007578:	4291      	cmp	r1, r2
 800757a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757e:	d1f9      	bne.n	8007574 <memcpy+0xe>
 8007580:	bd10      	pop	{r4, pc}

08007582 <abort>:
 8007582:	2006      	movs	r0, #6
 8007584:	b508      	push	{r3, lr}
 8007586:	f001 fe17 	bl	80091b8 <raise>
 800758a:	2001      	movs	r0, #1
 800758c:	f7fa faee 	bl	8001b6c <_exit>

08007590 <quorem>:
 8007590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	6903      	ldr	r3, [r0, #16]
 8007596:	690c      	ldr	r4, [r1, #16]
 8007598:	4607      	mov	r7, r0
 800759a:	42a3      	cmp	r3, r4
 800759c:	db7e      	blt.n	800769c <quorem+0x10c>
 800759e:	3c01      	subs	r4, #1
 80075a0:	00a3      	lsls	r3, r4, #2
 80075a2:	f100 0514 	add.w	r5, r0, #20
 80075a6:	f101 0814 	add.w	r8, r1, #20
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ba:	3301      	adds	r3, #1
 80075bc:	429a      	cmp	r2, r3
 80075be:	fbb2 f6f3 	udiv	r6, r2, r3
 80075c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075c6:	d32e      	bcc.n	8007626 <quorem+0x96>
 80075c8:	f04f 0a00 	mov.w	sl, #0
 80075cc:	46c4      	mov	ip, r8
 80075ce:	46ae      	mov	lr, r5
 80075d0:	46d3      	mov	fp, sl
 80075d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075d6:	b298      	uxth	r0, r3
 80075d8:	fb06 a000 	mla	r0, r6, r0, sl
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	0c02      	lsrs	r2, r0, #16
 80075e0:	fb06 2303 	mla	r3, r6, r3, r2
 80075e4:	f8de 2000 	ldr.w	r2, [lr]
 80075e8:	b280      	uxth	r0, r0
 80075ea:	b292      	uxth	r2, r2
 80075ec:	1a12      	subs	r2, r2, r0
 80075ee:	445a      	add	r2, fp
 80075f0:	f8de 0000 	ldr.w	r0, [lr]
 80075f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007602:	b292      	uxth	r2, r2
 8007604:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007608:	45e1      	cmp	r9, ip
 800760a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800760e:	f84e 2b04 	str.w	r2, [lr], #4
 8007612:	d2de      	bcs.n	80075d2 <quorem+0x42>
 8007614:	9b00      	ldr	r3, [sp, #0]
 8007616:	58eb      	ldr	r3, [r5, r3]
 8007618:	b92b      	cbnz	r3, 8007626 <quorem+0x96>
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	3b04      	subs	r3, #4
 800761e:	429d      	cmp	r5, r3
 8007620:	461a      	mov	r2, r3
 8007622:	d32f      	bcc.n	8007684 <quorem+0xf4>
 8007624:	613c      	str	r4, [r7, #16]
 8007626:	4638      	mov	r0, r7
 8007628:	f001 f8c2 	bl	80087b0 <__mcmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	db25      	blt.n	800767c <quorem+0xec>
 8007630:	4629      	mov	r1, r5
 8007632:	2000      	movs	r0, #0
 8007634:	f858 2b04 	ldr.w	r2, [r8], #4
 8007638:	f8d1 c000 	ldr.w	ip, [r1]
 800763c:	fa1f fe82 	uxth.w	lr, r2
 8007640:	fa1f f38c 	uxth.w	r3, ip
 8007644:	eba3 030e 	sub.w	r3, r3, lr
 8007648:	4403      	add	r3, r0
 800764a:	0c12      	lsrs	r2, r2, #16
 800764c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007650:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765a:	45c1      	cmp	r9, r8
 800765c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007660:	f841 3b04 	str.w	r3, [r1], #4
 8007664:	d2e6      	bcs.n	8007634 <quorem+0xa4>
 8007666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766e:	b922      	cbnz	r2, 800767a <quorem+0xea>
 8007670:	3b04      	subs	r3, #4
 8007672:	429d      	cmp	r5, r3
 8007674:	461a      	mov	r2, r3
 8007676:	d30b      	bcc.n	8007690 <quorem+0x100>
 8007678:	613c      	str	r4, [r7, #16]
 800767a:	3601      	adds	r6, #1
 800767c:	4630      	mov	r0, r6
 800767e:	b003      	add	sp, #12
 8007680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	3b04      	subs	r3, #4
 8007688:	2a00      	cmp	r2, #0
 800768a:	d1cb      	bne.n	8007624 <quorem+0x94>
 800768c:	3c01      	subs	r4, #1
 800768e:	e7c6      	b.n	800761e <quorem+0x8e>
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	3b04      	subs	r3, #4
 8007694:	2a00      	cmp	r2, #0
 8007696:	d1ef      	bne.n	8007678 <quorem+0xe8>
 8007698:	3c01      	subs	r4, #1
 800769a:	e7ea      	b.n	8007672 <quorem+0xe2>
 800769c:	2000      	movs	r0, #0
 800769e:	e7ee      	b.n	800767e <quorem+0xee>

080076a0 <_dtoa_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	4614      	mov	r4, r2
 80076a6:	461d      	mov	r5, r3
 80076a8:	69c7      	ldr	r7, [r0, #28]
 80076aa:	b097      	sub	sp, #92	@ 0x5c
 80076ac:	4683      	mov	fp, r0
 80076ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80076b4:	b97f      	cbnz	r7, 80076d6 <_dtoa_r+0x36>
 80076b6:	2010      	movs	r0, #16
 80076b8:	f7ff f844 	bl	8006744 <malloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	f8cb 001c 	str.w	r0, [fp, #28]
 80076c2:	b920      	cbnz	r0, 80076ce <_dtoa_r+0x2e>
 80076c4:	21ef      	movs	r1, #239	@ 0xef
 80076c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007968 <_dtoa_r+0x2c8>)
 80076c8:	48a8      	ldr	r0, [pc, #672]	@ (800796c <_dtoa_r+0x2cc>)
 80076ca:	f7ff f81d 	bl	8006708 <__assert_func>
 80076ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076d2:	6007      	str	r7, [r0, #0]
 80076d4:	60c7      	str	r7, [r0, #12]
 80076d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	b159      	cbz	r1, 80076f6 <_dtoa_r+0x56>
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	2301      	movs	r3, #1
 80076e2:	4093      	lsls	r3, r2
 80076e4:	604a      	str	r2, [r1, #4]
 80076e6:	608b      	str	r3, [r1, #8]
 80076e8:	4658      	mov	r0, fp
 80076ea:	f000 fe29 	bl	8008340 <_Bfree>
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	1e2b      	subs	r3, r5, #0
 80076f8:	bfaf      	iteee	ge
 80076fa:	2300      	movge	r3, #0
 80076fc:	2201      	movlt	r2, #1
 80076fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007702:	9303      	strlt	r3, [sp, #12]
 8007704:	bfa8      	it	ge
 8007706:	6033      	strge	r3, [r6, #0]
 8007708:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800770c:	4b98      	ldr	r3, [pc, #608]	@ (8007970 <_dtoa_r+0x2d0>)
 800770e:	bfb8      	it	lt
 8007710:	6032      	strlt	r2, [r6, #0]
 8007712:	ea33 0308 	bics.w	r3, r3, r8
 8007716:	d112      	bne.n	800773e <_dtoa_r+0x9e>
 8007718:	f242 730f 	movw	r3, #9999	@ 0x270f
 800771c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007724:	4323      	orrs	r3, r4
 8007726:	f000 8550 	beq.w	80081ca <_dtoa_r+0xb2a>
 800772a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800772c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007974 <_dtoa_r+0x2d4>
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8552 	beq.w	80081da <_dtoa_r+0xb3a>
 8007736:	f10a 0303 	add.w	r3, sl, #3
 800773a:	f000 bd4c 	b.w	80081d6 <_dtoa_r+0xb36>
 800773e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007742:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	f7f9 f92b 	bl	80009a8 <__aeabi_dcmpeq>
 8007752:	4607      	mov	r7, r0
 8007754:	b158      	cbz	r0, 800776e <_dtoa_r+0xce>
 8007756:	2301      	movs	r3, #1
 8007758:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800775e:	b113      	cbz	r3, 8007766 <_dtoa_r+0xc6>
 8007760:	4b85      	ldr	r3, [pc, #532]	@ (8007978 <_dtoa_r+0x2d8>)
 8007762:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800797c <_dtoa_r+0x2dc>
 800776a:	f000 bd36 	b.w	80081da <_dtoa_r+0xb3a>
 800776e:	ab14      	add	r3, sp, #80	@ 0x50
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	ab15      	add	r3, sp, #84	@ 0x54
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4658      	mov	r0, fp
 8007778:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800777c:	f001 f8c8 	bl	8008910 <__d2b>
 8007780:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007784:	4681      	mov	r9, r0
 8007786:	2e00      	cmp	r6, #0
 8007788:	d077      	beq.n	800787a <_dtoa_r+0x1da>
 800778a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800778e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007790:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007798:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800779c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80077a2:	4619      	mov	r1, r3
 80077a4:	2200      	movs	r2, #0
 80077a6:	4b76      	ldr	r3, [pc, #472]	@ (8007980 <_dtoa_r+0x2e0>)
 80077a8:	f7f8 fcde 	bl	8000168 <__aeabi_dsub>
 80077ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007950 <_dtoa_r+0x2b0>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f7f8 fe91 	bl	80004d8 <__aeabi_dmul>
 80077b6:	a368      	add	r3, pc, #416	@ (adr r3, 8007958 <_dtoa_r+0x2b8>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fcd6 	bl	800016c <__adddf3>
 80077c0:	4604      	mov	r4, r0
 80077c2:	4630      	mov	r0, r6
 80077c4:	460d      	mov	r5, r1
 80077c6:	f7f8 fe1d 	bl	8000404 <__aeabi_i2d>
 80077ca:	a365      	add	r3, pc, #404	@ (adr r3, 8007960 <_dtoa_r+0x2c0>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fe82 	bl	80004d8 <__aeabi_dmul>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4620      	mov	r0, r4
 80077da:	4629      	mov	r1, r5
 80077dc:	f7f8 fcc6 	bl	800016c <__adddf3>
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	f7f9 f928 	bl	8000a38 <__aeabi_d2iz>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4607      	mov	r7, r0
 80077ec:	2300      	movs	r3, #0
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f9 f8e3 	bl	80009bc <__aeabi_dcmplt>
 80077f6:	b140      	cbz	r0, 800780a <_dtoa_r+0x16a>
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7f8 fe03 	bl	8000404 <__aeabi_i2d>
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f7f9 f8d1 	bl	80009a8 <__aeabi_dcmpeq>
 8007806:	b900      	cbnz	r0, 800780a <_dtoa_r+0x16a>
 8007808:	3f01      	subs	r7, #1
 800780a:	2f16      	cmp	r7, #22
 800780c:	d853      	bhi.n	80078b6 <_dtoa_r+0x216>
 800780e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007812:	4b5c      	ldr	r3, [pc, #368]	@ (8007984 <_dtoa_r+0x2e4>)
 8007814:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f9 f8ce 	bl	80009bc <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d04a      	beq.n	80078ba <_dtoa_r+0x21a>
 8007824:	2300      	movs	r3, #0
 8007826:	3f01      	subs	r7, #1
 8007828:	930f      	str	r3, [sp, #60]	@ 0x3c
 800782a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800782c:	1b9b      	subs	r3, r3, r6
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	bf46      	itte	mi
 8007832:	f1c3 0801 	rsbmi	r8, r3, #1
 8007836:	2300      	movmi	r3, #0
 8007838:	f04f 0800 	movpl.w	r8, #0
 800783c:	9209      	str	r2, [sp, #36]	@ 0x24
 800783e:	bf48      	it	mi
 8007840:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007842:	2f00      	cmp	r7, #0
 8007844:	db3b      	blt.n	80078be <_dtoa_r+0x21e>
 8007846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007848:	970e      	str	r7, [sp, #56]	@ 0x38
 800784a:	443b      	add	r3, r7
 800784c:	9309      	str	r3, [sp, #36]	@ 0x24
 800784e:	2300      	movs	r3, #0
 8007850:	930a      	str	r3, [sp, #40]	@ 0x28
 8007852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007854:	2b09      	cmp	r3, #9
 8007856:	d866      	bhi.n	8007926 <_dtoa_r+0x286>
 8007858:	2b05      	cmp	r3, #5
 800785a:	bfc4      	itt	gt
 800785c:	3b04      	subgt	r3, #4
 800785e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007860:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007862:	bfc8      	it	gt
 8007864:	2400      	movgt	r4, #0
 8007866:	f1a3 0302 	sub.w	r3, r3, #2
 800786a:	bfd8      	it	le
 800786c:	2401      	movle	r4, #1
 800786e:	2b03      	cmp	r3, #3
 8007870:	d864      	bhi.n	800793c <_dtoa_r+0x29c>
 8007872:	e8df f003 	tbb	[pc, r3]
 8007876:	382b      	.short	0x382b
 8007878:	5636      	.short	0x5636
 800787a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800787e:	441e      	add	r6, r3
 8007880:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007884:	2b20      	cmp	r3, #32
 8007886:	bfc1      	itttt	gt
 8007888:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800788c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007890:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007894:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007898:	bfd6      	itet	le
 800789a:	f1c3 0320 	rsble	r3, r3, #32
 800789e:	ea48 0003 	orrgt.w	r0, r8, r3
 80078a2:	fa04 f003 	lslle.w	r0, r4, r3
 80078a6:	f7f8 fd9d 	bl	80003e4 <__aeabi_ui2d>
 80078aa:	2201      	movs	r2, #1
 80078ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078b0:	3e01      	subs	r6, #1
 80078b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80078b4:	e775      	b.n	80077a2 <_dtoa_r+0x102>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e7b6      	b.n	8007828 <_dtoa_r+0x188>
 80078ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80078bc:	e7b5      	b.n	800782a <_dtoa_r+0x18a>
 80078be:	427b      	negs	r3, r7
 80078c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c2:	2300      	movs	r3, #0
 80078c4:	eba8 0807 	sub.w	r8, r8, r7
 80078c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80078ca:	e7c2      	b.n	8007852 <_dtoa_r+0x1b2>
 80078cc:	2300      	movs	r3, #0
 80078ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dc35      	bgt.n	8007942 <_dtoa_r+0x2a2>
 80078d6:	2301      	movs	r3, #1
 80078d8:	461a      	mov	r2, r3
 80078da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078de:	9221      	str	r2, [sp, #132]	@ 0x84
 80078e0:	e00b      	b.n	80078fa <_dtoa_r+0x25a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e7f3      	b.n	80078ce <_dtoa_r+0x22e>
 80078e6:	2300      	movs	r3, #0
 80078e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	9307      	str	r3, [sp, #28]
 80078f6:	bfb8      	it	lt
 80078f8:	2301      	movlt	r3, #1
 80078fa:	2100      	movs	r1, #0
 80078fc:	2204      	movs	r2, #4
 80078fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007902:	f102 0514 	add.w	r5, r2, #20
 8007906:	429d      	cmp	r5, r3
 8007908:	d91f      	bls.n	800794a <_dtoa_r+0x2aa>
 800790a:	6041      	str	r1, [r0, #4]
 800790c:	4658      	mov	r0, fp
 800790e:	f000 fcd7 	bl	80082c0 <_Balloc>
 8007912:	4682      	mov	sl, r0
 8007914:	2800      	cmp	r0, #0
 8007916:	d139      	bne.n	800798c <_dtoa_r+0x2ec>
 8007918:	4602      	mov	r2, r0
 800791a:	f240 11af 	movw	r1, #431	@ 0x1af
 800791e:	4b1a      	ldr	r3, [pc, #104]	@ (8007988 <_dtoa_r+0x2e8>)
 8007920:	e6d2      	b.n	80076c8 <_dtoa_r+0x28>
 8007922:	2301      	movs	r3, #1
 8007924:	e7e0      	b.n	80078e8 <_dtoa_r+0x248>
 8007926:	2401      	movs	r4, #1
 8007928:	2300      	movs	r3, #0
 800792a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800792c:	9320      	str	r3, [sp, #128]	@ 0x80
 800792e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007932:	2200      	movs	r2, #0
 8007934:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007938:	2312      	movs	r3, #18
 800793a:	e7d0      	b.n	80078de <_dtoa_r+0x23e>
 800793c:	2301      	movs	r3, #1
 800793e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007940:	e7f5      	b.n	800792e <_dtoa_r+0x28e>
 8007942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007944:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007948:	e7d7      	b.n	80078fa <_dtoa_r+0x25a>
 800794a:	3101      	adds	r1, #1
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	e7d8      	b.n	8007902 <_dtoa_r+0x262>
 8007950:	636f4361 	.word	0x636f4361
 8007954:	3fd287a7 	.word	0x3fd287a7
 8007958:	8b60c8b3 	.word	0x8b60c8b3
 800795c:	3fc68a28 	.word	0x3fc68a28
 8007960:	509f79fb 	.word	0x509f79fb
 8007964:	3fd34413 	.word	0x3fd34413
 8007968:	080095e9 	.word	0x080095e9
 800796c:	08009600 	.word	0x08009600
 8007970:	7ff00000 	.word	0x7ff00000
 8007974:	080095e5 	.word	0x080095e5
 8007978:	080095b9 	.word	0x080095b9
 800797c:	080095b8 	.word	0x080095b8
 8007980:	3ff80000 	.word	0x3ff80000
 8007984:	080096f8 	.word	0x080096f8
 8007988:	08009658 	.word	0x08009658
 800798c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007990:	6018      	str	r0, [r3, #0]
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	2b0e      	cmp	r3, #14
 8007996:	f200 80a4 	bhi.w	8007ae2 <_dtoa_r+0x442>
 800799a:	2c00      	cmp	r4, #0
 800799c:	f000 80a1 	beq.w	8007ae2 <_dtoa_r+0x442>
 80079a0:	2f00      	cmp	r7, #0
 80079a2:	dd33      	ble.n	8007a0c <_dtoa_r+0x36c>
 80079a4:	4b86      	ldr	r3, [pc, #536]	@ (8007bc0 <_dtoa_r+0x520>)
 80079a6:	f007 020f 	and.w	r2, r7, #15
 80079aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ae:	05f8      	lsls	r0, r7, #23
 80079b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079bc:	d516      	bpl.n	80079ec <_dtoa_r+0x34c>
 80079be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079c2:	4b80      	ldr	r3, [pc, #512]	@ (8007bc4 <_dtoa_r+0x524>)
 80079c4:	2603      	movs	r6, #3
 80079c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ca:	f7f8 feaf 	bl	800072c <__aeabi_ddiv>
 80079ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d2:	f004 040f 	and.w	r4, r4, #15
 80079d6:	4d7b      	ldr	r5, [pc, #492]	@ (8007bc4 <_dtoa_r+0x524>)
 80079d8:	b954      	cbnz	r4, 80079f0 <_dtoa_r+0x350>
 80079da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e2:	f7f8 fea3 	bl	800072c <__aeabi_ddiv>
 80079e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ea:	e028      	b.n	8007a3e <_dtoa_r+0x39e>
 80079ec:	2602      	movs	r6, #2
 80079ee:	e7f2      	b.n	80079d6 <_dtoa_r+0x336>
 80079f0:	07e1      	lsls	r1, r4, #31
 80079f2:	d508      	bpl.n	8007a06 <_dtoa_r+0x366>
 80079f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079fc:	f7f8 fd6c 	bl	80004d8 <__aeabi_dmul>
 8007a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a04:	3601      	adds	r6, #1
 8007a06:	1064      	asrs	r4, r4, #1
 8007a08:	3508      	adds	r5, #8
 8007a0a:	e7e5      	b.n	80079d8 <_dtoa_r+0x338>
 8007a0c:	f000 80d2 	beq.w	8007bb4 <_dtoa_r+0x514>
 8007a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a14:	427c      	negs	r4, r7
 8007a16:	4b6a      	ldr	r3, [pc, #424]	@ (8007bc0 <_dtoa_r+0x520>)
 8007a18:	f004 020f 	and.w	r2, r4, #15
 8007a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fd58 	bl	80004d8 <__aeabi_dmul>
 8007a28:	2602      	movs	r6, #2
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a30:	4d64      	ldr	r5, [pc, #400]	@ (8007bc4 <_dtoa_r+0x524>)
 8007a32:	1124      	asrs	r4, r4, #4
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	f040 80b2 	bne.w	8007b9e <_dtoa_r+0x4fe>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d3      	bne.n	80079e6 <_dtoa_r+0x346>
 8007a3e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 80b7 	beq.w	8007bb8 <_dtoa_r+0x518>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4b5d      	ldr	r3, [pc, #372]	@ (8007bc8 <_dtoa_r+0x528>)
 8007a52:	f7f8 ffb3 	bl	80009bc <__aeabi_dcmplt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f000 80ae 	beq.w	8007bb8 <_dtoa_r+0x518>
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80aa 	beq.w	8007bb8 <_dtoa_r+0x518>
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dd37      	ble.n	8007ada <_dtoa_r+0x43a>
 8007a6a:	1e7b      	subs	r3, r7, #1
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	2200      	movs	r2, #0
 8007a72:	4629      	mov	r1, r5
 8007a74:	4b55      	ldr	r3, [pc, #340]	@ (8007bcc <_dtoa_r+0x52c>)
 8007a76:	f7f8 fd2f 	bl	80004d8 <__aeabi_dmul>
 8007a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a7e:	9c08      	ldr	r4, [sp, #32]
 8007a80:	3601      	adds	r6, #1
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7f8 fcbe 	bl	8000404 <__aeabi_i2d>
 8007a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a8c:	f7f8 fd24 	bl	80004d8 <__aeabi_dmul>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd0 <_dtoa_r+0x530>)
 8007a94:	f7f8 fb6a 	bl	800016c <__adddf3>
 8007a98:	4605      	mov	r5, r0
 8007a9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	f040 809a 	bne.w	8007bd8 <_dtoa_r+0x538>
 8007aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd4 <_dtoa_r+0x534>)
 8007aac:	f7f8 fb5c 	bl	8000168 <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4633      	mov	r3, r6
 8007abc:	f7f8 ff9c 	bl	80009f8 <__aeabi_dcmpgt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f040 828e 	bne.w	8007fe2 <_dtoa_r+0x942>
 8007ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aca:	462a      	mov	r2, r5
 8007acc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ad0:	f7f8 ff74 	bl	80009bc <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f040 8127 	bne.w	8007d28 <_dtoa_r+0x688>
 8007ada:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ae2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f2c0 8163 	blt.w	8007db0 <_dtoa_r+0x710>
 8007aea:	2f0e      	cmp	r7, #14
 8007aec:	f300 8160 	bgt.w	8007db0 <_dtoa_r+0x710>
 8007af0:	4b33      	ldr	r3, [pc, #204]	@ (8007bc0 <_dtoa_r+0x520>)
 8007af2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007afa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007afe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da03      	bge.n	8007b0c <_dtoa_r+0x46c>
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f340 8100 	ble.w	8007d0c <_dtoa_r+0x66c>
 8007b0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b10:	4656      	mov	r6, sl
 8007b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b16:	4620      	mov	r0, r4
 8007b18:	4629      	mov	r1, r5
 8007b1a:	f7f8 fe07 	bl	800072c <__aeabi_ddiv>
 8007b1e:	f7f8 ff8b 	bl	8000a38 <__aeabi_d2iz>
 8007b22:	4680      	mov	r8, r0
 8007b24:	f7f8 fc6e 	bl	8000404 <__aeabi_i2d>
 8007b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2c:	f7f8 fcd4 	bl	80004d8 <__aeabi_dmul>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4620      	mov	r0, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	f7f8 fb16 	bl	8000168 <__aeabi_dsub>
 8007b3c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b40:	9d07      	ldr	r5, [sp, #28]
 8007b42:	f806 4b01 	strb.w	r4, [r6], #1
 8007b46:	eba6 040a 	sub.w	r4, r6, sl
 8007b4a:	42a5      	cmp	r5, r4
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	f040 8116 	bne.w	8007d80 <_dtoa_r+0x6e0>
 8007b54:	f7f8 fb0a 	bl	800016c <__adddf3>
 8007b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	f7f8 ff4a 	bl	80009f8 <__aeabi_dcmpgt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f040 80f8 	bne.w	8007d5a <_dtoa_r+0x6ba>
 8007b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8007b76:	b118      	cbz	r0, 8007b80 <_dtoa_r+0x4e0>
 8007b78:	f018 0f01 	tst.w	r8, #1
 8007b7c:	f040 80ed 	bne.w	8007d5a <_dtoa_r+0x6ba>
 8007b80:	4649      	mov	r1, r9
 8007b82:	4658      	mov	r0, fp
 8007b84:	f000 fbdc 	bl	8008340 <_Bfree>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	7033      	strb	r3, [r6, #0]
 8007b8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b8e:	3701      	adds	r7, #1
 8007b90:	601f      	str	r7, [r3, #0]
 8007b92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8320 	beq.w	80081da <_dtoa_r+0xb3a>
 8007b9a:	601e      	str	r6, [r3, #0]
 8007b9c:	e31d      	b.n	80081da <_dtoa_r+0xb3a>
 8007b9e:	07e2      	lsls	r2, r4, #31
 8007ba0:	d505      	bpl.n	8007bae <_dtoa_r+0x50e>
 8007ba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ba6:	f7f8 fc97 	bl	80004d8 <__aeabi_dmul>
 8007baa:	2301      	movs	r3, #1
 8007bac:	3601      	adds	r6, #1
 8007bae:	1064      	asrs	r4, r4, #1
 8007bb0:	3508      	adds	r5, #8
 8007bb2:	e73f      	b.n	8007a34 <_dtoa_r+0x394>
 8007bb4:	2602      	movs	r6, #2
 8007bb6:	e742      	b.n	8007a3e <_dtoa_r+0x39e>
 8007bb8:	9c07      	ldr	r4, [sp, #28]
 8007bba:	9704      	str	r7, [sp, #16]
 8007bbc:	e761      	b.n	8007a82 <_dtoa_r+0x3e2>
 8007bbe:	bf00      	nop
 8007bc0:	080096f8 	.word	0x080096f8
 8007bc4:	080096d0 	.word	0x080096d0
 8007bc8:	3ff00000 	.word	0x3ff00000
 8007bcc:	40240000 	.word	0x40240000
 8007bd0:	401c0000 	.word	0x401c0000
 8007bd4:	40140000 	.word	0x40140000
 8007bd8:	4b70      	ldr	r3, [pc, #448]	@ (8007d9c <_dtoa_r+0x6fc>)
 8007bda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007be4:	4454      	add	r4, sl
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d045      	beq.n	8007c76 <_dtoa_r+0x5d6>
 8007bea:	2000      	movs	r0, #0
 8007bec:	496c      	ldr	r1, [pc, #432]	@ (8007da0 <_dtoa_r+0x700>)
 8007bee:	f7f8 fd9d 	bl	800072c <__aeabi_ddiv>
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	f7f8 fab7 	bl	8000168 <__aeabi_dsub>
 8007bfa:	4656      	mov	r6, sl
 8007bfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c04:	f7f8 ff18 	bl	8000a38 <__aeabi_d2iz>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f7f8 fbfb 	bl	8000404 <__aeabi_i2d>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c16:	f7f8 faa7 	bl	8000168 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	3530      	adds	r5, #48	@ 0x30
 8007c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c28:	f806 5b01 	strb.w	r5, [r6], #1
 8007c2c:	f7f8 fec6 	bl	80009bc <__aeabi_dcmplt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d163      	bne.n	8007cfc <_dtoa_r+0x65c>
 8007c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c38:	2000      	movs	r0, #0
 8007c3a:	495a      	ldr	r1, [pc, #360]	@ (8007da4 <_dtoa_r+0x704>)
 8007c3c:	f7f8 fa94 	bl	8000168 <__aeabi_dsub>
 8007c40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c44:	f7f8 feba 	bl	80009bc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 8087 	bne.w	8007d5c <_dtoa_r+0x6bc>
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	f43f af43 	beq.w	8007ada <_dtoa_r+0x43a>
 8007c54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b53      	ldr	r3, [pc, #332]	@ (8007da8 <_dtoa_r+0x708>)
 8007c5c:	f7f8 fc3c 	bl	80004d8 <__aeabi_dmul>
 8007c60:	2200      	movs	r2, #0
 8007c62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007da8 <_dtoa_r+0x708>)
 8007c6c:	f7f8 fc34 	bl	80004d8 <__aeabi_dmul>
 8007c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c74:	e7c4      	b.n	8007c00 <_dtoa_r+0x560>
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f7f8 fc2d 	bl	80004d8 <__aeabi_dmul>
 8007c7e:	4656      	mov	r6, sl
 8007c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8a:	f7f8 fed5 	bl	8000a38 <__aeabi_d2iz>
 8007c8e:	4605      	mov	r5, r0
 8007c90:	f7f8 fbb8 	bl	8000404 <__aeabi_i2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9c:	f7f8 fa64 	bl	8000168 <__aeabi_dsub>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	3530      	adds	r5, #48	@ 0x30
 8007ca6:	f806 5b01 	strb.w	r5, [r6], #1
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	d124      	bne.n	8007d00 <_dtoa_r+0x660>
 8007cb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <_dtoa_r+0x700>)
 8007cbc:	f7f8 fa56 	bl	800016c <__adddf3>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc8:	f7f8 fe96 	bl	80009f8 <__aeabi_dcmpgt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d145      	bne.n	8007d5c <_dtoa_r+0x6bc>
 8007cd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4932      	ldr	r1, [pc, #200]	@ (8007da0 <_dtoa_r+0x700>)
 8007cd8:	f7f8 fa46 	bl	8000168 <__aeabi_dsub>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce4:	f7f8 fe6a 	bl	80009bc <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f43f aef6 	beq.w	8007ada <_dtoa_r+0x43a>
 8007cee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007cf0:	1e73      	subs	r3, r6, #1
 8007cf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cf8:	2b30      	cmp	r3, #48	@ 0x30
 8007cfa:	d0f8      	beq.n	8007cee <_dtoa_r+0x64e>
 8007cfc:	9f04      	ldr	r7, [sp, #16]
 8007cfe:	e73f      	b.n	8007b80 <_dtoa_r+0x4e0>
 8007d00:	4b29      	ldr	r3, [pc, #164]	@ (8007da8 <_dtoa_r+0x708>)
 8007d02:	f7f8 fbe9 	bl	80004d8 <__aeabi_dmul>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	e7bc      	b.n	8007c86 <_dtoa_r+0x5e6>
 8007d0c:	d10c      	bne.n	8007d28 <_dtoa_r+0x688>
 8007d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d12:	2200      	movs	r2, #0
 8007d14:	4b25      	ldr	r3, [pc, #148]	@ (8007dac <_dtoa_r+0x70c>)
 8007d16:	f7f8 fbdf 	bl	80004d8 <__aeabi_dmul>
 8007d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1e:	f7f8 fe61 	bl	80009e4 <__aeabi_dcmpge>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f000 815b 	beq.w	8007fde <_dtoa_r+0x93e>
 8007d28:	2400      	movs	r4, #0
 8007d2a:	4625      	mov	r5, r4
 8007d2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d2e:	4656      	mov	r6, sl
 8007d30:	43db      	mvns	r3, r3
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	2700      	movs	r7, #0
 8007d36:	4621      	mov	r1, r4
 8007d38:	4658      	mov	r0, fp
 8007d3a:	f000 fb01 	bl	8008340 <_Bfree>
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	d0dc      	beq.n	8007cfc <_dtoa_r+0x65c>
 8007d42:	b12f      	cbz	r7, 8007d50 <_dtoa_r+0x6b0>
 8007d44:	42af      	cmp	r7, r5
 8007d46:	d003      	beq.n	8007d50 <_dtoa_r+0x6b0>
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4658      	mov	r0, fp
 8007d4c:	f000 faf8 	bl	8008340 <_Bfree>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 faf4 	bl	8008340 <_Bfree>
 8007d58:	e7d0      	b.n	8007cfc <_dtoa_r+0x65c>
 8007d5a:	9704      	str	r7, [sp, #16]
 8007d5c:	4633      	mov	r3, r6
 8007d5e:	461e      	mov	r6, r3
 8007d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d64:	2a39      	cmp	r2, #57	@ 0x39
 8007d66:	d107      	bne.n	8007d78 <_dtoa_r+0x6d8>
 8007d68:	459a      	cmp	sl, r3
 8007d6a:	d1f8      	bne.n	8007d5e <_dtoa_r+0x6be>
 8007d6c:	9a04      	ldr	r2, [sp, #16]
 8007d6e:	3201      	adds	r2, #1
 8007d70:	9204      	str	r2, [sp, #16]
 8007d72:	2230      	movs	r2, #48	@ 0x30
 8007d74:	f88a 2000 	strb.w	r2, [sl]
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e7bd      	b.n	8007cfc <_dtoa_r+0x65c>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b09      	ldr	r3, [pc, #36]	@ (8007da8 <_dtoa_r+0x708>)
 8007d84:	f7f8 fba8 	bl	80004d8 <__aeabi_dmul>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	f7f8 fe0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f43f aebc 	beq.w	8007b12 <_dtoa_r+0x472>
 8007d9a:	e6f1      	b.n	8007b80 <_dtoa_r+0x4e0>
 8007d9c:	080096f8 	.word	0x080096f8
 8007da0:	3fe00000 	.word	0x3fe00000
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	40240000 	.word	0x40240000
 8007dac:	40140000 	.word	0x40140000
 8007db0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	f000 80db 	beq.w	8007f6e <_dtoa_r+0x8ce>
 8007db8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dba:	2a01      	cmp	r2, #1
 8007dbc:	f300 80bf 	bgt.w	8007f3e <_dtoa_r+0x89e>
 8007dc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f000 80b7 	beq.w	8007f36 <_dtoa_r+0x896>
 8007dc8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007dcc:	4646      	mov	r6, r8
 8007dce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	4498      	add	r8, r3
 8007dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ddc:	f000 fb64 	bl	80084a8 <__i2b>
 8007de0:	4605      	mov	r5, r0
 8007de2:	b15e      	cbz	r6, 8007dfc <_dtoa_r+0x75c>
 8007de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd08      	ble.n	8007dfc <_dtoa_r+0x75c>
 8007dea:	42b3      	cmp	r3, r6
 8007dec:	bfa8      	it	ge
 8007dee:	4633      	movge	r3, r6
 8007df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df2:	eba8 0803 	sub.w	r8, r8, r3
 8007df6:	1af6      	subs	r6, r6, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dfe:	b1f3      	cbz	r3, 8007e3e <_dtoa_r+0x79e>
 8007e00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80b7 	beq.w	8007f76 <_dtoa_r+0x8d6>
 8007e08:	b18c      	cbz	r4, 8007e2e <_dtoa_r+0x78e>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4658      	mov	r0, fp
 8007e10:	f000 fc08 	bl	8008624 <__pow5mult>
 8007e14:	464a      	mov	r2, r9
 8007e16:	4601      	mov	r1, r0
 8007e18:	4605      	mov	r5, r0
 8007e1a:	4658      	mov	r0, fp
 8007e1c:	f000 fb5a 	bl	80084d4 <__multiply>
 8007e20:	4649      	mov	r1, r9
 8007e22:	9004      	str	r0, [sp, #16]
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 fa8b 	bl	8008340 <_Bfree>
 8007e2a:	9b04      	ldr	r3, [sp, #16]
 8007e2c:	4699      	mov	r9, r3
 8007e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e30:	1b1a      	subs	r2, r3, r4
 8007e32:	d004      	beq.n	8007e3e <_dtoa_r+0x79e>
 8007e34:	4649      	mov	r1, r9
 8007e36:	4658      	mov	r0, fp
 8007e38:	f000 fbf4 	bl	8008624 <__pow5mult>
 8007e3c:	4681      	mov	r9, r0
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4658      	mov	r0, fp
 8007e42:	f000 fb31 	bl	80084a8 <__i2b>
 8007e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 81c9 	beq.w	80081e2 <_dtoa_r+0xb42>
 8007e50:	461a      	mov	r2, r3
 8007e52:	4601      	mov	r1, r0
 8007e54:	4658      	mov	r0, fp
 8007e56:	f000 fbe5 	bl	8008624 <__pow5mult>
 8007e5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	f300 808f 	bgt.w	8007f82 <_dtoa_r+0x8e2>
 8007e64:	9b02      	ldr	r3, [sp, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 8087 	bne.w	8007f7a <_dtoa_r+0x8da>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 8083 	bne.w	8007f7e <_dtoa_r+0x8de>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e7e:	0d1b      	lsrs	r3, r3, #20
 8007e80:	051b      	lsls	r3, r3, #20
 8007e82:	b12b      	cbz	r3, 8007e90 <_dtoa_r+0x7f0>
 8007e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e86:	f108 0801 	add.w	r8, r8, #1
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8e:	2301      	movs	r3, #1
 8007e90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 81aa 	beq.w	80081ee <_dtoa_r+0xb4e>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ea0:	6918      	ldr	r0, [r3, #16]
 8007ea2:	f000 fab5 	bl	8008410 <__hi0bits>
 8007ea6:	f1c0 0020 	rsb	r0, r0, #32
 8007eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eac:	4418      	add	r0, r3
 8007eae:	f010 001f 	ands.w	r0, r0, #31
 8007eb2:	d071      	beq.n	8007f98 <_dtoa_r+0x8f8>
 8007eb4:	f1c0 0320 	rsb	r3, r0, #32
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	dd65      	ble.n	8007f88 <_dtoa_r+0x8e8>
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	f1c0 001c 	rsb	r0, r0, #28
 8007ec2:	4403      	add	r3, r0
 8007ec4:	4480      	add	r8, r0
 8007ec6:	4406      	add	r6, r0
 8007ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eca:	f1b8 0f00 	cmp.w	r8, #0
 8007ece:	dd05      	ble.n	8007edc <_dtoa_r+0x83c>
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	f000 fbff 	bl	80086d8 <__lshift>
 8007eda:	4681      	mov	r9, r0
 8007edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd05      	ble.n	8007eee <_dtoa_r+0x84e>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fbf6 	bl	80086d8 <__lshift>
 8007eec:	4604      	mov	r4, r0
 8007eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d053      	beq.n	8007f9c <_dtoa_r+0x8fc>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4648      	mov	r0, r9
 8007ef8:	f000 fc5a 	bl	80087b0 <__mcmp>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	da4d      	bge.n	8007f9c <_dtoa_r+0x8fc>
 8007f00:	1e7b      	subs	r3, r7, #1
 8007f02:	4649      	mov	r1, r9
 8007f04:	9304      	str	r3, [sp, #16]
 8007f06:	220a      	movs	r2, #10
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	f000 fa3a 	bl	8008384 <__multadd>
 8007f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f12:	4681      	mov	r9, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 816c 	beq.w	80081f2 <_dtoa_r+0xb52>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	220a      	movs	r2, #10
 8007f20:	4658      	mov	r0, fp
 8007f22:	f000 fa2f 	bl	8008384 <__multadd>
 8007f26:	9b08      	ldr	r3, [sp, #32]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc61      	bgt.n	8007ff2 <_dtoa_r+0x952>
 8007f2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	dc3b      	bgt.n	8007fac <_dtoa_r+0x90c>
 8007f34:	e05d      	b.n	8007ff2 <_dtoa_r+0x952>
 8007f36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f38:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f3c:	e746      	b.n	8007dcc <_dtoa_r+0x72c>
 8007f3e:	9b07      	ldr	r3, [sp, #28]
 8007f40:	1e5c      	subs	r4, r3, #1
 8007f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	bfbf      	itttt	lt
 8007f48:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f4a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007f4c:	1ae3      	sublt	r3, r4, r3
 8007f4e:	18d2      	addlt	r2, r2, r3
 8007f50:	bfa8      	it	ge
 8007f52:	1b1c      	subge	r4, r3, r4
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	bfbe      	ittt	lt
 8007f58:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f5a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007f5c:	2400      	movlt	r4, #0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfb5      	itete	lt
 8007f62:	eba8 0603 	sublt.w	r6, r8, r3
 8007f66:	4646      	movge	r6, r8
 8007f68:	2300      	movlt	r3, #0
 8007f6a:	9b07      	ldrge	r3, [sp, #28]
 8007f6c:	e730      	b.n	8007dd0 <_dtoa_r+0x730>
 8007f6e:	4646      	mov	r6, r8
 8007f70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f74:	e735      	b.n	8007de2 <_dtoa_r+0x742>
 8007f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f78:	e75c      	b.n	8007e34 <_dtoa_r+0x794>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e788      	b.n	8007e90 <_dtoa_r+0x7f0>
 8007f7e:	9b02      	ldr	r3, [sp, #8]
 8007f80:	e786      	b.n	8007e90 <_dtoa_r+0x7f0>
 8007f82:	2300      	movs	r3, #0
 8007f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f86:	e788      	b.n	8007e9a <_dtoa_r+0x7fa>
 8007f88:	d09f      	beq.n	8007eca <_dtoa_r+0x82a>
 8007f8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f8c:	331c      	adds	r3, #28
 8007f8e:	441a      	add	r2, r3
 8007f90:	4498      	add	r8, r3
 8007f92:	441e      	add	r6, r3
 8007f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f96:	e798      	b.n	8007eca <_dtoa_r+0x82a>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	e7f6      	b.n	8007f8a <_dtoa_r+0x8ea>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	9704      	str	r7, [sp, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dc20      	bgt.n	8007fe6 <_dtoa_r+0x946>
 8007fa4:	9308      	str	r3, [sp, #32]
 8007fa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	dd1e      	ble.n	8007fea <_dtoa_r+0x94a>
 8007fac:	9b08      	ldr	r3, [sp, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f47f aebc 	bne.w	8007d2c <_dtoa_r+0x68c>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	2205      	movs	r2, #5
 8007fb8:	4658      	mov	r0, fp
 8007fba:	f000 f9e3 	bl	8008384 <__multadd>
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4648      	mov	r0, r9
 8007fc4:	f000 fbf4 	bl	80087b0 <__mcmp>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f77f aeaf 	ble.w	8007d2c <_dtoa_r+0x68c>
 8007fce:	2331      	movs	r3, #49	@ 0x31
 8007fd0:	4656      	mov	r6, sl
 8007fd2:	f806 3b01 	strb.w	r3, [r6], #1
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	e6aa      	b.n	8007d34 <_dtoa_r+0x694>
 8007fde:	9c07      	ldr	r4, [sp, #28]
 8007fe0:	9704      	str	r7, [sp, #16]
 8007fe2:	4625      	mov	r5, r4
 8007fe4:	e7f3      	b.n	8007fce <_dtoa_r+0x92e>
 8007fe6:	9b07      	ldr	r3, [sp, #28]
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8104 	beq.w	80081fa <_dtoa_r+0xb5a>
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	dd05      	ble.n	8008002 <_dtoa_r+0x962>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	f000 fb6c 	bl	80086d8 <__lshift>
 8008000:	4605      	mov	r5, r0
 8008002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d05a      	beq.n	80080be <_dtoa_r+0xa1e>
 8008008:	4658      	mov	r0, fp
 800800a:	6869      	ldr	r1, [r5, #4]
 800800c:	f000 f958 	bl	80082c0 <_Balloc>
 8008010:	4606      	mov	r6, r0
 8008012:	b928      	cbnz	r0, 8008020 <_dtoa_r+0x980>
 8008014:	4602      	mov	r2, r0
 8008016:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800801a:	4b83      	ldr	r3, [pc, #524]	@ (8008228 <_dtoa_r+0xb88>)
 800801c:	f7ff bb54 	b.w	80076c8 <_dtoa_r+0x28>
 8008020:	692a      	ldr	r2, [r5, #16]
 8008022:	f105 010c 	add.w	r1, r5, #12
 8008026:	3202      	adds	r2, #2
 8008028:	0092      	lsls	r2, r2, #2
 800802a:	300c      	adds	r0, #12
 800802c:	f7ff fa9b 	bl	8007566 <memcpy>
 8008030:	2201      	movs	r2, #1
 8008032:	4631      	mov	r1, r6
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fb4f 	bl	80086d8 <__lshift>
 800803a:	462f      	mov	r7, r5
 800803c:	4605      	mov	r5, r0
 800803e:	f10a 0301 	add.w	r3, sl, #1
 8008042:	9307      	str	r3, [sp, #28]
 8008044:	9b08      	ldr	r3, [sp, #32]
 8008046:	4453      	add	r3, sl
 8008048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	930a      	str	r3, [sp, #40]	@ 0x28
 8008052:	9b07      	ldr	r3, [sp, #28]
 8008054:	4621      	mov	r1, r4
 8008056:	3b01      	subs	r3, #1
 8008058:	4648      	mov	r0, r9
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	f7ff fa98 	bl	8007590 <quorem>
 8008060:	4639      	mov	r1, r7
 8008062:	9008      	str	r0, [sp, #32]
 8008064:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008068:	4648      	mov	r0, r9
 800806a:	f000 fba1 	bl	80087b0 <__mcmp>
 800806e:	462a      	mov	r2, r5
 8008070:	9009      	str	r0, [sp, #36]	@ 0x24
 8008072:	4621      	mov	r1, r4
 8008074:	4658      	mov	r0, fp
 8008076:	f000 fbb7 	bl	80087e8 <__mdiff>
 800807a:	68c2      	ldr	r2, [r0, #12]
 800807c:	4606      	mov	r6, r0
 800807e:	bb02      	cbnz	r2, 80080c2 <_dtoa_r+0xa22>
 8008080:	4601      	mov	r1, r0
 8008082:	4648      	mov	r0, r9
 8008084:	f000 fb94 	bl	80087b0 <__mcmp>
 8008088:	4602      	mov	r2, r0
 800808a:	4631      	mov	r1, r6
 800808c:	4658      	mov	r0, fp
 800808e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008090:	f000 f956 	bl	8008340 <_Bfree>
 8008094:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008096:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008098:	9e07      	ldr	r6, [sp, #28]
 800809a:	ea43 0102 	orr.w	r1, r3, r2
 800809e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a0:	4319      	orrs	r1, r3
 80080a2:	d110      	bne.n	80080c6 <_dtoa_r+0xa26>
 80080a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080a8:	d029      	beq.n	80080fe <_dtoa_r+0xa5e>
 80080aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dd02      	ble.n	80080b6 <_dtoa_r+0xa16>
 80080b0:	9b08      	ldr	r3, [sp, #32]
 80080b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080b6:	9b02      	ldr	r3, [sp, #8]
 80080b8:	f883 8000 	strb.w	r8, [r3]
 80080bc:	e63b      	b.n	8007d36 <_dtoa_r+0x696>
 80080be:	4628      	mov	r0, r5
 80080c0:	e7bb      	b.n	800803a <_dtoa_r+0x99a>
 80080c2:	2201      	movs	r2, #1
 80080c4:	e7e1      	b.n	800808a <_dtoa_r+0x9ea>
 80080c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db04      	blt.n	80080d6 <_dtoa_r+0xa36>
 80080cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80080ce:	430b      	orrs	r3, r1
 80080d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080d2:	430b      	orrs	r3, r1
 80080d4:	d120      	bne.n	8008118 <_dtoa_r+0xa78>
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	dded      	ble.n	80080b6 <_dtoa_r+0xa16>
 80080da:	4649      	mov	r1, r9
 80080dc:	2201      	movs	r2, #1
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 fafa 	bl	80086d8 <__lshift>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4681      	mov	r9, r0
 80080e8:	f000 fb62 	bl	80087b0 <__mcmp>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	dc03      	bgt.n	80080f8 <_dtoa_r+0xa58>
 80080f0:	d1e1      	bne.n	80080b6 <_dtoa_r+0xa16>
 80080f2:	f018 0f01 	tst.w	r8, #1
 80080f6:	d0de      	beq.n	80080b6 <_dtoa_r+0xa16>
 80080f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080fc:	d1d8      	bne.n	80080b0 <_dtoa_r+0xa10>
 80080fe:	2339      	movs	r3, #57	@ 0x39
 8008100:	9a02      	ldr	r2, [sp, #8]
 8008102:	7013      	strb	r3, [r2, #0]
 8008104:	4633      	mov	r3, r6
 8008106:	461e      	mov	r6, r3
 8008108:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800810c:	3b01      	subs	r3, #1
 800810e:	2a39      	cmp	r2, #57	@ 0x39
 8008110:	d052      	beq.n	80081b8 <_dtoa_r+0xb18>
 8008112:	3201      	adds	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e60e      	b.n	8007d36 <_dtoa_r+0x696>
 8008118:	2a00      	cmp	r2, #0
 800811a:	dd07      	ble.n	800812c <_dtoa_r+0xa8c>
 800811c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008120:	d0ed      	beq.n	80080fe <_dtoa_r+0xa5e>
 8008122:	9a02      	ldr	r2, [sp, #8]
 8008124:	f108 0301 	add.w	r3, r8, #1
 8008128:	7013      	strb	r3, [r2, #0]
 800812a:	e604      	b.n	8007d36 <_dtoa_r+0x696>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	9a07      	ldr	r2, [sp, #28]
 8008130:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008136:	4293      	cmp	r3, r2
 8008138:	d028      	beq.n	800818c <_dtoa_r+0xaec>
 800813a:	4649      	mov	r1, r9
 800813c:	2300      	movs	r3, #0
 800813e:	220a      	movs	r2, #10
 8008140:	4658      	mov	r0, fp
 8008142:	f000 f91f 	bl	8008384 <__multadd>
 8008146:	42af      	cmp	r7, r5
 8008148:	4681      	mov	r9, r0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	f04f 020a 	mov.w	r2, #10
 8008152:	4639      	mov	r1, r7
 8008154:	4658      	mov	r0, fp
 8008156:	d107      	bne.n	8008168 <_dtoa_r+0xac8>
 8008158:	f000 f914 	bl	8008384 <__multadd>
 800815c:	4607      	mov	r7, r0
 800815e:	4605      	mov	r5, r0
 8008160:	9b07      	ldr	r3, [sp, #28]
 8008162:	3301      	adds	r3, #1
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	e774      	b.n	8008052 <_dtoa_r+0x9b2>
 8008168:	f000 f90c 	bl	8008384 <__multadd>
 800816c:	4629      	mov	r1, r5
 800816e:	4607      	mov	r7, r0
 8008170:	2300      	movs	r3, #0
 8008172:	220a      	movs	r2, #10
 8008174:	4658      	mov	r0, fp
 8008176:	f000 f905 	bl	8008384 <__multadd>
 800817a:	4605      	mov	r5, r0
 800817c:	e7f0      	b.n	8008160 <_dtoa_r+0xac0>
 800817e:	9b08      	ldr	r3, [sp, #32]
 8008180:	2700      	movs	r7, #0
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfcc      	ite	gt
 8008186:	461e      	movgt	r6, r3
 8008188:	2601      	movle	r6, #1
 800818a:	4456      	add	r6, sl
 800818c:	4649      	mov	r1, r9
 800818e:	2201      	movs	r2, #1
 8008190:	4658      	mov	r0, fp
 8008192:	f000 faa1 	bl	80086d8 <__lshift>
 8008196:	4621      	mov	r1, r4
 8008198:	4681      	mov	r9, r0
 800819a:	f000 fb09 	bl	80087b0 <__mcmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	dcb0      	bgt.n	8008104 <_dtoa_r+0xa64>
 80081a2:	d102      	bne.n	80081aa <_dtoa_r+0xb0a>
 80081a4:	f018 0f01 	tst.w	r8, #1
 80081a8:	d1ac      	bne.n	8008104 <_dtoa_r+0xa64>
 80081aa:	4633      	mov	r3, r6
 80081ac:	461e      	mov	r6, r3
 80081ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081b2:	2a30      	cmp	r2, #48	@ 0x30
 80081b4:	d0fa      	beq.n	80081ac <_dtoa_r+0xb0c>
 80081b6:	e5be      	b.n	8007d36 <_dtoa_r+0x696>
 80081b8:	459a      	cmp	sl, r3
 80081ba:	d1a4      	bne.n	8008106 <_dtoa_r+0xa66>
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	3301      	adds	r3, #1
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	2331      	movs	r3, #49	@ 0x31
 80081c4:	f88a 3000 	strb.w	r3, [sl]
 80081c8:	e5b5      	b.n	8007d36 <_dtoa_r+0x696>
 80081ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800822c <_dtoa_r+0xb8c>
 80081d0:	b11b      	cbz	r3, 80081da <_dtoa_r+0xb3a>
 80081d2:	f10a 0308 	add.w	r3, sl, #8
 80081d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	4650      	mov	r0, sl
 80081dc:	b017      	add	sp, #92	@ 0x5c
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	f77f ae3d 	ble.w	8007e64 <_dtoa_r+0x7c4>
 80081ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ee:	2001      	movs	r0, #1
 80081f0:	e65b      	b.n	8007eaa <_dtoa_r+0x80a>
 80081f2:	9b08      	ldr	r3, [sp, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f77f aed6 	ble.w	8007fa6 <_dtoa_r+0x906>
 80081fa:	4656      	mov	r6, sl
 80081fc:	4621      	mov	r1, r4
 80081fe:	4648      	mov	r0, r9
 8008200:	f7ff f9c6 	bl	8007590 <quorem>
 8008204:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008208:	9b08      	ldr	r3, [sp, #32]
 800820a:	f806 8b01 	strb.w	r8, [r6], #1
 800820e:	eba6 020a 	sub.w	r2, r6, sl
 8008212:	4293      	cmp	r3, r2
 8008214:	ddb3      	ble.n	800817e <_dtoa_r+0xade>
 8008216:	4649      	mov	r1, r9
 8008218:	2300      	movs	r3, #0
 800821a:	220a      	movs	r2, #10
 800821c:	4658      	mov	r0, fp
 800821e:	f000 f8b1 	bl	8008384 <__multadd>
 8008222:	4681      	mov	r9, r0
 8008224:	e7ea      	b.n	80081fc <_dtoa_r+0xb5c>
 8008226:	bf00      	nop
 8008228:	08009658 	.word	0x08009658
 800822c:	080095dc 	.word	0x080095dc

08008230 <_free_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	d040      	beq.n	80082ba <_free_r+0x8a>
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f0c      	subs	r4, r1, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	18e4      	addlt	r4, r4, r3
 8008244:	f7fe fb28 	bl	8006898 <__malloc_lock>
 8008248:	4a1c      	ldr	r2, [pc, #112]	@ (80082bc <_free_r+0x8c>)
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	b933      	cbnz	r3, 800825c <_free_r+0x2c>
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	4628      	mov	r0, r5
 8008254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008258:	f7fe bb24 	b.w	80068a4 <__malloc_unlock>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d908      	bls.n	8008272 <_free_r+0x42>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	e7ed      	b.n	800824e <_free_r+0x1e>
 8008272:	461a      	mov	r2, r3
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b10b      	cbz	r3, 800827c <_free_r+0x4c>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d9fa      	bls.n	8008272 <_free_r+0x42>
 800827c:	6811      	ldr	r1, [r2, #0]
 800827e:	1850      	adds	r0, r2, r1
 8008280:	42a0      	cmp	r0, r4
 8008282:	d10b      	bne.n	800829c <_free_r+0x6c>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	4401      	add	r1, r0
 8008288:	1850      	adds	r0, r2, r1
 800828a:	4283      	cmp	r3, r0
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	d1e0      	bne.n	8008252 <_free_r+0x22>
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4408      	add	r0, r1
 8008296:	6010      	str	r0, [r2, #0]
 8008298:	6053      	str	r3, [r2, #4]
 800829a:	e7da      	b.n	8008252 <_free_r+0x22>
 800829c:	d902      	bls.n	80082a4 <_free_r+0x74>
 800829e:	230c      	movs	r3, #12
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	e7d6      	b.n	8008252 <_free_r+0x22>
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	1821      	adds	r1, r4, r0
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf01      	itttt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6054      	str	r4, [r2, #4]
 80082b8:	e7cb      	b.n	8008252 <_free_r+0x22>
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	2000048c 	.word	0x2000048c

080082c0 <_Balloc>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	69c6      	ldr	r6, [r0, #28]
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	b976      	cbnz	r6, 80082e8 <_Balloc+0x28>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7fe fa3a 	bl	8006744 <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	61e0      	str	r0, [r4, #28]
 80082d4:	b920      	cbnz	r0, 80082e0 <_Balloc+0x20>
 80082d6:	216b      	movs	r1, #107	@ 0x6b
 80082d8:	4b17      	ldr	r3, [pc, #92]	@ (8008338 <_Balloc+0x78>)
 80082da:	4818      	ldr	r0, [pc, #96]	@ (800833c <_Balloc+0x7c>)
 80082dc:	f7fe fa14 	bl	8006708 <__assert_func>
 80082e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e4:	6006      	str	r6, [r0, #0]
 80082e6:	60c6      	str	r6, [r0, #12]
 80082e8:	69e6      	ldr	r6, [r4, #28]
 80082ea:	68f3      	ldr	r3, [r6, #12]
 80082ec:	b183      	cbz	r3, 8008310 <_Balloc+0x50>
 80082ee:	69e3      	ldr	r3, [r4, #28]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082f6:	b9b8      	cbnz	r0, 8008328 <_Balloc+0x68>
 80082f8:	2101      	movs	r1, #1
 80082fa:	fa01 f605 	lsl.w	r6, r1, r5
 80082fe:	1d72      	adds	r2, r6, #5
 8008300:	4620      	mov	r0, r4
 8008302:	0092      	lsls	r2, r2, #2
 8008304:	f000 ff74 	bl	80091f0 <_calloc_r>
 8008308:	b160      	cbz	r0, 8008324 <_Balloc+0x64>
 800830a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800830e:	e00e      	b.n	800832e <_Balloc+0x6e>
 8008310:	2221      	movs	r2, #33	@ 0x21
 8008312:	2104      	movs	r1, #4
 8008314:	4620      	mov	r0, r4
 8008316:	f000 ff6b 	bl	80091f0 <_calloc_r>
 800831a:	69e3      	ldr	r3, [r4, #28]
 800831c:	60f0      	str	r0, [r6, #12]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e4      	bne.n	80082ee <_Balloc+0x2e>
 8008324:	2000      	movs	r0, #0
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	6802      	ldr	r2, [r0, #0]
 800832a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800832e:	2300      	movs	r3, #0
 8008330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008334:	e7f7      	b.n	8008326 <_Balloc+0x66>
 8008336:	bf00      	nop
 8008338:	080095e9 	.word	0x080095e9
 800833c:	08009669 	.word	0x08009669

08008340 <_Bfree>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	69c6      	ldr	r6, [r0, #28]
 8008344:	4605      	mov	r5, r0
 8008346:	460c      	mov	r4, r1
 8008348:	b976      	cbnz	r6, 8008368 <_Bfree+0x28>
 800834a:	2010      	movs	r0, #16
 800834c:	f7fe f9fa 	bl	8006744 <malloc>
 8008350:	4602      	mov	r2, r0
 8008352:	61e8      	str	r0, [r5, #28]
 8008354:	b920      	cbnz	r0, 8008360 <_Bfree+0x20>
 8008356:	218f      	movs	r1, #143	@ 0x8f
 8008358:	4b08      	ldr	r3, [pc, #32]	@ (800837c <_Bfree+0x3c>)
 800835a:	4809      	ldr	r0, [pc, #36]	@ (8008380 <_Bfree+0x40>)
 800835c:	f7fe f9d4 	bl	8006708 <__assert_func>
 8008360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008364:	6006      	str	r6, [r0, #0]
 8008366:	60c6      	str	r6, [r0, #12]
 8008368:	b13c      	cbz	r4, 800837a <_Bfree+0x3a>
 800836a:	69eb      	ldr	r3, [r5, #28]
 800836c:	6862      	ldr	r2, [r4, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008374:	6021      	str	r1, [r4, #0]
 8008376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	080095e9 	.word	0x080095e9
 8008380:	08009669 	.word	0x08009669

08008384 <__multadd>:
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	4607      	mov	r7, r0
 800838a:	460c      	mov	r4, r1
 800838c:	461e      	mov	r6, r3
 800838e:	2000      	movs	r0, #0
 8008390:	690d      	ldr	r5, [r1, #16]
 8008392:	f101 0c14 	add.w	ip, r1, #20
 8008396:	f8dc 3000 	ldr.w	r3, [ip]
 800839a:	3001      	adds	r0, #1
 800839c:	b299      	uxth	r1, r3
 800839e:	fb02 6101 	mla	r1, r2, r1, r6
 80083a2:	0c1e      	lsrs	r6, r3, #16
 80083a4:	0c0b      	lsrs	r3, r1, #16
 80083a6:	fb02 3306 	mla	r3, r2, r6, r3
 80083aa:	b289      	uxth	r1, r1
 80083ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083b0:	4285      	cmp	r5, r0
 80083b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083b6:	f84c 1b04 	str.w	r1, [ip], #4
 80083ba:	dcec      	bgt.n	8008396 <__multadd+0x12>
 80083bc:	b30e      	cbz	r6, 8008402 <__multadd+0x7e>
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dc19      	bgt.n	80083f8 <__multadd+0x74>
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4638      	mov	r0, r7
 80083c8:	3101      	adds	r1, #1
 80083ca:	f7ff ff79 	bl	80082c0 <_Balloc>
 80083ce:	4680      	mov	r8, r0
 80083d0:	b928      	cbnz	r0, 80083de <__multadd+0x5a>
 80083d2:	4602      	mov	r2, r0
 80083d4:	21ba      	movs	r1, #186	@ 0xba
 80083d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <__multadd+0x84>)
 80083d8:	480c      	ldr	r0, [pc, #48]	@ (800840c <__multadd+0x88>)
 80083da:	f7fe f995 	bl	8006708 <__assert_func>
 80083de:	6922      	ldr	r2, [r4, #16]
 80083e0:	f104 010c 	add.w	r1, r4, #12
 80083e4:	3202      	adds	r2, #2
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	300c      	adds	r0, #12
 80083ea:	f7ff f8bc 	bl	8007566 <memcpy>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff ffa5 	bl	8008340 <_Bfree>
 80083f6:	4644      	mov	r4, r8
 80083f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083fc:	3501      	adds	r5, #1
 80083fe:	615e      	str	r6, [r3, #20]
 8008400:	6125      	str	r5, [r4, #16]
 8008402:	4620      	mov	r0, r4
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	08009658 	.word	0x08009658
 800840c:	08009669 	.word	0x08009669

08008410 <__hi0bits>:
 8008410:	4603      	mov	r3, r0
 8008412:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008416:	bf3a      	itte	cc
 8008418:	0403      	lslcc	r3, r0, #16
 800841a:	2010      	movcc	r0, #16
 800841c:	2000      	movcs	r0, #0
 800841e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008422:	bf3c      	itt	cc
 8008424:	021b      	lslcc	r3, r3, #8
 8008426:	3008      	addcc	r0, #8
 8008428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842c:	bf3c      	itt	cc
 800842e:	011b      	lslcc	r3, r3, #4
 8008430:	3004      	addcc	r0, #4
 8008432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008436:	bf3c      	itt	cc
 8008438:	009b      	lslcc	r3, r3, #2
 800843a:	3002      	addcc	r0, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	db05      	blt.n	800844c <__hi0bits+0x3c>
 8008440:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008444:	f100 0001 	add.w	r0, r0, #1
 8008448:	bf08      	it	eq
 800844a:	2020      	moveq	r0, #32
 800844c:	4770      	bx	lr

0800844e <__lo0bits>:
 800844e:	6803      	ldr	r3, [r0, #0]
 8008450:	4602      	mov	r2, r0
 8008452:	f013 0007 	ands.w	r0, r3, #7
 8008456:	d00b      	beq.n	8008470 <__lo0bits+0x22>
 8008458:	07d9      	lsls	r1, r3, #31
 800845a:	d421      	bmi.n	80084a0 <__lo0bits+0x52>
 800845c:	0798      	lsls	r0, r3, #30
 800845e:	bf49      	itett	mi
 8008460:	085b      	lsrmi	r3, r3, #1
 8008462:	089b      	lsrpl	r3, r3, #2
 8008464:	2001      	movmi	r0, #1
 8008466:	6013      	strmi	r3, [r2, #0]
 8008468:	bf5c      	itt	pl
 800846a:	2002      	movpl	r0, #2
 800846c:	6013      	strpl	r3, [r2, #0]
 800846e:	4770      	bx	lr
 8008470:	b299      	uxth	r1, r3
 8008472:	b909      	cbnz	r1, 8008478 <__lo0bits+0x2a>
 8008474:	2010      	movs	r0, #16
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b2d9      	uxtb	r1, r3
 800847a:	b909      	cbnz	r1, 8008480 <__lo0bits+0x32>
 800847c:	3008      	adds	r0, #8
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	0719      	lsls	r1, r3, #28
 8008482:	bf04      	itt	eq
 8008484:	091b      	lsreq	r3, r3, #4
 8008486:	3004      	addeq	r0, #4
 8008488:	0799      	lsls	r1, r3, #30
 800848a:	bf04      	itt	eq
 800848c:	089b      	lsreq	r3, r3, #2
 800848e:	3002      	addeq	r0, #2
 8008490:	07d9      	lsls	r1, r3, #31
 8008492:	d403      	bmi.n	800849c <__lo0bits+0x4e>
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	f100 0001 	add.w	r0, r0, #1
 800849a:	d003      	beq.n	80084a4 <__lo0bits+0x56>
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4770      	bx	lr
 80084a0:	2000      	movs	r0, #0
 80084a2:	4770      	bx	lr
 80084a4:	2020      	movs	r0, #32
 80084a6:	4770      	bx	lr

080084a8 <__i2b>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	460c      	mov	r4, r1
 80084ac:	2101      	movs	r1, #1
 80084ae:	f7ff ff07 	bl	80082c0 <_Balloc>
 80084b2:	4602      	mov	r2, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__i2b+0x1a>
 80084b6:	f240 1145 	movw	r1, #325	@ 0x145
 80084ba:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <__i2b+0x24>)
 80084bc:	4804      	ldr	r0, [pc, #16]	@ (80084d0 <__i2b+0x28>)
 80084be:	f7fe f923 	bl	8006708 <__assert_func>
 80084c2:	2301      	movs	r3, #1
 80084c4:	6144      	str	r4, [r0, #20]
 80084c6:	6103      	str	r3, [r0, #16]
 80084c8:	bd10      	pop	{r4, pc}
 80084ca:	bf00      	nop
 80084cc:	08009658 	.word	0x08009658
 80084d0:	08009669 	.word	0x08009669

080084d4 <__multiply>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4614      	mov	r4, r2
 80084da:	690a      	ldr	r2, [r1, #16]
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	460f      	mov	r7, r1
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bfa2      	ittt	ge
 80084e4:	4623      	movge	r3, r4
 80084e6:	460c      	movge	r4, r1
 80084e8:	461f      	movge	r7, r3
 80084ea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084ee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	6861      	ldr	r1, [r4, #4]
 80084f6:	eb0a 0609 	add.w	r6, sl, r9
 80084fa:	42b3      	cmp	r3, r6
 80084fc:	b085      	sub	sp, #20
 80084fe:	bfb8      	it	lt
 8008500:	3101      	addlt	r1, #1
 8008502:	f7ff fedd 	bl	80082c0 <_Balloc>
 8008506:	b930      	cbnz	r0, 8008516 <__multiply+0x42>
 8008508:	4602      	mov	r2, r0
 800850a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800850e:	4b43      	ldr	r3, [pc, #268]	@ (800861c <__multiply+0x148>)
 8008510:	4843      	ldr	r0, [pc, #268]	@ (8008620 <__multiply+0x14c>)
 8008512:	f7fe f8f9 	bl	8006708 <__assert_func>
 8008516:	f100 0514 	add.w	r5, r0, #20
 800851a:	462b      	mov	r3, r5
 800851c:	2200      	movs	r2, #0
 800851e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008522:	4543      	cmp	r3, r8
 8008524:	d321      	bcc.n	800856a <__multiply+0x96>
 8008526:	f107 0114 	add.w	r1, r7, #20
 800852a:	f104 0214 	add.w	r2, r4, #20
 800852e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008532:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	1b13      	subs	r3, r2, r4
 800853a:	3b15      	subs	r3, #21
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	3304      	adds	r3, #4
 8008542:	f104 0715 	add.w	r7, r4, #21
 8008546:	42ba      	cmp	r2, r7
 8008548:	bf38      	it	cc
 800854a:	2304      	movcc	r3, #4
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	9103      	str	r1, [sp, #12]
 8008552:	428b      	cmp	r3, r1
 8008554:	d80c      	bhi.n	8008570 <__multiply+0x9c>
 8008556:	2e00      	cmp	r6, #0
 8008558:	dd03      	ble.n	8008562 <__multiply+0x8e>
 800855a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800855e:	2b00      	cmp	r3, #0
 8008560:	d05a      	beq.n	8008618 <__multiply+0x144>
 8008562:	6106      	str	r6, [r0, #16]
 8008564:	b005      	add	sp, #20
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	f843 2b04 	str.w	r2, [r3], #4
 800856e:	e7d8      	b.n	8008522 <__multiply+0x4e>
 8008570:	f8b1 a000 	ldrh.w	sl, [r1]
 8008574:	f1ba 0f00 	cmp.w	sl, #0
 8008578:	d023      	beq.n	80085c2 <__multiply+0xee>
 800857a:	46a9      	mov	r9, r5
 800857c:	f04f 0c00 	mov.w	ip, #0
 8008580:	f104 0e14 	add.w	lr, r4, #20
 8008584:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008588:	f8d9 3000 	ldr.w	r3, [r9]
 800858c:	fa1f fb87 	uxth.w	fp, r7
 8008590:	b29b      	uxth	r3, r3
 8008592:	fb0a 330b 	mla	r3, sl, fp, r3
 8008596:	4463      	add	r3, ip
 8008598:	f8d9 c000 	ldr.w	ip, [r9]
 800859c:	0c3f      	lsrs	r7, r7, #16
 800859e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80085a2:	fb0a c707 	mla	r7, sl, r7, ip
 80085a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085b0:	4572      	cmp	r2, lr
 80085b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085b6:	f849 3b04 	str.w	r3, [r9], #4
 80085ba:	d8e3      	bhi.n	8008584 <__multiply+0xb0>
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	f845 c003 	str.w	ip, [r5, r3]
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	3104      	adds	r1, #4
 80085c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	d021      	beq.n	8008614 <__multiply+0x140>
 80085d0:	46ae      	mov	lr, r5
 80085d2:	f04f 0a00 	mov.w	sl, #0
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	f104 0c14 	add.w	ip, r4, #20
 80085dc:	f8bc b000 	ldrh.w	fp, [ip]
 80085e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	fb09 770b 	mla	r7, r9, fp, r7
 80085ea:	4457      	add	r7, sl
 80085ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085f0:	f84e 3b04 	str.w	r3, [lr], #4
 80085f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085fc:	f8be 3000 	ldrh.w	r3, [lr]
 8008600:	4562      	cmp	r2, ip
 8008602:	fb09 330a 	mla	r3, r9, sl, r3
 8008606:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800860a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800860e:	d8e5      	bhi.n	80085dc <__multiply+0x108>
 8008610:	9f01      	ldr	r7, [sp, #4]
 8008612:	51eb      	str	r3, [r5, r7]
 8008614:	3504      	adds	r5, #4
 8008616:	e79a      	b.n	800854e <__multiply+0x7a>
 8008618:	3e01      	subs	r6, #1
 800861a:	e79c      	b.n	8008556 <__multiply+0x82>
 800861c:	08009658 	.word	0x08009658
 8008620:	08009669 	.word	0x08009669

08008624 <__pow5mult>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4615      	mov	r5, r2
 800862a:	f012 0203 	ands.w	r2, r2, #3
 800862e:	4607      	mov	r7, r0
 8008630:	460e      	mov	r6, r1
 8008632:	d007      	beq.n	8008644 <__pow5mult+0x20>
 8008634:	4c25      	ldr	r4, [pc, #148]	@ (80086cc <__pow5mult+0xa8>)
 8008636:	3a01      	subs	r2, #1
 8008638:	2300      	movs	r3, #0
 800863a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800863e:	f7ff fea1 	bl	8008384 <__multadd>
 8008642:	4606      	mov	r6, r0
 8008644:	10ad      	asrs	r5, r5, #2
 8008646:	d03d      	beq.n	80086c4 <__pow5mult+0xa0>
 8008648:	69fc      	ldr	r4, [r7, #28]
 800864a:	b97c      	cbnz	r4, 800866c <__pow5mult+0x48>
 800864c:	2010      	movs	r0, #16
 800864e:	f7fe f879 	bl	8006744 <malloc>
 8008652:	4602      	mov	r2, r0
 8008654:	61f8      	str	r0, [r7, #28]
 8008656:	b928      	cbnz	r0, 8008664 <__pow5mult+0x40>
 8008658:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800865c:	4b1c      	ldr	r3, [pc, #112]	@ (80086d0 <__pow5mult+0xac>)
 800865e:	481d      	ldr	r0, [pc, #116]	@ (80086d4 <__pow5mult+0xb0>)
 8008660:	f7fe f852 	bl	8006708 <__assert_func>
 8008664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008668:	6004      	str	r4, [r0, #0]
 800866a:	60c4      	str	r4, [r0, #12]
 800866c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008674:	b94c      	cbnz	r4, 800868a <__pow5mult+0x66>
 8008676:	f240 2171 	movw	r1, #625	@ 0x271
 800867a:	4638      	mov	r0, r7
 800867c:	f7ff ff14 	bl	80084a8 <__i2b>
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	f8c8 0008 	str.w	r0, [r8, #8]
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	f04f 0900 	mov.w	r9, #0
 800868e:	07eb      	lsls	r3, r5, #31
 8008690:	d50a      	bpl.n	80086a8 <__pow5mult+0x84>
 8008692:	4631      	mov	r1, r6
 8008694:	4622      	mov	r2, r4
 8008696:	4638      	mov	r0, r7
 8008698:	f7ff ff1c 	bl	80084d4 <__multiply>
 800869c:	4680      	mov	r8, r0
 800869e:	4631      	mov	r1, r6
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff fe4d 	bl	8008340 <_Bfree>
 80086a6:	4646      	mov	r6, r8
 80086a8:	106d      	asrs	r5, r5, #1
 80086aa:	d00b      	beq.n	80086c4 <__pow5mult+0xa0>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	b938      	cbnz	r0, 80086c0 <__pow5mult+0x9c>
 80086b0:	4622      	mov	r2, r4
 80086b2:	4621      	mov	r1, r4
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff ff0d 	bl	80084d4 <__multiply>
 80086ba:	6020      	str	r0, [r4, #0]
 80086bc:	f8c0 9000 	str.w	r9, [r0]
 80086c0:	4604      	mov	r4, r0
 80086c2:	e7e4      	b.n	800868e <__pow5mult+0x6a>
 80086c4:	4630      	mov	r0, r6
 80086c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ca:	bf00      	nop
 80086cc:	080096c4 	.word	0x080096c4
 80086d0:	080095e9 	.word	0x080095e9
 80086d4:	08009669 	.word	0x08009669

080086d8 <__lshift>:
 80086d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	460c      	mov	r4, r1
 80086de:	4607      	mov	r7, r0
 80086e0:	4691      	mov	r9, r2
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	6849      	ldr	r1, [r1, #4]
 80086e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086f0:	f108 0601 	add.w	r6, r8, #1
 80086f4:	42b3      	cmp	r3, r6
 80086f6:	db0b      	blt.n	8008710 <__lshift+0x38>
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7ff fde1 	bl	80082c0 <_Balloc>
 80086fe:	4605      	mov	r5, r0
 8008700:	b948      	cbnz	r0, 8008716 <__lshift+0x3e>
 8008702:	4602      	mov	r2, r0
 8008704:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008708:	4b27      	ldr	r3, [pc, #156]	@ (80087a8 <__lshift+0xd0>)
 800870a:	4828      	ldr	r0, [pc, #160]	@ (80087ac <__lshift+0xd4>)
 800870c:	f7fd fffc 	bl	8006708 <__assert_func>
 8008710:	3101      	adds	r1, #1
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	e7ee      	b.n	80086f4 <__lshift+0x1c>
 8008716:	2300      	movs	r3, #0
 8008718:	f100 0114 	add.w	r1, r0, #20
 800871c:	f100 0210 	add.w	r2, r0, #16
 8008720:	4618      	mov	r0, r3
 8008722:	4553      	cmp	r3, sl
 8008724:	db33      	blt.n	800878e <__lshift+0xb6>
 8008726:	6920      	ldr	r0, [r4, #16]
 8008728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800872c:	f104 0314 	add.w	r3, r4, #20
 8008730:	f019 091f 	ands.w	r9, r9, #31
 8008734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800873c:	d02b      	beq.n	8008796 <__lshift+0xbe>
 800873e:	468a      	mov	sl, r1
 8008740:	2200      	movs	r2, #0
 8008742:	f1c9 0e20 	rsb	lr, r9, #32
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	fa00 f009 	lsl.w	r0, r0, r9
 800874c:	4310      	orrs	r0, r2
 800874e:	f84a 0b04 	str.w	r0, [sl], #4
 8008752:	f853 2b04 	ldr.w	r2, [r3], #4
 8008756:	459c      	cmp	ip, r3
 8008758:	fa22 f20e 	lsr.w	r2, r2, lr
 800875c:	d8f3      	bhi.n	8008746 <__lshift+0x6e>
 800875e:	ebac 0304 	sub.w	r3, ip, r4
 8008762:	3b15      	subs	r3, #21
 8008764:	f023 0303 	bic.w	r3, r3, #3
 8008768:	3304      	adds	r3, #4
 800876a:	f104 0015 	add.w	r0, r4, #21
 800876e:	4584      	cmp	ip, r0
 8008770:	bf38      	it	cc
 8008772:	2304      	movcc	r3, #4
 8008774:	50ca      	str	r2, [r1, r3]
 8008776:	b10a      	cbz	r2, 800877c <__lshift+0xa4>
 8008778:	f108 0602 	add.w	r6, r8, #2
 800877c:	3e01      	subs	r6, #1
 800877e:	4638      	mov	r0, r7
 8008780:	4621      	mov	r1, r4
 8008782:	612e      	str	r6, [r5, #16]
 8008784:	f7ff fddc 	bl	8008340 <_Bfree>
 8008788:	4628      	mov	r0, r5
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008792:	3301      	adds	r3, #1
 8008794:	e7c5      	b.n	8008722 <__lshift+0x4a>
 8008796:	3904      	subs	r1, #4
 8008798:	f853 2b04 	ldr.w	r2, [r3], #4
 800879c:	459c      	cmp	ip, r3
 800879e:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a2:	d8f9      	bhi.n	8008798 <__lshift+0xc0>
 80087a4:	e7ea      	b.n	800877c <__lshift+0xa4>
 80087a6:	bf00      	nop
 80087a8:	08009658 	.word	0x08009658
 80087ac:	08009669 	.word	0x08009669

080087b0 <__mcmp>:
 80087b0:	4603      	mov	r3, r0
 80087b2:	690a      	ldr	r2, [r1, #16]
 80087b4:	6900      	ldr	r0, [r0, #16]
 80087b6:	b530      	push	{r4, r5, lr}
 80087b8:	1a80      	subs	r0, r0, r2
 80087ba:	d10e      	bne.n	80087da <__mcmp+0x2a>
 80087bc:	3314      	adds	r3, #20
 80087be:	3114      	adds	r1, #20
 80087c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087d0:	4295      	cmp	r5, r2
 80087d2:	d003      	beq.n	80087dc <__mcmp+0x2c>
 80087d4:	d205      	bcs.n	80087e2 <__mcmp+0x32>
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087da:	bd30      	pop	{r4, r5, pc}
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d3f3      	bcc.n	80087c8 <__mcmp+0x18>
 80087e0:	e7fb      	b.n	80087da <__mcmp+0x2a>
 80087e2:	2001      	movs	r0, #1
 80087e4:	e7f9      	b.n	80087da <__mcmp+0x2a>
	...

080087e8 <__mdiff>:
 80087e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4689      	mov	r9, r1
 80087ee:	4606      	mov	r6, r0
 80087f0:	4611      	mov	r1, r2
 80087f2:	4648      	mov	r0, r9
 80087f4:	4614      	mov	r4, r2
 80087f6:	f7ff ffdb 	bl	80087b0 <__mcmp>
 80087fa:	1e05      	subs	r5, r0, #0
 80087fc:	d112      	bne.n	8008824 <__mdiff+0x3c>
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff fd5d 	bl	80082c0 <_Balloc>
 8008806:	4602      	mov	r2, r0
 8008808:	b928      	cbnz	r0, 8008816 <__mdiff+0x2e>
 800880a:	f240 2137 	movw	r1, #567	@ 0x237
 800880e:	4b3e      	ldr	r3, [pc, #248]	@ (8008908 <__mdiff+0x120>)
 8008810:	483e      	ldr	r0, [pc, #248]	@ (800890c <__mdiff+0x124>)
 8008812:	f7fd ff79 	bl	8006708 <__assert_func>
 8008816:	2301      	movs	r3, #1
 8008818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800881c:	4610      	mov	r0, r2
 800881e:	b003      	add	sp, #12
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	bfbc      	itt	lt
 8008826:	464b      	movlt	r3, r9
 8008828:	46a1      	movlt	r9, r4
 800882a:	4630      	mov	r0, r6
 800882c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008830:	bfba      	itte	lt
 8008832:	461c      	movlt	r4, r3
 8008834:	2501      	movlt	r5, #1
 8008836:	2500      	movge	r5, #0
 8008838:	f7ff fd42 	bl	80082c0 <_Balloc>
 800883c:	4602      	mov	r2, r0
 800883e:	b918      	cbnz	r0, 8008848 <__mdiff+0x60>
 8008840:	f240 2145 	movw	r1, #581	@ 0x245
 8008844:	4b30      	ldr	r3, [pc, #192]	@ (8008908 <__mdiff+0x120>)
 8008846:	e7e3      	b.n	8008810 <__mdiff+0x28>
 8008848:	f100 0b14 	add.w	fp, r0, #20
 800884c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008850:	f109 0310 	add.w	r3, r9, #16
 8008854:	60c5      	str	r5, [r0, #12]
 8008856:	f04f 0c00 	mov.w	ip, #0
 800885a:	f109 0514 	add.w	r5, r9, #20
 800885e:	46d9      	mov	r9, fp
 8008860:	6926      	ldr	r6, [r4, #16]
 8008862:	f104 0e14 	add.w	lr, r4, #20
 8008866:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800886a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008876:	f853 af04 	ldr.w	sl, [r3, #4]!
 800887a:	b281      	uxth	r1, r0
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	fa1f f38a 	uxth.w	r3, sl
 8008882:	1a5b      	subs	r3, r3, r1
 8008884:	0c00      	lsrs	r0, r0, #16
 8008886:	4463      	add	r3, ip
 8008888:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800888c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008890:	b29b      	uxth	r3, r3
 8008892:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008896:	4576      	cmp	r6, lr
 8008898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800889c:	f849 3b04 	str.w	r3, [r9], #4
 80088a0:	d8e6      	bhi.n	8008870 <__mdiff+0x88>
 80088a2:	1b33      	subs	r3, r6, r4
 80088a4:	3b15      	subs	r3, #21
 80088a6:	f023 0303 	bic.w	r3, r3, #3
 80088aa:	3415      	adds	r4, #21
 80088ac:	3304      	adds	r3, #4
 80088ae:	42a6      	cmp	r6, r4
 80088b0:	bf38      	it	cc
 80088b2:	2304      	movcc	r3, #4
 80088b4:	441d      	add	r5, r3
 80088b6:	445b      	add	r3, fp
 80088b8:	461e      	mov	r6, r3
 80088ba:	462c      	mov	r4, r5
 80088bc:	4544      	cmp	r4, r8
 80088be:	d30e      	bcc.n	80088de <__mdiff+0xf6>
 80088c0:	f108 0103 	add.w	r1, r8, #3
 80088c4:	1b49      	subs	r1, r1, r5
 80088c6:	f021 0103 	bic.w	r1, r1, #3
 80088ca:	3d03      	subs	r5, #3
 80088cc:	45a8      	cmp	r8, r5
 80088ce:	bf38      	it	cc
 80088d0:	2100      	movcc	r1, #0
 80088d2:	440b      	add	r3, r1
 80088d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088d8:	b199      	cbz	r1, 8008902 <__mdiff+0x11a>
 80088da:	6117      	str	r7, [r2, #16]
 80088dc:	e79e      	b.n	800881c <__mdiff+0x34>
 80088de:	46e6      	mov	lr, ip
 80088e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80088e4:	fa1f fc81 	uxth.w	ip, r1
 80088e8:	44f4      	add	ip, lr
 80088ea:	0c08      	lsrs	r0, r1, #16
 80088ec:	4471      	add	r1, lr
 80088ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088f2:	b289      	uxth	r1, r1
 80088f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088fc:	f846 1b04 	str.w	r1, [r6], #4
 8008900:	e7dc      	b.n	80088bc <__mdiff+0xd4>
 8008902:	3f01      	subs	r7, #1
 8008904:	e7e6      	b.n	80088d4 <__mdiff+0xec>
 8008906:	bf00      	nop
 8008908:	08009658 	.word	0x08009658
 800890c:	08009669 	.word	0x08009669

08008910 <__d2b>:
 8008910:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008914:	2101      	movs	r1, #1
 8008916:	4690      	mov	r8, r2
 8008918:	4699      	mov	r9, r3
 800891a:	9e08      	ldr	r6, [sp, #32]
 800891c:	f7ff fcd0 	bl	80082c0 <_Balloc>
 8008920:	4604      	mov	r4, r0
 8008922:	b930      	cbnz	r0, 8008932 <__d2b+0x22>
 8008924:	4602      	mov	r2, r0
 8008926:	f240 310f 	movw	r1, #783	@ 0x30f
 800892a:	4b23      	ldr	r3, [pc, #140]	@ (80089b8 <__d2b+0xa8>)
 800892c:	4823      	ldr	r0, [pc, #140]	@ (80089bc <__d2b+0xac>)
 800892e:	f7fd feeb 	bl	8006708 <__assert_func>
 8008932:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008936:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800893a:	b10d      	cbz	r5, 8008940 <__d2b+0x30>
 800893c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	f1b8 0300 	subs.w	r3, r8, #0
 8008946:	d024      	beq.n	8008992 <__d2b+0x82>
 8008948:	4668      	mov	r0, sp
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	f7ff fd7f 	bl	800844e <__lo0bits>
 8008950:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008954:	b1d8      	cbz	r0, 800898e <__d2b+0x7e>
 8008956:	f1c0 0320 	rsb	r3, r0, #32
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	430b      	orrs	r3, r1
 8008960:	40c2      	lsrs	r2, r0
 8008962:	6163      	str	r3, [r4, #20]
 8008964:	9201      	str	r2, [sp, #4]
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bf0c      	ite	eq
 800896c:	2201      	moveq	r2, #1
 800896e:	2202      	movne	r2, #2
 8008970:	61a3      	str	r3, [r4, #24]
 8008972:	6122      	str	r2, [r4, #16]
 8008974:	b1ad      	cbz	r5, 80089a2 <__d2b+0x92>
 8008976:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800897a:	4405      	add	r5, r0
 800897c:	6035      	str	r5, [r6, #0]
 800897e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	4620      	mov	r0, r4
 8008988:	b002      	add	sp, #8
 800898a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800898e:	6161      	str	r1, [r4, #20]
 8008990:	e7e9      	b.n	8008966 <__d2b+0x56>
 8008992:	a801      	add	r0, sp, #4
 8008994:	f7ff fd5b 	bl	800844e <__lo0bits>
 8008998:	9b01      	ldr	r3, [sp, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	6163      	str	r3, [r4, #20]
 800899e:	3020      	adds	r0, #32
 80089a0:	e7e7      	b.n	8008972 <__d2b+0x62>
 80089a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089aa:	6030      	str	r0, [r6, #0]
 80089ac:	6918      	ldr	r0, [r3, #16]
 80089ae:	f7ff fd2f 	bl	8008410 <__hi0bits>
 80089b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089b6:	e7e4      	b.n	8008982 <__d2b+0x72>
 80089b8:	08009658 	.word	0x08009658
 80089bc:	08009669 	.word	0x08009669

080089c0 <__ssputs_r>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	461f      	mov	r7, r3
 80089c6:	688e      	ldr	r6, [r1, #8]
 80089c8:	4682      	mov	sl, r0
 80089ca:	42be      	cmp	r6, r7
 80089cc:	460c      	mov	r4, r1
 80089ce:	4690      	mov	r8, r2
 80089d0:	680b      	ldr	r3, [r1, #0]
 80089d2:	d82d      	bhi.n	8008a30 <__ssputs_r+0x70>
 80089d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089dc:	d026      	beq.n	8008a2c <__ssputs_r+0x6c>
 80089de:	6965      	ldr	r5, [r4, #20]
 80089e0:	6909      	ldr	r1, [r1, #16]
 80089e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089e6:	eba3 0901 	sub.w	r9, r3, r1
 80089ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ee:	1c7b      	adds	r3, r7, #1
 80089f0:	444b      	add	r3, r9
 80089f2:	106d      	asrs	r5, r5, #1
 80089f4:	429d      	cmp	r5, r3
 80089f6:	bf38      	it	cc
 80089f8:	461d      	movcc	r5, r3
 80089fa:	0553      	lsls	r3, r2, #21
 80089fc:	d527      	bpl.n	8008a4e <__ssputs_r+0x8e>
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7fd feca 	bl	8006798 <_malloc_r>
 8008a04:	4606      	mov	r6, r0
 8008a06:	b360      	cbz	r0, 8008a62 <__ssputs_r+0xa2>
 8008a08:	464a      	mov	r2, r9
 8008a0a:	6921      	ldr	r1, [r4, #16]
 8008a0c:	f7fe fdab 	bl	8007566 <memcpy>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	6126      	str	r6, [r4, #16]
 8008a1e:	444e      	add	r6, r9
 8008a20:	6026      	str	r6, [r4, #0]
 8008a22:	463e      	mov	r6, r7
 8008a24:	6165      	str	r5, [r4, #20]
 8008a26:	eba5 0509 	sub.w	r5, r5, r9
 8008a2a:	60a5      	str	r5, [r4, #8]
 8008a2c:	42be      	cmp	r6, r7
 8008a2e:	d900      	bls.n	8008a32 <__ssputs_r+0x72>
 8008a30:	463e      	mov	r6, r7
 8008a32:	4632      	mov	r2, r6
 8008a34:	4641      	mov	r1, r8
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	f7fe fcdd 	bl	80073f6 <memmove>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	1b9b      	subs	r3, r3, r6
 8008a42:	60a3      	str	r3, [r4, #8]
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	4433      	add	r3, r6
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4e:	462a      	mov	r2, r5
 8008a50:	f000 fbf4 	bl	800923c <_realloc_r>
 8008a54:	4606      	mov	r6, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d1e0      	bne.n	8008a1c <__ssputs_r+0x5c>
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	6921      	ldr	r1, [r4, #16]
 8008a5e:	f7ff fbe7 	bl	8008230 <_free_r>
 8008a62:	230c      	movs	r3, #12
 8008a64:	f8ca 3000 	str.w	r3, [sl]
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	e7e9      	b.n	8008a4a <__ssputs_r+0x8a>
	...

08008a78 <_svfiprintf_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	4698      	mov	r8, r3
 8008a7e:	898b      	ldrh	r3, [r1, #12]
 8008a80:	4607      	mov	r7, r0
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	460d      	mov	r5, r1
 8008a86:	4614      	mov	r4, r2
 8008a88:	b09d      	sub	sp, #116	@ 0x74
 8008a8a:	d510      	bpl.n	8008aae <_svfiprintf_r+0x36>
 8008a8c:	690b      	ldr	r3, [r1, #16]
 8008a8e:	b973      	cbnz	r3, 8008aae <_svfiprintf_r+0x36>
 8008a90:	2140      	movs	r1, #64	@ 0x40
 8008a92:	f7fd fe81 	bl	8006798 <_malloc_r>
 8008a96:	6028      	str	r0, [r5, #0]
 8008a98:	6128      	str	r0, [r5, #16]
 8008a9a:	b930      	cbnz	r0, 8008aaa <_svfiprintf_r+0x32>
 8008a9c:	230c      	movs	r3, #12
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aa4:	b01d      	add	sp, #116	@ 0x74
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aaa:	2340      	movs	r3, #64	@ 0x40
 8008aac:	616b      	str	r3, [r5, #20]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab2:	2320      	movs	r3, #32
 8008ab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ab8:	2330      	movs	r3, #48	@ 0x30
 8008aba:	f04f 0901 	mov.w	r9, #1
 8008abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c5c <_svfiprintf_r+0x1e4>
 8008ac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aca:	4623      	mov	r3, r4
 8008acc:	469a      	mov	sl, r3
 8008ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad2:	b10a      	cbz	r2, 8008ad8 <_svfiprintf_r+0x60>
 8008ad4:	2a25      	cmp	r2, #37	@ 0x25
 8008ad6:	d1f9      	bne.n	8008acc <_svfiprintf_r+0x54>
 8008ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8008adc:	d00b      	beq.n	8008af6 <_svfiprintf_r+0x7e>
 8008ade:	465b      	mov	r3, fp
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff ff6b 	bl	80089c0 <__ssputs_r>
 8008aea:	3001      	adds	r0, #1
 8008aec:	f000 80a7 	beq.w	8008c3e <_svfiprintf_r+0x1c6>
 8008af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008af2:	445a      	add	r2, fp
 8008af4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008af6:	f89a 3000 	ldrb.w	r3, [sl]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 809f 	beq.w	8008c3e <_svfiprintf_r+0x1c6>
 8008b00:	2300      	movs	r3, #0
 8008b02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0a:	f10a 0a01 	add.w	sl, sl, #1
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b16:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b18:	4654      	mov	r4, sl
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b20:	484e      	ldr	r0, [pc, #312]	@ (8008c5c <_svfiprintf_r+0x1e4>)
 8008b22:	f7fe fd12 	bl	800754a <memchr>
 8008b26:	9a04      	ldr	r2, [sp, #16]
 8008b28:	b9d8      	cbnz	r0, 8008b62 <_svfiprintf_r+0xea>
 8008b2a:	06d0      	lsls	r0, r2, #27
 8008b2c:	bf44      	itt	mi
 8008b2e:	2320      	movmi	r3, #32
 8008b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b34:	0711      	lsls	r1, r2, #28
 8008b36:	bf44      	itt	mi
 8008b38:	232b      	movmi	r3, #43	@ 0x2b
 8008b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b44:	d015      	beq.n	8008b72 <_svfiprintf_r+0xfa>
 8008b46:	4654      	mov	r4, sl
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f04f 0c0a 	mov.w	ip, #10
 8008b4e:	9a07      	ldr	r2, [sp, #28]
 8008b50:	4621      	mov	r1, r4
 8008b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b56:	3b30      	subs	r3, #48	@ 0x30
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d94b      	bls.n	8008bf4 <_svfiprintf_r+0x17c>
 8008b5c:	b1b0      	cbz	r0, 8008b8c <_svfiprintf_r+0x114>
 8008b5e:	9207      	str	r2, [sp, #28]
 8008b60:	e014      	b.n	8008b8c <_svfiprintf_r+0x114>
 8008b62:	eba0 0308 	sub.w	r3, r0, r8
 8008b66:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	46a2      	mov	sl, r4
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	e7d2      	b.n	8008b18 <_svfiprintf_r+0xa0>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	1d19      	adds	r1, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9103      	str	r1, [sp, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfbb      	ittet	lt
 8008b7e:	425b      	neglt	r3, r3
 8008b80:	f042 0202 	orrlt.w	r2, r2, #2
 8008b84:	9307      	strge	r3, [sp, #28]
 8008b86:	9307      	strlt	r3, [sp, #28]
 8008b88:	bfb8      	it	lt
 8008b8a:	9204      	strlt	r2, [sp, #16]
 8008b8c:	7823      	ldrb	r3, [r4, #0]
 8008b8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b90:	d10a      	bne.n	8008ba8 <_svfiprintf_r+0x130>
 8008b92:	7863      	ldrb	r3, [r4, #1]
 8008b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b96:	d132      	bne.n	8008bfe <_svfiprintf_r+0x186>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	3402      	adds	r4, #2
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	9203      	str	r2, [sp, #12]
 8008ba2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c60 <_svfiprintf_r+0x1e8>
 8008bac:	2203      	movs	r2, #3
 8008bae:	4650      	mov	r0, sl
 8008bb0:	7821      	ldrb	r1, [r4, #0]
 8008bb2:	f7fe fcca 	bl	800754a <memchr>
 8008bb6:	b138      	cbz	r0, 8008bc8 <_svfiprintf_r+0x150>
 8008bb8:	2240      	movs	r2, #64	@ 0x40
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	eba0 000a 	sub.w	r0, r0, sl
 8008bc0:	4082      	lsls	r2, r0
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	3401      	adds	r4, #1
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bcc:	2206      	movs	r2, #6
 8008bce:	4825      	ldr	r0, [pc, #148]	@ (8008c64 <_svfiprintf_r+0x1ec>)
 8008bd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bd4:	f7fe fcb9 	bl	800754a <memchr>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d036      	beq.n	8008c4a <_svfiprintf_r+0x1d2>
 8008bdc:	4b22      	ldr	r3, [pc, #136]	@ (8008c68 <_svfiprintf_r+0x1f0>)
 8008bde:	bb1b      	cbnz	r3, 8008c28 <_svfiprintf_r+0x1b0>
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	3307      	adds	r3, #7
 8008be4:	f023 0307 	bic.w	r3, r3, #7
 8008be8:	3308      	adds	r3, #8
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bee:	4433      	add	r3, r6
 8008bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf2:	e76a      	b.n	8008aca <_svfiprintf_r+0x52>
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bfc:	e7a8      	b.n	8008b50 <_svfiprintf_r+0xd8>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f04f 0c0a 	mov.w	ip, #10
 8008c04:	4619      	mov	r1, r3
 8008c06:	3401      	adds	r4, #1
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c10:	3a30      	subs	r2, #48	@ 0x30
 8008c12:	2a09      	cmp	r2, #9
 8008c14:	d903      	bls.n	8008c1e <_svfiprintf_r+0x1a6>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0c6      	beq.n	8008ba8 <_svfiprintf_r+0x130>
 8008c1a:	9105      	str	r1, [sp, #20]
 8008c1c:	e7c4      	b.n	8008ba8 <_svfiprintf_r+0x130>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2301      	movs	r3, #1
 8008c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c26:	e7f0      	b.n	8008c0a <_svfiprintf_r+0x192>
 8008c28:	ab03      	add	r3, sp, #12
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4638      	mov	r0, r7
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <_svfiprintf_r+0x1f4>)
 8008c32:	a904      	add	r1, sp, #16
 8008c34:	f7fd feda 	bl	80069ec <_printf_float>
 8008c38:	1c42      	adds	r2, r0, #1
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	d1d6      	bne.n	8008bec <_svfiprintf_r+0x174>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	065b      	lsls	r3, r3, #25
 8008c42:	f53f af2d 	bmi.w	8008aa0 <_svfiprintf_r+0x28>
 8008c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c48:	e72c      	b.n	8008aa4 <_svfiprintf_r+0x2c>
 8008c4a:	ab03      	add	r3, sp, #12
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4638      	mov	r0, r7
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <_svfiprintf_r+0x1f4>)
 8008c54:	a904      	add	r1, sp, #16
 8008c56:	f7fe f967 	bl	8006f28 <_printf_i>
 8008c5a:	e7ed      	b.n	8008c38 <_svfiprintf_r+0x1c0>
 8008c5c:	080097c0 	.word	0x080097c0
 8008c60:	080097c6 	.word	0x080097c6
 8008c64:	080097ca 	.word	0x080097ca
 8008c68:	080069ed 	.word	0x080069ed
 8008c6c:	080089c1 	.word	0x080089c1

08008c70 <__sfputc_r>:
 8008c70:	6893      	ldr	r3, [r2, #8]
 8008c72:	b410      	push	{r4}
 8008c74:	3b01      	subs	r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	6093      	str	r3, [r2, #8]
 8008c7a:	da07      	bge.n	8008c8c <__sfputc_r+0x1c>
 8008c7c:	6994      	ldr	r4, [r2, #24]
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	db01      	blt.n	8008c86 <__sfputc_r+0x16>
 8008c82:	290a      	cmp	r1, #10
 8008c84:	d102      	bne.n	8008c8c <__sfputc_r+0x1c>
 8008c86:	bc10      	pop	{r4}
 8008c88:	f000 b9da 	b.w	8009040 <__swbuf_r>
 8008c8c:	6813      	ldr	r3, [r2, #0]
 8008c8e:	1c58      	adds	r0, r3, #1
 8008c90:	6010      	str	r0, [r2, #0]
 8008c92:	7019      	strb	r1, [r3, #0]
 8008c94:	4608      	mov	r0, r1
 8008c96:	bc10      	pop	{r4}
 8008c98:	4770      	bx	lr

08008c9a <__sfputs_r>:
 8008c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	18d5      	adds	r5, r2, r3
 8008ca4:	42ac      	cmp	r4, r5
 8008ca6:	d101      	bne.n	8008cac <__sfputs_r+0x12>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e007      	b.n	8008cbc <__sfputs_r+0x22>
 8008cac:	463a      	mov	r2, r7
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb4:	f7ff ffdc 	bl	8008c70 <__sfputc_r>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d1f3      	bne.n	8008ca4 <__sfputs_r+0xa>
 8008cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cc0 <_vfiprintf_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	4698      	mov	r8, r3
 8008cca:	4606      	mov	r6, r0
 8008ccc:	b09d      	sub	sp, #116	@ 0x74
 8008cce:	b118      	cbz	r0, 8008cd8 <_vfiprintf_r+0x18>
 8008cd0:	6a03      	ldr	r3, [r0, #32]
 8008cd2:	b90b      	cbnz	r3, 8008cd8 <_vfiprintf_r+0x18>
 8008cd4:	f7fe fad4 	bl	8007280 <__sinit>
 8008cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cda:	07d9      	lsls	r1, r3, #31
 8008cdc:	d405      	bmi.n	8008cea <_vfiprintf_r+0x2a>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	059a      	lsls	r2, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_vfiprintf_r+0x2a>
 8008ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce6:	f7fe fc2e 	bl	8007546 <__retarget_lock_acquire_recursive>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	071b      	lsls	r3, r3, #28
 8008cee:	d501      	bpl.n	8008cf4 <_vfiprintf_r+0x34>
 8008cf0:	692b      	ldr	r3, [r5, #16]
 8008cf2:	b99b      	cbnz	r3, 8008d1c <_vfiprintf_r+0x5c>
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f000 f9e0 	bl	80090bc <__swsetup_r>
 8008cfc:	b170      	cbz	r0, 8008d1c <_vfiprintf_r+0x5c>
 8008cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d00:	07dc      	lsls	r4, r3, #31
 8008d02:	d504      	bpl.n	8008d0e <_vfiprintf_r+0x4e>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d08:	b01d      	add	sp, #116	@ 0x74
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	0598      	lsls	r0, r3, #22
 8008d12:	d4f7      	bmi.n	8008d04 <_vfiprintf_r+0x44>
 8008d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d16:	f7fe fc17 	bl	8007548 <__retarget_lock_release_recursive>
 8008d1a:	e7f3      	b.n	8008d04 <_vfiprintf_r+0x44>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d20:	2320      	movs	r3, #32
 8008d22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d26:	2330      	movs	r3, #48	@ 0x30
 8008d28:	f04f 0901 	mov.w	r9, #1
 8008d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d30:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008edc <_vfiprintf_r+0x21c>
 8008d34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d38:	4623      	mov	r3, r4
 8008d3a:	469a      	mov	sl, r3
 8008d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d40:	b10a      	cbz	r2, 8008d46 <_vfiprintf_r+0x86>
 8008d42:	2a25      	cmp	r2, #37	@ 0x25
 8008d44:	d1f9      	bne.n	8008d3a <_vfiprintf_r+0x7a>
 8008d46:	ebba 0b04 	subs.w	fp, sl, r4
 8008d4a:	d00b      	beq.n	8008d64 <_vfiprintf_r+0xa4>
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ffa1 	bl	8008c9a <__sfputs_r>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f000 80a7 	beq.w	8008eac <_vfiprintf_r+0x1ec>
 8008d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d60:	445a      	add	r2, fp
 8008d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d64:	f89a 3000 	ldrb.w	r3, [sl]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 809f 	beq.w	8008eac <_vfiprintf_r+0x1ec>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d78:	f10a 0a01 	add.w	sl, sl, #1
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d86:	4654      	mov	r4, sl
 8008d88:	2205      	movs	r2, #5
 8008d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8e:	4853      	ldr	r0, [pc, #332]	@ (8008edc <_vfiprintf_r+0x21c>)
 8008d90:	f7fe fbdb 	bl	800754a <memchr>
 8008d94:	9a04      	ldr	r2, [sp, #16]
 8008d96:	b9d8      	cbnz	r0, 8008dd0 <_vfiprintf_r+0x110>
 8008d98:	06d1      	lsls	r1, r2, #27
 8008d9a:	bf44      	itt	mi
 8008d9c:	2320      	movmi	r3, #32
 8008d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da2:	0713      	lsls	r3, r2, #28
 8008da4:	bf44      	itt	mi
 8008da6:	232b      	movmi	r3, #43	@ 0x2b
 8008da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dac:	f89a 3000 	ldrb.w	r3, [sl]
 8008db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db2:	d015      	beq.n	8008de0 <_vfiprintf_r+0x120>
 8008db4:	4654      	mov	r4, sl
 8008db6:	2000      	movs	r0, #0
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	9a07      	ldr	r2, [sp, #28]
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc4:	3b30      	subs	r3, #48	@ 0x30
 8008dc6:	2b09      	cmp	r3, #9
 8008dc8:	d94b      	bls.n	8008e62 <_vfiprintf_r+0x1a2>
 8008dca:	b1b0      	cbz	r0, 8008dfa <_vfiprintf_r+0x13a>
 8008dcc:	9207      	str	r2, [sp, #28]
 8008dce:	e014      	b.n	8008dfa <_vfiprintf_r+0x13a>
 8008dd0:	eba0 0308 	sub.w	r3, r0, r8
 8008dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	46a2      	mov	sl, r4
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	e7d2      	b.n	8008d86 <_vfiprintf_r+0xc6>
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	1d19      	adds	r1, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	9103      	str	r1, [sp, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bfbb      	ittet	lt
 8008dec:	425b      	neglt	r3, r3
 8008dee:	f042 0202 	orrlt.w	r2, r2, #2
 8008df2:	9307      	strge	r3, [sp, #28]
 8008df4:	9307      	strlt	r3, [sp, #28]
 8008df6:	bfb8      	it	lt
 8008df8:	9204      	strlt	r2, [sp, #16]
 8008dfa:	7823      	ldrb	r3, [r4, #0]
 8008dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dfe:	d10a      	bne.n	8008e16 <_vfiprintf_r+0x156>
 8008e00:	7863      	ldrb	r3, [r4, #1]
 8008e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e04:	d132      	bne.n	8008e6c <_vfiprintf_r+0x1ac>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	3402      	adds	r4, #2
 8008e0a:	1d1a      	adds	r2, r3, #4
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	9203      	str	r2, [sp, #12]
 8008e10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ee0 <_vfiprintf_r+0x220>
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	7821      	ldrb	r1, [r4, #0]
 8008e20:	f7fe fb93 	bl	800754a <memchr>
 8008e24:	b138      	cbz	r0, 8008e36 <_vfiprintf_r+0x176>
 8008e26:	2240      	movs	r2, #64	@ 0x40
 8008e28:	9b04      	ldr	r3, [sp, #16]
 8008e2a:	eba0 000a 	sub.w	r0, r0, sl
 8008e2e:	4082      	lsls	r2, r0
 8008e30:	4313      	orrs	r3, r2
 8008e32:	3401      	adds	r4, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3a:	2206      	movs	r2, #6
 8008e3c:	4829      	ldr	r0, [pc, #164]	@ (8008ee4 <_vfiprintf_r+0x224>)
 8008e3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e42:	f7fe fb82 	bl	800754a <memchr>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d03f      	beq.n	8008eca <_vfiprintf_r+0x20a>
 8008e4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ee8 <_vfiprintf_r+0x228>)
 8008e4c:	bb1b      	cbnz	r3, 8008e96 <_vfiprintf_r+0x1d6>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	3307      	adds	r3, #7
 8008e52:	f023 0307 	bic.w	r3, r3, #7
 8008e56:	3308      	adds	r3, #8
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5c:	443b      	add	r3, r7
 8008e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e60:	e76a      	b.n	8008d38 <_vfiprintf_r+0x78>
 8008e62:	460c      	mov	r4, r1
 8008e64:	2001      	movs	r0, #1
 8008e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e6a:	e7a8      	b.n	8008dbe <_vfiprintf_r+0xfe>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f04f 0c0a 	mov.w	ip, #10
 8008e72:	4619      	mov	r1, r3
 8008e74:	3401      	adds	r4, #1
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7e:	3a30      	subs	r2, #48	@ 0x30
 8008e80:	2a09      	cmp	r2, #9
 8008e82:	d903      	bls.n	8008e8c <_vfiprintf_r+0x1cc>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0c6      	beq.n	8008e16 <_vfiprintf_r+0x156>
 8008e88:	9105      	str	r1, [sp, #20]
 8008e8a:	e7c4      	b.n	8008e16 <_vfiprintf_r+0x156>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	2301      	movs	r3, #1
 8008e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e94:	e7f0      	b.n	8008e78 <_vfiprintf_r+0x1b8>
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4b13      	ldr	r3, [pc, #76]	@ (8008eec <_vfiprintf_r+0x22c>)
 8008ea0:	a904      	add	r1, sp, #16
 8008ea2:	f7fd fda3 	bl	80069ec <_printf_float>
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	1c78      	adds	r0, r7, #1
 8008eaa:	d1d6      	bne.n	8008e5a <_vfiprintf_r+0x19a>
 8008eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eae:	07d9      	lsls	r1, r3, #31
 8008eb0:	d405      	bmi.n	8008ebe <_vfiprintf_r+0x1fe>
 8008eb2:	89ab      	ldrh	r3, [r5, #12]
 8008eb4:	059a      	lsls	r2, r3, #22
 8008eb6:	d402      	bmi.n	8008ebe <_vfiprintf_r+0x1fe>
 8008eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eba:	f7fe fb45 	bl	8007548 <__retarget_lock_release_recursive>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	065b      	lsls	r3, r3, #25
 8008ec2:	f53f af1f 	bmi.w	8008d04 <_vfiprintf_r+0x44>
 8008ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ec8:	e71e      	b.n	8008d08 <_vfiprintf_r+0x48>
 8008eca:	ab03      	add	r3, sp, #12
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <_vfiprintf_r+0x22c>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	f7fe f827 	bl	8006f28 <_printf_i>
 8008eda:	e7e4      	b.n	8008ea6 <_vfiprintf_r+0x1e6>
 8008edc:	080097c0 	.word	0x080097c0
 8008ee0:	080097c6 	.word	0x080097c6
 8008ee4:	080097ca 	.word	0x080097ca
 8008ee8:	080069ed 	.word	0x080069ed
 8008eec:	08008c9b 	.word	0x08008c9b

08008ef0 <__sflush_r>:
 8008ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	0716      	lsls	r6, r2, #28
 8008ef8:	4605      	mov	r5, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	d454      	bmi.n	8008fa8 <__sflush_r+0xb8>
 8008efe:	684b      	ldr	r3, [r1, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dc02      	bgt.n	8008f0a <__sflush_r+0x1a>
 8008f04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd48      	ble.n	8008f9c <__sflush_r+0xac>
 8008f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f0c:	2e00      	cmp	r6, #0
 8008f0e:	d045      	beq.n	8008f9c <__sflush_r+0xac>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f16:	682f      	ldr	r7, [r5, #0]
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	d030      	beq.n	8008f80 <__sflush_r+0x90>
 8008f1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	0759      	lsls	r1, r3, #29
 8008f24:	d505      	bpl.n	8008f32 <__sflush_r+0x42>
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	1ad2      	subs	r2, r2, r3
 8008f2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f2c:	b10b      	cbz	r3, 8008f32 <__sflush_r+0x42>
 8008f2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	2300      	movs	r3, #0
 8008f34:	4628      	mov	r0, r5
 8008f36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f38:	6a21      	ldr	r1, [r4, #32]
 8008f3a:	47b0      	blx	r6
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	d106      	bne.n	8008f50 <__sflush_r+0x60>
 8008f42:	6829      	ldr	r1, [r5, #0]
 8008f44:	291d      	cmp	r1, #29
 8008f46:	d82b      	bhi.n	8008fa0 <__sflush_r+0xb0>
 8008f48:	4a28      	ldr	r2, [pc, #160]	@ (8008fec <__sflush_r+0xfc>)
 8008f4a:	410a      	asrs	r2, r1
 8008f4c:	07d6      	lsls	r6, r2, #31
 8008f4e:	d427      	bmi.n	8008fa0 <__sflush_r+0xb0>
 8008f50:	2200      	movs	r2, #0
 8008f52:	6062      	str	r2, [r4, #4]
 8008f54:	6922      	ldr	r2, [r4, #16]
 8008f56:	04d9      	lsls	r1, r3, #19
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	d504      	bpl.n	8008f66 <__sflush_r+0x76>
 8008f5c:	1c42      	adds	r2, r0, #1
 8008f5e:	d101      	bne.n	8008f64 <__sflush_r+0x74>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b903      	cbnz	r3, 8008f66 <__sflush_r+0x76>
 8008f64:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f68:	602f      	str	r7, [r5, #0]
 8008f6a:	b1b9      	cbz	r1, 8008f9c <__sflush_r+0xac>
 8008f6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f70:	4299      	cmp	r1, r3
 8008f72:	d002      	beq.n	8008f7a <__sflush_r+0x8a>
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff f95b 	bl	8008230 <_free_r>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f7e:	e00d      	b.n	8008f9c <__sflush_r+0xac>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b0      	blx	r6
 8008f86:	4602      	mov	r2, r0
 8008f88:	1c50      	adds	r0, r2, #1
 8008f8a:	d1c9      	bne.n	8008f20 <__sflush_r+0x30>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c6      	beq.n	8008f20 <__sflush_r+0x30>
 8008f92:	2b1d      	cmp	r3, #29
 8008f94:	d001      	beq.n	8008f9a <__sflush_r+0xaa>
 8008f96:	2b16      	cmp	r3, #22
 8008f98:	d11d      	bne.n	8008fd6 <__sflush_r+0xe6>
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e021      	b.n	8008fe4 <__sflush_r+0xf4>
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	e01a      	b.n	8008fde <__sflush_r+0xee>
 8008fa8:	690f      	ldr	r7, [r1, #16]
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d0f6      	beq.n	8008f9c <__sflush_r+0xac>
 8008fae:	0793      	lsls	r3, r2, #30
 8008fb0:	bf18      	it	ne
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	680e      	ldr	r6, [r1, #0]
 8008fb6:	bf08      	it	eq
 8008fb8:	694b      	ldreq	r3, [r1, #20]
 8008fba:	1bf6      	subs	r6, r6, r7
 8008fbc:	600f      	str	r7, [r1, #0]
 8008fbe:	608b      	str	r3, [r1, #8]
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	ddeb      	ble.n	8008f9c <__sflush_r+0xac>
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4628      	mov	r0, r5
 8008fca:	6a21      	ldr	r1, [r4, #32]
 8008fcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008fd0:	47e0      	blx	ip
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dc07      	bgt.n	8008fe6 <__sflush_r+0xf6>
 8008fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe6:	4407      	add	r7, r0
 8008fe8:	1a36      	subs	r6, r6, r0
 8008fea:	e7e9      	b.n	8008fc0 <__sflush_r+0xd0>
 8008fec:	dfbffffe 	.word	0xdfbffffe

08008ff0 <_fflush_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b913      	cbnz	r3, 8009000 <_fflush_r+0x10>
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	b118      	cbz	r0, 800900a <_fflush_r+0x1a>
 8009002:	6a03      	ldr	r3, [r0, #32]
 8009004:	b90b      	cbnz	r3, 800900a <_fflush_r+0x1a>
 8009006:	f7fe f93b 	bl	8007280 <__sinit>
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0f3      	beq.n	8008ffa <_fflush_r+0xa>
 8009012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009014:	07d0      	lsls	r0, r2, #31
 8009016:	d404      	bmi.n	8009022 <_fflush_r+0x32>
 8009018:	0599      	lsls	r1, r3, #22
 800901a:	d402      	bmi.n	8009022 <_fflush_r+0x32>
 800901c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800901e:	f7fe fa92 	bl	8007546 <__retarget_lock_acquire_recursive>
 8009022:	4628      	mov	r0, r5
 8009024:	4621      	mov	r1, r4
 8009026:	f7ff ff63 	bl	8008ef0 <__sflush_r>
 800902a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800902c:	4605      	mov	r5, r0
 800902e:	07da      	lsls	r2, r3, #31
 8009030:	d4e4      	bmi.n	8008ffc <_fflush_r+0xc>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	d4e1      	bmi.n	8008ffc <_fflush_r+0xc>
 8009038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800903a:	f7fe fa85 	bl	8007548 <__retarget_lock_release_recursive>
 800903e:	e7dd      	b.n	8008ffc <_fflush_r+0xc>

08009040 <__swbuf_r>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	4614      	mov	r4, r2
 8009046:	4605      	mov	r5, r0
 8009048:	b118      	cbz	r0, 8009052 <__swbuf_r+0x12>
 800904a:	6a03      	ldr	r3, [r0, #32]
 800904c:	b90b      	cbnz	r3, 8009052 <__swbuf_r+0x12>
 800904e:	f7fe f917 	bl	8007280 <__sinit>
 8009052:	69a3      	ldr	r3, [r4, #24]
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	071a      	lsls	r2, r3, #28
 800905a:	d501      	bpl.n	8009060 <__swbuf_r+0x20>
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	b943      	cbnz	r3, 8009072 <__swbuf_r+0x32>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f82a 	bl	80090bc <__swsetup_r>
 8009068:	b118      	cbz	r0, 8009072 <__swbuf_r+0x32>
 800906a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800906e:	4638      	mov	r0, r7
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	b2f6      	uxtb	r6, r6
 8009078:	1a98      	subs	r0, r3, r2
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	4637      	mov	r7, r6
 800907e:	4283      	cmp	r3, r0
 8009080:	dc05      	bgt.n	800908e <__swbuf_r+0x4e>
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f7ff ffb3 	bl	8008ff0 <_fflush_r>
 800908a:	2800      	cmp	r0, #0
 800908c:	d1ed      	bne.n	800906a <__swbuf_r+0x2a>
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	3b01      	subs	r3, #1
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	6022      	str	r2, [r4, #0]
 800909a:	701e      	strb	r6, [r3, #0]
 800909c:	6962      	ldr	r2, [r4, #20]
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d004      	beq.n	80090ae <__swbuf_r+0x6e>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	07db      	lsls	r3, r3, #31
 80090a8:	d5e1      	bpl.n	800906e <__swbuf_r+0x2e>
 80090aa:	2e0a      	cmp	r6, #10
 80090ac:	d1df      	bne.n	800906e <__swbuf_r+0x2e>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4628      	mov	r0, r5
 80090b2:	f7ff ff9d 	bl	8008ff0 <_fflush_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d0d9      	beq.n	800906e <__swbuf_r+0x2e>
 80090ba:	e7d6      	b.n	800906a <__swbuf_r+0x2a>

080090bc <__swsetup_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4b29      	ldr	r3, [pc, #164]	@ (8009164 <__swsetup_r+0xa8>)
 80090c0:	4605      	mov	r5, r0
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	460c      	mov	r4, r1
 80090c6:	b118      	cbz	r0, 80090d0 <__swsetup_r+0x14>
 80090c8:	6a03      	ldr	r3, [r0, #32]
 80090ca:	b90b      	cbnz	r3, 80090d0 <__swsetup_r+0x14>
 80090cc:	f7fe f8d8 	bl	8007280 <__sinit>
 80090d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d4:	0719      	lsls	r1, r3, #28
 80090d6:	d422      	bmi.n	800911e <__swsetup_r+0x62>
 80090d8:	06da      	lsls	r2, r3, #27
 80090da:	d407      	bmi.n	80090ec <__swsetup_r+0x30>
 80090dc:	2209      	movs	r2, #9
 80090de:	602a      	str	r2, [r5, #0]
 80090e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	e033      	b.n	8009154 <__swsetup_r+0x98>
 80090ec:	0758      	lsls	r0, r3, #29
 80090ee:	d512      	bpl.n	8009116 <__swsetup_r+0x5a>
 80090f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090f2:	b141      	cbz	r1, 8009106 <__swsetup_r+0x4a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__swsetup_r+0x46>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff f897 	bl	8008230 <_free_r>
 8009102:	2300      	movs	r3, #0
 8009104:	6363      	str	r3, [r4, #52]	@ 0x34
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800910c:	81a3      	strh	r3, [r4, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0308 	orr.w	r3, r3, #8
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b94b      	cbnz	r3, 8009136 <__swsetup_r+0x7a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800912c:	d003      	beq.n	8009136 <__swsetup_r+0x7a>
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f000 f8e3 	bl	80092fc <__smakebuf_r>
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	f013 0201 	ands.w	r2, r3, #1
 800913e:	d00a      	beq.n	8009156 <__swsetup_r+0x9a>
 8009140:	2200      	movs	r2, #0
 8009142:	60a2      	str	r2, [r4, #8]
 8009144:	6962      	ldr	r2, [r4, #20]
 8009146:	4252      	negs	r2, r2
 8009148:	61a2      	str	r2, [r4, #24]
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	b942      	cbnz	r2, 8009160 <__swsetup_r+0xa4>
 800914e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009152:	d1c5      	bne.n	80090e0 <__swsetup_r+0x24>
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	0799      	lsls	r1, r3, #30
 8009158:	bf58      	it	pl
 800915a:	6962      	ldrpl	r2, [r4, #20]
 800915c:	60a2      	str	r2, [r4, #8]
 800915e:	e7f4      	b.n	800914a <__swsetup_r+0x8e>
 8009160:	2000      	movs	r0, #0
 8009162:	e7f7      	b.n	8009154 <__swsetup_r+0x98>
 8009164:	20000024 	.word	0x20000024

08009168 <_raise_r>:
 8009168:	291f      	cmp	r1, #31
 800916a:	b538      	push	{r3, r4, r5, lr}
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	d904      	bls.n	800917c <_raise_r+0x14>
 8009172:	2316      	movs	r3, #22
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800917e:	b112      	cbz	r2, 8009186 <_raise_r+0x1e>
 8009180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009184:	b94b      	cbnz	r3, 800919a <_raise_r+0x32>
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f830 	bl	80091ec <_getpid_r>
 800918c:	4622      	mov	r2, r4
 800918e:	4601      	mov	r1, r0
 8009190:	4628      	mov	r0, r5
 8009192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009196:	f000 b817 	b.w	80091c8 <_kill_r>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00a      	beq.n	80091b4 <_raise_r+0x4c>
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	d103      	bne.n	80091aa <_raise_r+0x42>
 80091a2:	2316      	movs	r3, #22
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7e7      	b.n	800917a <_raise_r+0x12>
 80091aa:	2100      	movs	r1, #0
 80091ac:	4620      	mov	r0, r4
 80091ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091b2:	4798      	blx	r3
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7e0      	b.n	800917a <_raise_r+0x12>

080091b8 <raise>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	@ (80091c4 <raise+0xc>)
 80091ba:	4601      	mov	r1, r0
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f7ff bfd3 	b.w	8009168 <_raise_r>
 80091c2:	bf00      	nop
 80091c4:	20000024 	.word	0x20000024

080091c8 <_kill_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	2300      	movs	r3, #0
 80091cc:	4d06      	ldr	r5, [pc, #24]	@ (80091e8 <_kill_r+0x20>)
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f7f8 fcbf 	bl	8001b58 <_kill>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d102      	bne.n	80091e4 <_kill_r+0x1c>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b103      	cbz	r3, 80091e4 <_kill_r+0x1c>
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	200005cc 	.word	0x200005cc

080091ec <_getpid_r>:
 80091ec:	f7f8 bcb2 	b.w	8001b54 <_getpid>

080091f0 <_calloc_r>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	fba1 5402 	umull	r5, r4, r1, r2
 80091f6:	b93c      	cbnz	r4, 8009208 <_calloc_r+0x18>
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7fd facd 	bl	8006798 <_malloc_r>
 80091fe:	4606      	mov	r6, r0
 8009200:	b928      	cbnz	r0, 800920e <_calloc_r+0x1e>
 8009202:	2600      	movs	r6, #0
 8009204:	4630      	mov	r0, r6
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	220c      	movs	r2, #12
 800920a:	6002      	str	r2, [r0, #0]
 800920c:	e7f9      	b.n	8009202 <_calloc_r+0x12>
 800920e:	462a      	mov	r2, r5
 8009210:	4621      	mov	r1, r4
 8009212:	f7fe f90a 	bl	800742a <memset>
 8009216:	e7f5      	b.n	8009204 <_calloc_r+0x14>

08009218 <__ascii_mbtowc>:
 8009218:	b082      	sub	sp, #8
 800921a:	b901      	cbnz	r1, 800921e <__ascii_mbtowc+0x6>
 800921c:	a901      	add	r1, sp, #4
 800921e:	b142      	cbz	r2, 8009232 <__ascii_mbtowc+0x1a>
 8009220:	b14b      	cbz	r3, 8009236 <__ascii_mbtowc+0x1e>
 8009222:	7813      	ldrb	r3, [r2, #0]
 8009224:	600b      	str	r3, [r1, #0]
 8009226:	7812      	ldrb	r2, [r2, #0]
 8009228:	1e10      	subs	r0, r2, #0
 800922a:	bf18      	it	ne
 800922c:	2001      	movne	r0, #1
 800922e:	b002      	add	sp, #8
 8009230:	4770      	bx	lr
 8009232:	4610      	mov	r0, r2
 8009234:	e7fb      	b.n	800922e <__ascii_mbtowc+0x16>
 8009236:	f06f 0001 	mvn.w	r0, #1
 800923a:	e7f8      	b.n	800922e <__ascii_mbtowc+0x16>

0800923c <_realloc_r>:
 800923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	4680      	mov	r8, r0
 8009242:	4615      	mov	r5, r2
 8009244:	460c      	mov	r4, r1
 8009246:	b921      	cbnz	r1, 8009252 <_realloc_r+0x16>
 8009248:	4611      	mov	r1, r2
 800924a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	f7fd baa3 	b.w	8006798 <_malloc_r>
 8009252:	b92a      	cbnz	r2, 8009260 <_realloc_r+0x24>
 8009254:	f7fe ffec 	bl	8008230 <_free_r>
 8009258:	2400      	movs	r4, #0
 800925a:	4620      	mov	r0, r4
 800925c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009260:	f000 f8aa 	bl	80093b8 <_malloc_usable_size_r>
 8009264:	4285      	cmp	r5, r0
 8009266:	4606      	mov	r6, r0
 8009268:	d802      	bhi.n	8009270 <_realloc_r+0x34>
 800926a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800926e:	d8f4      	bhi.n	800925a <_realloc_r+0x1e>
 8009270:	4629      	mov	r1, r5
 8009272:	4640      	mov	r0, r8
 8009274:	f7fd fa90 	bl	8006798 <_malloc_r>
 8009278:	4607      	mov	r7, r0
 800927a:	2800      	cmp	r0, #0
 800927c:	d0ec      	beq.n	8009258 <_realloc_r+0x1c>
 800927e:	42b5      	cmp	r5, r6
 8009280:	462a      	mov	r2, r5
 8009282:	4621      	mov	r1, r4
 8009284:	bf28      	it	cs
 8009286:	4632      	movcs	r2, r6
 8009288:	f7fe f96d 	bl	8007566 <memcpy>
 800928c:	4621      	mov	r1, r4
 800928e:	4640      	mov	r0, r8
 8009290:	f7fe ffce 	bl	8008230 <_free_r>
 8009294:	463c      	mov	r4, r7
 8009296:	e7e0      	b.n	800925a <_realloc_r+0x1e>

08009298 <__ascii_wctomb>:
 8009298:	4603      	mov	r3, r0
 800929a:	4608      	mov	r0, r1
 800929c:	b141      	cbz	r1, 80092b0 <__ascii_wctomb+0x18>
 800929e:	2aff      	cmp	r2, #255	@ 0xff
 80092a0:	d904      	bls.n	80092ac <__ascii_wctomb+0x14>
 80092a2:	228a      	movs	r2, #138	@ 0x8a
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	4770      	bx	lr
 80092ac:	2001      	movs	r0, #1
 80092ae:	700a      	strb	r2, [r1, #0]
 80092b0:	4770      	bx	lr

080092b2 <__swhatbuf_r>:
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ba:	4615      	mov	r5, r2
 80092bc:	2900      	cmp	r1, #0
 80092be:	461e      	mov	r6, r3
 80092c0:	b096      	sub	sp, #88	@ 0x58
 80092c2:	da0c      	bge.n	80092de <__swhatbuf_r+0x2c>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	2100      	movs	r1, #0
 80092c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092cc:	bf14      	ite	ne
 80092ce:	2340      	movne	r3, #64	@ 0x40
 80092d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092d4:	2000      	movs	r0, #0
 80092d6:	6031      	str	r1, [r6, #0]
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	b016      	add	sp, #88	@ 0x58
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	466a      	mov	r2, sp
 80092e0:	f000 f848 	bl	8009374 <_fstat_r>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	dbed      	blt.n	80092c4 <__swhatbuf_r+0x12>
 80092e8:	9901      	ldr	r1, [sp, #4]
 80092ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092f2:	4259      	negs	r1, r3
 80092f4:	4159      	adcs	r1, r3
 80092f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092fa:	e7eb      	b.n	80092d4 <__swhatbuf_r+0x22>

080092fc <__smakebuf_r>:
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009300:	079d      	lsls	r5, r3, #30
 8009302:	4606      	mov	r6, r0
 8009304:	460c      	mov	r4, r1
 8009306:	d507      	bpl.n	8009318 <__smakebuf_r+0x1c>
 8009308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	2301      	movs	r3, #1
 8009312:	6163      	str	r3, [r4, #20]
 8009314:	b003      	add	sp, #12
 8009316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009318:	466a      	mov	r2, sp
 800931a:	ab01      	add	r3, sp, #4
 800931c:	f7ff ffc9 	bl	80092b2 <__swhatbuf_r>
 8009320:	9f00      	ldr	r7, [sp, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	f7fd fa36 	bl	8006798 <_malloc_r>
 800932c:	b948      	cbnz	r0, 8009342 <__smakebuf_r+0x46>
 800932e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009332:	059a      	lsls	r2, r3, #22
 8009334:	d4ee      	bmi.n	8009314 <__smakebuf_r+0x18>
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	f043 0302 	orr.w	r3, r3, #2
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	e7e2      	b.n	8009308 <__smakebuf_r+0xc>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	6020      	str	r0, [r4, #0]
 8009352:	b15b      	cbz	r3, 800936c <__smakebuf_r+0x70>
 8009354:	4630      	mov	r0, r6
 8009356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935a:	f000 f81d 	bl	8009398 <_isatty_r>
 800935e:	b128      	cbz	r0, 800936c <__smakebuf_r+0x70>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	431d      	orrs	r5, r3
 8009370:	81a5      	strh	r5, [r4, #12]
 8009372:	e7cf      	b.n	8009314 <__smakebuf_r+0x18>

08009374 <_fstat_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	2300      	movs	r3, #0
 8009378:	4d06      	ldr	r5, [pc, #24]	@ (8009394 <_fstat_r+0x20>)
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	f7f8 fc19 	bl	8001bb8 <_fstat>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d102      	bne.n	8009390 <_fstat_r+0x1c>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	b103      	cbz	r3, 8009390 <_fstat_r+0x1c>
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	bd38      	pop	{r3, r4, r5, pc}
 8009392:	bf00      	nop
 8009394:	200005cc 	.word	0x200005cc

08009398 <_isatty_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	2300      	movs	r3, #0
 800939c:	4d05      	ldr	r5, [pc, #20]	@ (80093b4 <_isatty_r+0x1c>)
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7f8 fc0e 	bl	8001bc4 <_isatty>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_isatty_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_isatty_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	200005cc 	.word	0x200005cc

080093b8 <_malloc_usable_size_r>:
 80093b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093bc:	1f18      	subs	r0, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfbc      	itt	lt
 80093c2:	580b      	ldrlt	r3, [r1, r0]
 80093c4:	18c0      	addlt	r0, r0, r3
 80093c6:	4770      	bx	lr

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
