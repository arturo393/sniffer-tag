
human_tag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009694  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080097a8  080097a8  0000a7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ccc  08009ccc  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ccc  08009ccc  0000accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd4  08009cd4  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd4  08009cd4  0000acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009cdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200001e4  08009ec0  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08009ec0  0000b5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013016  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002824  00000000  00000000  0001e223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00020a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb1  00000000  00000000  00021e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8c4  00000000  00000000  00022e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a05  00000000  00000000  000406cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2724  00000000  00000000  000540d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f67f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006804  00000000  00000000  000f683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000fd040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800978c 	.word	0x0800978c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800978c 	.word	0x0800978c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <handle_human_tag>:
 *      Author: uqommdev
 */

#include <human_tag.h>

TAG_STATUS_t handle_human_tag(TAG_t *tag) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	@ 0x38
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
	TAG_STATUS_t status_reg = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	start_tag_reception_inmediate(0, 0);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f929 	bl	80011f8 <start_tag_reception_inmediate>
	status_reg = wait_rx_data();
 8000fa6:	f000 f93d 	bl	8001224 <wait_rx_data>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status_reg != TAG_RX_CRC_VALID)
 8000fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d002      	beq.n	8000fbe <handle_human_tag+0x2e>
		return (status_reg);
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	e04b      	b.n	8001056 <handle_human_tag+0xc6>

	uint8_t *rx_buffer;
	uint32_t rx_buffer_size = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	/* A frame has been received, read it into the local buffer. */
	rx_buffer_size = allocate_and_read_received_frame(&rx_buffer);
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f956 	bl	8001278 <allocate_and_read_received_frame>
 8000fcc:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (rx_buffer_size == 0)
 8000fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <handle_human_tag+0x48>
		return (TAG_RX_DATA_ZERO);
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	e03e      	b.n	8001056 <handle_human_tag+0xc6>
	//uart_transmit_string("Receive:");
	//uart_transmit_hexa_to_text(rx_buffer,rx_buffer_size);
	uint8_t command = rx_buffer[0];
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	switch (command) {
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d131      	bne.n	800104c <handle_human_tag+0xbc>
	case 0x11:
		// Initialize a TX_BUFFER_t instance
		TX_BUFFER_t tx;
		tx.buffer = NULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
		tx.buffer_size = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	743b      	strb	r3, [r7, #16]
		tx.delay = RESP_TX_TO_FINAL_RX_DLY_UUS_6M8;
 8000ff0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ff4:	617b      	str	r3, [r7, #20]
		tx.rx_timeout = FINAL_RX_TIMEOUT_UUS_6M8;
 8000ff6:	23dc      	movs	r3, #220	@ 0xdc
 8000ff8:	61bb      	str	r3, [r7, #24]
		tx.preamble_timeout = PRE_TIMEOUT_6M8;
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	61fb      	str	r3, [r7, #28]

		tx.buffer_size = create_message_and_alloc_buffer(&tx);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f888 	bl	8001118 <create_message_and_alloc_buffer>
 8001008:	4603      	mov	r3, r0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	743b      	strb	r3, [r7, #16]
		//HAL_Delay(1);
		if (start_transmission_delayed_with_response_expected(tx) == DWT_ERROR) {
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	f000 f95b 	bl	80012d2 <start_transmission_delayed_with_response_expected>
 800101c:	4603      	mov	r3, r0
 800101e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001022:	d109      	bne.n	8001038 <handle_human_tag+0xa8>
			free(tx.buffer);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	f005 fd40 	bl	8006aac <free>
			free(rx_buffer);
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fd3c 	bl	8006aac <free>
			return (TAG_TX_ERROR);
 8001034:	2308      	movs	r3, #8
 8001036:	e00e      	b.n	8001056 <handle_human_tag+0xc6>
		}

		//uart_transmit_string("Sent:");
		//uart_transmit_hexa_to_text(tx.buffer, tx.buffer_size);
		free(tx.buffer);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4618      	mov	r0, r3
 800103c:	f005 fd36 	bl	8006aac <free>
		free(rx_buffer);
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fd32 	bl	8006aac <free>
	//if (memcmp(rx_buffer, rx_final_msg,
	//INITIAL_COMUNICATION_DATA_SIZE) != 0) {
	//	return (4);
	//}
	//calculate_distance_human_tag(rx_buffer, &(tag->distance));
	return (TAG_OK);
 8001048:	2300      	movs	r3, #0
 800104a:	e004      	b.n	8001056 <handle_human_tag+0xc6>
		free(rx_buffer);
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	4618      	mov	r0, r3
 8001050:	f005 fd2c 	bl	8006aac <free>
		return (TAG_RX_COMMAND_ERROR);
 8001054:	2307      	movs	r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	3730      	adds	r7, #48	@ 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <uart_transmit_int_to_text>:

	/* Free the dynamically allocated memory */
	free(dist_str);
}

void uart_transmit_int_to_text(int distanceValue) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	/* Calculate the size needed for the formatted string */
	int size = snprintf(NULL, 0, "%u\n\r", distanceValue);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a13      	ldr	r2, [pc, #76]	@ (80010b8 <uart_transmit_int_to_text+0x58>)
 800106c:	2100      	movs	r1, #0
 800106e:	2000      	movs	r0, #0
 8001070:	f006 fb02 	bl	8007678 <sniprintf>
 8001074:	60f8      	str	r0, [r7, #12]
	size++; // Include space for the null terminator
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]

	/* Dynamically allocate memory for dist_str */
	char *dist_str = (char*) malloc(size * sizeof(char));
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fd0c 	bl	8006a9c <malloc>
 8001084:	4603      	mov	r3, r0
 8001086:	60bb      	str	r3, [r7, #8]
	if (dist_str == NULL) {
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d010      	beq.n	80010b0 <uart_transmit_int_to_text+0x50>
		// For example: return an error code or exit the function
		return;
	}

	/* Format the string into dist_str */
	sprintf(dist_str, "%u\n\r", distanceValue);
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4909      	ldr	r1, [pc, #36]	@ (80010b8 <uart_transmit_int_to_text+0x58>)
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f006 fb24 	bl	80076e0 <siprintf>

	/* Transmit the formatted string */
	HAL_UART_Transmit(&huart1, (uint8_t*) dist_str, size, HAL_MAX_DELAY);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	b29a      	uxth	r2, r3
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <uart_transmit_int_to_text+0x5c>)
 80010a4:	f004 feac 	bl	8005e00 <HAL_UART_Transmit>

	/* Free the dynamically allocated memory */
	free(dist_str);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f005 fcff 	bl	8006aac <free>
 80010ae:	e000      	b.n	80010b2 <uart_transmit_int_to_text+0x52>
		return;
 80010b0:	bf00      	nop
}
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080097bc 	.word	0x080097bc
 80010bc:	20000404 	.word	0x20000404

080010c0 <uart_transmit_string>:
int uart_transmit_string(char *message) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint16_t message_size = strlen(message) + 1; // Include space for the null terminator
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f841 	bl	8000150 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	81fb      	strh	r3, [r7, #14]

	// Dynamically allocate memory for the message
	char *dynamic_message = (char*) malloc(message_size * sizeof(char));
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 fcdf 	bl	8006a9c <malloc>
 80010de:	4603      	mov	r3, r0
 80010e0:	60bb      	str	r3, [r7, #8]
	if (dynamic_message == NULL) {
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <uart_transmit_string+0x2e>
		// Handle allocation failure
		return -1; // Return an error code
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ec:	e00e      	b.n	800110c <uart_transmit_string+0x4c>
	}

	// Copy the message to the dynamically allocated memory
	strcpy(dynamic_message, message);
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f006 fbe8 	bl	80078c6 <strcpy>

	// Transmit the dynamic message
	HAL_UART_Transmit(&huart1, (uint8_t*) dynamic_message, message_size,
 80010f6:	89fa      	ldrh	r2, [r7, #14]
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <uart_transmit_string+0x54>)
 8001100:	f004 fe7e 	bl	8005e00 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	// Free the dynamically allocated memory
	free(dynamic_message);
 8001104:	68b8      	ldr	r0, [r7, #8]
 8001106:	f005 fcd1 	bl	8006aac <free>

	return (2);
 800110a:	2302      	movs	r3, #2
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000404 	.word	0x20000404

08001118 <create_message_and_alloc_buffer>:

uint32_t create_message_and_alloc_buffer(TX_BUFFER_t *tx) {
 8001118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800111c:	b08e      	sub	sp, #56	@ 0x38
 800111e:	af00      	add	r7, sp, #0
 8001120:	6178      	str	r0, [r7, #20]
	uint32_t resp_tx_time;
	uint64_t resp_tx_timestamp;
	uint64_t poll_rx_timestamp;

	/** Retrieve poll reception timestamp */
	poll_rx_timestamp = get_rx_timestamp_u64();
 8001122:	f002 fb61 	bl	80037e8 <get_rx_timestamp_u64>
 8001126:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

	/** Set send time for response */
	resp_tx_time = (uint32_t) ((poll_rx_timestamp
			+ ((POLL_RX_TO_RESP_TX_DLY_UUS_6M8) * UUS_TO_DWT_TIME)) >> 8);
 800112a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800112e:	4931      	ldr	r1, [pc, #196]	@ (80011f4 <create_message_and_alloc_buffer+0xdc>)
 8001130:	eb12 0801 	adds.w	r8, r2, r1
 8001134:	f143 0900 	adc.w	r9, r3, #0
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001144:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8001148:	ea4f 2319 	mov.w	r3, r9, lsr #8
	resp_tx_time = (uint32_t) ((poll_rx_timestamp
 800114c:	4613      	mov	r3, r2
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	dwt_setdelayedtrxtime(resp_tx_time);
 8001150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001152:	f002 f83b 	bl	80031cc <dwt_setdelayedtrxtime>

	/** Calculate the response TX timestamp */
	resp_tx_timestamp = (((uint64_t) (resp_tx_time & 0xFFFFFFFEUL)) << 8)
 8001156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001158:	2200      	movs	r2, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	60fa      	str	r2, [r7, #12]
 800115e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 8001168:	4613      	mov	r3, r2
 800116a:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800116e:	f42a 74ff 	bic.w	r4, sl, #510	@ 0x1fe
 8001172:	f024 0401 	bic.w	r4, r4, #1
 8001176:	f00b 05ff 	and.w	r5, fp, #255	@ 0xff
 800117a:	f643 73f2 	movw	r3, #16370	@ 0x3ff2
 800117e:	18e3      	adds	r3, r4, r3
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	f145 0300 	adc.w	r3, r5, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	e9d7 3400 	ldrd	r3, r4, [r7]
 800118c:	e9c7 3408 	strd	r3, r4, [r7, #32]
			+ TX_ANT_DLY_LP;

	/** Calculate the size needed for the response message buffer */
	tx->buffer_size = sizeof(uint8_t) + 2 * sizeof(uint32_t);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2209      	movs	r2, #9
 8001194:	711a      	strb	r2, [r3, #4]

	/** Allocate memory for the response message buffer */
	tx->buffer = (uint8_t*) malloc(tx->buffer_size);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f005 fc7e 	bl	8006a9c <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]
	if (tx->buffer == NULL) {
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <create_message_and_alloc_buffer+0x9c>
		/** Handle memory allocation failure */
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e01a      	b.n	80011ea <create_message_and_alloc_buffer+0xd2>
	}
	memset(tx->buffer, 0, tx->buffer_size);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	461a      	mov	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f006 faf1 	bl	80077a6 <memset>
	tx->buffer[0] = 0x11;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2211      	movs	r2, #17
 80011ca:	701a      	strb	r2, [r3, #0]
	uint32_t timestamps[2] = { (uint32_t) poll_rx_timestamp,
 80011cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ce:	61bb      	str	r3, [r7, #24]
			(uint32_t) resp_tx_timestamp };
 80011d0:	6a3b      	ldr	r3, [r7, #32]
	uint32_t timestamps[2] = { (uint32_t) poll_rx_timestamp,
 80011d2:	61fb      	str	r3, [r7, #28]
	memcpy(tx->buffer + 1, timestamps, sizeof(timestamps));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	f107 0118 	add.w	r1, r7, #24
 80011de:	2208      	movs	r2, #8
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fb86 	bl	80078f2 <memcpy>
//	uart_transmit_int_to_text(poll_rx_timestamp);
//	uart_transmit_string("resp_tx_timestamp: ");
//	uart_transmit_hexa_to_text((uint8_t*)&resp_tx_timestamp, 4);
//	uart_transmit_int_to_text(resp_tx_timestamp);

	return (tx->buffer_size);
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	791b      	ldrb	r3, [r3, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3738      	adds	r7, #56	@ 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011f4:	036d8168 	.word	0x036d8168

080011f8 <start_tag_reception_inmediate>:

void start_tag_reception_inmediate(uint8_t preamble_timeout, uint8_t rx_timeout) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]

	/* Loop forever responding to ranging requests. */
	dwt_setpreambledetecttimeout(0);
 8001208:	2000      	movs	r0, #0
 800120a:	f002 f95d 	bl	80034c8 <dwt_setpreambledetecttimeout>
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0);
 800120e:	2000      	movs	r0, #0
 8001210:	f002 f93a 	bl	8003488 <dwt_setrxtimeout>
	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001214:	2000      	movs	r0, #0
 8001216:	f002 f8bb 	bl	8003390 <dwt_rxenable>
	/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <wait_rx_data>:

TAG_STATUS_t wait_rx_data() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	uint32_t status_reg;
	/* wait for crc check and (frame wait timeout and preamble detect timeout) mask. */
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
 800122a:	bf00      	nop
 800122c:	2100      	movs	r1, #0
 800122e:	2044      	movs	r0, #68	@ 0x44
 8001230:	f001 fa5b 	bl	80026ea <dwt_read32bitoffsetreg>
 8001234:	6078      	str	r0, [r7, #4]
			& (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <wait_rx_data+0x4c>)
 800123a:	4013      	ands	r3, r2
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID))
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f5      	beq.n	800122c <wait_rx_data+0x8>
//	}
	/* check for receive timeouts */
//	if (!(status_reg & SYS_STATUS_ALL_RX_TO)) {
//		return (TAG_RX_TIMEOUT);
//	}
	if ((status_reg & SYS_STATUS_RXFCG_BIT_MASK)) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <wait_rx_data+0x34>
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID,
 800124a:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <wait_rx_data+0x50>)
 800124c:	2100      	movs	r1, #0
 800124e:	2044      	movs	r0, #68	@ 0x44
 8001250:	f001 fa9d 	bl	800278e <dwt_write32bitoffsetreg>
				SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
		return (TAG_RX_CRC_VALID);
 8001254:	2304      	movs	r3, #4
 8001256:	e006      	b.n	8001266 <wait_rx_data+0x42>
	}

	/* Clear good RX frame event in the DW IC status register. */
	dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8001258:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125c:	2100      	movs	r1, #0
 800125e:	2044      	movs	r0, #68	@ 0x44
 8001260:	f001 fa95 	bl	800278e <dwt_write32bitoffsetreg>

	return (TAG_NO_RXCG_DETECTED);
 8001264:	2302      	movs	r3, #2
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2427d000 	.word	0x2427d000
 8001274:	24279000 	.word	0x24279000

08001278 <allocate_and_read_received_frame>:

uint32_t allocate_and_read_received_frame(uint8_t **rx_buffer) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint32_t rx_buffer_size = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

	/* Read the frame information and extract the frame length. */
	rx_buffer_size = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8001284:	2100      	movs	r1, #0
 8001286:	204c      	movs	r0, #76	@ 0x4c
 8001288:	f001 fa2f 	bl	80026ea <dwt_read32bitoffsetreg>
 800128c:	4603      	mov	r3, r0
 800128e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001292:	60fb      	str	r3, [r7, #12]

	/* Check if the frame length is non-zero. */
	if (rx_buffer_size > 0) {
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d016      	beq.n	80012c8 <allocate_and_read_received_frame+0x50>
		/* Allocate memory dynamically for the buffer. */
		*rx_buffer = (uint8_t*) malloc(rx_buffer_size * sizeof(uint8_t));
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f005 fbfe 	bl	8006a9c <malloc>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]

		if (*rx_buffer != NULL) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d009      	beq.n	80012c4 <allocate_and_read_received_frame+0x4c>
			/* Read the received data into the dynamically allocated buffer. */
			dwt_readrxdata(*rx_buffer, (uint16_t) rx_buffer_size, 0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	b291      	uxth	r1, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fe50 	bl	8002f60 <dwt_readrxdata>

			/* Add any additional processing here if needed. */

			return rx_buffer_size;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	e002      	b.n	80012ca <allocate_and_read_received_frame+0x52>
		} else {
			/* Memory allocation failed. */
			return 0; // Return 0 to indicate failure
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <allocate_and_read_received_frame+0x52>
		}
	}

	/* No data received, return 0. */
	return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <start_transmission_delayed_with_response_expected>:

int start_transmission_delayed_with_response_expected(TX_BUFFER_t tx) {
 80012d2:	b084      	sub	sp, #16
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	f107 0c08 	add.w	ip, r7, #8
 80012dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
	dwt_setrxaftertxdelay(tx.delay);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fec2 	bl	800306c <dwt_setrxaftertxdelay>
	/* FINAL_RX_TIMEOUT_UUS. */
	dwt_setrxtimeout(tx.rx_timeout);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f8cc 	bl	8003488 <dwt_setrxtimeout>
	/* Set preamble timeout for expected frames. See NOTE 6 below. */
	dwt_setpreambledetecttimeout(tx.preamble_timeout);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f8e7 	bl	80034c8 <dwt_setpreambledetecttimeout>
	/* Write and send the response message. See NOTE 10 below.*/
	if (dwt_writetxdata(tx.buffer_size, tx.buffer, 0) == DWT_ERROR) /* Zero offset in TX buffer. */
 80012fa:	7b3b      	ldrb	r3, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	f001 fda6 	bl	8002e54 <dwt_writetxdata>
 8001308:	4603      	mov	r3, r0
 800130a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800130e:	d102      	bne.n	8001316 <start_transmission_delayed_with_response_expected+0x44>
		return (DWT_ERROR);
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001314:	e012      	b.n	800133c <start_transmission_delayed_with_response_expected+0x6a>
	dwt_writetxfctrl(tx.buffer_size + 2, 0, 1);
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	3302      	adds	r3, #2
 800131a:	b29b      	uxth	r3, r3
 800131c:	2201      	movs	r2, #1
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fdd5 	bl	8002ed0 <dwt_writetxfctrl>
	/*DWT_START_TX_DELAYED DWT_START_TX_IMMEDIATE*/
	if (dwt_starttx(DWT_START_TX_DELAYED) == DWT_ERROR)
 8001326:	2001      	movs	r0, #1
 8001328:	f001 ff5e 	bl	80031e8 <dwt_starttx>
 800132c:	4603      	mov	r3, r0
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001332:	d102      	bne.n	800133a <start_transmission_delayed_with_response_expected+0x68>
		return (DWT_ERROR);
 8001334:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001338:	e000      	b.n	800133c <start_transmission_delayed_with_response_expected+0x6a>
	/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
	return (DWT_SUCCESS);
 800133a:	2300      	movs	r3, #0

}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001344:	b004      	add	sp, #16
 8001346:	4770      	bx	lr

08001348 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b0a1      	sub	sp, #132	@ 0x84
 800134c:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	HAL_DeInit();
 800134e:	f002 fae3 	bl	8003918 <HAL_DeInit>
	HAL_RCC_DeInit();
 8001352:	f002 fecb 	bl	80040ec <HAL_RCC_DeInit>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001356:	f002 fac9 	bl	80038ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800135a:	f000 f8ed 	bl	8001538 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800135e:	f000 fa1d 	bl	800179c <MX_GPIO_Init>
	MX_SPI1_Init();
 8001362:	f000 f92f 	bl	80015c4 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001366:	f000 f963 	bl	8001630 <MX_SPI2_Init>
	MX_TIM4_Init();
 800136a:	f000 f997 	bl	800169c <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800136e:	f000 f9e5 	bl	800173c <MX_USART1_UART_Init>
	 ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
	 if(ret == HAL_OK)
	 addr[addr_count++]=i;
	 }
	 */
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2101      	movs	r1, #1
 8001376:	4863      	ldr	r0, [pc, #396]	@ (8001504 <main+0x1bc>)
 8001378:	f002 fea0 	bl	80040bc <HAL_GPIO_WritePin>
	/*Local device data, can be an array to support multiple DW3000 testing applications/platforms */

	dwt_local_data_t dwt_local_data;
	pdw3000local = &dwt_local_data;
 800137c:	4a62      	ldr	r2, [pc, #392]	@ (8001508 <main+0x1c0>)
 800137e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001382:	6013      	str	r3, [r2, #0]
	/* Default communication configuration. We use default non-STS DW mode. */
	dwt_config_t defatult_dwt_config = { 5, /* Channel number. */
 8001384:	4b61      	ldr	r3, [pc, #388]	@ (800150c <main+0x1c4>)
 8001386:	f107 0420 	add.w	r4, r7, #32
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	0x0 /*PG count*/
	};

	uint8_t dist_str[30];
	int size;
	hw = malloc(sizeof(SPI_HW_t));
 8001390:	2014      	movs	r0, #20
 8001392:	f005 fb83 	bl	8006a9c <malloc>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <main+0x1c8>)
 800139c:	601a      	str	r2, [r3, #0]
	if (hw == NULL)
 800139e:	4b5c      	ldr	r3, [pc, #368]	@ (8001510 <main+0x1c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <main+0x62>
		Error_Handler();
 80013a6:	f000 fa7b 	bl	80018a0 <Error_Handler>
	hw->spi = &hspi2;
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <main+0x1c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a59      	ldr	r2, [pc, #356]	@ (8001514 <main+0x1cc>)
 80013b0:	601a      	str	r2, [r3, #0]
	hw->nrstPin = DW3000_RST_RCV_Pin;
 80013b2:	4b57      	ldr	r3, [pc, #348]	@ (8001510 <main+0x1c8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	821a      	strh	r2, [r3, #16]
	hw->nrstPort = DW3000_RST_RCV_GPIO_Port;
 80013bc:	4b54      	ldr	r3, [pc, #336]	@ (8001510 <main+0x1c8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a50      	ldr	r2, [pc, #320]	@ (8001504 <main+0x1bc>)
 80013c2:	60da      	str	r2, [r3, #12]
	hw->nssPin = SPI2_CS_Pin;
 80013c4:	4b52      	ldr	r3, [pc, #328]	@ (8001510 <main+0x1c8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013cc:	811a      	strh	r2, [r3, #8]
	hw->nssPort = SPI2_CS_GPIO_Port;
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <main+0x1c8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a51      	ldr	r2, [pc, #324]	@ (8001518 <main+0x1d0>)
 80013d4:	605a      	str	r2, [r3, #4]
	size = sprintf((char*) dist_str, "\n\rDEV_UWB3000F00 init\n\r");
 80013d6:	463b      	mov	r3, r7
 80013d8:	4950      	ldr	r1, [pc, #320]	@ (800151c <main+0x1d4>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f006 f980 	bl	80076e0 <siprintf>
 80013e0:	6778      	str	r0, [r7, #116]	@ 0x74
	HAL_UART_Transmit(&huart1, dist_str, (uint16_t) size,
 80013e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4639      	mov	r1, r7
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ec:	484c      	ldr	r0, [pc, #304]	@ (8001520 <main+0x1d8>)
 80013ee:	f004 fd07 	bl	8005e00 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	HAL_GPIO_WritePin(hw->nrstPort, hw->nrstPin, GPIO_PIN_RESET);/* Target specific drive of RSTn line into DW IC low for a period. */
 80013f2:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <main+0x1c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d8      	ldr	r0, [r3, #12]
 80013f8:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <main+0x1c8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	8a1b      	ldrh	r3, [r3, #16]
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	f002 fe5b 	bl	80040bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f002 faf0 	bl	80039ec <HAL_Delay>
	HAL_GPIO_WritePin(hw->nrstPort, hw->nrstPin, GPIO_PIN_SET);
 800140c:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <main+0x1c8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68d8      	ldr	r0, [r3, #12]
 8001412:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <main+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	8a1b      	ldrh	r3, [r3, #16]
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	f002 fe4e 	bl	80040bc <HAL_GPIO_WritePin>
	if (tag_init(&defatult_dwt_config, &defatult_dwt_txconfig, &dwt_local_data,
 8001420:	4b40      	ldr	r3, [pc, #256]	@ (8001524 <main+0x1dc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001428:	f107 0020 	add.w	r0, r7, #32
 800142c:	2100      	movs	r1, #0
 800142e:	9100      	str	r1, [sp, #0]
 8001430:	493d      	ldr	r1, [pc, #244]	@ (8001528 <main+0x1e0>)
 8001432:	f000 fd35 	bl	8001ea0 <tag_init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <main+0xf8>
			running_device, RATE_6M8) == 1)
		Error_Handler();
 800143c:	f000 fa30 	bl	80018a0 <Error_Handler>

	/* Frames used in the ranging process. See NOTE 2 below. */

	/* Hold copy of status register state here for reference so that it can be examined at a debug breakpoint. */
	tag = malloc(sizeof(TAG_t));
 8001440:	20d8      	movs	r0, #216	@ 0xd8
 8001442:	f005 fb2b 	bl	8006a9c <malloc>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b38      	ldr	r3, [pc, #224]	@ (800152c <main+0x1e4>)
 800144c:	601a      	str	r2, [r3, #0]
	if (tag == NULL)
 800144e:	4b37      	ldr	r3, [pc, #220]	@ (800152c <main+0x1e4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <main+0x112>
		Error_Handler();
 8001456:	f000 fa23 	bl	80018a0 <Error_Handler>

	tag->distance.counter = 0;
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <main+0x1e4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
	tag->distance.last = 0;
 8001464:	4b31      	ldr	r3, [pc, #196]	@ (800152c <main+0x1e4>)
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
	tag->distance.error_times = 0;
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <main+0x1e4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	tag->detection_times = 0;
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <main+0x1e4>)
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tag->id = 0;
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <main+0x1e4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		tag_status = handle_human_tag(tag);
 8001496:	4b25      	ldr	r3, [pc, #148]	@ (800152c <main+0x1e4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fd78 	bl	8000f90 <handle_human_tag>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		switch (tag_status) {
 80014a6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d828      	bhi.n	8001500 <main+0x1b8>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <main+0x16c>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	08001501 	.word	0x08001501
 80014bc:	08001501 	.word	0x08001501
 80014c0:	08001501 	.word	0x08001501
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001501 	.word	0x08001501
 80014cc:	08001501 	.word	0x08001501
 80014d0:	08001501 	.word	0x08001501
 80014d4:	080014d9 	.word	0x080014d9

		case TAG_RX_TIMEOUT:
			break;

		case TAG_TX_ERROR:
			uart_transmit_string("TAG_TX_ERROR");
 80014d8:	4815      	ldr	r0, [pc, #84]	@ (8001530 <main+0x1e8>)
 80014da:	f7ff fdf1 	bl	80010c0 <uart_transmit_string>
			break;
 80014de:	e010      	b.n	8001502 <main+0x1ba>
		case TAG_OK:
			uart_transmit_string("TAG_OK\n\r");
 80014e0:	4814      	ldr	r0, [pc, #80]	@ (8001534 <main+0x1ec>)
 80014e2:	f7ff fded 	bl	80010c0 <uart_transmit_string>
			uart_transmit_int_to_text(tag->distance.counter++);
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <main+0x1e4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f893 20d1 	ldrb.w	r2, [r3, #209]	@ 0xd1
 80014ee:	1c51      	adds	r1, r2, #1
 80014f0:	b2c9      	uxtb	r1, r1
 80014f2:	f883 10d1 	strb.w	r1, [r3, #209]	@ 0xd1
 80014f6:	4613      	mov	r3, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fdb1 	bl	8001060 <uart_transmit_int_to_text>
			break;
 80014fe:	e000      	b.n	8001502 <main+0x1ba>

		default:
			break;
 8001500:	bf00      	nop
		tag_status = handle_human_tag(tag);
 8001502:	e7c8      	b.n	8001496 <main+0x14e>
 8001504:	40010800 	.word	0x40010800
 8001508:	20000208 	.word	0x20000208
 800150c:	080097f8 	.word	0x080097f8
 8001510:	20000204 	.word	0x20000204
 8001514:	20000364 	.word	0x20000364
 8001518:	40010c00 	.word	0x40010c00
 800151c:	080097c4 	.word	0x080097c4
 8001520:	20000404 	.word	0x20000404
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004
 800152c:	20000200 	.word	0x20000200
 8001530:	080097dc 	.word	0x080097dc
 8001534:	080097ec 	.word	0x080097ec

08001538 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	@ 0x40
 800153c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	2228      	movs	r2, #40	@ 0x28
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f006 f92d 	bl	80077a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001562:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001568:	2301      	movs	r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	2302      	movs	r3, #2
 800156e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001574:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001576:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800157c:	f107 0318 	add.w	r3, r7, #24
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fe4d 	bl	8004220 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0x58>
		Error_Handler();
 800158c:	f000 f988 	bl	80018a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001590:	230f      	movs	r3, #15
 8001592:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001594:	2302      	movs	r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2102      	movs	r1, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f8ba 	bl	8004724 <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x82>
		Error_Handler();
 80015b6:	f000 f973 	bl	80018a0 <Error_Handler>
	}
}
 80015ba:	bf00      	nop
 80015bc:	3740      	adds	r7, #64	@ 0x40
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	@ (800162c <MX_SPI1_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f8:	2208      	movs	r2, #8
 80015fa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001616:	f003 fa15 	bl	8004a44 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001620:	f000 f93e 	bl	80018a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000030c 	.word	0x2000030c
 800162c:	40013000 	.word	0x40013000

08001630 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001636:	4a18      	ldr	r2, [pc, #96]	@ (8001698 <MX_SPI2_Init+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <MX_SPI2_Init+0x64>)
 800163c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001640:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_SPI2_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MX_SPI2_Init+0x64>)
 800165c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001660:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <MX_SPI2_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_SPI2_Init+0x64>)
 800167c:	220a      	movs	r2, #10
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <MX_SPI2_Init+0x64>)
 8001682:	f003 f9df 	bl	8004a44 <HAL_SPI_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_SPI2_Init+0x60>
		Error_Handler();
 800168c:	f000 f908 	bl	80018a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000364 	.word	0x20000364
 8001698:	40003800 	.word	0x40003800

0800169c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <MX_TIM4_Init+0x9c>)
 80016bc:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 160 - 1;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016c0:	229f      	movs	r2, #159	@ 0x9f
 80016c2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 320 - 1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016cc:	f240 123f 	movw	r2, #319	@ 0x13f
 80016d0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80016de:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016e0:	f003 ff38 	bl	8005554 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0x52>
		Error_Handler();
 80016ea:	f000 f8d9 	bl	80018a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	480e      	ldr	r0, [pc, #56]	@ (8001734 <MX_TIM4_Init+0x98>)
 80016fc:	f004 f8d4 	bl	80058a8 <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001706:	f000 f8cb 	bl	80018a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	@ (8001734 <MX_TIM4_Init+0x98>)
 8001718:	f004 fab2 	bl	8005c80 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001722:	f000 f8bd 	bl	80018a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8001726:	4803      	ldr	r0, [pc, #12]	@ (8001734 <MX_TIM4_Init+0x98>)
 8001728:	f003 ff64 	bl	80055f4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM4_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200003bc 	.word	0x200003bc
 8001738:	40000800 	.word	0x40000800

0800173c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
uint8_t recvChar;
static void MX_USART1_UART_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001742:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <MX_USART1_UART_Init+0x58>)
 8001744:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001772:	4807      	ldr	r0, [pc, #28]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001774:	f004 faf4 	bl	8005d60 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800177e:	f000 f88f 	bl	80018a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 8001782:	2201      	movs	r2, #1
 8001784:	4904      	ldr	r1, [pc, #16]	@ (8001798 <MX_USART1_UART_Init+0x5c>)
 8001786:	4802      	ldr	r0, [pc, #8]	@ (8001790 <MX_USART1_UART_Init+0x54>)
 8001788:	f004 fbbd 	bl	8005f06 <HAL_UART_Receive_IT>

	/* USER CODE END USART1_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000404 	.word	0x20000404
 8001794:	40013800 	.word	0x40013800
 8001798:	2000044c 	.word	0x2000044c

0800179c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a31      	ldr	r2, [pc, #196]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <MX_GPIO_Init+0xf8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DW3000_RST_Pin | DW3000_RST_RCV_Pin,
 80017f8:	2200      	movs	r2, #0
 80017fa:	f240 1101 	movw	r1, #257	@ 0x101
 80017fe:	4826      	ldr	r0, [pc, #152]	@ (8001898 <MX_GPIO_Init+0xfc>)
 8001800:	f002 fc5c 	bl	80040bc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	4823      	ldr	r0, [pc, #140]	@ (8001898 <MX_GPIO_Init+0xfc>)
 800180a:	f002 fc57 	bl	80040bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001814:	4821      	ldr	r0, [pc, #132]	@ (800189c <MX_GPIO_Init+0x100>)
 8001816:	f002 fc51 	bl	80040bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DW3000_RST_Pin DW3000_RST_RCV_Pin */
	GPIO_InitStruct.Pin = DW3000_RST_Pin | DW3000_RST_RCV_Pin;
 800181a:	f240 1301 	movw	r3, #257	@ 0x101
 800181e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	4819      	ldr	r0, [pc, #100]	@ (8001898 <MX_GPIO_Init+0xfc>)
 8001834:	f002 fabe 	bl	8003db4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001838:	2310      	movs	r3, #16
 800183a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <MX_GPIO_Init+0xfc>)
 8001850:	f002 fab0 	bl	8003db4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DEVICE_SELECT_Pin KEY_UP_Pin KEY_DOWN_Pin KEY_OK_Pin
	 KEY_BACK_Pin */
	GPIO_InitStruct.Pin = DEVICE_SELECT_Pin | KEY_UP_Pin | KEY_DOWN_Pin
 8001854:	f640 4307 	movw	r3, #3079	@ 0xc07
 8001858:	613b      	str	r3, [r7, #16]
			| KEY_OK_Pin | KEY_BACK_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <MX_GPIO_Init+0x100>)
 800186a:	f002 faa3 	bl	8003db4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_GPIO_Init+0x100>)
 8001888:	f002 fa94 	bl	8003db4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40010800 	.word	0x40010800
 800189c:	40010c00 	.word	0x40010c00

080018a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_MspInit+0x5c>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <HAL_MspInit+0x5c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_MspInit+0x5c>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_MspInit+0x5c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_MspInit+0x5c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <HAL_MspInit+0x5c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_MspInit+0x60>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_MspInit+0x60>)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000

08001910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a37      	ldr	r2, [pc, #220]	@ (8001a08 <HAL_SPI_MspInit+0xf8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d130      	bne.n	8001992 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001930:	4b36      	ldr	r3, [pc, #216]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a35      	ldr	r2, [pc, #212]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 8001936:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001960:	23a0      	movs	r3, #160	@ 0xa0
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <HAL_SPI_MspInit+0x100>)
 8001974:	f002 fa1e 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001978:	2340      	movs	r3, #64	@ 0x40
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4619      	mov	r1, r3
 800198a:	4821      	ldr	r0, [pc, #132]	@ (8001a10 <HAL_SPI_MspInit+0x100>)
 800198c:	f002 fa12 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001990:	e036      	b.n	8001a00 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1f      	ldr	r2, [pc, #124]	@ (8001a14 <HAL_SPI_MspInit+0x104>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d131      	bne.n	8001a00 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 80019a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a6:	61d3      	str	r3, [r2, #28]
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_SPI_MspInit+0xfc>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019cc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	4619      	mov	r1, r3
 80019e0:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <HAL_SPI_MspInit+0x108>)
 80019e2:	f002 f9e7 	bl	8003db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <HAL_SPI_MspInit+0x108>)
 80019fc:	f002 f9da 	bl	8003db4 <HAL_GPIO_Init>
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40003800 	.word	0x40003800
 8001a18:	40010c00 	.word	0x40010c00

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_TIM_Base_MspInit+0x44>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d113      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_TIM_Base_MspInit+0x48>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_TIM_Base_MspInit+0x48>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_TIM_Base_MspInit+0x48>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	201e      	movs	r0, #30
 8001a4c:	f002 f8c9 	bl	8003be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a50:	201e      	movs	r0, #30
 8001a52:	f002 f8e2 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40000800 	.word	0x40000800
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <HAL_UART_MspInit+0x9c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d139      	bne.n	8001afc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a18      	ldr	r2, [pc, #96]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_UART_MspInit+0xa0>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	@ (8001b0c <HAL_UART_MspInit+0xa4>)
 8001ace:	f002 f971 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <HAL_UART_MspInit+0xa4>)
 8001ae8:	f002 f964 	bl	8003db4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2025      	movs	r0, #37	@ 0x25
 8001af2:	f002 f876 	bl	8003be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001af6:	2025      	movs	r0, #37	@ 0x25
 8001af8:	f002 f88f 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40013800 	.word	0x40013800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <NMI_Handler+0x4>

08001b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <MemManage_Handler+0x4>

08001b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f001 ff28 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <TIM4_IRQHandler+0x10>)
 8001b6e:	f003 fd93 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200003bc 	.word	0x200003bc

08001b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <USART1_IRQHandler+0x10>)
 8001b82:	f004 f9e5 	bl	8005f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000404 	.word	0x20000404

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <_kill>:

int _kill(int pid, int sig)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba8:	f005 fe60 	bl	800786c <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2216      	movs	r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_exit>:

void _exit (int status)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffe7 	bl	8001b9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <_exit+0x12>

08001bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
  }

  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
  }
  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <_isatty>:

int _isatty(int file)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	@ (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f005 fdc8 	bl	800786c <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20005000 	.word	0x20005000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	20000450 	.word	0x20000450
 8001d10:	200005a8 	.word	0x200005a8

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <dwt_local_data_init>:
#include <stdio.h>
#include <math.h>
#include <uwb3000Fxx.h>
#include "deca_regs.h"

int dwt_local_data_init(dwt_local_data_t *dwt_local_data) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	//uint16_t otp_addr;
	//uint32_t devid; // @suppress("Line comments")
	uint32_t ldo_tune_lo;
	uint32_t ldo_tune_hi;

	dwt_local_data->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	73da      	strb	r2, [r3, #15]
	dwt_local_data->sleep_mode = DWT_RUNSAR; // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	821a      	strh	r2, [r3, #16]
	dwt_local_data->spicrc = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	751a      	strb	r2, [r3, #20]
	dwt_local_data->stsconfig = 0; //STS off
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	755a      	strb	r2, [r3, #21]
	dwt_local_data->vBatP = 0;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	729a      	strb	r2, [r3, #10]
	dwt_local_data->tempP = 0;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	72da      	strb	r2, [r3, #11]

	dwt_local_data->cbTxDone = NULL;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	@ 0x28
	dwt_local_data->cbRxOk = NULL;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	@ 0x2c
	dwt_local_data->cbRxTo = NULL;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30
	dwt_local_data->cbRxErr = NULL;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	635a      	str	r2, [r3, #52]	@ 0x34
	dwt_local_data->cbSPIRdy = NULL;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	63da      	str	r2, [r3, #60]	@ 0x3c
	dwt_local_data->cbSPIErr = NULL;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38

	// Read and validate device ID return -1 if not recognised
	if (dwt_check_dev_id() != DWT_SUCCESS) {
 8001d70:	f001 f962 	bl	8003038 <dwt_check_dev_id>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <dwt_local_data_init+0x60>
		return DWT_ERROR;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	e082      	b.n	8001e86 <dwt_local_data_init+0x166>
	}

	ldo_tune_lo = dwt_otp_read(LDOTUNELO_ADDRESS);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f000 fb47 	bl	8002414 <dwt_otp_read>
 8001d86:	60f8      	str	r0, [r7, #12]
	ldo_tune_hi = dwt_otp_read(LDOTUNEHI_ADDRESS);
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f000 fb43 	bl	8002414 <dwt_otp_read>
 8001d8e:	60b8      	str	r0, [r7, #8]

	dwt_local_data->bias_tune = (dwt_otp_read(BIAS_TUNE_ADDRESS) >> 16)
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 fb3f 	bl	8002414 <dwt_otp_read>
 8001d96:	4603      	mov	r3, r0
 8001d98:	0c1b      	lsrs	r3, r3, #16
			& BIAS_CTRL_BIAS_MASK;
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	b2da      	uxtb	r2, r3
	dwt_local_data->bias_tune = (dwt_otp_read(BIAS_TUNE_ADDRESS) >> 16)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	721a      	strb	r2, [r3, #8]

	if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d016      	beq.n	8001dda <dwt_local_data_init+0xba>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d013      	beq.n	8001dda <dwt_local_data_init+0xba>
			&& (dwt_local_data->bias_tune != 0)) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7a1b      	ldrb	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00f      	beq.n	8001dda <dwt_local_data_init+0xba>
		dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 8001dba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4832      	ldr	r0, [pc, #200]	@ (8001e90 <dwt_local_data_init+0x170>)
 8001dc6:	f000 fd69 	bl	800289c <dwt_modify16bitoffsetreg>
		dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a1b      	ldrb	r3, [r3, #8]
 8001dce:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	482f      	ldr	r0, [pc, #188]	@ (8001e94 <dwt_local_data_init+0x174>)
 8001dd6:	f000 fd61 	bl	800289c <dwt_modify16bitoffsetreg>
				(uint16_t)~BIAS_CTRL_BIAS_MASK, dwt_local_data->bias_tune);
	}

	// Read DGC_CFG from OTP
	if (dwt_otp_read(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0) {
 8001dda:	2020      	movs	r0, #32
 8001ddc:	f000 fb1a 	bl	8002414 <dwt_otp_read>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e98 <dwt_local_data_init+0x178>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <dwt_local_data_init+0xd0>
		dwt_local_data->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	725a      	strb	r2, [r3, #9]
 8001dee:	e002      	b.n	8001df6 <dwt_local_data_init+0xd6>
	} else {
		dwt_local_data->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	725a      	strb	r2, [r3, #9]
	}

	// Load Part and Lot ID from OTP
	dwt_local_data->partID = dwt_otp_read(PARTID_ADDRESS);
 8001df6:	2006      	movs	r0, #6
 8001df8:	f000 fb0c 	bl	8002414 <dwt_otp_read>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
	dwt_local_data->lotID = dwt_otp_read(LOTID_ADDRESS);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f000 fb06 	bl	8002414 <dwt_otp_read>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	605a      	str	r2, [r3, #4]
	dwt_local_data->vBatP = (uint8_t) dwt_otp_read(VBAT_ADDRESS);
 8001e0e:	2008      	movs	r0, #8
 8001e10:	f000 fb00 	bl	8002414 <dwt_otp_read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	729a      	strb	r2, [r3, #10]
	dwt_local_data->tempP = (uint8_t) dwt_otp_read(VTEMP_ADDRESS);
 8001e1c:	2009      	movs	r0, #9
 8001e1e:	f000 faf9 	bl	8002414 <dwt_otp_read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	72da      	strb	r2, [r3, #11]
	if (dwt_local_data->tempP == 0) { //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7adb      	ldrb	r3, [r3, #11]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <dwt_local_data_init+0x118>

		dwt_local_data->tempP = 0x85; //@temp of 20 deg
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2285      	movs	r2, #133	@ 0x85
 8001e36:	72da      	strb	r2, [r3, #11]
	}

	if (dwt_local_data->vBatP == 0) { //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7a9b      	ldrb	r3, [r3, #10]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <dwt_local_data_init+0x126>

		dwt_local_data->vBatP = 0x74;  //@Vref of 3.0V
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2274      	movs	r2, #116	@ 0x74
 8001e44:	729a      	strb	r2, [r3, #10]
	}
	dwt_local_data->otprev = (uint8_t) dwt_otp_read(OTPREV_ADDRESS);
 8001e46:	201f      	movs	r0, #31
 8001e48:	f000 fae4 	bl	8002414 <dwt_otp_read>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	735a      	strb	r2, [r3, #13]
	dwt_local_data->init_xtrim = dwt_otp_read(XTRIM_ADDRESS) & 0x7f;
 8001e54:	201e      	movs	r0, #30
 8001e56:	f000 fadd 	bl	8002414 <dwt_otp_read>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	739a      	strb	r2, [r3, #14]
	if (dwt_local_data->init_xtrim == 0) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7b9b      	ldrb	r3, [r3, #14]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <dwt_local_data_init+0x156>
		dwt_local_data->init_xtrim = 0x2E; //set default value
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	222e      	movs	r2, #46	@ 0x2e
 8001e74:	739a      	strb	r2, [r3, #14]
	}
	dwt_write8bitoffsetreg(XTAL_ID, 0, dwt_local_data->init_xtrim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7b9b      	ldrb	r3, [r3, #14]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <dwt_local_data_init+0x17c>)
 8001e80:	f000 fcc6 	bl	8002810 <dwt_write8bitoffsetreg>

	return DWT_SUCCESS;
 8001e84:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	000b0008 	.word	0x000b0008
 8001e94:	0011001f 	.word	0x0011001f
 8001e98:	10000240 	.word	0x10000240
 8001e9c:	00090014 	.word	0x00090014

08001ea0 <tag_init>:

uint8_t tag_init(dwt_config_t *dwt_config, dwt_txconfig_t *dwt_txconfig,
		dwt_local_data_t *dwt_local_data, uint8_t device, uint8_t rate) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	70fb      	strb	r3, [r7, #3]
	uint32_t check_idle_rc_ticks;
	uint16_t check_idle_rc_timeout = 300;
 8001eae:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001eb2:	82fb      	strh	r3, [r7, #22]

	HAL_Delay(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f001 fd99 	bl	80039ec <HAL_Delay>
	check_idle_rc_ticks = HAL_GetTick();
 8001eba:	f001 fd8d 	bl	80039d8 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8001ec0:	e009      	b.n	8001ed6 <tag_init+0x36>
		if (HAL_GetTick() - check_idle_rc_ticks > check_idle_rc_timeout)
 8001ec2:	f001 fd89 	bl	80039d8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad2      	subs	r2, r2, r3
 8001ecc:	8afb      	ldrh	r3, [r7, #22]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d901      	bls.n	8001ed6 <tag_init+0x36>
			return (1);
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e05d      	b.n	8001f92 <tag_init+0xf2>
	while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8001ed6:	f001 f8e7 	bl	80030a8 <dwt_checkidlerc>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <tag_init+0x22>

	if (dwt_local_data_init(dwt_local_data) == DWT_ERROR) {
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff1d 	bl	8001d20 <dwt_local_data_init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eec:	d105      	bne.n	8001efa <tag_init+0x5a>
		HAL_Delay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f001 fd7b 	bl	80039ec <HAL_Delay>
		return (1);
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e04b      	b.n	8001f92 <tag_init+0xf2>
	}

	dwt_txconfig->power = GAIN_30DB;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	605a      	str	r2, [r3, #4]

	if (dwt_config2(dwt_config, dwt_local_data)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f849 	bl	8001f9c <dwt_config2>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <tag_init+0x7c>
	{
		HAL_Delay(1000);
 8001f10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f14:	f001 fd6a 	bl	80039ec <HAL_Delay>
		return (1);
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e03a      	b.n	8001f92 <tag_init+0xf2>
	}
	dwt_configuretxrf(dwt_txconfig);
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f000 fdf3 	bl	8002b08 <dwt_configuretxrf>
	/* Set the antenna delay. Modify the parameters to adjust the distance error */
	if (device == DEV_UWB3000F27) {
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <tag_init+0x9a>
		dwt_settxantennadelay(TX_ANT_DLY_HP);
 8001f28:	f244 001a 	movw	r0, #16410	@ 0x401a
 8001f2c:	f000 ff80 	bl	8002e30 <dwt_settxantennadelay>
		dwt_setrxantennadelay(RX_ANT_DLY_HP);
 8001f30:	f244 001a 	movw	r0, #16410	@ 0x401a
 8001f34:	f000 ff6c 	bl	8002e10 <dwt_setrxantennadelay>
 8001f38:	e007      	b.n	8001f4a <tag_init+0xaa>
	} else {
		dwt_settxantennadelay(TX_ANT_DLY_LP);
 8001f3a:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8001f3e:	f000 ff77 	bl	8002e30 <dwt_settxantennadelay>
		dwt_setrxantennadelay(RX_ANT_DLY_LP);
 8001f42:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8001f46:	f000 ff63 	bl	8002e10 <dwt_setrxantennadelay>
	}

	if (rate == RATE_6M8) {
 8001f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10b      	bne.n	8001f6a <tag_init+0xca>
		dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_6M8);
 8001f52:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001f56:	f001 f889 	bl	800306c <dwt_setrxaftertxdelay>
		dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_6M8);
 8001f5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f5e:	f001 fa93 	bl	8003488 <dwt_setrxtimeout>
		dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 8001f62:	2005      	movs	r0, #5
 8001f64:	f001 fab0 	bl	80034c8 <dwt_setpreambledetecttimeout>
 8001f68:	e009      	b.n	8001f7e <tag_init+0xde>
	} else {
		dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_850K);
 8001f6a:	203c      	movs	r0, #60	@ 0x3c
 8001f6c:	f001 f87e 	bl	800306c <dwt_setrxaftertxdelay>
		dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_850K);
 8001f70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f74:	f001 fa88 	bl	8003488 <dwt_setrxtimeout>
		dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f001 faa5 	bl	80034c8 <dwt_setpreambledetecttimeout>
	}

	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
	dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f000 fd82 	bl	8002a88 <dwt_setlnapamode>
	dwt_setfinegraintxseq(0);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 fd63 	bl	8002a50 <dwt_setfinegraintxseq>

	dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f001 f8a4 	bl	80030d8 <dwt_setleds>

	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <dwt_config2>:
 * return DWT_SUCCESS or DWT_ERROR
 * Note: If the RX calibration routine fails the device receiver performance will be severely affected,
 * the application should reset device and try again
 *
 */
int dwt_config2(dwt_config_t *config, dwt_local_data_t *dwt_local_data) {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b08d      	sub	sp, #52	@ 0x34
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]

	uint8_t channel = config->chan, cnt, flag;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint32_t temp;
	uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	2b18      	cmp	r3, #24
 8001fb4:	d803      	bhi.n	8001fbe <dwt_config2+0x22>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	78db      	ldrb	r3, [r3, #3]
 8001fba:	2b18      	cmp	r3, #24
 8001fbc:	d901      	bls.n	8001fc2 <dwt_config2+0x26>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <dwt_config2+0x28>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ?
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	79db      	ldrb	r3, [r3, #7]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <dwt_config2+0x38>
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	e000      	b.n	8001fd6 <dwt_config2+0x3a>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]
	SYS_CFG_PHR_MODE_BIT_MASK :
															0;
	uint16_t sts_len;
	int error = DWT_SUCCESS;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
	uint16_t sts_length_factors[STS_LEN_SUPPORTED] = { 1024, 1448, 2048, 2896,
 8001fdc:	4b87      	ldr	r3, [pc, #540]	@ (80021fc <dwt_config2+0x260>)
 8001fde:	f107 0408 	add.w	r4, r7, #8
 8001fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe4:	c407      	stmia	r4!, {r0, r1, r2}
 8001fe6:	8023      	strh	r3, [r4, #0]
			4096, 5793, 8192 };

	int preamble_len;

	switch (config->txPreambLength) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d81c      	bhi.n	800202c <dwt_config2+0x90>
 8001ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff8 <dwt_config2+0x5c>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	0800201b 	.word	0x0800201b
 8001ffc:	0800202d 	.word	0x0800202d
 8002000:	0800202d 	.word	0x0800202d
 8002004:	08002015 	.word	0x08002015
 8002008:	08002027 	.word	0x08002027
 800200c:	0800202d 	.word	0x0800202d
 8002010:	08002021 	.word	0x08002021
	case DWT_PLEN_32:
		preamble_len = 32;
 8002014:	2320      	movs	r3, #32
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002018:	e00c      	b.n	8002034 <dwt_config2+0x98>
	case DWT_PLEN_64:
		preamble_len = 64;
 800201a:	2340      	movs	r3, #64	@ 0x40
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800201e:	e009      	b.n	8002034 <dwt_config2+0x98>
	case DWT_PLEN_72:
		preamble_len = 72;
 8002020:	2348      	movs	r3, #72	@ 0x48
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002024:	e006      	b.n	8002034 <dwt_config2+0x98>
	case DWT_PLEN_128:
		preamble_len = 128;
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800202a:	e003      	b.n	8002034 <dwt_config2+0x98>
	default:
		preamble_len = 256;
 800202c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002032:	bf00      	nop
	}

	dwt_local_data->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3)); //clear the sleep mode ALT_OPS bit
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	8a1b      	ldrh	r3, [r3, #16]
 8002038:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800203c:	b29a      	uxth	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	821a      	strh	r2, [r3, #16]
	dwt_local_data->longFrames = config->phrMode;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	79da      	ldrb	r2, [r3, #7]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	731a      	strb	r2, [r3, #12]
	sts_len = (uint16_t) GET_STS_REG_SET_VALUE((uint16_t )(config->stsLength));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7b5b      	ldrb	r3, [r3, #13]
 800204e:	3302      	adds	r3, #2
 8002050:	2201      	movs	r2, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	82fb      	strh	r3, [r7, #22]
	dwt_local_data->ststhreshold = (int16_t) ((((uint32_t) sts_len) * 8)
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	00db      	lsls	r3, r3, #3
			* STSQUAL_THRESH_64);
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fdc9 	bl	8000bf4 <__aeabi_ui2f>
 8002062:	4603      	mov	r3, r0
 8002064:	4966      	ldr	r1, [pc, #408]	@ (8002200 <dwt_config2+0x264>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fe1c 	bl	8000ca4 <__aeabi_fmul>
 800206c:	4603      	mov	r3, r0
	dwt_local_data->ststhreshold = (int16_t) ((((uint32_t) sts_len) * 8)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ff68 	bl	8000f44 <__aeabi_f2iz>
 8002074:	4603      	mov	r3, r0
 8002076:	b21a      	sxth	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	825a      	strh	r2, [r3, #18]
	dwt_local_data->stsconfig = config->stsMode;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7b1a      	ldrb	r2, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	755a      	strb	r2, [r3, #21]
	//then set the relevant bits according to configuration of the PHR Mode, PHR Rate, STS Protocol, SDC, PDOA Mode,
	dwt_modify32bitoffsetreg(SYS_CFG_ID, 0,
			~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK
					| SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK
					| SYS_CFG_CP_SDC_BIT_MASK),
			((uint32_t) config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7b9b      	ldrb	r3, [r3, #14]
 8002088:	041a      	lsls	r2, r3, #16
					| ((uint16_t) config->stsMode & DWT_STS_CONFIG_MASK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
							<< SYS_CFG_CP_SPC_BIT_OFFSET
 800208e:	031b      	lsls	r3, r3, #12
 8002090:	f403 4330 	and.w	r3, r3, #45056	@ 0xb000
					| ((uint16_t) config->stsMode & DWT_STS_CONFIG_MASK)
 8002094:	431a      	orrs	r2, r3
					| (SYS_CFG_PHR_6M8_BIT_MASK
							& ((uint32_t) config->phrRate
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7a1b      	ldrb	r3, [r3, #8]
									<< SYS_CFG_PHR_6M8_BIT_OFFSET)) | mode);
 800209a:	015b      	lsls	r3, r3, #5
							& ((uint32_t) config->phrRate
 800209c:	f003 0320 	and.w	r3, r3, #32
					| (SYS_CFG_PHR_6M8_BIT_MASK
 80020a0:	431a      	orrs	r2, r3
	dwt_modify32bitoffsetreg(SYS_CFG_ID, 0,
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <dwt_config2+0x268>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	2010      	movs	r0, #16
 80020ac:	f000 fbc2 	bl	8002834 <dwt_modify32bitoffsetreg>

	if (scp) {
 80020b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d025      	beq.n	8002104 <dwt_config2+0x168>
		//configure OPS tables for SCP mode
		dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1; //configure correct OPS table is kicked on wakeup
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	8a1b      	ldrh	r3, [r3, #16]
 80020bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	821a      	strh	r2, [r3, #16]
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 80020c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020ca:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 80020ce:	2100      	movs	r1, #0
 80020d0:	484d      	ldr	r0, [pc, #308]	@ (8002208 <dwt_config2+0x26c>)
 80020d2:	f000 fbaf 	bl	8002834 <dwt_modify32bitoffsetreg>
		DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);

		dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP); //Set this if Ipatov analysis is used in SCP mode
 80020d6:	f240 3206 	movw	r2, #774	@ 0x306
 80020da:	2100      	movs	r1, #0
 80020dc:	484b      	ldr	r0, [pc, #300]	@ (800220c <dwt_config2+0x270>)
 80020de:	f000 fb56 	bl	800278e <dwt_write32bitoffsetreg>
		dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	f04f 100e 	mov.w	r0, #917518	@ 0xe000e
 80020ea:	f000 fb50 	bl	800278e <dwt_write32bitoffsetreg>

		dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 80020ee:	4a48      	ldr	r2, [pc, #288]	@ (8002210 <dwt_config2+0x274>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	4848      	ldr	r0, [pc, #288]	@ (8002214 <dwt_config2+0x278>)
 80020f4:	f000 fb4b 	bl	800278e <dwt_write32bitoffsetreg>
		dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 80020f8:	227d      	movs	r2, #125	@ 0x7d
 80020fa:	2100      	movs	r1, #0
 80020fc:	4846      	ldr	r0, [pc, #280]	@ (8002218 <dwt_config2+0x27c>)
 80020fe:	f000 fb87 	bl	8002810 <dwt_write8bitoffsetreg>
 8002102:	e051      	b.n	80021a8 <dwt_config2+0x20c>
	} else //
	{
		uint16_t sts_mnth;
		if (config->stsMode != DWT_STS_MODE_OFF) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d032      	beq.n	8002172 <dwt_config2+0x1d6>

			//configure CIA STS lower bound
			if ((config->pdoaMode == DWT_PDOA_M1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7b9b      	ldrb	r3, [r3, #14]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d003      	beq.n	800211c <dwt_config2+0x180>
					|| (config->pdoaMode == DWT_PDOA_M0)) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7b9b      	ldrb	r3, [r3, #14]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10e      	bne.n	800213a <dwt_config2+0x19e>
				//In PDOA mode 1, number of accumulated symbols is the whole length of the STS
				sts_mnth = get_sts_mnth(
						sts_length_factors[(uint8_t) (config->stsLength)],
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7b5b      	ldrb	r3, [r3, #13]
				sts_mnth = get_sts_mnth(
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	3330      	adds	r3, #48	@ 0x30
 8002124:	443b      	add	r3, r7
 8002126:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800212a:	2203      	movs	r2, #3
 800212c:	2110      	movs	r1, #16
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd20 	bl	8002b74 <get_sts_mnth>
 8002134:	4603      	mov	r3, r0
 8002136:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002138:	e00d      	b.n	8002156 <dwt_config2+0x1ba>
						CIA_MANUALLOWERBOUND_TH_64, 3);
			} else {
				//In PDOA mode 3 number of accumulated symbols is half of the length of STS symbols
				sts_mnth = get_sts_mnth(
						sts_length_factors[(uint8_t) (config->stsLength)],
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7b5b      	ldrb	r3, [r3, #13]
				sts_mnth = get_sts_mnth(
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3330      	adds	r3, #48	@ 0x30
 8002142:	443b      	add	r3, r7
 8002144:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8002148:	2204      	movs	r2, #4
 800214a:	2110      	movs	r1, #16
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fd11 	bl	8002b74 <get_sts_mnth>
 8002152:	4603      	mov	r3, r0
 8002154:	847b      	strh	r3, [r7, #34]	@ 0x22
						CIA_MANUALLOWERBOUND_TH_64, 4);
			}

			preamble_len += (sts_len) * 8;
 8002156:	8afb      	ldrh	r3, [r7, #22]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215c:	4413      	add	r3, r2
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24

			dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2,
 8002160:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002166:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800216a:	2102      	movs	r1, #2
 800216c:	4829      	ldr	r0, [pc, #164]	@ (8002214 <dwt_config2+0x278>)
 800216e:	f000 fb95 	bl	800289c <dwt_modify16bitoffsetreg>
					sts_mnth & 0x7F);

		}

		//configure OPS tables for non-SCP mode
		if (preamble_len >= 256) {
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	2bff      	cmp	r3, #255	@ 0xff
 8002176:	dd0f      	ble.n	8002198 <dwt_config2+0x1fc>
			dwt_local_data->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	8a1b      	ldrh	r3, [r3, #16]
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	b29a      	uxth	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	821a      	strh	r2, [r3, #16]
			dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8002186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800218a:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 800218e:	2100      	movs	r1, #0
 8002190:	481d      	ldr	r0, [pc, #116]	@ (8002208 <dwt_config2+0x26c>)
 8002192:	f000 fb4f 	bl	8002834 <dwt_modify32bitoffsetreg>
 8002196:	e007      	b.n	80021a8 <dwt_config2+0x20c>
			DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
		} else {
			dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK),
 8002198:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800219c:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 80021a0:	2100      	movs	r1, #0
 80021a2:	4819      	ldr	r0, [pc, #100]	@ (8002208 <dwt_config2+0x26c>)
 80021a4:	f000 fb46 	bl	8002834 <dwt_modify32bitoffsetreg>
		}

	}

	dwt_modify8bitoffsetreg(DTUNE0_ID, 0,
			(uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	789b      	ldrb	r3, [r3, #2]
	dwt_modify8bitoffsetreg(DTUNE0_ID, 0,
 80021ac:	22fc      	movs	r2, #252	@ 0xfc
 80021ae:	2100      	movs	r1, #0
 80021b0:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 80021b4:	f000 fb9d 	bl	80028f2 <dwt_modify8bitoffsetreg>

	dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t) (sts_len - 1)); /*Starts from 0 that is why -1*/
 80021b8:	8afb      	ldrh	r3, [r7, #22]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80021c8:	f000 fb22 	bl	8002810 <dwt_write8bitoffsetreg>

	if (config->txPreambLength == DWT_PLEN_72) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b07      	cmp	r3, #7
 80021d2:	d103      	bne.n	80021dc <dwt_config2+0x240>
		dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 80021d4:	2008      	movs	r0, #8
 80021d6:	f000 feb3 	bl	8002f40 <dwt_setplenfine>
 80021da:	e002      	b.n	80021e2 <dwt_config2+0x246>
	} else {
		dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 feaf 	bl	8002f40 <dwt_setplenfine>
	}

	if ((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d11a      	bne.n	8002224 <dwt_config2+0x288>
		//configure lower preamble detection threshold for no data STS mode
		dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 80021ee:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <dwt_config2+0x280>)
 80021f0:	2100      	movs	r1, #0
 80021f2:	480b      	ldr	r0, [pc, #44]	@ (8002220 <dwt_config2+0x284>)
 80021f4:	f000 facb 	bl	800278e <dwt_write32bitoffsetreg>
 80021f8:	e019      	b.n	800222e <dwt_config2+0x292>
 80021fa:	bf00      	nop
 80021fc:	08009808 	.word	0x08009808
 8002200:	3f666666 	.word	0x3f666666
 8002204:	fffc4fcf 	.word	0xfffc4fcf
 8002208:	000b0008 	.word	0x000b0008
 800220c:	000e000c 	.word	0x000e000c
 8002210:	000c5a0a 	.word	0x000c5a0a
 8002214:	000e0012 	.word	0x000e0012
 8002218:	000e0016 	.word	0x000e0016
 800221c:	af5f35cc 	.word	0xaf5f35cc
 8002220:	0006000c 	.word	0x0006000c
	} else {
		//configure default preamble detection threshold for other modes
		dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 8002224:	4a6f      	ldr	r2, [pc, #444]	@ (80023e4 <dwt_config2+0x448>)
 8002226:	2100      	movs	r1, #0
 8002228:	486f      	ldr	r0, [pc, #444]	@ (80023e8 <dwt_config2+0x44c>)
 800222a:	f000 fab0 	bl	800278e <dwt_write32bitoffsetreg>
	}

	/////////////////////////////////////////////////////////////////////////
	//CHAN_CTRL
	temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 800222e:	2100      	movs	r1, #0
 8002230:	486e      	ldr	r0, [pc, #440]	@ (80023ec <dwt_config2+0x450>)
 8002232:	f000 fa5a 	bl	80026ea <dwt_read32bitoffsetreg>
 8002236:	62b8      	str	r0, [r7, #40]	@ 0x28
	temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800223e:	f023 031f 	bic.w	r3, r3, #31
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
			| CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));

	if (channel == 9)
 8002244:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002248:	2b09      	cmp	r3, #9
 800224a:	d103      	bne.n	8002254 <dwt_config2+0x2b8>
		temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 800224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28

	temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK
			& ((uint32_t) config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
	temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK
 800225e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002260:	4313      	orrs	r3, r2
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
	temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK
			& ((uint32_t) config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	b2db      	uxtb	r3, r3
	temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK
 800226c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800226e:	4313      	orrs	r3, r2
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
	temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK
			& ((uint32_t) config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	795b      	ldrb	r3, [r3, #5]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f003 0306 	and.w	r3, r3, #6
	temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK
 800227c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800227e:	4313      	orrs	r3, r2
 8002280:	62bb      	str	r3, [r7, #40]	@ 0x28

	dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 8002282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002284:	2100      	movs	r1, #0
 8002286:	4859      	ldr	r0, [pc, #356]	@ (80023ec <dwt_config2+0x450>)
 8002288:	f000 fa81 	bl	800278e <dwt_write32bitoffsetreg>
	/////////////////////////////////////////////////////////////////////////
	//TX_FCTRL
	// Set up TX Preamble Size, PRF and Data Rate
	dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0,
			~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
			((uint32_t) config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	799b      	ldrb	r3, [r3, #6]
 8002290:	029a      	lsls	r2, r3, #10
					| ((uint32_t) config->txPreambLength)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	785b      	ldrb	r3, [r3, #1]
							<< TX_FCTRL_TXPSR_BIT_OFFSET);
 8002296:	031b      	lsls	r3, r3, #12
	dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0,
 8002298:	4313      	orrs	r3, r2
 800229a:	f46f 4274 	mvn.w	r2, #62464	@ 0xf400
 800229e:	2100      	movs	r1, #0
 80022a0:	2024      	movs	r0, #36	@ 0x24
 80022a2:	f000 fac7 	bl	8002834 <dwt_modify32bitoffsetreg>

	//DTUNE (SFD timeout)
	// Don't allow 0 - SFD timeout will always be enabled
	if (config->sfdTO == 0) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	895b      	ldrh	r3, [r3, #10]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <dwt_config2+0x318>
		config->sfdTO = DWT_SFDTOC_DEF;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2281      	movs	r2, #129	@ 0x81
 80022b2:	815a      	strh	r2, [r3, #10]
	}
	dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	895b      	ldrh	r3, [r3, #10]
 80022b8:	461a      	mov	r2, r3
 80022ba:	2102      	movs	r1, #2
 80022bc:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 80022c0:	f000 fa8b 	bl	80027da <dwt_write16bitoffsetreg>

	///////////////////////
	// RF
	if (channel == 9) {
 80022c4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d111      	bne.n	80022f0 <dwt_config2+0x354>
		// Setup TX analog for ch9
		dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 80022cc:	4a48      	ldr	r2, [pc, #288]	@ (80023f0 <dwt_config2+0x454>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	4848      	ldr	r0, [pc, #288]	@ (80023f4 <dwt_config2+0x458>)
 80022d2:	f000 fa5c 	bl	800278e <dwt_write32bitoffsetreg>
		dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 80022d6:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80022da:	2100      	movs	r1, #0
 80022dc:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 80022e0:	f000 fa7b 	bl	80027da <dwt_write16bitoffsetreg>
		// Setup RX analog for ch9
		dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 80022e4:	4a44      	ldr	r2, [pc, #272]	@ (80023f8 <dwt_config2+0x45c>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	4844      	ldr	r0, [pc, #272]	@ (80023fc <dwt_config2+0x460>)
 80022ea:	f000 fa50 	bl	800278e <dwt_write32bitoffsetreg>
 80022ee:	e00b      	b.n	8002308 <dwt_config2+0x36c>
	} else {
		// Setup TX analog for ch5
		dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 80022f0:	4a43      	ldr	r2, [pc, #268]	@ (8002400 <dwt_config2+0x464>)
 80022f2:	2100      	movs	r1, #0
 80022f4:	483f      	ldr	r0, [pc, #252]	@ (80023f4 <dwt_config2+0x458>)
 80022f6:	f000 fa4a 	bl	800278e <dwt_write32bitoffsetreg>
		dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 80022fa:	f641 723c 	movw	r2, #7996	@ 0x1f3c
 80022fe:	2100      	movs	r1, #0
 8002300:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 8002304:	f000 fa69 	bl	80027da <dwt_write16bitoffsetreg>
	}

	dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 8002308:	2214      	movs	r2, #20
 800230a:	2101      	movs	r1, #1
 800230c:	483d      	ldr	r0, [pc, #244]	@ (8002404 <dwt_config2+0x468>)
 800230e:	f000 fa7f 	bl	8002810 <dwt_write8bitoffsetreg>
	dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8002312:	220e      	movs	r2, #14
 8002314:	2102      	movs	r1, #2
 8002316:	483c      	ldr	r0, [pc, #240]	@ (8002408 <dwt_config2+0x46c>)
 8002318:	f000 fa7a 	bl	8002810 <dwt_write8bitoffsetreg>
	dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD); // Extend the lock delay
 800231c:	2281      	movs	r2, #129	@ 0x81
 800231e:	2100      	movs	r1, #0
 8002320:	483a      	ldr	r0, [pc, #232]	@ (800240c <dwt_config2+0x470>)
 8002322:	f000 fa75 	bl	8002810 <dwt_write8bitoffsetreg>

	//Verify PLL lock bit is cleared
	dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 8002326:	2202      	movs	r2, #2
 8002328:	2100      	movs	r1, #0
 800232a:	2044      	movs	r0, #68	@ 0x44
 800232c:	f000 fa70 	bl	8002810 <dwt_write8bitoffsetreg>

	///////////////////////
	// auto cal the PLL and change to IDLE_PLL state
	dwt_setdwstate(DWT_DW_IDLE);
 8002330:	2001      	movs	r0, #1
 8002332:	f000 fb45 	bl	80029c0 <dwt_setdwstate>

	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8002336:	2301      	movs	r3, #1
 8002338:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800233c:	2300      	movs	r3, #0
 800233e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002342:	e014      	b.n	800236e <dwt_config2+0x3d2>
		//deca_usleep(DELAY_20uUSec);
		HAL_Delay(1);
 8002344:	2001      	movs	r0, #1
 8002346:	f001 fb51 	bl	80039ec <HAL_Delay>
		if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0)
 800234a:	2100      	movs	r1, #0
 800234c:	2044      	movs	r0, #68	@ 0x44
 800234e:	f000 fa0c 	bl	800276a <dwt_read8bitoffsetreg>
 8002352:	4603      	mov	r3, r0
				& SYS_STATUS_CP_LOCK_BIT_MASK)) {    //PLL is locked
 8002354:	f003 0302 	and.w	r3, r3, #2
		if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0)
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <dwt_config2+0x3c8>
			flag = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			break;
 8002362:	e008      	b.n	8002376 <dwt_config2+0x3da>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PLL; cnt++) {
 8002364:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002368:	3301      	adds	r3, #1
 800236a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800236e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002372:	2b05      	cmp	r3, #5
 8002374:	d9e6      	bls.n	8002344 <dwt_config2+0x3a8>
		}
	}

	if (flag) {
 8002376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <dwt_config2+0x3e8>
		return DWT_ERROR;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002382:	e02a      	b.n	80023da <dwt_config2+0x43e>
	}

	if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d91b      	bls.n	80023c4 <dwt_config2+0x428>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	2b18      	cmp	r3, #24
 8002392:	d817      	bhi.n	80023c4 <dwt_config2+0x428>
			{
		//load RX LUTs
		/* If the OTP has DGC info programmed into it, do a manual kick from OTP. */
		if (dwt_local_data->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP) {
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7a5b      	ldrb	r3, [r3, #9]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <dwt_config2+0x40c>
			_dwt_kick_dgc_on_wakeup((int8_t) channel);
 800239c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fae9 	bl	8002978 <_dwt_kick_dgc_on_wakeup>
 80023a6:	e004      	b.n	80023b2 <dwt_config2+0x416>
		}
		/* Else we manually program hard-coded values into the DGC registers. */
		else {
			dwt_configmrxlut(channel);
 80023a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fc13 	bl	8002bd8 <dwt_configmrxlut>
		}
		dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0,
 80023b2:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80023b6:	f248 12ff 	movw	r2, #33279	@ 0x81ff
 80023ba:	2100      	movs	r1, #0
 80023bc:	4814      	ldr	r0, [pc, #80]	@ (8002410 <dwt_config2+0x474>)
 80023be:	f000 fa6d 	bl	800289c <dwt_modify16bitoffsetreg>
			{
 80023c2:	e005      	b.n	80023d0 <dwt_config2+0x434>
				(uint16_t) ~DGC_CFG_THR_64_BIT_MASK,
				DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
	} else {
		dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0,
 80023c4:	2300      	movs	r3, #0
 80023c6:	22fe      	movs	r2, #254	@ 0xfe
 80023c8:	2100      	movs	r1, #0
 80023ca:	4811      	ldr	r0, [pc, #68]	@ (8002410 <dwt_config2+0x474>)
 80023cc:	f000 fa91 	bl	80028f2 <dwt_modify8bitoffsetreg>
				(uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
	}

	///////////////////////
	// PGF
	error = dwt_pgf_cal(1); //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 80023d0:	2001      	movs	r0, #1
 80023d2:	f000 fc89 	bl	8002ce8 <dwt_pgf_cal>
 80023d6:	61b8      	str	r0, [r7, #24]

	return error;
 80023d8:	69bb      	ldr	r3, [r7, #24]
} // end dwt_configure()
 80023da:	4618      	mov	r0, r3
 80023dc:	3734      	adds	r7, #52	@ 0x34
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	af5f584c 	.word	0xaf5f584c
 80023e8:	0006000c 	.word	0x0006000c
 80023ec:	00010014 	.word	0x00010014
 80023f0:	1c010034 	.word	0x1c010034
 80023f4:	0007001c 	.word	0x0007001c
 80023f8:	08b5a833 	.word	0x08b5a833
 80023fc:	00070010 	.word	0x00070010
 8002400:	1c071134 	.word	0x1c071134
 8002404:	00070050 	.word	0x00070050
 8002408:	00070018 	.word	0x00070018
 800240c:	00090008 	.word	0x00090008
 8002410:	00030018 	.word	0x00030018

08002414 <dwt_otp_read>:
 *
 * output parameters
 *tx
 * returns the 32bit of read data
 */
uint32_t dwt_otp_read(uint16_t address) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	uint32_t ret_data = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]

	// Set manual access mode
	dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 8002422:	2201      	movs	r2, #1
 8002424:	2100      	movs	r1, #0
 8002426:	480c      	ldr	r0, [pc, #48]	@ (8002458 <dwt_otp_read+0x44>)
 8002428:	f000 f9d7 	bl	80027da <dwt_write16bitoffsetreg>
	// set the address
	dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	461a      	mov	r2, r3
 8002430:	2100      	movs	r1, #0
 8002432:	480a      	ldr	r0, [pc, #40]	@ (800245c <dwt_otp_read+0x48>)
 8002434:	f000 f9d1 	bl	80027da <dwt_write16bitoffsetreg>
	// Assert the read strobe
	dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 8002438:	2202      	movs	r2, #2
 800243a:	2100      	movs	r1, #0
 800243c:	4806      	ldr	r0, [pc, #24]	@ (8002458 <dwt_otp_read+0x44>)
 800243e:	f000 f9cc 	bl	80027da <dwt_write16bitoffsetreg>
	// attempt a read from OTP address
	ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 8002442:	2100      	movs	r1, #0
 8002444:	4806      	ldr	r0, [pc, #24]	@ (8002460 <dwt_otp_read+0x4c>)
 8002446:	f000 f950 	bl	80026ea <dwt_read32bitoffsetreg>
 800244a:	60f8      	str	r0, [r7, #12]

	// Return the 32bit of read data
	return ret_data;
 800244c:	68fb      	ldr	r3, [r7, #12]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	000b0008 	.word	0x000b0008
 800245c:	000b0004 	.word	0x000b0004
 8002460:	000b0010 	.word	0x000b0010

08002464 <dwt_xfer3000>:
 *
 * no return value
 */
void dwt_xfer3000(const uint32_t regFileID, //0x0, 0x04-0x7F ; 0x10000, 0x10004, 0x10008-0x1007F; 0x20000 etc
		const uint16_t indx,     //sub-index, calculated from regFileID 0..0x7F,
		const uint16_t length, uint8_t *buffer, const spi_modes_e mode) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	817b      	strh	r3, [r7, #10]
 8002472:	4613      	mov	r3, r2
 8002474:	813b      	strh	r3, [r7, #8]
	 sprintf(str, "%x, %x\r\n", regFileID, indx);
	 uart_transmit(str, strlen(str));
	 Sleep(10);
	 */
	uint8_t header[2];           // Buffer to compose header in
	uint16_t cnt = 0;             // Counter for length of a header
 8002476:	2300      	movs	r3, #0
 8002478:	83fb      	strh	r3, [r7, #30]

	uint16_t reg_file = 0x1F & ((regFileID + indx) >> 16);
 800247a:	897a      	ldrh	r2, [r7, #10]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	b29b      	uxth	r3, r3
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_offset = 0x7F & (regFileID + indx);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	b29a      	uxth	r2, r3
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	4413      	add	r3, r2
 8002492:	b29b      	uxth	r3, r3
 8002494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002498:	837b      	strh	r3, [r7, #26]

	assert(reg_file <= 0x1F);
 800249a:	8bbb      	ldrh	r3, [r7, #28]
 800249c:	2b1f      	cmp	r3, #31
 800249e:	d906      	bls.n	80024ae <dwt_xfer3000+0x4a>
 80024a0:	4b74      	ldr	r3, [pc, #464]	@ (8002674 <dwt_xfer3000+0x210>)
 80024a2:	4a75      	ldr	r2, [pc, #468]	@ (8002678 <dwt_xfer3000+0x214>)
 80024a4:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80024a8:	4874      	ldr	r0, [pc, #464]	@ (800267c <dwt_xfer3000+0x218>)
 80024aa:	f004 fad9 	bl	8006a60 <__assert_func>
	assert(reg_offset <= 0x7F);
 80024ae:	8b7b      	ldrh	r3, [r7, #26]
 80024b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80024b2:	d906      	bls.n	80024c2 <dwt_xfer3000+0x5e>
 80024b4:	4b72      	ldr	r3, [pc, #456]	@ (8002680 <dwt_xfer3000+0x21c>)
 80024b6:	4a70      	ldr	r2, [pc, #448]	@ (8002678 <dwt_xfer3000+0x214>)
 80024b8:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80024bc:	486f      	ldr	r0, [pc, #444]	@ (800267c <dwt_xfer3000+0x218>)
 80024be:	f004 facf 	bl	8006a60 <__assert_func>
	assert(length < 0x3100);
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	f5b3 5f44 	cmp.w	r3, #12544	@ 0x3100
 80024c8:	d306      	bcc.n	80024d8 <dwt_xfer3000+0x74>
 80024ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <dwt_xfer3000+0x220>)
 80024cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002678 <dwt_xfer3000+0x214>)
 80024ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80024d2:	486a      	ldr	r0, [pc, #424]	@ (800267c <dwt_xfer3000+0x218>)
 80024d4:	f004 fac4 	bl	8006a60 <__assert_func>
	assert(
 80024d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024de:	d018      	beq.n	8002512 <dwt_xfer3000+0xae>
 80024e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <dwt_xfer3000+0xae>
 80024e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024e8:	f248 0201 	movw	r2, #32769	@ 0x8001
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d010      	beq.n	8002512 <dwt_xfer3000+0xae>
 80024f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024f2:	f248 0202 	movw	r2, #32770	@ 0x8002
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00b      	beq.n	8002512 <dwt_xfer3000+0xae>
 80024fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80024fc:	f248 0203 	movw	r2, #32771	@ 0x8003
 8002500:	4293      	cmp	r3, r2
 8002502:	d006      	beq.n	8002512 <dwt_xfer3000+0xae>
 8002504:	4b60      	ldr	r3, [pc, #384]	@ (8002688 <dwt_xfer3000+0x224>)
 8002506:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <dwt_xfer3000+0x214>)
 8002508:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800250c:	485b      	ldr	r0, [pc, #364]	@ (800267c <dwt_xfer3000+0x218>)
 800250e:	f004 faa7 	bl	8006a60 <__assert_func>
					|| mode == DW3000_SPI_AND_OR_16
					|| mode == DW3000_SPI_AND_OR_32);

	// Write message header selecting WRITE operation and addresses as appropriate
	uint16_t addr;
	addr = (uint16_t) ((reg_file << 9) | (reg_offset << 2));
 8002512:	8bbb      	ldrh	r3, [r7, #28]
 8002514:	025b      	lsls	r3, r3, #9
 8002516:	b21a      	sxth	r2, r3
 8002518:	8b7b      	ldrh	r3, [r7, #26]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21b      	sxth	r3, r3
 8002522:	833b      	strh	r3, [r7, #24]

	header[0] = (uint8_t) ((mode | addr) >> 8); //  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002524:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002526:	8b3b      	ldrh	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b29b      	uxth	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	743b      	strb	r3, [r7, #16]
	header[1] = (uint8_t) (addr | (mode & 0x03)); // & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8002534:	8b3b      	ldrh	r3, [r7, #24]
 8002536:	b25a      	sxtb	r2, r3
 8002538:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	b25b      	sxtb	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	b25b      	sxtb	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	747b      	strb	r3, [r7, #17]

	if (/*reg_offset == 0 && */length == 0) { /* Fast Access Commands (FAC)
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d115      	bne.n	800257c <dwt_xfer3000+0x118>
	 * only write operation is possible for this mode
	 * bit_7=one is W operation, bit_6=zero: FastAccess command, bit_[5..1] addr, bits_0=one: MODE of FastAccess
	 */
		assert(mode == DW3000_SPI_WR_BIT);
 8002550:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002556:	d006      	beq.n	8002566 <dwt_xfer3000+0x102>
 8002558:	4b4c      	ldr	r3, [pc, #304]	@ (800268c <dwt_xfer3000+0x228>)
 800255a:	4a47      	ldr	r2, [pc, #284]	@ (8002678 <dwt_xfer3000+0x214>)
 800255c:	f240 11c1 	movw	r1, #449	@ 0x1c1
 8002560:	4846      	ldr	r0, [pc, #280]	@ (800267c <dwt_xfer3000+0x218>)
 8002562:	f004 fa7d 	bl	8006a60 <__assert_func>

		header[0] = (uint8_t) ((DW3000_SPI_WR_BIT >> 8) | (regFileID << 1)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8002572:	b2db      	uxtb	r3, r3
 8002574:	743b      	strb	r3, [r7, #16]
				| DW3000_SPI_FAC);
		cnt = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	83fb      	strh	r3, [r7, #30]
 800257a:	e015      	b.n	80025a8 <dwt_xfer3000+0x144>
	} else if (reg_offset == 0 /*&& length > 0*/
 800257c:	8b7b      	ldrh	r3, [r7, #26]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <dwt_xfer3000+0x136>
			&& (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT)) { /* Fast Access Commands with Read/Write support (FACRW)
 8002582:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002588:	d002      	beq.n	8002590 <dwt_xfer3000+0x12c>
 800258a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <dwt_xfer3000+0x136>
			 * bit_7 is R/W operation, bit_6=zero: FastAccess command, bit_[5..1] addr, bits_0=zero: MODE of FastAccess
			 */
		header[0] |= DW3000_SPI_FARW;
 8002590:	7c3b      	ldrb	r3, [r7, #16]
 8002592:	743b      	strb	r3, [r7, #16]
		cnt = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	83fb      	strh	r3, [r7, #30]
 8002598:	e006      	b.n	80025a8 <dwt_xfer3000+0x144>
	} else { /* Extended Address Mode with Read/Write support (EAMRW)
	 * b[0] = bit_7 is R/W operation, bit_6 one = ExtendedAddressMode;
	 * b[1] = addr<<2 | (mode&0x3)
	 */
		header[0] |= DW3000_SPI_EAMRW;
 800259a:	7c3b      	ldrb	r3, [r7, #16]
 800259c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	743b      	strb	r3, [r7, #16]
		cnt = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	83fb      	strh	r3, [r7, #30]
	}

	switch (mode) {
 80025a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d026      	beq.n	80025fc <dwt_xfer3000+0x198>
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db59      	blt.n	8002666 <dwt_xfer3000+0x202>
 80025b2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d855      	bhi.n	8002666 <dwt_xfer3000+0x202>
	case DW3000_SPI_AND_OR_8:
	case DW3000_SPI_AND_OR_16:
	case DW3000_SPI_AND_OR_32:
	case DW3000_SPI_WR_BIT: {
		uint8_t crc8 = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
		if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO) {
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <dwt_xfer3000+0x22c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	7d1b      	ldrb	r3, [r3, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d011      	beq.n	80025ec <dwt_xfer3000+0x188>
			//generate 8 bit CRC
			crc8 = dwt_generatecrc8(header, cnt, 0);
 80025c8:	8bf9      	ldrh	r1, [r7, #30]
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	2200      	movs	r2, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f9ad 	bl	8002930 <dwt_generatecrc8>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
			crc8 = dwt_generatecrc8(buffer, length, crc8);
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	7dfa      	ldrb	r2, [r7, #23]
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f9a5 	bl	8002930 <dwt_generatecrc8>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75fb      	strb	r3, [r7, #23]
		} else {

			// Write it to the SPI
			write(cnt, header, length, buffer);
		}
		break;
 80025ea:	e03e      	b.n	800266a <dwt_xfer3000+0x206>
			write(cnt, header, length, buffer);
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	f107 0110 	add.w	r1, r7, #16
 80025f2:	8bf8      	ldrh	r0, [r7, #30]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f001 f851 	bl	800369c <write>
		break;
 80025fa:	e036      	b.n	800266a <dwt_xfer3000+0x206>
	}
	case DW3000_SPI_RD_BIT: {
		read(cnt, header, length, buffer);
 80025fc:	893a      	ldrh	r2, [r7, #8]
 80025fe:	f107 0110 	add.w	r1, r7, #16
 8002602:	8bf8      	ldrh	r0, [r7, #30]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f001 f8b1 	bl	800376c <read>

		//check that the SPI read has correct CRC-8 byte
		//also don't do for SPICRC_CFG_ID register itself to prevent infinite recursion
		if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD)
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <dwt_xfer3000+0x22c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	7d1b      	ldrb	r3, [r3, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d129      	bne.n	8002668 <dwt_xfer3000+0x204>
				&& (regFileID != SPICRC_CFG_ID)) {
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b18      	cmp	r3, #24
 8002618:	d026      	beq.n	8002668 <dwt_xfer3000+0x204>
			uint8_t crc8, dwcrc8;
			//generate 8 bit CRC from the read data
			crc8 = dwt_generatecrc8(header, cnt, 0);
 800261a:	8bf9      	ldrh	r1, [r7, #30]
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	2200      	movs	r2, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f984 	bl	8002930 <dwt_generatecrc8>
 8002628:	4603      	mov	r3, r0
 800262a:	75bb      	strb	r3, [r7, #22]
			crc8 = dwt_generatecrc8(buffer, length, crc8);
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	7dba      	ldrb	r2, [r7, #22]
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f97c 	bl	8002930 <dwt_generatecrc8>
 8002638:	4603      	mov	r3, r0
 800263a:	75bb      	strb	r3, [r7, #22]

			//read the CRC that was generated in the DW3000 for the read transaction
			dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	2018      	movs	r0, #24
 8002640:	f000 f893 	bl	800276a <dwt_read8bitoffsetreg>
 8002644:	4603      	mov	r3, r0
 8002646:	757b      	strb	r3, [r7, #21]

			//if the two CRC don't match report SPI read error
			//potential problem in callback if it will try to read/write SPI with CRC again.
			if (crc8 != dwcrc8) {
 8002648:	7dba      	ldrb	r2, [r7, #22]
 800264a:	7d7b      	ldrb	r3, [r7, #21]
 800264c:	429a      	cmp	r2, r3
 800264e:	d00b      	beq.n	8002668 <dwt_xfer3000+0x204>
				if (pdw3000local->cbSPIRDErr != NULL)
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <dwt_xfer3000+0x22c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <dwt_xfer3000+0x204>
					pdw3000local->cbSPIRDErr();
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <dwt_xfer3000+0x22c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	4798      	blx	r3
			}

		}
		break;
 8002662:	e001      	b.n	8002668 <dwt_xfer3000+0x204>
 8002664:	e7ff      	b.n	8002666 <dwt_xfer3000+0x202>
	}
	default:
		while (1)
 8002666:	e7fd      	b.n	8002664 <dwt_xfer3000+0x200>
		break;
 8002668:	bf00      	nop
			;
		break;
	}

} // end dwt_xfer3000()
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	08009818 	.word	0x08009818
 8002678:	0800993c 	.word	0x0800993c
 800267c:	0800982c 	.word	0x0800982c
 8002680:	08009848 	.word	0x08009848
 8002684:	0800985c 	.word	0x0800985c
 8002688:	0800986c 	.word	0x0800986c
 800268c:	08009904 	.word	0x08009904
 8002690:	20000208 	.word	0x20000208

08002694 <dwt_writetodevice>:
 *
 * no return value
 */
//static
void dwt_writetodevice(uint32_t regFileID, uint16_t index, uint16_t length,
		uint8_t *buffer) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	4613      	mov	r3, r2
 80026a4:	813b      	strh	r3, [r7, #8]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 80026a6:	893a      	ldrh	r2, [r7, #8]
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fed6 	bl	8002464 <dwt_xfer3000>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <dwt_readfromdevice>:
 *
 * no return value
 */
//static
void dwt_readfromdevice(uint32_t regFileID, uint16_t index, uint16_t length,
		uint8_t *buffer) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	4613      	mov	r3, r2
 80026d0:	813b      	strh	r3, [r7, #8]
	dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 80026d2:	893a      	ldrh	r2, [r7, #8]
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fec1 	bl	8002464 <dwt_xfer3000>
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <dwt_read32bitoffsetreg>:
 *
 * output parameters
 *
 * returns 32 bit register value
 */
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	807b      	strh	r3, [r7, #2]
	int j;
	uint32_t regval = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
	uint8_t buffer[4];

	dwt_readfromdevice(regFileID, regOffset, 4, buffer); // Read 4 bytes (32-bits) register into buffer
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	8879      	ldrh	r1, [r7, #2]
 8002700:	2204      	movs	r2, #4
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffdc 	bl	80026c0 <dwt_readfromdevice>

	for (j = 3; j >= 0; j--) {
 8002708:	2303      	movs	r3, #3
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e00b      	b.n	8002726 <dwt_read32bitoffsetreg+0x3c>
		regval = (regval << 8) + buffer[j];
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	f107 010c 	add.w	r1, r7, #12
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	440a      	add	r2, r1
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	4413      	add	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
	for (j = 3; j >= 0; j--) {
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3b01      	subs	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	daf0      	bge.n	800270e <dwt_read32bitoffsetreg+0x24>
	}

	return (regval);
 800272c:	693b      	ldr	r3, [r7, #16]

} // end dwt_read32bitoffsetreg()
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <dwt_read16bitoffsetreg>:
 *
 * output parameters
 *
 * returns 16 bit register value
 */
uint16_t dwt_read16bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
	uint16_t regval = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];

	dwt_readfromdevice(regFileID, regOffset, 2, buffer); // Read 2 bytes (16-bits) register into buffer
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	8879      	ldrh	r1, [r7, #2]
 800274c:	2202      	movs	r2, #2
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffb6 	bl	80026c0 <dwt_readfromdevice>

	regval = (uint16_t) ((uint16_t) buffer[1] << 8) + buffer[0];
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b29b      	uxth	r3, r3
 800275a:	7b3a      	ldrb	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	81fb      	strh	r3, [r7, #14]
	return regval;
 8002760:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <dwt_read8bitoffsetreg>:
 *
 * output parameters
 *
 * returns 8-bit register value
 */
uint8_t dwt_read8bitoffsetreg(uint32_t regFileID, uint16_t regOffset) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	807b      	strh	r3, [r7, #2]
	uint8_t regval;

	dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002776:	f107 030f 	add.w	r3, r7, #15
 800277a:	8879      	ldrh	r1, [r7, #2]
 800277c:	2201      	movs	r2, #1
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff9e 	bl	80026c0 <dwt_readfromdevice>

	return regval;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(uint32_t regFileID, uint16_t regOffset,
		uint32_t regval) {
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	460b      	mov	r3, r1
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	817b      	strh	r3, [r7, #10]
	int j;
	uint8_t buffer[4];

	for (j = 0; j < 4; j++) {
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e00d      	b.n	80027be <dwt_write32bitoffsetreg+0x30>
		buffer[j] = (uint8_t) regval;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	b2d9      	uxtb	r1, r3
 80027a6:	f107 0210 	add.w	r2, r7, #16
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4413      	add	r3, r2
 80027ae:	460a      	mov	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
		regval >>= 8;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	607b      	str	r3, [r7, #4]
	for (j = 0; j < 4; j++) {
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3301      	adds	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	ddee      	ble.n	80027a2 <dwt_write32bitoffsetreg+0x14>
	}

	dwt_writetodevice(regFileID, regOffset, 4, buffer);
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	2204      	movs	r2, #4
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff ff61 	bl	8002694 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(uint32_t regFileID, uint16_t regOffset,
		uint16_t regval) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[2];

	buffer[0] = (uint8_t) regval;
 80027ea:	883b      	ldrh	r3, [r7, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	733b      	strb	r3, [r7, #12]
	buffer[1] = regval >> 8;
 80027f0:	883b      	ldrh	r3, [r7, #0]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	737b      	strb	r3, [r7, #13]

	dwt_writetodevice(regFileID, regOffset, 2, buffer);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	8879      	ldrh	r1, [r7, #2]
 8002800:	2202      	movs	r2, #2
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff46 	bl	8002694 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(uint32_t regFileID, uint16_t regOffset,
		uint8_t regval) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
	//uint8_t   buf[1];
	//buf[0] = regval;
	dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002820:	1c7b      	adds	r3, r7, #1
 8002822:	8879      	ldrh	r1, [r7, #2]
 8002824:	2201      	movs	r2, #1
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ff34 	bl	8002694 <dwt_writetodevice>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <dwt_modify32bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify32bitoffsetreg(const uint32_t regFileID,
		const uint16_t regOffset, const uint32_t _and, const uint32_t _or) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
	uint8_t buf[8];
	buf[0] = (uint8_t) _and;    //       &0xFF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t) (_and >> 8);    //  &0xFF;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b2db      	uxtb	r3, r3
 8002850:	747b      	strb	r3, [r7, #17]
	buf[2] = (uint8_t) (_and >> 16);    // &0xFF;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	74bb      	strb	r3, [r7, #18]
	buf[3] = (uint8_t) (_and >> 24);    // &0xFF;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	b2db      	uxtb	r3, r3
 8002860:	74fb      	strb	r3, [r7, #19]
	buf[4] = (uint8_t) _or;    //        &0xFF;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	753b      	strb	r3, [r7, #20]
	buf[5] = (uint8_t) (_or >> 8);    //   &0xFF;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b2db      	uxtb	r3, r3
 800286e:	757b      	strb	r3, [r7, #21]
	buf[6] = (uint8_t) (_or >> 16);    //  &0xFF;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	b2db      	uxtb	r3, r3
 8002876:	75bb      	strb	r3, [r7, #22]
	buf[7] = (uint8_t) (_or >> 24);    //  &0xFF;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	0e1b      	lsrs	r3, r3, #24
 800287c:	b2db      	uxtb	r3, r3
 800287e:	75fb      	strb	r3, [r7, #23]
	dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	f248 0203 	movw	r2, #32771	@ 0x8003
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fde8 	bl	8002464 <dwt_xfer3000>
}
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <dwt_modify16bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify16bitoffsetreg(const uint32_t regFileID,
		const uint16_t regOffset, const uint16_t _and, const uint16_t _or) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	817b      	strh	r3, [r7, #10]
 80028ae:	460b      	mov	r3, r1
 80028b0:	813b      	strh	r3, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[4];
	buf[0] = (uint8_t) _and;    //       &0xFF;
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t) (_and >> 8);    //  &0xFF;
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	757b      	strb	r3, [r7, #21]
	buf[2] = (uint8_t) _or;    //        &0xFF;
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	75bb      	strb	r3, [r7, #22]
	buf[3] = (uint8_t) (_or >> 8);    //   &0xFF;
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	75fb      	strb	r3, [r7, #23]
	dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	f248 0202 	movw	r2, #32770	@ 0x8002
 80028e0:	9200      	str	r2, [sp, #0]
 80028e2:	2204      	movs	r2, #4
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fdbd 	bl	8002464 <dwt_xfer3000>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <dwt_modify8bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify8bitoffsetreg(const uint32_t regFileID, const uint16_t regOffset,
		const uint8_t _and, const uint8_t _or) {
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	4603      	mov	r3, r0
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	460b      	mov	r3, r1
 8002906:	707b      	strb	r3, [r7, #1]
 8002908:	4613      	mov	r3, r2
 800290a:	703b      	strb	r3, [r7, #0]
	uint8_t buf[2];
	buf[0] = _and;
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	733b      	strb	r3, [r7, #12]
	buf[1] = _or;
 8002910:	783b      	ldrb	r3, [r7, #0]
 8002912:	737b      	strb	r3, [r7, #13]
	dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_8);
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	8879      	ldrh	r1, [r7, #2]
 800291a:	f248 0201 	movw	r2, #32769	@ 0x8001
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	2202      	movs	r2, #2
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fd9e 	bl	8002464 <dwt_xfer3000>
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <dwt_generatecrc8>:
 * output parameters
 *
 * returns 8-bit calculate CRC value
 */
uint8_t dwt_generatecrc8(const uint8_t *byteArray, int len,
		uint8_t crcRemainderInit) {
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	71fb      	strb	r3, [r7, #7]
	int byte;

	/*
	 * Divide the message by the polynomial, a byte at a time.
	 */
	for (byte = 0; byte < len; ++byte) {
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e00d      	b.n	8002960 <dwt_generatecrc8+0x30>
		data = byteArray[byte] ^ crcRemainderInit;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	4053      	eors	r3, r2
 8002950:	74fb      	strb	r3, [r7, #19]
		crcRemainderInit = crcTable[data];    // ^ (crcRemainderInit << 8);
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <dwt_generatecrc8+0x44>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	71fb      	strb	r3, [r7, #7]
	for (byte = 0; byte < len; ++byte) {
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	dbed      	blt.n	8002944 <dwt_generatecrc8+0x14>
	}

	/*
	 * The final remainder is the CRC.
	 */
	return (crcRemainderInit);
 8002968:	79fb      	ldrb	r3, [r7, #7]
}
 800296a:	4618      	mov	r0, r3
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	2000020c 	.word	0x2000020c

08002978 <_dwt_kick_dgc_on_wakeup>:
 * output parameters
 *
 * no return value
 */

void _dwt_kick_dgc_on_wakeup(int8_t channel) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
	/* The DGC_SEL bit must be set to '0' for channel 5 and '1' for channel 9 */
	if (channel == 5) {
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d107      	bne.n	800299a <_dwt_kick_dgc_on_wakeup+0x22>
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 800298a:	2340      	movs	r3, #64	@ 0x40
 800298c:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 8002990:	2100      	movs	r1, #0
 8002992:	480a      	ldr	r0, [pc, #40]	@ (80029bc <_dwt_kick_dgc_on_wakeup+0x44>)
 8002994:	f7ff ff4e 	bl	8002834 <dwt_modify32bitoffsetreg>
	} else if (channel == 9) {
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
				(DWT_DGC_SEL_CH9 << OTP_CFG_DGC_SEL_BIT_OFFSET)
						| OTP_CFG_DGC_KICK_BIT_MASK);
	}
}
 8002998:	e00b      	b.n	80029b2 <_dwt_kick_dgc_on_wakeup+0x3a>
	} else if (channel == 9) {
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b09      	cmp	r3, #9
 80029a0:	d107      	bne.n	80029b2 <_dwt_kick_dgc_on_wakeup+0x3a>
		dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 80029a2:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 80029a6:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 80029aa:	2100      	movs	r1, #0
 80029ac:	4803      	ldr	r0, [pc, #12]	@ (80029bc <_dwt_kick_dgc_on_wakeup+0x44>)
 80029ae:	f7ff ff41 	bl	8002834 <dwt_modify32bitoffsetreg>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	000b0008 	.word	0x000b0008

080029c0 <dwt_setdwstate>:
 *
 * output parameters none
 *
 * no return value
 */
void dwt_setdwstate(int state) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d109      	bne.n	80029e2 <dwt_setdwstate+0x22>
	//NOTE: PLL should be configured prior to this, and the device should be in IDLE_RC (if the PLL does not lock device will remain in IDLE_RC)
	{
		//switch clock to auto - if coming here from INIT_RC the clock will be FOSC/4, need to switch to auto prior to setting auto INIT2IDLE bit
		dwt_force_clocks(FORCE_CLK_AUTO);
 80029ce:	2005      	movs	r0, #5
 80029d0:	f000 fbd4 	bl	800317c <dwt_force_clocks>
		dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 80029d4:	2301      	movs	r3, #1
 80029d6:	22ff      	movs	r2, #255	@ 0xff
 80029d8:	2101      	movs	r1, #1
 80029da:	481b      	ldr	r0, [pc, #108]	@ (8002a48 <dwt_setdwstate+0x88>)
 80029dc:	f7ff ff89 	bl	80028f2 <dwt_modify8bitoffsetreg>
				(uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK,
				SEQ_CTRL_FORCE2INIT_BIT_MASK);
		dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2,
				(uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
	}
}
 80029e0:	e02e      	b.n	8002a40 <dwt_setdwstate+0x80>
	} else if (state == DWT_DW_IDLE_RC) //Change state to IDLE_RC and clear auto INIT2IDLE bit
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d117      	bne.n	8002a18 <dwt_setdwstate+0x58>
		dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 80029e8:	2303      	movs	r3, #3
 80029ea:	22ff      	movs	r2, #255	@ 0xff
 80029ec:	2100      	movs	r1, #0
 80029ee:	4817      	ldr	r0, [pc, #92]	@ (8002a4c <dwt_setdwstate+0x8c>)
 80029f0:	f7ff ff7f 	bl	80028f2 <dwt_modify8bitoffsetreg>
		dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0,
 80029f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80029f8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029fc:	2100      	movs	r1, #0
 80029fe:	4812      	ldr	r0, [pc, #72]	@ (8002a48 <dwt_setdwstate+0x88>)
 8002a00:	f7ff ff18 	bl	8002834 <dwt_modify32bitoffsetreg>
		dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2,
 8002a04:	2300      	movs	r3, #0
 8002a06:	227f      	movs	r2, #127	@ 0x7f
 8002a08:	2102      	movs	r1, #2
 8002a0a:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <dwt_setdwstate+0x88>)
 8002a0c:	f7ff ff71 	bl	80028f2 <dwt_modify8bitoffsetreg>
		dwt_force_clocks(FORCE_CLK_AUTO);
 8002a10:	2005      	movs	r0, #5
 8002a12:	f000 fbb3 	bl	800317c <dwt_force_clocks>
}
 8002a16:	e013      	b.n	8002a40 <dwt_setdwstate+0x80>
		dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 8002a18:	2301      	movs	r3, #1
 8002a1a:	22ff      	movs	r2, #255	@ 0xff
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	480b      	ldr	r0, [pc, #44]	@ (8002a4c <dwt_setdwstate+0x8c>)
 8002a20:	f7ff ff67 	bl	80028f2 <dwt_modify8bitoffsetreg>
		dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0,
 8002a24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002a28:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4806      	ldr	r0, [pc, #24]	@ (8002a48 <dwt_setdwstate+0x88>)
 8002a30:	f7ff ff00 	bl	8002834 <dwt_modify32bitoffsetreg>
		dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2,
 8002a34:	2300      	movs	r3, #0
 8002a36:	227f      	movs	r2, #127	@ 0x7f
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4803      	ldr	r0, [pc, #12]	@ (8002a48 <dwt_setdwstate+0x88>)
 8002a3c:	f7ff ff59 	bl	80028f2 <dwt_modify8bitoffsetreg>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00110008 	.word	0x00110008
 8002a4c:	00110004 	.word	0x00110004

08002a50 <dwt_setfinegraintxseq>:
 *
 * output parameters none
 *
 * no return value
 */
void dwt_setfinegraintxseq(int enable) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	if (enable) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <dwt_setfinegraintxseq+0x1a>
		dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_ENABLE);
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <dwt_setfinegraintxseq+0x2c>)
 8002a60:	2102      	movs	r1, #2
 8002a62:	4807      	ldr	r0, [pc, #28]	@ (8002a80 <dwt_setfinegraintxseq+0x30>)
 8002a64:	f7ff fe93 	bl	800278e <dwt_write32bitoffsetreg>
	} else {
		dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_DISABLE);
	}
}
 8002a68:	e004      	b.n	8002a74 <dwt_setfinegraintxseq+0x24>
		dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_DISABLE);
 8002a6a:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <dwt_setfinegraintxseq+0x34>)
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4804      	ldr	r0, [pc, #16]	@ (8002a80 <dwt_setfinegraintxseq+0x30>)
 8002a70:	f7ff fe8d 	bl	800278e <dwt_write32bitoffsetreg>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	04d28874 	.word	0x04d28874
 8002a80:	00110010 	.word	0x00110010
 8002a84:	00d20010 	.word	0x00d20010

08002a88 <dwt_setlnapamode>:
 *                          : to disable LNA/PA set the bits to 0
 * output parameters
 *
 * no return value
 */
void dwt_setlnapamode(int lna_pa) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	uint32_t gpio_mode = dwt_read32bitreg(GPIO_MODE_ID);
 8002a90:	2100      	movs	r1, #0
 8002a92:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8002a96:	f7ff fe28 	bl	80026ea <dwt_read32bitoffsetreg>
 8002a9a:	60f8      	str	r0, [r7, #12]
	gpio_mode &= (~(GPIO_MODE_MSGP0_MODE_BIT_MASK
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <dwt_setlnapamode+0x68>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
			| GPIO_MODE_MSGP1_MODE_BIT_MASK | GPIO_MODE_MSGP4_MODE_BIT_MASK
			| GPIO_MODE_MSGP5_MODE_BIT_MASK | GPIO_MODE_MSGP6_MODE_BIT_MASK)); //clear GPIO 4, 5, 6, configuration
	if (lna_pa & DWT_LNA_ENABLE) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <dwt_setlnapamode+0x2e>
		gpio_mode |= GPIO_PIN6_EXTRX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	60fb      	str	r3, [r7, #12]
	}
	if (lna_pa & DWT_PA_ENABLE) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <dwt_setlnapamode+0x40>
		gpio_mode |= (GPIO_PIN4_EXTDA | GPIO_PIN5_EXTTX);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
 8002ac6:	60fb      	str	r3, [r7, #12]
	}
	if (lna_pa & DWT_TXRX_EN) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <dwt_setlnapamode+0x52>
		gpio_mode |= (GPIO_PIN0_EXTTXE | GPIO_PIN1_EXTRXE);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f043 0312 	orr.w	r3, r3, #18
 8002ad8:	60fb      	str	r3, [r7, #12]
	}

	dwt_write32bitreg(GPIO_MODE_ID, gpio_mode);
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	2100      	movs	r1, #0
 8002ade:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8002ae2:	f7ff fe54 	bl	800278e <dwt_write32bitoffsetreg>
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	ffe00fc0 	.word	0xffe00fc0

08002af4 <dwt_readdevid>:
 *
 * output parameters
 *
 * returns the read value which for DW3000 is 0xDECA0312/0xDECA0302
 */
uint32_t dwt_readdevid(void) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8002af8:	2100      	movs	r1, #0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7ff fdf5 	bl	80026ea <dwt_read32bitoffsetreg>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <dwt_configuretxrf>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	if (config->PGcount == 0) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	891b      	ldrh	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <dwt_configuretxrf+0x20>
		// Configure RF TX PG_DELAY
		dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4811      	ldr	r0, [pc, #68]	@ (8002b68 <dwt_configuretxrf+0x60>)
 8002b22:	f7ff fe75 	bl	8002810 <dwt_write8bitoffsetreg>
 8002b26:	e013      	b.n	8002b50 <dwt_configuretxrf+0x48>
	} else {
		uint8_t channel = 5;
 8002b28:	2305      	movs	r3, #5
 8002b2a:	73fb      	strb	r3, [r7, #15]
		if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1) {
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	480f      	ldr	r0, [pc, #60]	@ (8002b6c <dwt_configuretxrf+0x64>)
 8002b30:	f7ff fe1b 	bl	800276a <dwt_read8bitoffsetreg>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <dwt_configuretxrf+0x3a>
			channel = 9;
 8002b3e:	2309      	movs	r3, #9
 8002b40:	73fb      	strb	r3, [r7, #15]
		}
		dwt_calcbandwidthadj(config->PGcount, channel);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	891b      	ldrh	r3, [r3, #8]
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd60 	bl	8003610 <dwt_calcbandwidthadj>
	}

	// Configure TX power
	dwt_write32bitreg(TX_POWER_ID, config->power);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	461a      	mov	r2, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	4805      	ldr	r0, [pc, #20]	@ (8002b70 <dwt_configuretxrf+0x68>)
 8002b5a:	f7ff fe18 	bl	800278e <dwt_write32bitoffsetreg>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0007001c 	.word	0x0007001c
 8002b6c:	00010014 	.word	0x00010014
 8002b70:	0001000c 	.word	0x0001000c

08002b74 <get_sts_mnth>:
 */
void dwt_configurestsloadiv(void) {
	dwt_or8bitoffsetreg(STS_CTRL_ID, 0, STS_CTRL_LOAD_IV_BIT_MASK);
}

uint16_t get_sts_mnth(uint16_t cipher, uint8_t threshold, uint8_t shift_val) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	717b      	strb	r3, [r7, #5]
 8002b82:	4613      	mov	r3, r2
 8002b84:	713b      	strb	r3, [r7, #4]
	uint32_t value;
	uint16_t mod_val;

	value = cipher * (uint32_t) threshold;
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	797a      	ldrb	r2, [r7, #5]
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
	if (shift_val == 3) {
 8002b90:	793b      	ldrb	r3, [r7, #4]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <get_sts_mnth+0x32>
		value *= SQRT_FACTOR; //Factor to sqrt(2)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22b5      	movs	r2, #181	@ 0xb5
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
		value >>= SQRT_SHIFT_VAL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	09db      	lsrs	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
	}

	mod_val = value % MOD_VALUE + HALF_MOD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bb4:	817b      	strh	r3, [r7, #10]
	value >>= SHIFT_VALUE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0adb      	lsrs	r3, r3, #11
 8002bba:	60fb      	str	r3, [r7, #12]
	/* Check if modulo greater than MOD_VALUE, if yes add 1 */
	if (mod_val >= MOD_VALUE)
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc2:	d302      	bcc.n	8002bca <get_sts_mnth+0x56>
		value += 1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]

	return (uint16_t) value;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b29b      	uxth	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <dwt_configmrxlut>:
 * input parameters
 * @param[in] channel - Channel that the device will be transmitting/receiving on.
 *
 * no return value
 */
void dwt_configmrxlut(int channel) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	uint32_t lut0, lut1, lut2, lut3, lut4, lut5, lut6 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]

	if (channel == 5) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d10e      	bne.n	8002c08 <dwt_configmrxlut+0x30>
		lut0 = (uint32_t) CH5_DGC_LUT_0;
 8002bea:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <dwt_configmrxlut+0xb0>)
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
		lut1 = (uint32_t) CH5_DGC_LUT_1;
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <dwt_configmrxlut+0xb4>)
 8002bf0:	623b      	str	r3, [r7, #32]
		lut2 = (uint32_t) CH5_DGC_LUT_2;
 8002bf2:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <dwt_configmrxlut+0xb8>)
 8002bf4:	61fb      	str	r3, [r7, #28]
		lut3 = (uint32_t) CH5_DGC_LUT_3;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <dwt_configmrxlut+0xbc>)
 8002bf8:	61bb      	str	r3, [r7, #24]
		lut4 = (uint32_t) CH5_DGC_LUT_4;
 8002bfa:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <dwt_configmrxlut+0xc0>)
 8002bfc:	617b      	str	r3, [r7, #20]
		lut5 = (uint32_t) CH5_DGC_LUT_5;
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <dwt_configmrxlut+0xc4>)
 8002c00:	613b      	str	r3, [r7, #16]
		lut6 = (uint32_t) CH5_DGC_LUT_6;
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <dwt_configmrxlut+0xc8>)
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e00d      	b.n	8002c24 <dwt_configmrxlut+0x4c>
	} else {
		lut0 = (uint32_t) CH9_DGC_LUT_0;
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <dwt_configmrxlut+0xcc>)
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
		lut1 = (uint32_t) CH9_DGC_LUT_1;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <dwt_configmrxlut+0xd0>)
 8002c0e:	623b      	str	r3, [r7, #32]
		lut2 = (uint32_t) CH9_DGC_LUT_2;
 8002c10:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <dwt_configmrxlut+0xd4>)
 8002c12:	61fb      	str	r3, [r7, #28]
		lut3 = (uint32_t) CH9_DGC_LUT_3;
 8002c14:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <dwt_configmrxlut+0xd8>)
 8002c16:	61bb      	str	r3, [r7, #24]
		lut4 = (uint32_t) CH9_DGC_LUT_4;
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <dwt_configmrxlut+0xdc>)
 8002c1a:	617b      	str	r3, [r7, #20]
		lut5 = (uint32_t) CH9_DGC_LUT_5;
 8002c1c:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <dwt_configmrxlut+0xe0>)
 8002c1e:	613b      	str	r3, [r7, #16]
		lut6 = (uint32_t) CH9_DGC_LUT_6;
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <dwt_configmrxlut+0xe0>)
 8002c22:	60fb      	str	r3, [r7, #12]
	}
	dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 8002c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c26:	2100      	movs	r1, #0
 8002c28:	4824      	ldr	r0, [pc, #144]	@ (8002cbc <dwt_configmrxlut+0xe4>)
 8002c2a:	f7ff fdb0 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4823      	ldr	r0, [pc, #140]	@ (8002cc0 <dwt_configmrxlut+0xe8>)
 8002c34:	f7ff fdab 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4821      	ldr	r0, [pc, #132]	@ (8002cc4 <dwt_configmrxlut+0xec>)
 8002c3e:	f7ff fda6 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4820      	ldr	r0, [pc, #128]	@ (8002cc8 <dwt_configmrxlut+0xf0>)
 8002c48:	f7ff fda1 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	481e      	ldr	r0, [pc, #120]	@ (8002ccc <dwt_configmrxlut+0xf4>)
 8002c52:	f7ff fd9c 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	481d      	ldr	r0, [pc, #116]	@ (8002cd0 <dwt_configmrxlut+0xf8>)
 8002c5c:	f7ff fd97 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	2100      	movs	r1, #0
 8002c64:	481b      	ldr	r0, [pc, #108]	@ (8002cd4 <dwt_configmrxlut+0xfc>)
 8002c66:	f7ff fd92 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd8 <dwt_configmrxlut+0x100>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	481b      	ldr	r0, [pc, #108]	@ (8002cdc <dwt_configmrxlut+0x104>)
 8002c70:	f7ff fd8d 	bl	800278e <dwt_write32bitoffsetreg>
	dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 8002c74:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce0 <dwt_configmrxlut+0x108>)
 8002c76:	2100      	movs	r1, #0
 8002c78:	481a      	ldr	r0, [pc, #104]	@ (8002ce4 <dwt_configmrxlut+0x10c>)
 8002c7a:	f7ff fd88 	bl	800278e <dwt_write32bitoffsetreg>
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	0001c0fd 	.word	0x0001c0fd
 8002c8c:	0001c43e 	.word	0x0001c43e
 8002c90:	0001c6be 	.word	0x0001c6be
 8002c94:	0001c77e 	.word	0x0001c77e
 8002c98:	0001cf36 	.word	0x0001cf36
 8002c9c:	0001cfb5 	.word	0x0001cfb5
 8002ca0:	0001cff5 	.word	0x0001cff5
 8002ca4:	0002a8fe 	.word	0x0002a8fe
 8002ca8:	0002ac36 	.word	0x0002ac36
 8002cac:	0002a5fe 	.word	0x0002a5fe
 8002cb0:	0002af3e 	.word	0x0002af3e
 8002cb4:	0002af7d 	.word	0x0002af7d
 8002cb8:	0002afb5 	.word	0x0002afb5
 8002cbc:	00030038 	.word	0x00030038
 8002cc0:	0003003c 	.word	0x0003003c
 8002cc4:	00030040 	.word	0x00030040
 8002cc8:	00030044 	.word	0x00030044
 8002ccc:	00030048 	.word	0x00030048
 8002cd0:	0003004c 	.word	0x0003004c
 8002cd4:	00030050 	.word	0x00030050
 8002cd8:	10000240 	.word	0x10000240
 8002cdc:	0003001c 	.word	0x0003001c
 8002ce0:	1b6da489 	.word	0x1b6da489
 8002ce4:	00030020 	.word	0x00030020

08002ce8 <dwt_pgf_cal>:
 * @param ldoen    -   if set to 1 the function will enable LDOs prior to calibration and disable afterwards.
 *
 * return result of PGF calibration (DWT_ERROR/-1 = error)
 *
 */
int dwt_pgf_cal(int ldoen) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	int temp;
	uint16_t val;

	//PGF needs LDOs turned on - ensure PGF LDOs are enabled
	if (ldoen == 1) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10d      	bne.n	8002d12 <dwt_pgf_cal+0x2a>
		val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	480e      	ldr	r0, [pc, #56]	@ (8002d34 <dwt_pgf_cal+0x4c>)
 8002cfa:	f7ff fd1c 	bl	8002736 <dwt_read16bitoffsetreg>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	81fb      	strh	r3, [r7, #14]

		dwt_or16bitoffsetreg(LDO_CTRL_ID, 0,
 8002d02:	f240 1305 	movw	r3, #261	@ 0x105
 8002d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4809      	ldr	r0, [pc, #36]	@ (8002d34 <dwt_pgf_cal+0x4c>)
 8002d0e:	f7ff fdc5 	bl	800289c <dwt_modify16bitoffsetreg>
				( LDO_CTRL_LDO_VDDIF2_EN_BIT_MASK | LDO_CTRL_LDO_VDDMS3_EN_BIT_MASK | LDO_CTRL_LDO_VDDMS1_EN_BIT_MASK));
	}

	//Run PGF Cal
	temp = dwt_run_pgfcal();
 8002d12:	f000 f811 	bl	8002d38 <dwt_run_pgfcal>
 8002d16:	60b8      	str	r0, [r7, #8]

	//Turn off RX LDOs if previously off
	if (ldoen == 1) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <dwt_pgf_cal+0x42>
		dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 8002d1e:	89fa      	ldrh	r2, [r7, #14]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <dwt_pgf_cal+0x4c>)
 8002d26:	f7ff fdb9 	bl	800289c <dwt_modify16bitoffsetreg>
	}
	return temp;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00070048 	.word	0x00070048

08002d38 <dwt_run_pgfcal>:
 * input parameters
 *
 * return result of PGF calibration (DWT_ERROR/-1 = error)
 *
 */
int dwt_run_pgfcal(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
	int result = DWT_SUCCESS;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
	uint32_t data;
	uint32_t val = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
	uint8_t cnt, flag;
	//put into cal mode
	//Turn on delay mode
	data = (((uint32_t) 0x02) << RX_CAL_CFG_COMP_DLY_BIT_OFFSET)
 8002d46:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <dwt_run_pgfcal+0xc4>)
 8002d48:	603b      	str	r3, [r7, #0]
			| (RX_CAL_CFG_CAL_MODE_BIT_MASK & 0x1);
	dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	482c      	ldr	r0, [pc, #176]	@ (8002e00 <dwt_run_pgfcal+0xc8>)
 8002d50:	f7ff fd1d 	bl	800278e <dwt_write32bitoffsetreg>
	// Trigger PGF Cal
	dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 8002d54:	2310      	movs	r3, #16
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4829      	ldr	r0, [pc, #164]	@ (8002e00 <dwt_run_pgfcal+0xc8>)
 8002d5c:	f7ff fdc9 	bl	80028f2 <dwt_modify8bitoffsetreg>

	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PGF; cnt++) {
 8002d60:	2301      	movs	r3, #1
 8002d62:	72bb      	strb	r3, [r7, #10]
 8002d64:	2300      	movs	r3, #0
 8002d66:	72fb      	strb	r3, [r7, #11]
 8002d68:	e00f      	b.n	8002d8a <dwt_run_pgfcal+0x52>
		deca_usleep(DELAY_20uUSec);
 8002d6a:	2014      	movs	r0, #20
 8002d6c:	f000 fd7d 	bl	800386a <deca_usleep>
		if (dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1) { //PGF cal is complete
 8002d70:	2100      	movs	r1, #0
 8002d72:	4824      	ldr	r0, [pc, #144]	@ (8002e04 <dwt_run_pgfcal+0xcc>)
 8002d74:	f7ff fcf9 	bl	800276a <dwt_read8bitoffsetreg>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <dwt_run_pgfcal+0x4c>
			flag = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	72bb      	strb	r3, [r7, #10]
			break;
 8002d82:	e005      	b.n	8002d90 <dwt_run_pgfcal+0x58>
	for (flag = 1, cnt = 0; cnt < MAX_RETRIES_FOR_PGF; cnt++) {
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	3301      	adds	r3, #1
 8002d88:	72fb      	strb	r3, [r7, #11]
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d9ec      	bls.n	8002d6a <dwt_run_pgfcal+0x32>
		}
	}
	if (flag) {
 8002d90:	7abb      	ldrb	r3, [r7, #10]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <dwt_run_pgfcal+0x64>
		result = DWT_ERROR;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d9a:	60fb      	str	r3, [r7, #12]
	}

	// Put into normal mode
	dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4817      	ldr	r0, [pc, #92]	@ (8002e00 <dwt_run_pgfcal+0xc8>)
 8002da2:	f7ff fd35 	bl	8002810 <dwt_write8bitoffsetreg>
	dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 8002da6:	2201      	movs	r2, #1
 8002da8:	2100      	movs	r1, #0
 8002daa:	4816      	ldr	r0, [pc, #88]	@ (8002e04 <dwt_run_pgfcal+0xcc>)
 8002dac:	f7ff fd30 	bl	8002810 <dwt_write8bitoffsetreg>
	dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 8002db0:	2301      	movs	r3, #1
 8002db2:	22ff      	movs	r2, #255	@ 0xff
 8002db4:	2102      	movs	r1, #2
 8002db6:	4812      	ldr	r0, [pc, #72]	@ (8002e00 <dwt_run_pgfcal+0xc8>)
 8002db8:	f7ff fd9b 	bl	80028f2 <dwt_modify8bitoffsetreg>
	val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4812      	ldr	r0, [pc, #72]	@ (8002e08 <dwt_run_pgfcal+0xd0>)
 8002dc0:	f7ff fc93 	bl	80026ea <dwt_read32bitoffsetreg>
 8002dc4:	6078      	str	r0, [r7, #4]
	if (val == ERR_RX_CAL_FAIL) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d102      	bne.n	8002dd6 <dwt_run_pgfcal+0x9e>
		//PGF I Cal Fail
		result = DWT_ERROR;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dd4:	60fb      	str	r3, [r7, #12]
	}
	val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	480c      	ldr	r0, [pc, #48]	@ (8002e0c <dwt_run_pgfcal+0xd4>)
 8002dda:	f7ff fc86 	bl	80026ea <dwt_read32bitoffsetreg>
 8002dde:	6078      	str	r0, [r7, #4]
	if (val == ERR_RX_CAL_FAIL) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d102      	bne.n	8002df0 <dwt_run_pgfcal+0xb8>
		//PGF Q Cal Fail
		result = DWT_ERROR;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dee:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00020001 	.word	0x00020001
 8002e00:	0004000c 	.word	0x0004000c
 8002e04:	00040020 	.word	0x00040020
 8002e08:	00040014 	.word	0x00040014
 8002e0c:	0004001c 	.word	0x0004001c

08002e10 <dwt_setrxantennadelay>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16_t rxDelay) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
	// Set the RX antenna delay for auto TX timestamp adjustment
	dwt_write16bitoffsetreg(CIA_CONF_ID, 0, rxDelay);
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 8002e24:	f7ff fcd9 	bl	80027da <dwt_write16bitoffsetreg>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <dwt_settxantennadelay>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16_t txDelay) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
	// Set the TX antenna delay for auto TX timestamp adjustment
	dwt_write16bitoffsetreg(TX_ANTD_ID, 0, txDelay);
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <dwt_settxantennadelay+0x20>)
 8002e42:	f7ff fcca 	bl	80027da <dwt_write16bitoffsetreg>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	00010004 	.word	0x00010004

08002e54 <dwt_writetxdata>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16_t data_size, uint8_t *data, uint16_t offset) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	80fb      	strh	r3, [r7, #6]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80bb      	strh	r3, [r7, #4]
	if ((offset + data_size) < TX_BUFFER_MAX_LEN) {
 8002e64:	88ba      	ldrh	r2, [r7, #4]
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6e:	da24      	bge.n	8002eba <dwt_writetxdata+0x66>
		/* Directly write the data to the IC TX buffer */
		if (offset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e74:	d80a      	bhi.n	8002e8c <dwt_writetxdata+0x38>
			dwt_xfer3000(TX_BUFFER_ID, offset, data_size, data,
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	88b9      	ldrh	r1, [r7, #4]
 8002e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f44f 10a0 	mov.w	r0, #1310720	@ 0x140000
 8002e86:	f7ff faed 	bl	8002464 <dwt_xfer3000>
 8002e8a:	e014      	b.n	8002eb6 <dwt_writetxdata+0x62>
					DW3000_SPI_WR_BIT);

		else {
			/* Program the indirect offset register A for specified offset to TX buffer */
			dwt_write32bitreg(INDIRECT_ADDR_A_ID, (TX_BUFFER_ID >> 16));
 8002e8c:	2214      	movs	r2, #20
 8002e8e:	2100      	movs	r1, #0
 8002e90:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <dwt_writetxdata+0x74>)
 8002e92:	f7ff fc7c 	bl	800278e <dwt_write32bitoffsetreg>
			dwt_write32bitreg(ADDR_OFFSET_A_ID, offset);
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	480b      	ldr	r0, [pc, #44]	@ (8002ecc <dwt_writetxdata+0x78>)
 8002e9e:	f7ff fc76 	bl	800278e <dwt_write32bitoffsetreg>

			/* Indirectly write the data to the IC TX buffer */
			dwt_xfer3000(INDIRECT_POINTER_A_ID, 0, data_size, data,
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2100      	movs	r1, #0
 8002eae:	f44f 10e8 	mov.w	r0, #1900544	@ 0x1d0000
 8002eb2:	f7ff fad7 	bl	8002464 <dwt_xfer3000>
					DW3000_SPI_WR_BIT);

		}
		return DWT_SUCCESS;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e001      	b.n	8002ebe <dwt_writetxdata+0x6a>
	} else
		return DWT_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
} // end dwt_writetxdata()
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	001f0004 	.word	0x001f0004
 8002ecc:	001f0008 	.word	0x001f0008

08002ed0 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16_t txFrameLength, uint16_t txBufferOffset,
		uint8_t ranging) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
 8002eda:	460b      	mov	r3, r1
 8002edc:	80bb      	strh	r3, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	70fb      	strb	r3, [r7, #3]
           (txFrameLength <= STD_FRAME_LEN));
#endif

	//DW3000/3700 - if offset is > 127, 128 needs to be added before data is written, this will be subtracted internally
	//prior to writing the data
	if (txBufferOffset <= 127) {
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ee6:	d80e      	bhi.n	8002f06 <dwt_writetxfctrl+0x36>
		// Write the frame length to the TX frame control register
		reg32 =
				txFrameLength
						| ((uint32_t) (txBufferOffset)
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
								<< TX_FCTRL_TXB_OFFSET_BIT_OFFSET)
 8002eec:	041b      	lsls	r3, r3, #16
						| ((uint32_t) (txBufferOffset)
 8002eee:	431a      	orrs	r2, r3
						| ((uint32_t) ranging << TX_FCTRL_TR_BIT_OFFSET);
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	02db      	lsls	r3, r3, #11
		reg32 =
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
		dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <dwt_writetxfctrl+0x6c>)
 8002efc:	2100      	movs	r1, #0
 8002efe:	2024      	movs	r0, #36	@ 0x24
 8002f00:	f7ff fc98 	bl	8002834 <dwt_modify32bitoffsetreg>
				~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK
						| TX_FCTRL_TXFLEN_BIT_MASK), reg32);
		reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
	}

} // end dwt_writetxfctrl()
 8002f04:	e015      	b.n	8002f32 <dwt_writetxfctrl+0x62>
				| ((uint32_t) (txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST)
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	88bb      	ldrh	r3, [r7, #4]
 8002f0a:	3380      	adds	r3, #128	@ 0x80
						<< TX_FCTRL_TXB_OFFSET_BIT_OFFSET)
 8002f0c:	041b      	lsls	r3, r3, #16
				| ((uint32_t) (txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST)
 8002f0e:	431a      	orrs	r2, r3
				| ((uint32_t) ranging << TX_FCTRL_TR_BIT_OFFSET);
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	02db      	lsls	r3, r3, #11
		reg32 = txFrameLength
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
		dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0,
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <dwt_writetxfctrl+0x6c>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2024      	movs	r0, #36	@ 0x24
 8002f20:	f7ff fc88 	bl	8002834 <dwt_modify32bitoffsetreg>
		reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
 8002f24:	2100      	movs	r1, #0
 8002f26:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f2a:	f7ff fc1e 	bl	800276a <dwt_read8bitoffsetreg>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	60fb      	str	r3, [r7, #12]
} // end dwt_writetxfctrl()
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	fc00f400 	.word	0xfc00f400

08002f40 <dwt_setplenfine>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setplenfine(uint8_t preambleLength) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2028      	movs	r0, #40	@ 0x28
 8002f52:	f7ff fc5d 	bl	8002810 <dwt_write8bitoffsetreg>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <dwt_readrxdata>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8_t *buffer, uint16_t length, uint16_t rxBufferOffset) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	803b      	strh	r3, [r7, #0]
	uint32_t rx_buff_addr;

	if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1) //if the flag is 0x3 we are reading from RX_BUFFER_1
 8002f70:	4b19      	ldr	r3, [pc, #100]	@ (8002fd8 <dwt_readrxdata+0x78>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	7bdb      	ldrb	r3, [r3, #15]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d103      	bne.n	8002f82 <dwt_readrxdata+0x22>
	{
		rx_buff_addr = RX_BUFFER_1_ID;
 8002f7a:	f44f 1398 	mov.w	r3, #1245184	@ 0x130000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <dwt_readrxdata+0x28>
	} else //reading from RX_BUFFER_0 - also when non-double buffer mode
	{
		rx_buff_addr = RX_BUFFER_0_ID;
 8002f82:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002f86:	60fb      	str	r3, [r7, #12]
	}

	if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN) {
 8002f88:	883a      	ldrh	r2, [r7, #0]
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f92:	da1d      	bge.n	8002fd0 <dwt_readrxdata+0x70>
		if (rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN) {
 8002f94:	883b      	ldrh	r3, [r7, #0]
 8002f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f98:	d806      	bhi.n	8002fa8 <dwt_readrxdata+0x48>
			/* Directly read data from the IC to the buffer */
			dwt_readfromdevice(rx_buff_addr, rxBufferOffset, length, buffer);
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	8839      	ldrh	r1, [r7, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fb8d 	bl	80026c0 <dwt_readfromdevice>

			/* Indirectly read data from the IC to the buffer */
			dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
		}
	}
}
 8002fa6:	e013      	b.n	8002fd0 <dwt_readrxdata+0x70>
			dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	461a      	mov	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	480a      	ldr	r0, [pc, #40]	@ (8002fdc <dwt_readrxdata+0x7c>)
 8002fb2:	f7ff fbec 	bl	800278e <dwt_write32bitoffsetreg>
			dwt_write32bitreg(ADDR_OFFSET_A_ID, rxBufferOffset);
 8002fb6:	883b      	ldrh	r3, [r7, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4808      	ldr	r0, [pc, #32]	@ (8002fe0 <dwt_readrxdata+0x80>)
 8002fbe:	f7ff fbe6 	bl	800278e <dwt_write32bitoffsetreg>
			dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f44f 10e8 	mov.w	r0, #1900544	@ 0x1d0000
 8002fcc:	f7ff fb78 	bl	80026c0 <dwt_readfromdevice>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000208 	.word	0x20000208
 8002fdc:	001f0004 	.word	0x001f0004
 8002fe0:	001f0008 	.word	0x001f0008

08002fe4 <dwt_readrxtimestamp>:
 *
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8_t *timestamp) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <dwt_readrxtimestamp+0x4c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	7bdb      	ldrb	r3, [r3, #15]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d009      	beq.n	800300a <dwt_readrxtimestamp+0x26>
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d10e      	bne.n	8003018 <dwt_readrxtimestamp+0x34>
	{
	case DBL_BUFF_ACCESS_BUFFER_1:
		//!!! Assumes that Indirect pointer register B was already set. This is done in the dwt_setdblrxbuffmode when mode is enabled.
		dwt_readfromdevice(INDIRECT_POINTER_B_ID, BUF1_RX_TIME - BUF1_RX_FINFO,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	2104      	movs	r1, #4
 8003000:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 8003004:	f7ff fb5c 	bl	80026c0 <dwt_readfromdevice>
				RX_TIME_RX_STAMP_LEN, timestamp);
		break;
 8003008:	e00d      	b.n	8003026 <dwt_readrxtimestamp+0x42>
	case DBL_BUFF_ACCESS_BUFFER_0:
		dwt_readfromdevice(BUF0_RX_TIME, 0, RX_TIME_RX_STAMP_LEN, timestamp);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2205      	movs	r2, #5
 800300e:	2100      	movs	r1, #0
 8003010:	4808      	ldr	r0, [pc, #32]	@ (8003034 <dwt_readrxtimestamp+0x50>)
 8003012:	f7ff fb55 	bl	80026c0 <dwt_readfromdevice>
		break;
 8003016:	e006      	b.n	8003026 <dwt_readrxtimestamp+0x42>
	default:
		dwt_readfromdevice(RX_TIME_0_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp); // Get the adjusted time of arrival
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2205      	movs	r2, #5
 800301c:	2100      	movs	r1, #0
 800301e:	2064      	movs	r0, #100	@ 0x64
 8003020:	f7ff fb4e 	bl	80026c0 <dwt_readfromdevice>
		break;
 8003024:	bf00      	nop
	}
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000208 	.word	0x20000208
 8003034:	00180004 	.word	0x00180004

08003038 <dwt_check_dev_id>:
 *
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_check_dev_id(void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
	uint32_t dev_id;
	dev_id = dwt_readdevid();
 800303e:	f7ff fd59 	bl	8002af4 <dwt_readdevid>
 8003042:	6078      	str	r0, [r7, #4]

	if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id))) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <dwt_check_dev_id+0x2c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d006      	beq.n	800305a <dwt_check_dev_id+0x22>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a06      	ldr	r2, [pc, #24]	@ (8003068 <dwt_check_dev_id+0x30>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d002      	beq.n	800305a <dwt_check_dev_id+0x22>
		return DWT_ERROR;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003058:	e000      	b.n	800305c <dwt_check_dev_id+0x24>
	}

	return DWT_SUCCESS;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	deca0312 	.word	0xdeca0312
 8003068:	deca0302 	.word	0xdeca0302

0800306c <dwt_setrxaftertxdelay>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32_t rxDelayTime) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 8003074:	2100      	movs	r1, #0
 8003076:	480b      	ldr	r0, [pc, #44]	@ (80030a4 <dwt_setrxaftertxdelay+0x38>)
 8003078:	f7ff fb37 	bl	80026ea <dwt_read32bitoffsetreg>
 800307c:	60f8      	str	r0, [r7, #12]

	val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	0d1b      	lsrs	r3, r3, #20
 8003082:	051b      	lsls	r3, r3, #20
 8003084:	60fb      	str	r3, [r7, #12]

	val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

	dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	2100      	movs	r1, #0
 8003096:	4803      	ldr	r0, [pc, #12]	@ (80030a4 <dwt_setrxaftertxdelay+0x38>)
 8003098:	f7ff fb79 	bl	800278e <dwt_write32bitoffsetreg>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	00010008 	.word	0x00010008

080030a8 <dwt_checkidlerc>:
 *
 * output parameters
 *
 * return value is 1 if the IDLE_RC bit is set and 0 otherwise
 */
uint8_t dwt_checkidlerc(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	//HAL_Delay(2); /* wait 2 ms for DW IC to get into IDLE_RC state */
	/* Poll DW IC until IDLE_RC event set. This means that DW IC is in IDLE_RC state and ready */
	uint32_t reg = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
	reg = ((uint32_t) dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 80030b2:	2102      	movs	r1, #2
 80030b4:	2044      	movs	r0, #68	@ 0x44
 80030b6:	f7ff fb3e 	bl	8002736 <dwt_read16bitoffsetreg>
 80030ba:	4603      	mov	r3, r0
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	607b      	str	r3, [r7, #4]

	return ((reg & (SYS_STATUS_RCINIT_BIT_MASK)) == (SYS_STATUS_RCINIT_BIT_MASK));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <dwt_setleds>:
 *
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8_t mode) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	uint32_t reg;
	if (mode & DWT_LEDS_ENABLE) {
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d030      	beq.n	800314e <dwt_setleds+0x76>
		// Set up MFIO for LED output.
		dwt_modify32bitoffsetreg(GPIO_MODE_ID, 0,
 80030ec:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80030f0:	f46f 627c 	mvn.w	r2, #4032	@ 0xfc0
 80030f4:	2100      	movs	r1, #0
 80030f6:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 80030fa:	f7ff fb9b 	bl	8002834 <dwt_modify32bitoffsetreg>
				~(GPIO_MODE_MSGP3_MODE_BIT_MASK | GPIO_MODE_MSGP2_MODE_BIT_MASK),
				(GPIO_PIN2_RXLED | GPIO_PIN3_TXLED));

		// Enable LP Oscillator to run from counter and turn on de-bounce clock.
		dwt_or32bitoffsetreg(CLK_CTRL_ID, 0,
 80030fe:	f44f 0304 	mov.w	r3, #8650752	@ 0x840000
 8003102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003106:	2100      	movs	r1, #0
 8003108:	481a      	ldr	r0, [pc, #104]	@ (8003174 <dwt_setleds+0x9c>)
 800310a:	f7ff fb93 	bl	8002834 <dwt_modify32bitoffsetreg>
				(CLK_CTRL_GPIO_DCLK_EN_BIT_MASK | CLK_CTRL_LP_CLK_EN_BIT_MASK));

		// Enable LEDs to blink and set default blink time.
		reg = LED_CTRL_BLINK_EN_BIT_MASK | DWT_LEDS_BLINK_TIME_DEF;
 800310e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003112:	60fb      	str	r3, [r7, #12]
		// Make LEDs blink once if requested.
		if (mode & DWT_LEDS_INIT_BLINK) {
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <dwt_setleds+0x4e>
			reg |= LED_CTRL_FORCE_TRIGGER_BIT_MASK;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8003124:	60fb      	str	r3, [r7, #12]
		}
		dwt_write32bitreg(LED_CTRL_ID, reg);
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	2100      	movs	r1, #0
 800312a:	4813      	ldr	r0, [pc, #76]	@ (8003178 <dwt_setleds+0xa0>)
 800312c:	f7ff fb2f 	bl	800278e <dwt_write32bitoffsetreg>
		// Clear force blink bits if needed.
		if (mode & DWT_LEDS_INIT_BLINK) {
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <dwt_setleds+0x94>
			reg &= (~LED_CTRL_FORCE_TRIGGER_BIT_MASK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8003140:	60fb      	str	r3, [r7, #12]
			dwt_write32bitreg(LED_CTRL_ID, reg);
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	2100      	movs	r1, #0
 8003146:	480c      	ldr	r0, [pc, #48]	@ (8003178 <dwt_setleds+0xa0>)
 8003148:	f7ff fb21 	bl	800278e <dwt_write32bitoffsetreg>
				~(GPIO_MODE_MSGP2_MODE_BIT_MASK | GPIO_MODE_MSGP3_MODE_BIT_MASK));
		dwt_and16bitoffsetreg(LED_CTRL_ID, 0,
				(uint16_t) ~LED_CTRL_BLINK_EN_BIT_MASK);
	}

}
 800314c:	e00e      	b.n	800316c <dwt_setleds+0x94>
		dwt_and32bitoffsetreg(GPIO_MODE_ID, 0,
 800314e:	2300      	movs	r3, #0
 8003150:	f46f 627c 	mvn.w	r2, #4032	@ 0xfc0
 8003154:	2100      	movs	r1, #0
 8003156:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 800315a:	f7ff fb6b 	bl	8002834 <dwt_modify32bitoffsetreg>
		dwt_and16bitoffsetreg(LED_CTRL_ID, 0,
 800315e:	2300      	movs	r3, #0
 8003160:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8003164:	2100      	movs	r1, #0
 8003166:	4804      	ldr	r0, [pc, #16]	@ (8003178 <dwt_setleds+0xa0>)
 8003168:	f7ff fb98 	bl	800289c <dwt_modify16bitoffsetreg>
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00110004 	.word	0x00110004
 8003178:	00110016 	.word	0x00110016

0800317c <dwt_force_clocks>:
 * output parameters none
 *
 * no return value
 */
static
void dwt_force_clocks(int clocks) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	if (clocks == FORCE_CLK_SYS_TX) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d110      	bne.n	80031ac <dwt_force_clocks+0x30>
		uint16_t regvalue0 = CLK_CTRL_TX_BUF_CLK_ON_BIT_MASK
 800318a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800318e:	81fb      	strh	r3, [r7, #14]
				| CLK_CTRL_RX_BUF_CLK_ON_BIT_MASK;

		//SYS_CLK_SEL = PLL
		regvalue0 |= ((uint16_t) FORCE_SYSCLK_PLL)
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	81fb      	strh	r3, [r7, #14]
				<< CLK_CTRL_SYS_CLK_SEL_BIT_OFFSET;

		//TX_CLK_SEL = ON
		regvalue0 |= ((uint16_t) FORCE_CLK_PLL)
 8003198:	89fb      	ldrh	r3, [r7, #14]
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	81fb      	strh	r3, [r7, #14]
				<< CLK_CTRL_TX_CLK_SEL_BIT_OFFSET;

		dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 80031a0:	89fb      	ldrh	r3, [r7, #14]
 80031a2:	461a      	mov	r2, r3
 80031a4:	2100      	movs	r1, #0
 80031a6:	4808      	ldr	r0, [pc, #32]	@ (80031c8 <dwt_force_clocks+0x4c>)
 80031a8:	f7ff fb17 	bl	80027da <dwt_write16bitoffsetreg>

	}

	if (clocks == FORCE_CLK_AUTO) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d105      	bne.n	80031be <dwt_force_clocks+0x42>
		//Restore auto clock mode
		dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS); //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 80031b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b6:	2100      	movs	r1, #0
 80031b8:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <dwt_force_clocks+0x4c>)
 80031ba:	f7ff fb0e 	bl	80027da <dwt_write16bitoffsetreg>
	}

} // end dwt_force_clocks()
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00110004 	.word	0x00110004

080031cc <dwt_setdelayedtrxtime>:
 *
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32_t starttime) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	2100      	movs	r1, #0
 80031d8:	202c      	movs	r0, #44	@ 0x2c
 80031da:	f7ff fad8 	bl	800278e <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <dwt_starttx>:
 *               if mode = DWT_START_TX_CCA  | DWT_RESPONSE_EXPECTED - Send the frame if no preamble detected within PTO time and then enable RX*
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */
int dwt_starttx(uint8_t mode) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
	int retval = DWT_SUCCESS;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
	uint16_t checkTxOK = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	827b      	strh	r3, [r7, #18]
	uint32_t sys_state;

	if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <dwt_starttx+0x3c>
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <dwt_starttx+0x3c>
			|| (mode & DWT_START_TX_DLY_RS) || (mode & DWT_START_TX_DLY_TS)) {
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <dwt_starttx+0x3c>
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8085 	beq.w	800332e <dwt_starttx+0x146>
		if (mode & DWT_START_TX_DELAYED) //delayed TX
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <dwt_starttx+0x6c>
		{
			if (mode & DWT_RESPONSE_EXPECTED) {
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <dwt_starttx+0x5e>
				dwt_writefastCMD(CMD_DTX_W4R);
 8003238:	2300      	movs	r3, #0
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	200d      	movs	r0, #13
 8003240:	f7ff fa28 	bl	8002694 <dwt_writetodevice>
 8003244:	e048      	b.n	80032d8 <dwt_starttx+0xf0>
			} else {
				dwt_writefastCMD(CMD_DTX);
 8003246:	2300      	movs	r3, #0
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2003      	movs	r0, #3
 800324e:	f7ff fa21 	bl	8002694 <dwt_writetodevice>
 8003252:	e041      	b.n	80032d8 <dwt_starttx+0xf0>
			}
		} else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <dwt_starttx+0x9c>
		{
			if (mode & DWT_RESPONSE_EXPECTED) {
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <dwt_starttx+0x8e>
				dwt_writefastCMD(CMD_DTX_RS_W4R);
 8003268:	2300      	movs	r3, #0
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	200f      	movs	r0, #15
 8003270:	f7ff fa10 	bl	8002694 <dwt_writetodevice>
 8003274:	e030      	b.n	80032d8 <dwt_starttx+0xf0>
			} else {
				dwt_writefastCMD(CMD_DTX_RS);
 8003276:	2300      	movs	r3, #0
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	2007      	movs	r0, #7
 800327e:	f7ff fa09 	bl	8002694 <dwt_writetodevice>
 8003282:	e029      	b.n	80032d8 <dwt_starttx+0xf0>
			}
		} else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <dwt_starttx+0xcc>
		{
			if (mode & DWT_RESPONSE_EXPECTED) {
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <dwt_starttx+0xbe>
				dwt_writefastCMD(CMD_DTX_TS_W4R);
 8003298:	2300      	movs	r3, #0
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	200e      	movs	r0, #14
 80032a0:	f7ff f9f8 	bl	8002694 <dwt_writetodevice>
 80032a4:	e018      	b.n	80032d8 <dwt_starttx+0xf0>
			} else {
				dwt_writefastCMD(CMD_DTX_TS);
 80032a6:	2300      	movs	r3, #0
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	2005      	movs	r0, #5
 80032ae:	f7ff f9f1 	bl	8002694 <dwt_writetodevice>
 80032b2:	e011      	b.n	80032d8 <dwt_starttx+0xf0>
			}
		} else  //delayed TX WRT reference time
		{
			if (mode & DWT_RESPONSE_EXPECTED) {
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <dwt_starttx+0xe4>
				dwt_writefastCMD(CMD_DTX_REF_W4R);
 80032be:	2300      	movs	r3, #0
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2010      	movs	r0, #16
 80032c6:	f7ff f9e5 	bl	8002694 <dwt_writetodevice>
 80032ca:	e005      	b.n	80032d8 <dwt_starttx+0xf0>
			} else {
				dwt_writefastCMD(CMD_DTX_REF);
 80032cc:	2300      	movs	r3, #0
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	2009      	movs	r0, #9
 80032d4:	f7ff f9de 	bl	8002694 <dwt_writetodevice>
			}
		}

		checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80032d8:	2103      	movs	r1, #3
 80032da:	2044      	movs	r0, #68	@ 0x44
 80032dc:	f7ff fa45 	bl	800276a <dwt_read8bitoffsetreg>
 80032e0:	4603      	mov	r3, r0
 80032e2:	827b      	strh	r3, [r7, #18]
		if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) == 0) // Transmit Delayed Send set over Half a Period away.
 80032e4:	8a7b      	ldrh	r3, [r7, #18]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <dwt_starttx+0x132>
				{
			sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
 80032ee:	2100      	movs	r1, #0
 80032f0:	4826      	ldr	r0, [pc, #152]	@ (800338c <dwt_starttx+0x1a4>)
 80032f2:	f7ff f9fa 	bl	80026ea <dwt_read32bitoffsetreg>
 80032f6:	60f8      	str	r0, [r7, #12]
			if (sys_state == DW_SYS_STATE_TXERR) {
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 80032fe:	d109      	bne.n	8003314 <dwt_starttx+0x12c>
				//uart_transmit("TXE", 3);
				dwt_writefastCMD(CMD_TXRXOFF);
 8003300:	2300      	movs	r3, #0
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	2000      	movs	r0, #0
 8003308:	f7ff f9c4 	bl	8002694 <dwt_writetodevice>
				retval = DWT_ERROR; // Failed !
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003310:	617b      	str	r3, [r7, #20]
		if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8003312:	e036      	b.n	8003382 <dwt_starttx+0x19a>
			} else {
				retval = DWT_SUCCESS; // All okay
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
		if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8003318:	e033      	b.n	8003382 <dwt_starttx+0x19a>
			}
		} else {
			//uart_transmit("HPDWARN", 7);
			dwt_writefastCMD(CMD_TXRXOFF);
 800331a:	2300      	movs	r3, #0
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	2000      	movs	r0, #0
 8003322:	f7ff f9b7 	bl	8002694 <dwt_writetodevice>
			retval = DWT_ERROR; // Failed !
 8003326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800332a:	617b      	str	r3, [r7, #20]
		if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) == 0) // Transmit Delayed Send set over Half a Period away.
 800332c:	e029      	b.n	8003382 <dwt_starttx+0x19a>

			//optionally could return error, and still send the frame at indicated time
			//then if the application want to cancel the sending this can be done in a separate command.
		}
	} else if (mode & DWT_START_TX_CCA) {
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <dwt_starttx+0x176>
		if (mode & DWT_RESPONSE_EXPECTED) {
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <dwt_starttx+0x168>
			dwt_writefastCMD(CMD_CCA_TX_W4R);
 8003342:	2300      	movs	r3, #0
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	2011      	movs	r0, #17
 800334a:	f7ff f9a3 	bl	8002694 <dwt_writetodevice>
 800334e:	e018      	b.n	8003382 <dwt_starttx+0x19a>
		} else {
			dwt_writefastCMD(CMD_CCA_TX);
 8003350:	2300      	movs	r3, #0
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	200b      	movs	r0, #11
 8003358:	f7ff f99c 	bl	8002694 <dwt_writetodevice>
 800335c:	e011      	b.n	8003382 <dwt_starttx+0x19a>
		}
	} else {
		if (mode & DWT_RESPONSE_EXPECTED) {
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <dwt_starttx+0x18e>
			dwt_writefastCMD(CMD_TX_W4R);
 8003368:	2300      	movs	r3, #0
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	200c      	movs	r0, #12
 8003370:	f7ff f990 	bl	8002694 <dwt_writetodevice>
 8003374:	e005      	b.n	8003382 <dwt_starttx+0x19a>
		} else {
			dwt_writefastCMD(CMD_TX);
 8003376:	2300      	movs	r3, #0
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	2001      	movs	r0, #1
 800337e:	f7ff f989 	bl	8002694 <dwt_writetodevice>
		}
	}

	return (retval);
 8003382:	697b      	ldr	r3, [r7, #20]

} // end dwt_starttx()
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	000f0030 	.word	0x000f0030

08003390 <dwt_rxenable>:
 * e.g.
 * (DWT_START_RX_DELAYED | DWT_IDLE_ON_DLY_ERR) 0x03 used to disable re-enabling of receiver if delayed RX failed due to "late" error
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	uint8_t temp1;

	if (mode == DWT_START_RX_IMMEDIATE) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <dwt_rxenable+0x1c>
		dwt_writefastCMD(CMD_RX);
 800339e:	2300      	movs	r3, #0
 80033a0:	2200      	movs	r2, #0
 80033a2:	2100      	movs	r1, #0
 80033a4:	2002      	movs	r0, #2
 80033a6:	f7ff f975 	bl	8002694 <dwt_writetodevice>
 80033aa:	e067      	b.n	800347c <dwt_rxenable+0xec>
	} else //delayed RX
	{
		switch (mode & ~DWT_IDLE_ON_DLY_ERR) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f023 0302 	bic.w	r3, r3, #2
 80033b2:	3b01      	subs	r3, #1
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d83f      	bhi.n	8003438 <dwt_rxenable+0xa8>
 80033b8:	a201      	add	r2, pc, #4	@ (adr r2, 80033c0 <dwt_rxenable+0x30>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003439 	.word	0x08003439
 80033c8:	08003439 	.word	0x08003439
 80033cc:	0800340f 	.word	0x0800340f
 80033d0:	08003439 	.word	0x08003439
 80033d4:	08003439 	.word	0x08003439
 80033d8:	08003439 	.word	0x08003439
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	08003439 	.word	0x08003439
 80033e4:	08003439 	.word	0x08003439
 80033e8:	08003439 	.word	0x08003439
 80033ec:	08003439 	.word	0x08003439
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003439 	.word	0x08003439
 80033f8:	08003439 	.word	0x08003439
 80033fc:	0800342b 	.word	0x0800342b
		case DWT_START_RX_DELAYED:
			dwt_writefastCMD(CMD_DRX);
 8003400:	2300      	movs	r3, #0
 8003402:	2200      	movs	r2, #0
 8003404:	2100      	movs	r1, #0
 8003406:	2004      	movs	r0, #4
 8003408:	f7ff f944 	bl	8002694 <dwt_writetodevice>
			break;
 800340c:	e017      	b.n	800343e <dwt_rxenable+0xae>
		case DWT_START_RX_DLY_REF:
			dwt_writefastCMD(CMD_DRX_REF);
 800340e:	2300      	movs	r3, #0
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	200a      	movs	r0, #10
 8003416:	f7ff f93d 	bl	8002694 <dwt_writetodevice>
			break;
 800341a:	e010      	b.n	800343e <dwt_rxenable+0xae>
		case DWT_START_RX_DLY_RS:
			dwt_writefastCMD(CMD_DRX_RS);
 800341c:	2300      	movs	r3, #0
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	2008      	movs	r0, #8
 8003424:	f7ff f936 	bl	8002694 <dwt_writetodevice>
			break;
 8003428:	e009      	b.n	800343e <dwt_rxenable+0xae>
		case DWT_START_RX_DLY_TS:
			dwt_writefastCMD(CMD_DRX_TS);
 800342a:	2300      	movs	r3, #0
 800342c:	2200      	movs	r2, #0
 800342e:	2100      	movs	r1, #0
 8003430:	2006      	movs	r0, #6
 8003432:	f7ff f92f 	bl	8002694 <dwt_writetodevice>
			break;
 8003436:	e002      	b.n	800343e <dwt_rxenable+0xae>
		default:
			return DWT_ERROR; // return error
 8003438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800343c:	e01f      	b.n	800347e <dwt_rxenable+0xee>
		}

		temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800343e:	2103      	movs	r1, #3
 8003440:	2044      	movs	r0, #68	@ 0x44
 8003442:	f7ff f992 	bl	800276a <dwt_read8bitoffsetreg>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
		if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <dwt_rxenable+0xec>
				{
			dwt_writefastCMD(CMD_TXRXOFF);
 8003454:	2300      	movs	r3, #0
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	2000      	movs	r0, #0
 800345c:	f7ff f91a 	bl	8002694 <dwt_writetodevice>

			if ((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <dwt_rxenable+0xe6>
					{
				dwt_writefastCMD(CMD_RX);
 800346a:	2300      	movs	r3, #0
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2002      	movs	r0, #2
 8003472:	f7ff f90f 	bl	8002694 <dwt_writetodevice>
			}
			return DWT_ERROR; // return warning indication
 8003476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800347a:	e000      	b.n	800347e <dwt_rxenable+0xee>
		}
	}

	return DWT_SUCCESS;
 800347c:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <dwt_setrxtimeout>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint32_t time) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	if (time > 0) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <dwt_setrxtimeout+0x2a>
		dwt_write32bitoffsetreg(RX_FWTO_ID, 0, time);
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	2100      	movs	r1, #0
 800349a:	2034      	movs	r0, #52	@ 0x34
 800349c:	f7ff f977 	bl	800278e <dwt_write32bitoffsetreg>

		dwt_or16bitoffsetreg(SYS_CFG_ID, 0, SYS_CFG_RXWTOE_BIT_MASK); //set the RX FWTO bit
 80034a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034a8:	2100      	movs	r1, #0
 80034aa:	2010      	movs	r0, #16
 80034ac:	f7ff f9f6 	bl	800289c <dwt_modify16bitoffsetreg>
	} else {
		dwt_and16bitoffsetreg(SYS_CFG_ID, 0,
				(uint16_t)(~SYS_CFG_RXWTOE_BIT_MASK)); //clear the RX FWTO bit
	}
} // end dwt_setrxtimeout()
 80034b0:	e006      	b.n	80034c0 <dwt_setrxtimeout+0x38>
		dwt_and16bitoffsetreg(SYS_CFG_ID, 0,
 80034b2:	2300      	movs	r3, #0
 80034b4:	f64f 52ff 	movw	r2, #65023	@ 0xfdff
 80034b8:	2100      	movs	r1, #0
 80034ba:	2010      	movs	r0, #16
 80034bc:	f7ff f9ee 	bl	800289c <dwt_modify16bitoffsetreg>
} // end dwt_setrxtimeout()
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <dwt_setpreambledetecttimeout>:
 *
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16_t timeout) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
	dwt_write16bitoffsetreg(DTUNE1_ID, 0, timeout);
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	461a      	mov	r2, r3
 80034d6:	2100      	movs	r1, #0
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <dwt_setpreambledetecttimeout+0x20>)
 80034da:	f7ff f97e 	bl	80027da <dwt_write16bitoffsetreg>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00060004 	.word	0x00060004

080034ec <dwt_disable_rf_tx>:
 * output parameters
 * None
 *
 */
static
void dwt_disable_rf_tx(uint8_t switch_config) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
	//Turn off TX LDOs
	dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	480b      	ldr	r0, [pc, #44]	@ (8003528 <dwt_disable_rf_tx+0x3c>)
 80034fc:	f7ff f947 	bl	800278e <dwt_write32bitoffsetreg>

	//Disable RF blocks for TX (configure RF_ENABLE_ID reg)
	dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8003508:	f7ff f941 	bl	800278e <dwt_write32bitoffsetreg>

	if (switch_config) {
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <dwt_disable_rf_tx+0x32>
		//Restore the TXRX switch to auto
		dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8003512:	f04f 52e0 	mov.w	r2, #469762048	@ 0x1c000000
 8003516:	2100      	movs	r1, #0
 8003518:	4804      	ldr	r0, [pc, #16]	@ (800352c <dwt_disable_rf_tx+0x40>)
 800351a:	f7ff f938 	bl	800278e <dwt_write32bitoffsetreg>
	}
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	00070048 	.word	0x00070048
 800352c:	00070014 	.word	0x00070014

08003530 <dwt_enable_rf_tx>:
 *
 * output parameters
 *
 */
static
void dwt_enable_rf_tx(uint32_t channel, uint8_t switch_control) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
	//Turn on TX LDOs
	dwt_or32bitoffsetreg(LDO_CTRL_ID, 0,
 800353c:	f04f 2308 	mov.w	r3, #134219776	@ 0x8000800
 8003540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003544:	2100      	movs	r1, #0
 8003546:	4815      	ldr	r0, [pc, #84]	@ (800359c <dwt_enable_rf_tx+0x6c>)
 8003548:	f7ff f974 	bl	8002834 <dwt_modify32bitoffsetreg>
			(LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK | LDO_CTRL_LDO_VDDHVTX_EN_BIT_MASK));
	dwt_or32bitoffsetreg(LDO_CTRL_ID, 0,
 800354c:	f04f 1360 	mov.w	r3, #6291552	@ 0x600060
 8003550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003554:	2100      	movs	r1, #0
 8003556:	4811      	ldr	r0, [pc, #68]	@ (800359c <dwt_enable_rf_tx+0x6c>)
 8003558:	f7ff f96c 	bl	8002834 <dwt_modify32bitoffsetreg>
			(LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK | LDO_CTRL_LDO_VDDTX1_VREF_BIT_MASK | LDO_CTRL_LDO_VDDTX2_EN_BIT_MASK | LDO_CTRL_LDO_VDDTX1_EN_BIT_MASK));

	//Enable RF blocks for TX (configure RF_ENABLE_ID reg)
	if (channel == SEL_CHANNEL5) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b05      	cmp	r3, #5
 8003560:	d108      	bne.n	8003574 <dwt_enable_rf_tx+0x44>
		dwt_or32bitoffsetreg(RF_ENABLE_ID, 0,
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <dwt_enable_rf_tx+0x70>)
 8003564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003568:	2100      	movs	r1, #0
 800356a:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 800356e:	f7ff f961 	bl	8002834 <dwt_modify32bitoffsetreg>
 8003572:	e007      	b.n	8003584 <dwt_enable_rf_tx+0x54>
				(RF_ENABLE_TX_SW_EN_BIT_MASK | RF_ENABLE_TX_CH5_BIT_MASK | RF_ENABLE_TX_EN_BIT_MASK | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
	} else {
		dwt_or32bitoffsetreg(RF_ENABLE_ID, 0,
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <dwt_enable_rf_tx+0x74>)
 8003576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800357a:	2100      	movs	r1, #0
 800357c:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8003580:	f7ff f958 	bl	8002834 <dwt_modify32bitoffsetreg>
				(RF_ENABLE_TX_SW_EN_BIT_MASK | RF_ENABLE_TX_EN_BIT_MASK | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
	}

	if (switch_control) {
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <dwt_enable_rf_tx+0x64>
		//configure the TXRX switch for TX mode
		dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 800358a:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <dwt_enable_rf_tx+0x78>)
 800358c:	2100      	movs	r1, #0
 800358e:	4807      	ldr	r0, [pc, #28]	@ (80035ac <dwt_enable_rf_tx+0x7c>)
 8003590:	f7ff f8fd 	bl	800278e <dwt_write32bitoffsetreg>
	}

}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00070048 	.word	0x00070048
 80035a0:	02003c00 	.word	0x02003c00
 80035a4:	02001c00 	.word	0x02001c00
 80035a8:	01011100 	.word	0x01011100
 80035ac:	00070014 	.word	0x00070014

080035b0 <dwt_enable_rftx_blocks>:
 * None
 *
 * No return value
 */
static
void dwt_enable_rftx_blocks(uint32_t channel) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	if (channel == SEL_CHANNEL5) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d107      	bne.n	80035ce <dwt_enable_rftx_blocks+0x1e>
		dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0,
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <dwt_enable_rftx_blocks+0x3c>)
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035c4:	2100      	movs	r1, #0
 80035c6:	480a      	ldr	r0, [pc, #40]	@ (80035f0 <dwt_enable_rftx_blocks+0x40>)
 80035c8:	f7ff f934 	bl	8002834 <dwt_modify32bitoffsetreg>
				(RF_ENABLE_TX_SW_EN_BIT_MASK | RF_ENABLE_TX_CH5_BIT_MASK | RF_ENABLE_TX_EN_BIT_MASK | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
	} else if (channel == SEL_CHANNEL9) {
		dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0,
				(RF_ENABLE_TX_SW_EN_BIT_MASK | RF_ENABLE_TX_EN_BIT_MASK | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
	}
}
 80035cc:	e009      	b.n	80035e2 <dwt_enable_rftx_blocks+0x32>
	} else if (channel == SEL_CHANNEL9) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d106      	bne.n	80035e2 <dwt_enable_rftx_blocks+0x32>
		dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0,
 80035d4:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <dwt_enable_rftx_blocks+0x44>)
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035da:	2100      	movs	r1, #0
 80035dc:	4804      	ldr	r0, [pc, #16]	@ (80035f0 <dwt_enable_rftx_blocks+0x40>)
 80035de:	f7ff f929 	bl	8002834 <dwt_modify32bitoffsetreg>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	02003c00 	.word	0x02003c00
 80035f0:	00070004 	.word	0x00070004
 80035f4:	02001c00 	.word	0x02001c00

080035f8 <dwt_disable_rftx_blocks>:
 * None
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	4802      	ldr	r0, [pc, #8]	@ (800360c <dwt_disable_rftx_blocks+0x14>)
 8003602:	f7ff f8c4 	bl	800278e <dwt_write32bitoffsetreg>
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	00070004 	.word	0x00070004

08003610 <dwt_calcbandwidthadj>:
 * @param channel - int - The channel to configure for the corrected bandwidth (5 or 9)
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	80fb      	strh	r3, [r7, #6]
	// Force system clock to FOSC/4 and TX clocks on and enable RF blocks
	dwt_force_clocks(FORCE_CLK_SYS_TX);
 800361c:	2001      	movs	r0, #1
 800361e:	f7ff fdad 	bl	800317c <dwt_force_clocks>
	dwt_enable_rf_tx((uint32_t) channel, 0);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff82 	bl	8003530 <dwt_enable_rf_tx>
	dwt_enable_rftx_blocks((uint32_t) channel);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ffbe 	bl	80035b0 <dwt_enable_rftx_blocks>

	// Write to the PG target before kicking off PG auto-cal with given target value
	dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0,
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	2100      	movs	r1, #0
 8003640:	4813      	ldr	r0, [pc, #76]	@ (8003690 <dwt_calcbandwidthadj+0x80>)
 8003642:	f7ff f8ca 	bl	80027da <dwt_write16bitoffsetreg>
			target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
	// Run PG count cal
	dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0,
 8003646:	2303      	movs	r3, #3
 8003648:	22ff      	movs	r2, #255	@ 0xff
 800364a:	2100      	movs	r1, #0
 800364c:	4811      	ldr	r0, [pc, #68]	@ (8003694 <dwt_calcbandwidthadj+0x84>)
 800364e:	f7ff f950 	bl	80028f2 <dwt_modify8bitoffsetreg>
			(uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
	// Wait for calibration to complete
	while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK)
 8003652:	bf00      	nop
 8003654:	2100      	movs	r1, #0
 8003656:	480f      	ldr	r0, [pc, #60]	@ (8003694 <dwt_calcbandwidthadj+0x84>)
 8003658:	f7ff f887 	bl	800276a <dwt_read8bitoffsetreg>
 800365c:	4603      	mov	r3, r0
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f6      	bne.n	8003654 <dwt_calcbandwidthadj+0x44>
		;

	//Restore clocks to AUTO and turn off TX blocks
	dwt_disable_rftx_blocks();
 8003666:	f7ff ffc7 	bl	80035f8 <dwt_disable_rftx_blocks>
	dwt_disable_rf_tx(0);
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff ff3e 	bl	80034ec <dwt_disable_rf_tx>
	dwt_force_clocks(FORCE_CLK_AUTO);
 8003670:	2005      	movs	r0, #5
 8003672:	f7ff fd83 	bl	800317c <dwt_force_clocks>

	return (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0)
 8003676:	2100      	movs	r1, #0
 8003678:	4807      	ldr	r0, [pc, #28]	@ (8003698 <dwt_calcbandwidthadj+0x88>)
 800367a:	f7ff f876 	bl	800276a <dwt_read8bitoffsetreg>
 800367e:	4603      	mov	r3, r0
			& TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8003680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003684:	b2db      	uxtb	r3, r3
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	0008001c 	.word	0x0008001c
 8003694:	00080010 	.word	0x00080010
 8003698:	0007001c 	.word	0x0007001c

0800369c <write>:

 ===============================================================================================
 */

HAL_StatusTypeDef write(uint16_t headerLength, uint8_t *headerBuffer,
		uint32_t bodylength, uint8_t *bodyBuffer) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b0a0      	sub	sp, #128	@ 0x80
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4603      	mov	r3, r0
 80036aa:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef res;
	uint8_t buf[100] = { 0 };
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2260      	movs	r2, #96	@ 0x60
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 f874 	bl	80077a6 <memset>
	int i;
	int j;
	for (i = 0; i < headerLength; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036c2:	e00c      	b.n	80036de <write+0x42>
		buf[i] = headerBuffer[i];
 80036c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4413      	add	r3, r2
 80036ca:	7819      	ldrb	r1, [r3, #0]
 80036cc:	f107 0210 	add.w	r2, r7, #16
 80036d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d2:	4413      	add	r3, r2
 80036d4:	460a      	mov	r2, r1
 80036d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < headerLength; i++)
 80036d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036da:	3301      	adds	r3, #1
 80036dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036de:	89fb      	ldrh	r3, [r7, #14]
 80036e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036e2:	429a      	cmp	r2, r3
 80036e4:	dbee      	blt.n	80036c4 <write+0x28>

	for (j = 0; j < bodylength; j++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ea:	e00d      	b.n	8003708 <write+0x6c>
		buf[i + j] = bodyBuffer[j];
 80036ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	441a      	add	r2, r3
 80036f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036f6:	440b      	add	r3, r1
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	3380      	adds	r3, #128	@ 0x80
 80036fc:	443b      	add	r3, r7
 80036fe:	f803 2c70 	strb.w	r2, [r3, #-112]
	for (j = 0; j < bodylength; j++)
 8003702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003704:	3301      	adds	r3, #1
 8003706:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8ed      	bhi.n	80036ec <write+0x50>

	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 8003710:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <write+0xcc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6858      	ldr	r0, [r3, #4]
 8003716:	4b14      	ldr	r3, [pc, #80]	@ (8003768 <write+0xcc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	891b      	ldrh	r3, [r3, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	4619      	mov	r1, r3
 8003720:	f000 fccc 	bl	80040bc <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, buf, i + j, 0xffff);
 8003724:	4b10      	ldr	r3, [pc, #64]	@ (8003768 <write+0xcc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800372c:	b29a      	uxth	r2, r3
 800372e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003730:	b29b      	uxth	r3, r3
 8003732:	4413      	add	r3, r2
 8003734:	b29a      	uxth	r2, r3
 8003736:	f107 0110 	add.w	r1, r7, #16
 800373a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373e:	f001 fa05 	bl	8004b4c <HAL_SPI_Transmit>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <write+0xcc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6858      	ldr	r0, [r3, #4]
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <write+0xcc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	891b      	ldrh	r3, [r3, #8]
 8003754:	2201      	movs	r2, #1
 8003756:	4619      	mov	r1, r3
 8003758:	f000 fcb0 	bl	80040bc <HAL_GPIO_WritePin>

	return (res);
 800375c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003760:	4618      	mov	r0, r3
 8003762:	3780      	adds	r7, #128	@ 0x80
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000204 	.word	0x20000204

0800376c <read>:

HAL_StatusTypeDef read(uint16_t headerLength, const uint8_t *headerBuffer,
		uint32_t readlength, uint8_t *readBuffer) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef res;
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_RESET); // pull the pin low
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <read+0x78>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6858      	ldr	r0, [r3, #4]
 8003782:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <read+0x78>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	891b      	ldrh	r3, [r3, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	4619      	mov	r1, r3
 800378c:	f000 fc96 	bl	80040bc <HAL_GPIO_WritePin>
	res = HAL_SPI_Transmit(hw->spi, (uint8_t*) headerBuffer, headerLength,
 8003790:	4b14      	ldr	r3, [pc, #80]	@ (80037e4 <read+0x78>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	89fa      	ldrh	r2, [r7, #14]
 8003798:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	f001 f9d5 	bl	8004b4c <HAL_SPI_Transmit>
 80037a2:	4603      	mov	r3, r0
 80037a4:	75fb      	strb	r3, [r7, #23]
			0xffff);
	if (res == HAL_OK)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <read+0x58>
		res = HAL_SPI_Receive(hw->spi, readBuffer, readlength, 0xffff);
 80037ac:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <read+0x78>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	f001 fb09 	bl	8004dd2 <HAL_SPI_Receive>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(hw->nssPort, hw->nssPin, GPIO_PIN_SET); // pull the pin high
 80037c4:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <read+0x78>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6858      	ldr	r0, [r3, #4]
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <read+0x78>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	891b      	ldrh	r3, [r3, #8]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4619      	mov	r1, r3
 80037d4:	f000 fc72 	bl	80040bc <HAL_GPIO_WritePin>
	return (res);
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000204 	.word	0x20000204

080037e8 <get_rx_timestamp_u64>:
 *
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void) {
 80037e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
	uint8_t ts_tab[5];
	uint64_t ts = 0;
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int8_t i;
	dwt_readrxtimestamp(ts_tab);
 80037fc:	463b      	mov	r3, r7
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fbf0 	bl	8002fe4 <dwt_readrxtimestamp>
	for (i = 4; i >= 0; i--) {
 8003804:	2304      	movs	r3, #4
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	e023      	b.n	8003852 <get_rx_timestamp_u64+0x6a>
		ts <<= 8;
 800380a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	020b      	lsls	r3, r1, #8
 8003818:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800381c:	0202      	lsls	r2, r0, #8
 800381e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ts |= ts_tab[i];
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	3310      	adds	r3, #16
 8003828:	443b      	add	r3, r7
 800382a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2200      	movs	r2, #0
 8003832:	461c      	mov	r4, r3
 8003834:	4615      	mov	r5, r2
 8003836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800383a:	ea42 0804 	orr.w	r8, r2, r4
 800383e:	ea43 0905 	orr.w	r9, r3, r5
 8003842:	e9c7 8902 	strd	r8, r9, [r7, #8]
	for (i = 4; i >= 0; i--) {
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	71fb      	strb	r3, [r7, #7]
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	dad7      	bge.n	800380a <get_rx_timestamp_u64+0x22>
	}
	return ts;
 800385a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800386a <deca_usleep>:
	for (i = 0; i < RESP_MSG_TS_LEN; i++) {
		ts_field[i] = (uint8_t) (ts >> (i * 8));
	}
}

void deca_usleep(unsigned int usec) {
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
	unsigned int i;

	usec *= 12;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < usec; i++) {
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e003      	b.n	800388c <deca_usleep+0x22>
		__NOP();
 8003884:	bf00      	nop
	for (i = 0; i < usec; i++) {
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d3f7      	bcc.n	8003884 <deca_usleep+0x1a>
	}
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038a0:	f7fe fa38 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a4:	480b      	ldr	r0, [pc, #44]	@ (80038d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038a6:	490c      	ldr	r1, [pc, #48]	@ (80038d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038a8:	4a0c      	ldr	r2, [pc, #48]	@ (80038dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038ac:	e002      	b.n	80038b4 <LoopCopyDataInit>

080038ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b2:	3304      	adds	r3, #4

080038b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b8:	d3f9      	bcc.n	80038ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80038bc:	4c09      	ldr	r4, [pc, #36]	@ (80038e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c0:	e001      	b.n	80038c6 <LoopFillZerobss>

080038c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c4:	3204      	adds	r2, #4

080038c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c8:	d3fb      	bcc.n	80038c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ca:	f003 ffd5 	bl	8007878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ce:	f7fd fd3b 	bl	8001348 <main>
  bx lr
 80038d2:	4770      	bx	lr
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80038dc:	08009cdc 	.word	0x08009cdc
  ldr r2, =_sbss
 80038e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80038e4:	200005a4 	.word	0x200005a4

080038e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC1_2_IRQHandler>
	...

080038ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_Init+0x28>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_Init+0x28>)
 80038f6:	f043 0310 	orr.w	r3, r3, #16
 80038fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f000 f965 	bl	8003bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003902:	200f      	movs	r0, #15
 8003904:	f000 f826 	bl	8003954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003908:	f7fd ffd0 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40022000 	.word	0x40022000

08003918 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_DeInit+0x2c>)
 800391e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003922:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003924:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <HAL_DeInit+0x2c>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_DeInit+0x2c>)
 800392c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003930:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <HAL_DeInit+0x2c>)
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003938:	f000 f806 	bl	8003948 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800395c:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_InitTick+0x54>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_InitTick+0x58>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f95f 	bl	8003c36 <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003990:	f000 f927 	bl	8003be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <HAL_InitTick+0x5c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000010 	.word	0x20000010
 80039ac:	20000018 	.word	0x20000018
 80039b0:	20000014 	.word	0x20000014

080039b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_IncTick+0x1c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_IncTick+0x20>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a03      	ldr	r2, [pc, #12]	@ (80039d4 <HAL_IncTick+0x20>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	20000018 	.word	0x20000018
 80039d4:	20000454 	.word	0x20000454

080039d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return uwTick;
 80039dc:	4b02      	ldr	r3, [pc, #8]	@ (80039e8 <HAL_GetTick+0x10>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	20000454 	.word	0x20000454

080039ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7ff fff0 	bl	80039d8 <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a04:	d005      	beq.n	8003a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a06:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <HAL_Delay+0x44>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a12:	bf00      	nop
 8003a14:	f7ff ffe0 	bl	80039d8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d8f7      	bhi.n	8003a14 <HAL_Delay+0x28>
  {
  }
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000018 	.word	0x20000018

08003a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a50:	4013      	ands	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <__NVIC_SetPriorityGrouping+0x44>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <__NVIC_GetPriorityGrouping+0x18>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 0307 	and.w	r3, r3, #7
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db0b      	blt.n	8003ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4906      	ldr	r1, [pc, #24]	@ (8003acc <__NVIC_EnableIRQ+0x34>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6039      	str	r1, [r7, #0]
 8003ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db0a      	blt.n	8003afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	490c      	ldr	r1, [pc, #48]	@ (8003b1c <__NVIC_SetPriority+0x4c>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af8:	e00a      	b.n	8003b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4908      	ldr	r1, [pc, #32]	@ (8003b20 <__NVIC_SetPriority+0x50>)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	3b04      	subs	r3, #4
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	761a      	strb	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f1c3 0307 	rsb	r3, r3, #7
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	bf28      	it	cs
 8003b42:	2304      	movcs	r3, #4
 8003b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d902      	bls.n	8003b54 <NVIC_EncodePriority+0x30>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3b03      	subs	r3, #3
 8003b52:	e000      	b.n	8003b56 <NVIC_EncodePriority+0x32>
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	401a      	ands	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	4313      	orrs	r3, r2
         );
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	@ 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b98:	d301      	bcc.n	8003b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e00f      	b.n	8003bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <SysTick_Config+0x40>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bac:	f7ff ff90 	bl	8003ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <SysTick_Config+0x40>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <SysTick_Config+0x40>)
 8003bb8:	2207      	movs	r2, #7
 8003bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	e000e010 	.word	0xe000e010

08003bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff2d 	bl	8003a34 <__NVIC_SetPriorityGrouping>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf4:	f7ff ff42 	bl	8003a7c <__NVIC_GetPriorityGrouping>
 8003bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff90 	bl	8003b24 <NVIC_EncodePriority>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff5f 	bl	8003ad0 <__NVIC_SetPriority>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff35 	bl	8003a98 <__NVIC_EnableIRQ>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ffa2 	bl	8003b88 <SysTick_Config>
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d008      	beq.n	8003c78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e020      	b.n	8003cba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020e 	bic.w	r2, r2, #14
 8003c86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d005      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e051      	b.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020e 	bic.w	r2, r2, #14
 8003cf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <HAL_DMA_Abort_IT+0xd4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d029      	beq.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	@ (8003d9c <HAL_DMA_Abort_IT+0xd8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_Abort_IT+0x9e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <HAL_DMA_Abort_IT+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01a      	beq.n	8003d5c <HAL_DMA_Abort_IT+0x98>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <HAL_DMA_Abort_IT+0xe0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d012      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x92>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <HAL_DMA_Abort_IT+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00a      	beq.n	8003d50 <HAL_DMA_Abort_IT+0x8c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <HAL_DMA_Abort_IT+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d102      	bne.n	8003d4a <HAL_DMA_Abort_IT+0x86>
 8003d44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d48:	e00e      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d4e:	e00b      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d54:	e008      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d5a:	e005      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d60:	e002      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d62:	2310      	movs	r3, #16
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_Abort_IT+0xa4>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4a11      	ldr	r2, [pc, #68]	@ (8003db0 <HAL_DMA_Abort_IT+0xec>)
 8003d6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
    } 
  }
  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40020008 	.word	0x40020008
 8003d9c:	4002001c 	.word	0x4002001c
 8003da0:	40020030 	.word	0x40020030
 8003da4:	40020044 	.word	0x40020044
 8003da8:	40020058 	.word	0x40020058
 8003dac:	4002006c 	.word	0x4002006c
 8003db0:	40020000 	.word	0x40020000

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b08b      	sub	sp, #44	@ 0x2c
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	e169      	b.n	800409c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dc8:	2201      	movs	r2, #1
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8158 	bne.w	8004096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a9a      	ldr	r2, [pc, #616]	@ (8004054 <HAL_GPIO_Init+0x2a0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d05e      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003df0:	4a98      	ldr	r2, [pc, #608]	@ (8004054 <HAL_GPIO_Init+0x2a0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d875      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003df6:	4a98      	ldr	r2, [pc, #608]	@ (8004058 <HAL_GPIO_Init+0x2a4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d058      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003dfc:	4a96      	ldr	r2, [pc, #600]	@ (8004058 <HAL_GPIO_Init+0x2a4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d86f      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e02:	4a96      	ldr	r2, [pc, #600]	@ (800405c <HAL_GPIO_Init+0x2a8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d052      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e08:	4a94      	ldr	r2, [pc, #592]	@ (800405c <HAL_GPIO_Init+0x2a8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d869      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e0e:	4a94      	ldr	r2, [pc, #592]	@ (8004060 <HAL_GPIO_Init+0x2ac>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04c      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e14:	4a92      	ldr	r2, [pc, #584]	@ (8004060 <HAL_GPIO_Init+0x2ac>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d863      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e1a:	4a92      	ldr	r2, [pc, #584]	@ (8004064 <HAL_GPIO_Init+0x2b0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d046      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e20:	4a90      	ldr	r2, [pc, #576]	@ (8004064 <HAL_GPIO_Init+0x2b0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d85d      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e26:	2b12      	cmp	r3, #18
 8003e28:	d82a      	bhi.n	8003e80 <HAL_GPIO_Init+0xcc>
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d859      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <HAL_GPIO_Init+0x80>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003eaf 	.word	0x08003eaf
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e9b 	.word	0x08003e9b
 8003e40:	08003edd 	.word	0x08003edd
 8003e44:	08003ee3 	.word	0x08003ee3
 8003e48:	08003ee3 	.word	0x08003ee3
 8003e4c:	08003ee3 	.word	0x08003ee3
 8003e50:	08003ee3 	.word	0x08003ee3
 8003e54:	08003ee3 	.word	0x08003ee3
 8003e58:	08003ee3 	.word	0x08003ee3
 8003e5c:	08003ee3 	.word	0x08003ee3
 8003e60:	08003ee3 	.word	0x08003ee3
 8003e64:	08003ee3 	.word	0x08003ee3
 8003e68:	08003ee3 	.word	0x08003ee3
 8003e6c:	08003ee3 	.word	0x08003ee3
 8003e70:	08003ee3 	.word	0x08003ee3
 8003e74:	08003ee3 	.word	0x08003ee3
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	4a79      	ldr	r2, [pc, #484]	@ (8004068 <HAL_GPIO_Init+0x2b4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e86:	e02c      	b.n	8003ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	623b      	str	r3, [r7, #32]
          break;
 8003e8e:	e029      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	623b      	str	r3, [r7, #32]
          break;
 8003e98:	e024      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	623b      	str	r3, [r7, #32]
          break;
 8003ea2:	e01f      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	623b      	str	r3, [r7, #32]
          break;
 8003eac:	e01a      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	623b      	str	r3, [r7, #32]
          break;
 8003eba:	e013      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	611a      	str	r2, [r3, #16]
          break;
 8003ece:	e009      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	615a      	str	r2, [r3, #20]
          break;
 8003eda:	e003      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
          break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          break;
 8003ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2bff      	cmp	r3, #255	@ 0xff
 8003ee8:	d801      	bhi.n	8003eee <HAL_GPIO_Init+0x13a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	e001      	b.n	8003ef2 <HAL_GPIO_Init+0x13e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2bff      	cmp	r3, #255	@ 0xff
 8003ef8:	d802      	bhi.n	8003f00 <HAL_GPIO_Init+0x14c>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	e002      	b.n	8003f06 <HAL_GPIO_Init+0x152>
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	3b08      	subs	r3, #8
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	210f      	movs	r1, #15
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	401a      	ands	r2, r3
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80b1 	beq.w	8004096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f34:	4b4d      	ldr	r3, [pc, #308]	@ (800406c <HAL_GPIO_Init+0x2b8>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	4a4c      	ldr	r2, [pc, #304]	@ (800406c <HAL_GPIO_Init+0x2b8>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6193      	str	r3, [r2, #24]
 8003f40:	4b4a      	ldr	r3, [pc, #296]	@ (800406c <HAL_GPIO_Init+0x2b8>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f4c:	4a48      	ldr	r2, [pc, #288]	@ (8004070 <HAL_GPIO_Init+0x2bc>)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3302      	adds	r3, #2
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	220f      	movs	r2, #15
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a40      	ldr	r2, [pc, #256]	@ (8004074 <HAL_GPIO_Init+0x2c0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <HAL_GPIO_Init+0x1ec>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8004078 <HAL_GPIO_Init+0x2c4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00d      	beq.n	8003f9c <HAL_GPIO_Init+0x1e8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	@ (800407c <HAL_GPIO_Init+0x2c8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <HAL_GPIO_Init+0x1e4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8004080 <HAL_GPIO_Init+0x2cc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_GPIO_Init+0x1e0>
 8003f90:	2303      	movs	r3, #3
 8003f92:	e006      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f94:	2304      	movs	r3, #4
 8003f96:	e004      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e002      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_GPIO_Init+0x1ee>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	f002 0203 	and.w	r2, r2, #3
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	4093      	lsls	r3, r2
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fb2:	492f      	ldr	r1, [pc, #188]	@ (8004070 <HAL_GPIO_Init+0x2bc>)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	492c      	ldr	r1, [pc, #176]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fda:	4b2a      	ldr	r3, [pc, #168]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	4928      	ldr	r1, [pc, #160]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ff4:	4b23      	ldr	r3, [pc, #140]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	4922      	ldr	r1, [pc, #136]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]
 8004000:	e006      	b.n	8004010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004002:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	43db      	mvns	r3, r3
 800400a:	491e      	ldr	r1, [pc, #120]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 800400c:	4013      	ands	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4918      	ldr	r1, [pc, #96]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800402a:	4b16      	ldr	r3, [pc, #88]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	43db      	mvns	r3, r3
 8004032:	4914      	ldr	r1, [pc, #80]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8004034:	4013      	ands	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d021      	beq.n	8004088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004044:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	490e      	ldr	r1, [pc, #56]	@ (8004084 <HAL_GPIO_Init+0x2d0>)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e021      	b.n	8004096 <HAL_GPIO_Init+0x2e2>
 8004052:	bf00      	nop
 8004054:	10320000 	.word	0x10320000
 8004058:	10310000 	.word	0x10310000
 800405c:	10220000 	.word	0x10220000
 8004060:	10210000 	.word	0x10210000
 8004064:	10120000 	.word	0x10120000
 8004068:	10110000 	.word	0x10110000
 800406c:	40021000 	.word	0x40021000
 8004070:	40010000 	.word	0x40010000
 8004074:	40010800 	.word	0x40010800
 8004078:	40010c00 	.word	0x40010c00
 800407c:	40011000 	.word	0x40011000
 8004080:	40011400 	.word	0x40011400
 8004084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_GPIO_Init+0x304>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	43db      	mvns	r3, r3
 8004090:	4909      	ldr	r1, [pc, #36]	@ (80040b8 <HAL_GPIO_Init+0x304>)
 8004092:	4013      	ands	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	3301      	adds	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	fa22 f303 	lsr.w	r3, r2, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f ae8e 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	372c      	adds	r7, #44	@ 0x2c
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40010400 	.word	0x40010400

080040bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040d8:	e003      	b.n	80040e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040da:	887b      	ldrh	r3, [r7, #2]
 80040dc:	041a      	lsls	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	611a      	str	r2, [r3, #16]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040f2:	f7ff fc71 	bl	80039d8 <HAL_GetTick>
 80040f6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040f8:	4b45      	ldr	r3, [pc, #276]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a44      	ldr	r2, [pc, #272]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004106:	f7ff fc67 	bl	80039d8 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e077      	b.n	8004208 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004118:	4b3d      	ldr	r3, [pc, #244]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8004124:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800412c:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 800412e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004132:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004134:	f7ff fc50 	bl	80039d8 <HAL_GetTick>
 8004138:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800413a:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 800413c:	2200      	movs	r2, #0
 800413e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7ff fc49 	bl	80039d8 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e057      	b.n	8004208 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004158:	4b2d      	ldr	r3, [pc, #180]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ee      	bne.n	8004142 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004164:	4b2b      	ldr	r3, [pc, #172]	@ (8004214 <HAL_RCC_DeInit+0x128>)
 8004166:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <HAL_RCC_DeInit+0x12c>)
 8004168:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCC_DeInit+0x130>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fbf0 	bl	8003954 <HAL_InitTick>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e044      	b.n	8004208 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800417e:	f7ff fc2b 	bl	80039d8 <HAL_GetTick>
 8004182:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004184:	4b22      	ldr	r3, [pc, #136]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 800418a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7ff fc21 	bl	80039d8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e031      	b.n	8004208 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80041a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80041b0:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80041b6:	f7ff fc0f 	bl	80039d8 <HAL_GetTick>
 80041ba:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80041bc:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041c2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80041c6:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ca:	f7ff fc05 	bl	80039d8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b64      	cmp	r3, #100	@ 0x64
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e015      	b.n	8004208 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f2:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 80041fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCC_DeInit+0x124>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	20000010 	.word	0x20000010
 8004218:	007a1200 	.word	0x007a1200
 800421c:	20000014 	.word	0x20000014

08004220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e272      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8087 	beq.w	800434e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b92      	ldr	r3, [pc, #584]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b04      	cmp	r3, #4
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800424c:	4b8f      	ldr	r3, [pc, #572]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
 8004258:	4b8c      	ldr	r3, [pc, #560]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <HAL_RCC_OscConfig+0x12c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d168      	bne.n	800434c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e24c      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x76>
 8004288:	4b80      	ldr	r3, [pc, #512]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7f      	ldr	r2, [pc, #508]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e02e      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x98>
 800429e:	4b7b      	ldr	r3, [pc, #492]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b78      	ldr	r3, [pc, #480]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a77      	ldr	r2, [pc, #476]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0xbc>
 80042c2:	4b72      	ldr	r3, [pc, #456]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a71      	ldr	r2, [pc, #452]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b6f      	ldr	r3, [pc, #444]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6e      	ldr	r2, [pc, #440]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xd4>
 80042dc:	4b6b      	ldr	r3, [pc, #428]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b68      	ldr	r3, [pc, #416]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a67      	ldr	r2, [pc, #412]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7ff fb6c 	bl	80039d8 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7ff fb68 	bl	80039d8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e200      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b5d      	ldr	r3, [pc, #372]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xe4>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7ff fb58 	bl	80039d8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7ff fb54 	bl	80039d8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1ec      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b53      	ldr	r3, [pc, #332]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x10c>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435a:	4b4c      	ldr	r3, [pc, #304]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004366:	4b49      	ldr	r3, [pc, #292]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
 8004372:	4b46      	ldr	r3, [pc, #280]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1c0      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4939      	ldr	r1, [pc, #228]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_RCC_OscConfig+0x270>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7ff fb0d 	bl	80039d8 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7ff fb09 	bl	80039d8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1a1      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b2a      	ldr	r3, [pc, #168]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4927      	ldr	r1, [pc, #156]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b26      	ldr	r3, [pc, #152]	@ (8004490 <HAL_RCC_OscConfig+0x270>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7ff faec 	bl	80039d8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004404:	f7ff fae8 	bl	80039d8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e180      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d03a      	beq.n	80044a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_RCC_OscConfig+0x274>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7ff facc 	bl	80039d8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7ff fac8 	bl	80039d8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e160      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCC_OscConfig+0x26c>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004462:	2001      	movs	r0, #1
 8004464:	f000 fad0 	bl	8004a08 <RCC_Delay>
 8004468:	e01c      	b.n	80044a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_RCC_OscConfig+0x274>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7ff fab2 	bl	80039d8 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004476:	e00f      	b.n	8004498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004478:	f7ff faae 	bl	80039d8 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d908      	bls.n	8004498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e146      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	42420000 	.word	0x42420000
 8004494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e9      	bne.n	8004478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a6 	beq.w	80045fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b8b      	ldr	r3, [pc, #556]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	4b88      	ldr	r3, [pc, #544]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a87      	ldr	r2, [pc, #540]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	61d3      	str	r3, [r2, #28]
 80044ce:	4b85      	ldr	r3, [pc, #532]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b82      	ldr	r3, [pc, #520]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ea:	4b7f      	ldr	r3, [pc, #508]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7e      	ldr	r2, [pc, #504]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7ff fa6f 	bl	80039d8 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7ff fa6b 	bl	80039d8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	@ 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e103      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b75      	ldr	r3, [pc, #468]	@ (80046e8 <HAL_RCC_OscConfig+0x4c8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x312>
 8004524:	4b6f      	ldr	r3, [pc, #444]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4a6e      	ldr	r2, [pc, #440]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6213      	str	r3, [r2, #32]
 8004530:	e02d      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x334>
 800453a:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a69      	ldr	r2, [pc, #420]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b67      	ldr	r3, [pc, #412]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a66      	ldr	r2, [pc, #408]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
 8004552:	e01c      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b05      	cmp	r3, #5
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0x356>
 800455c:	4b61      	ldr	r3, [pc, #388]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a60      	ldr	r2, [pc, #384]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	4b5e      	ldr	r3, [pc, #376]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0x36e>
 8004576:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6213      	str	r3, [r2, #32]
 8004582:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4a57      	ldr	r2, [pc, #348]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7ff fa1f 	bl	80039d8 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7ff fa1b 	bl	80039d8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0b1      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCC_OscConfig+0x37e>
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7ff fa09 	bl	80039d8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7ff fa05 	bl	80039d8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e09b      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4b40      	ldr	r3, [pc, #256]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b3c      	ldr	r3, [pc, #240]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8087 	beq.w	8004716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004608:	4b36      	ldr	r3, [pc, #216]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d061      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d146      	bne.n	80046aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461c:	4b33      	ldr	r3, [pc, #204]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004622:	f7ff f9d9 	bl	80039d8 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462a:	f7ff f9d5 	bl	80039d8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e06d      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d108      	bne.n	8004664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4921      	ldr	r1, [pc, #132]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a19      	ldr	r1, [r3, #32]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	430b      	orrs	r3, r1
 8004676:	491b      	ldr	r1, [pc, #108]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7ff f9a9 	bl	80039d8 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7ff f9a5 	bl	80039d8 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e03d      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800469c:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x46a>
 80046a8:	e035      	b.n	8004716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b10      	ldr	r3, [pc, #64]	@ (80046ec <HAL_RCC_OscConfig+0x4cc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7ff f992 	bl	80039d8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7ff f98e 	bl	80039d8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e026      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ca:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x498>
 80046d6:	e01e      	b.n	8004716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e019      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
 80046ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_OscConfig+0x500>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	429a      	cmp	r2, r3
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000

08004724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d0      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b67      	ldr	r3, [pc, #412]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	4965      	ldr	r1, [pc, #404]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0b8      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004780:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800478a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004798:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a52      	ldr	r2, [pc, #328]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	494d      	ldr	r1, [pc, #308]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d040      	beq.n	8004844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b47      	ldr	r3, [pc, #284]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07f      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b41      	ldr	r3, [pc, #260]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e073      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f2:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06b      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004802:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f023 0203 	bic.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4936      	ldr	r1, [pc, #216]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004814:	f7ff f8e0 	bl	80039d8 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7ff f8dc 	bl	80039d8 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e053      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	4b2d      	ldr	r3, [pc, #180]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 020c 	and.w	r2, r3, #12
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d1eb      	bne.n	800481c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d210      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 0207 	bic.w	r2, r3, #7
 800485a:	4922      	ldr	r1, [pc, #136]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e032      	b.n	80048da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004880:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4916      	ldr	r1, [pc, #88]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	490e      	ldr	r1, [pc, #56]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048b2:	f000 f821 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	490a      	ldr	r1, [pc, #40]	@ (80048ec <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	4a09      	ldr	r2, [pc, #36]	@ (80048f0 <HAL_RCC_ClockConfig+0x1cc>)
 80048cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ce:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_ClockConfig+0x1d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff f83e 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	08009924 	.word	0x08009924
 80048f0:	20000010 	.word	0x20000010
 80048f4:	20000014 	.word	0x20000014

080048f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004912:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <HAL_RCC_GetSysClockFreq+0x94>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b04      	cmp	r3, #4
 8004920:	d002      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x30>
 8004922:	2b08      	cmp	r3, #8
 8004924:	d003      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x36>
 8004926:	e027      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x98>)
 800492a:	613b      	str	r3, [r7, #16]
      break;
 800492c:	e027      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	0c9b      	lsrs	r3, r3, #18
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	4a17      	ldr	r2, [pc, #92]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
 800493a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <HAL_RCC_GetSysClockFreq+0x94>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0c5b      	lsrs	r3, r3, #17
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	4a11      	ldr	r2, [pc, #68]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a0d      	ldr	r2, [pc, #52]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x98>)
 800495a:	fb03 f202 	mul.w	r2, r3, r2
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e004      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0c      	ldr	r2, [pc, #48]	@ (800499c <HAL_RCC_GetSysClockFreq+0xa4>)
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	613b      	str	r3, [r7, #16]
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800497a:	613b      	str	r3, [r7, #16]
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	693b      	ldr	r3, [r7, #16]
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	00f42400 	.word	0x00f42400
 8004994:	0800994c 	.word	0x0800994c
 8004998:	0800995c 	.word	0x0800995c
 800499c:	003d0900 	.word	0x003d0900
 80049a0:	007a1200 	.word	0x007a1200

080049a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a8:	4b02      	ldr	r3, [pc, #8]	@ (80049b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	20000010 	.word	0x20000010

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049bc:	f7ff fff2 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4903      	ldr	r1, [pc, #12]	@ (80049dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08009934 	.word	0x08009934

080049e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049e4:	f7ff ffde 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	0adb      	lsrs	r3, r3, #11
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	@ (8004a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021000 	.word	0x40021000
 8004a04:	08009934 	.word	0x08009934

08004a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <RCC_Delay+0x34>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	@ (8004a40 <RCC_Delay+0x38>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0a5b      	lsrs	r3, r3, #9
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a24:	bf00      	nop
  }
  while (Delay --);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	60fa      	str	r2, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f9      	bne.n	8004a24 <RCC_Delay+0x1c>
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	20000010 	.word	0x20000010
 8004a40:	10624dd3 	.word	0x10624dd3

08004a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e076      	b.n	8004b44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a66:	d009      	beq.n	8004a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
 8004a6e:	e005      	b.n	8004a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc ff3a 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	0c1a      	lsrs	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f002 0204 	and.w	r2, r2, #4
 8004b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_SPI_Transmit+0x22>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e12d      	b.n	8004dca <HAL_SPI_Transmit+0x27e>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b76:	f7fe ff2f 	bl	80039d8 <HAL_GetTick>
 8004b7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d002      	beq.n	8004b92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b90:	e116      	b.n	8004dc0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_SPI_Transmit+0x52>
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba2:	e10d      	b.n	8004dc0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d10f      	bne.n	8004c0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c16:	2b40      	cmp	r3, #64	@ 0x40
 8004c18:	d007      	beq.n	8004c2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c32:	d14f      	bne.n	8004cd4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_Transmit+0xf6>
 8004c3c:	8afb      	ldrh	r3, [r7, #22]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d142      	bne.n	8004cc8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c66:	e02f      	b.n	8004cc8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d112      	bne.n	8004c9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c9a:	e015      	b.n	8004cc8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9c:	f7fe fe9c 	bl	80039d8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d803      	bhi.n	8004cb4 <HAL_SPI_Transmit+0x168>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Transmit+0x16e>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004cc6:	e07b      	b.n	8004dc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ca      	bne.n	8004c68 <HAL_SPI_Transmit+0x11c>
 8004cd2:	e050      	b.n	8004d76 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Transmit+0x196>
 8004cdc:	8afb      	ldrh	r3, [r7, #22]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d144      	bne.n	8004d6c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d08:	e030      	b.n	8004d6c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d113      	bne.n	8004d40 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d3e:	e015      	b.n	8004d6c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d40:	f7fe fe4a 	bl	80039d8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d803      	bhi.n	8004d58 <HAL_SPI_Transmit+0x20c>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d56:	d102      	bne.n	8004d5e <HAL_SPI_Transmit+0x212>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004d6a:	e029      	b.n	8004dc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1c9      	bne.n	8004d0a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fbcc 	bl	8005518 <SPI_EndRxTxTransaction>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e003      	b.n	8004dc0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b088      	sub	sp, #32
 8004dd6:	af02      	add	r7, sp, #8
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
 8004df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004df6:	e0fb      	b.n	8004ff0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e00:	d112      	bne.n	8004e28 <HAL_SPI_Receive+0x56>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10e      	bne.n	8004e28 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8ef 	bl	8005002 <HAL_SPI_TransmitReceive>
 8004e24:	4603      	mov	r3, r0
 8004e26:	e0e8      	b.n	8004ffa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Receive+0x64>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e0e1      	b.n	8004ffa <HAL_SPI_Receive+0x228>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e3e:	f7fe fdcb 	bl	80039d8 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Receive+0x7e>
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e54:	e0cc      	b.n	8004ff0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9c:	d10f      	bne.n	8004ebe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d007      	beq.n	8004edc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d16a      	bne.n	8004fba <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ee4:	e032      	b.n	8004f4c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d115      	bne.n	8004f20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f103 020c 	add.w	r2, r3, #12
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f1e:	e015      	b.n	8004f4c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f20:	f7fe fd5a 	bl	80039d8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d803      	bhi.n	8004f38 <HAL_SPI_Receive+0x166>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f36:	d102      	bne.n	8004f3e <HAL_SPI_Receive+0x16c>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f4a:	e051      	b.n	8004ff0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1c7      	bne.n	8004ee6 <HAL_SPI_Receive+0x114>
 8004f56:	e035      	b.n	8004fc4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d113      	bne.n	8004f8e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	b292      	uxth	r2, r2
 8004f72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f8c:	e015      	b.n	8004fba <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f8e:	f7fe fd23 	bl	80039d8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d803      	bhi.n	8004fa6 <HAL_SPI_Receive+0x1d4>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fa4:	d102      	bne.n	8004fac <HAL_SPI_Receive+0x1da>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004fb8:	e01a      	b.n	8004ff0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1c9      	bne.n	8004f58 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fa53 	bl	8005474 <SPI_EndRxTransaction>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
 8004fe6:	e003      	b.n	8004ff0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b08c      	sub	sp, #48	@ 0x30
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005010:	2301      	movs	r3, #1
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x26>
 8005024:	2302      	movs	r3, #2
 8005026:	e198      	b.n	800535a <HAL_SPI_TransmitReceive+0x358>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005030:	f7fe fcd2 	bl	80039d8 <HAL_GetTick>
 8005034:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800503c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800504a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800504e:	2b01      	cmp	r3, #1
 8005050:	d00f      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x70>
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005058:	d107      	bne.n	800506a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <HAL_SPI_TransmitReceive+0x68>
 8005062:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005066:	2b04      	cmp	r3, #4
 8005068:	d003      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005070:	e16d      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x82>
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800508a:	e160      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b04      	cmp	r3, #4
 8005096:	d003      	beq.n	80050a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2205      	movs	r2, #5
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	887a      	ldrh	r2, [r7, #2]
 80050b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	887a      	ldrh	r2, [r7, #2]
 80050c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b40      	cmp	r3, #64	@ 0x40
 80050e2:	d007      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fc:	d17c      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_SPI_TransmitReceive+0x10a>
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d16a      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	881a      	ldrh	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005130:	e057      	b.n	80051e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d11b      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x176>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x176>
 800514a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d113      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005154:	881a      	ldrh	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d119      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x1b8>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d014      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	b292      	uxth	r2, r2
 800519c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b6:	2301      	movs	r3, #1
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ba:	f7fe fc0d 	bl	80039d8 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d80b      	bhi.n	80051e2 <HAL_SPI_TransmitReceive+0x1e0>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80051e0:	e0b5      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1a2      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x130>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d19d      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x130>
 80051f6:	e080      	b.n	80052fa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x204>
 8005200:	8b7b      	ldrh	r3, [r7, #26]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d16f      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800522c:	e05b      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11c      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x274>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d017      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x274>
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d114      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d119      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x2b6>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052b8:	f7fe fb8e 	bl	80039d8 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d803      	bhi.n	80052d0 <HAL_SPI_TransmitReceive+0x2ce>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ce:	d102      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x2d4>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80052e4:	e033      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d19e      	bne.n	800522e <HAL_SPI_TransmitReceive+0x22c>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d199      	bne.n	800522e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f90a 	bl	8005518 <SPI_EndRxTxTransaction>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005316:	e01a      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005344:	e003      	b.n	800534e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800535a:	4618      	mov	r0, r3
 800535c:	3730      	adds	r7, #48	@ 0x30
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005374:	f7fe fb30 	bl	80039d8 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005384:	f7fe fb28 	bl	80039d8 <HAL_GetTick>
 8005388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538a:	4b39      	ldr	r3, [pc, #228]	@ (8005470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539a:	e054      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053a2:	d050      	beq.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a4:	f7fe fb18 	bl	80039d8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d902      	bls.n	80053ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d13d      	bne.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d2:	d111      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053dc:	d004      	beq.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e6:	d107      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005400:	d10f      	bne.n	8005422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e017      	b.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d19b      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000010 	.word	0x20000010

08005474 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005488:	d111      	bne.n	80054ae <SPI_EndRxTransaction+0x3a>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005492:	d004      	beq.n	800549e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549c:	d107      	bne.n	80054ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054b6:	d117      	bne.n	80054e8 <SPI_EndRxTransaction+0x74>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c0:	d112      	bne.n	80054e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2101      	movs	r1, #1
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ff49 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01a      	beq.n	800550e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e013      	b.n	8005510 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	2180      	movs	r1, #128	@ 0x80
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff ff36 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e000      	b.n	8005510 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	2180      	movs	r1, #128	@ 0x80
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff ff18 	bl	8005364 <SPI_WaitFlagStateUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e000      	b.n	800554c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e041      	b.n	80055ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc fa4e 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 fa7c 	bl	8005a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d001      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e03a      	b.n	8005682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	@ (800568c <HAL_TIM_Base_Start_IT+0x98>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005636:	d009      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <HAL_TIM_Base_Start_IT+0x9c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x58>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <HAL_TIM_Base_Start_IT+0xa0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d111      	bne.n	8005670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b06      	cmp	r3, #6
 800565c:	d010      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	e007      	b.n	8005680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800

08005698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0202 	mvn.w	r2, #2
 80056c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9bd 	bl	8005a5a <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9b0 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f9bf 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0204 	mvn.w	r2, #4
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f993 	bl	8005a5a <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f986 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f995 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f969 	bl	8005a5a <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f95c 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f96b 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f93f 	bl	8005a5a <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f932 	bl	8005a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f941 	bl	8005a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f90d 	bl	8005a36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005834:	2b80      	cmp	r3, #128	@ 0x80
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa83 	bl	8005d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b40      	cmp	r3, #64	@ 0x40
 8005854:	d10e      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d107      	bne.n	8005874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f905 	bl	8005a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d10e      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b20      	cmp	r3, #32
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0220 	mvn.w	r2, #32
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa4e 	bl	8005d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_ConfigClockSource+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0b4      	b.n	8005a2e <HAL_TIM_ConfigClockSource+0x186>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fc:	d03e      	beq.n	800597c <HAL_TIM_ConfigClockSource+0xd4>
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005902:	f200 8087 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	f000 8086 	beq.w	8005a1a <HAL_TIM_ConfigClockSource+0x172>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005912:	d87f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b70      	cmp	r3, #112	@ 0x70
 8005916:	d01a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0xa6>
 8005918:	2b70      	cmp	r3, #112	@ 0x70
 800591a:	d87b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b60      	cmp	r3, #96	@ 0x60
 800591e:	d050      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005920:	2b60      	cmp	r3, #96	@ 0x60
 8005922:	d877      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b50      	cmp	r3, #80	@ 0x50
 8005926:	d03c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005928:	2b50      	cmp	r3, #80	@ 0x50
 800592a:	d873      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d058      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005930:	2b40      	cmp	r3, #64	@ 0x40
 8005932:	d86f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005934:	2b30      	cmp	r3, #48	@ 0x30
 8005936:	d064      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	2b30      	cmp	r3, #48	@ 0x30
 800593a:	d86b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d060      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d867      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005948:	2b10      	cmp	r3, #16
 800594a:	d05a      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	e062      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800595e:	f000 f970 	bl	8005c42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
      break;
 800597a:	e04f      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800598c:	f000 f959 	bl	8005c42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800599e:	609a      	str	r2, [r3, #8]
      break;
 80059a0:	e03c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 f8d0 	bl	8005b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2150      	movs	r1, #80	@ 0x50
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f927 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 80059c0:	e02c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	461a      	mov	r2, r3
 80059d0:	f000 f8ee 	bl	8005bb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2160      	movs	r1, #96	@ 0x60
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f917 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 80059e0:	e01c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 f8b0 	bl	8005b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2140      	movs	r1, #64	@ 0x40
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f907 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005a00:	e00c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f000 f8fe 	bl	8005c0e <TIM_ITRx_SetConfig>
      break;
 8005a12:	e003      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e000      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a29      	ldr	r2, [pc, #164]	@ (8005b48 <TIM_Base_SetConfig+0xb8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0x30>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0x30>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <TIM_Base_SetConfig+0xbc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0x30>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a25      	ldr	r2, [pc, #148]	@ (8005b50 <TIM_Base_SetConfig+0xc0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d108      	bne.n	8005ad2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b48 <TIM_Base_SetConfig+0xb8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_Base_SetConfig+0x62>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae0:	d007      	beq.n	8005af2 <TIM_Base_SetConfig+0x62>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <TIM_Base_SetConfig+0xbc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_Base_SetConfig+0x62>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a18      	ldr	r2, [pc, #96]	@ (8005b50 <TIM_Base_SetConfig+0xc0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d108      	bne.n	8005b04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a07      	ldr	r2, [pc, #28]	@ (8005b48 <TIM_Base_SetConfig+0xb8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d103      	bne.n	8005b38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	615a      	str	r2, [r3, #20]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800

08005b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 030a 	bic.w	r3, r3, #10
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	031b      	lsls	r3, r3, #12
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr

08005c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f043 0307 	orr.w	r3, r3, #7
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	021a      	lsls	r2, r3, #8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	609a      	str	r2, [r3, #8]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e046      	b.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d10c      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800

08005d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e042      	b.n	8005df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb fe6e 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	@ 0x24
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fdcd 	bl	8006944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	@ 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d16d      	bne.n	8005efc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Transmit+0x2c>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e066      	b.n	8005efe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2221      	movs	r2, #33	@ 0x21
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3e:	f7fd fdcb 	bl	80039d8 <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e58:	d108      	bne.n	8005e6c <HAL_UART_Transmit+0x6c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e003      	b.n	8005e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e74:	e02a      	b.n	8005ecc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fb1d 	bl	80064c0 <UART_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e036      	b.n	8005efe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e007      	b.n	8005ebe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1cf      	bne.n	8005e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2140      	movs	r1, #64	@ 0x40
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 faed 	bl	80064c0 <UART_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e006      	b.n	8005efe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d112      	bne.n	8005f46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Receive_IT+0x26>
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e00b      	b.n	8005f48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fb2d 	bl	800659c <UART_Start_Receive_IT>
 8005f42:	4603      	mov	r3, r0
 8005f44:	e000      	b.n	8005f48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b0ba      	sub	sp, #232	@ 0xe8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x66>
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fc0a 	bl	80067c8 <UART_Receive_IT>
      return;
 8005fb4:	e25b      	b.n	800646e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80de 	beq.w	800617c <HAL_UART_IRQHandler+0x22c>
 8005fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80d1 	beq.w	800617c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_UART_IRQHandler+0xae>
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_UART_IRQHandler+0xd2>
 800600a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f043 0202 	orr.w	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_UART_IRQHandler+0xf6>
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <HAL_UART_IRQHandler+0x126>
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800605e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	f043 0208 	orr.w	r2, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 81f2 	beq.w	8006464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_UART_IRQHandler+0x14e>
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fb95 	bl	80067c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <HAL_UART_IRQHandler+0x17a>
 80060c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d04f      	beq.n	800616a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa9f 	bl	800660e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d041      	beq.n	8006162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3314      	adds	r3, #20
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800610a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800610e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1d9      	bne.n	80060de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d013      	beq.n	800615a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006136:	4a7e      	ldr	r2, [pc, #504]	@ (8006330 <HAL_UART_IRQHandler+0x3e0>)
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd fdc0 	bl	8003cc4 <HAL_DMA_Abort_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	e00e      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f99c 	bl	8006498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	e00a      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f998 	bl	8006498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	e006      	b.n	8006178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f994 	bl	8006498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006176:	e175      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	bf00      	nop
    return;
 800617a:	e173      	b.n	8006464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006180:	2b01      	cmp	r3, #1
 8006182:	f040 814f 	bne.w	8006424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8148 	beq.w	8006424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8141 	beq.w	8006424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80b6 	beq.w	8006334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8145 	beq.w	8006468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061e6:	429a      	cmp	r2, r3
 80061e8:	f080 813e 	bcs.w	8006468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	f000 8088 	beq.w	8006310 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800621a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800622c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006238:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1d9      	bne.n	8006200 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800625c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006270:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006274:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006278:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e1      	bne.n	800624c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800629a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800629e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3314      	adds	r3, #20
 80062a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e3      	bne.n	8006288 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e0:	f023 0310 	bic.w	r3, r3, #16
 80062e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80062f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80062f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e3      	bne.n	80062ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	4618      	mov	r0, r3
 800630c:	f7fd fc9f 	bl	8003c4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800631e:	b29b      	uxth	r3, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	b29b      	uxth	r3, r3
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8bf 	bl	80064aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800632c:	e09c      	b.n	8006468 <HAL_UART_IRQHandler+0x518>
 800632e:	bf00      	nop
 8006330:	080066d3 	.word	0x080066d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800633c:	b29b      	uxth	r3, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 808e 	beq.w	800646c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8089 	beq.w	800646c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800637e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3314      	adds	r3, #20
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	623b      	str	r3, [r7, #32]
   return(result);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f023 0301 	bic.w	r3, r3, #1
 80063a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e3      	bne.n	8006392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80063fc:	61fa      	str	r2, [r7, #28]
 80063fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69b9      	ldr	r1, [r7, #24]
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	617b      	str	r3, [r7, #20]
   return(result);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e3      	bne.n	80063d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f844 	bl	80064aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006422:	e023      	b.n	800646c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <HAL_UART_IRQHandler+0x4f4>
 8006430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f95c 	bl	80066fa <UART_Transmit_IT>
    return;
 8006442:	e014      	b.n	800646e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <HAL_UART_IRQHandler+0x51e>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f99b 	bl	8006798 <UART_EndTransmit_IT>
    return;
 8006462:	e004      	b.n	800646e <HAL_UART_IRQHandler+0x51e>
    return;
 8006464:	bf00      	nop
 8006466:	e002      	b.n	800646e <HAL_UART_IRQHandler+0x51e>
      return;
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <HAL_UART_IRQHandler+0x51e>
      return;
 800646c:	bf00      	nop
  }
}
 800646e:	37e8      	adds	r7, #232	@ 0xe8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b090      	sub	sp, #64	@ 0x40
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d0:	e050      	b.n	8006574 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d8:	d04c      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064e0:	f7fd fa7a 	bl	80039d8 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d241      	bcs.n	8006574 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006510:	637a      	str	r2, [r7, #52]	@ 0x34
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800651e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3314      	adds	r3, #20
 800652a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	613b      	str	r3, [r7, #16]
   return(result);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3314      	adds	r3, #20
 8006542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006544:	623a      	str	r2, [r7, #32]
 8006546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	69f9      	ldr	r1, [r7, #28]
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	61bb      	str	r3, [r7, #24]
   return(result);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e00f      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	429a      	cmp	r2, r3
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	429a      	cmp	r2, r3
 8006590:	d09f      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3740      	adds	r7, #64	@ 0x40
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2222      	movs	r2, #34	@ 0x22
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0220 	orr.w	r2, r2, #32
 8006600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660e:	b480      	push	{r7}
 8006610:	b095      	sub	sp, #84	@ 0x54
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006636:	643a      	str	r2, [r7, #64]	@ 0x40
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800663c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	61fb      	str	r3, [r7, #28]
   return(result);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	2b01      	cmp	r3, #1
 8006684:	d119      	bne.n	80066ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	60bb      	str	r3, [r7, #8]
   return(result);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f023 0310 	bic.w	r3, r3, #16
 800669c:	647b      	str	r3, [r7, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a6:	61ba      	str	r2, [r7, #24]
 80066a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	613b      	str	r3, [r7, #16]
   return(result);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066c8:	bf00      	nop
 80066ca:	3754      	adds	r7, #84	@ 0x54
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fed3 	bl	8006498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b21      	cmp	r3, #33	@ 0x21
 800670c:	d13e      	bne.n	800678c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006716:	d114      	bne.n	8006742 <UART_Transmit_IT+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d110      	bne.n	8006742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]
 8006740:	e008      	b.n	8006754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6211      	str	r1, [r2, #32]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4619      	mov	r1, r3
 8006762:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10f      	bne.n	8006788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff fe5b 	bl	8006474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	@ 0x30
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b22      	cmp	r3, #34	@ 0x22
 80067da:	f040 80ae 	bne.w	800693a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e6:	d117      	bne.n	8006818 <UART_Receive_IT+0x50>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d113      	bne.n	8006818 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	b29a      	uxth	r2, r3
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	1c9a      	adds	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	629a      	str	r2, [r3, #40]	@ 0x28
 8006816:	e026      	b.n	8006866 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682a:	d007      	beq.n	800683c <UART_Receive_IT+0x74>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <UART_Receive_IT+0x82>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	e008      	b.n	800685c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4619      	mov	r1, r3
 8006874:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006876:	2b00      	cmp	r3, #0
 8006878:	d15d      	bne.n	8006936 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0220 	bic.w	r2, r2, #32
 8006888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d135      	bne.n	800692c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	613b      	str	r3, [r7, #16]
   return(result);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f023 0310 	bic.w	r3, r3, #16
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e6:	623a      	str	r2, [r7, #32]
 80068e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	69f9      	ldr	r1, [r7, #28]
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b10      	cmp	r3, #16
 8006906:	d10a      	bne.n	800691e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fdc0 	bl	80064aa <HAL_UARTEx_RxEventCallback>
 800692a:	e002      	b.n	8006932 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff fdaa 	bl	8006486 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e002      	b.n	800693c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3730      	adds	r7, #48	@ 0x30
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800697e:	f023 030c 	bic.w	r3, r3, #12
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	430b      	orrs	r3, r1
 800698a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a58 <UART_SetConfig+0x114>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d103      	bne.n	80069b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fe f818 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	e002      	b.n	80069ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7fe f800 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 80069b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009a      	lsls	r2, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	4a22      	ldr	r2, [pc, #136]	@ (8006a5c <UART_SetConfig+0x118>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	0119      	lsls	r1, r3, #4
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009a      	lsls	r2, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a5c <UART_SetConfig+0x118>)
 80069f2:	fba3 0302 	umull	r0, r3, r3, r2
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2064      	movs	r0, #100	@ 0x64
 80069fa:	fb00 f303 	mul.w	r3, r0, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	3332      	adds	r3, #50	@ 0x32
 8006a04:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <UART_SetConfig+0x118>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a10:	4419      	add	r1, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009a      	lsls	r2, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a28:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <UART_SetConfig+0x118>)
 8006a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	2064      	movs	r0, #100	@ 0x64
 8006a32:	fb00 f303 	mul.w	r3, r0, r3
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	3332      	adds	r3, #50	@ 0x32
 8006a3c:	4a07      	ldr	r2, [pc, #28]	@ (8006a5c <UART_SetConfig+0x118>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	51eb851f 	.word	0x51eb851f

08006a60 <__assert_func>:
 8006a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a62:	4614      	mov	r4, r2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <__assert_func+0x2c>)
 8006a68:	4605      	mov	r5, r0
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68d8      	ldr	r0, [r3, #12]
 8006a6e:	b954      	cbnz	r4, 8006a86 <__assert_func+0x26>
 8006a70:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <__assert_func+0x30>)
 8006a72:	461c      	mov	r4, r3
 8006a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a78:	9100      	str	r1, [sp, #0]
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	4905      	ldr	r1, [pc, #20]	@ (8006a94 <__assert_func+0x34>)
 8006a7e:	f000 fdcb 	bl	8007618 <fiprintf>
 8006a82:	f000 ff44 	bl	800790e <abort>
 8006a86:	4b04      	ldr	r3, [pc, #16]	@ (8006a98 <__assert_func+0x38>)
 8006a88:	e7f4      	b.n	8006a74 <__assert_func+0x14>
 8006a8a:	bf00      	nop
 8006a8c:	20000028 	.word	0x20000028
 8006a90:	08009999 	.word	0x08009999
 8006a94:	0800996b 	.word	0x0800996b
 8006a98:	0800995e 	.word	0x0800995e

08006a9c <malloc>:
 8006a9c:	4b02      	ldr	r3, [pc, #8]	@ (8006aa8 <malloc+0xc>)
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f000 b82d 	b.w	8006b00 <_malloc_r>
 8006aa6:	bf00      	nop
 8006aa8:	20000028 	.word	0x20000028

08006aac <free>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	@ (8006ab8 <free+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f001 bd85 	b.w	80085c0 <_free_r>
 8006ab6:	bf00      	nop
 8006ab8:	20000028 	.word	0x20000028

08006abc <sbrk_aligned>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4e0f      	ldr	r6, [pc, #60]	@ (8006afc <sbrk_aligned+0x40>)
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	6831      	ldr	r1, [r6, #0]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	b911      	cbnz	r1, 8006ace <sbrk_aligned+0x12>
 8006ac8:	f000 feae 	bl	8007828 <_sbrk_r>
 8006acc:	6030      	str	r0, [r6, #0]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 fea9 	bl	8007828 <_sbrk_r>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d103      	bne.n	8006ae2 <sbrk_aligned+0x26>
 8006ada:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ade:	4620      	mov	r0, r4
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	1cc4      	adds	r4, r0, #3
 8006ae4:	f024 0403 	bic.w	r4, r4, #3
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d0f8      	beq.n	8006ade <sbrk_aligned+0x22>
 8006aec:	1a21      	subs	r1, r4, r0
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fe9a 	bl	8007828 <_sbrk_r>
 8006af4:	3001      	adds	r0, #1
 8006af6:	d1f2      	bne.n	8006ade <sbrk_aligned+0x22>
 8006af8:	e7ef      	b.n	8006ada <sbrk_aligned+0x1e>
 8006afa:	bf00      	nop
 8006afc:	20000458 	.word	0x20000458

08006b00 <_malloc_r>:
 8006b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b04:	1ccd      	adds	r5, r1, #3
 8006b06:	f025 0503 	bic.w	r5, r5, #3
 8006b0a:	3508      	adds	r5, #8
 8006b0c:	2d0c      	cmp	r5, #12
 8006b0e:	bf38      	it	cc
 8006b10:	250c      	movcc	r5, #12
 8006b12:	2d00      	cmp	r5, #0
 8006b14:	4606      	mov	r6, r0
 8006b16:	db01      	blt.n	8006b1c <_malloc_r+0x1c>
 8006b18:	42a9      	cmp	r1, r5
 8006b1a:	d904      	bls.n	8006b26 <_malloc_r+0x26>
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	6033      	str	r3, [r6, #0]
 8006b20:	2000      	movs	r0, #0
 8006b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bfc <_malloc_r+0xfc>
 8006b2a:	f000 f869 	bl	8006c00 <__malloc_lock>
 8006b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b32:	461c      	mov	r4, r3
 8006b34:	bb44      	cbnz	r4, 8006b88 <_malloc_r+0x88>
 8006b36:	4629      	mov	r1, r5
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7ff ffbf 	bl	8006abc <sbrk_aligned>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	4604      	mov	r4, r0
 8006b42:	d158      	bne.n	8006bf6 <_malloc_r+0xf6>
 8006b44:	f8d8 4000 	ldr.w	r4, [r8]
 8006b48:	4627      	mov	r7, r4
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	d143      	bne.n	8006bd6 <_malloc_r+0xd6>
 8006b4e:	2c00      	cmp	r4, #0
 8006b50:	d04b      	beq.n	8006bea <_malloc_r+0xea>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	4639      	mov	r1, r7
 8006b56:	4630      	mov	r0, r6
 8006b58:	eb04 0903 	add.w	r9, r4, r3
 8006b5c:	f000 fe64 	bl	8007828 <_sbrk_r>
 8006b60:	4581      	cmp	r9, r0
 8006b62:	d142      	bne.n	8006bea <_malloc_r+0xea>
 8006b64:	6821      	ldr	r1, [r4, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	1a6d      	subs	r5, r5, r1
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	f7ff ffa6 	bl	8006abc <sbrk_aligned>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d03a      	beq.n	8006bea <_malloc_r+0xea>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	442b      	add	r3, r5
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	bb62      	cbnz	r2, 8006bdc <_malloc_r+0xdc>
 8006b82:	f8c8 7000 	str.w	r7, [r8]
 8006b86:	e00f      	b.n	8006ba8 <_malloc_r+0xa8>
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	1b52      	subs	r2, r2, r5
 8006b8c:	d420      	bmi.n	8006bd0 <_malloc_r+0xd0>
 8006b8e:	2a0b      	cmp	r2, #11
 8006b90:	d917      	bls.n	8006bc2 <_malloc_r+0xc2>
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	6025      	str	r5, [r4, #0]
 8006b98:	bf18      	it	ne
 8006b9a:	6059      	strne	r1, [r3, #4]
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	bf08      	it	eq
 8006ba0:	f8c8 1000 	streq.w	r1, [r8]
 8006ba4:	5162      	str	r2, [r4, r5]
 8006ba6:	604b      	str	r3, [r1, #4]
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f82f 	bl	8006c0c <__malloc_unlock>
 8006bae:	f104 000b 	add.w	r0, r4, #11
 8006bb2:	1d23      	adds	r3, r4, #4
 8006bb4:	f020 0007 	bic.w	r0, r0, #7
 8006bb8:	1ac2      	subs	r2, r0, r3
 8006bba:	bf1c      	itt	ne
 8006bbc:	1a1b      	subne	r3, r3, r0
 8006bbe:	50a3      	strne	r3, [r4, r2]
 8006bc0:	e7af      	b.n	8006b22 <_malloc_r+0x22>
 8006bc2:	6862      	ldr	r2, [r4, #4]
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	bf0c      	ite	eq
 8006bc8:	f8c8 2000 	streq.w	r2, [r8]
 8006bcc:	605a      	strne	r2, [r3, #4]
 8006bce:	e7eb      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	6864      	ldr	r4, [r4, #4]
 8006bd4:	e7ae      	b.n	8006b34 <_malloc_r+0x34>
 8006bd6:	463c      	mov	r4, r7
 8006bd8:	687f      	ldr	r7, [r7, #4]
 8006bda:	e7b6      	b.n	8006b4a <_malloc_r+0x4a>
 8006bdc:	461a      	mov	r2, r3
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	d1fb      	bne.n	8006bdc <_malloc_r+0xdc>
 8006be4:	2300      	movs	r3, #0
 8006be6:	6053      	str	r3, [r2, #4]
 8006be8:	e7de      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bea:	230c      	movs	r3, #12
 8006bec:	4630      	mov	r0, r6
 8006bee:	6033      	str	r3, [r6, #0]
 8006bf0:	f000 f80c 	bl	8006c0c <__malloc_unlock>
 8006bf4:	e794      	b.n	8006b20 <_malloc_r+0x20>
 8006bf6:	6005      	str	r5, [r0, #0]
 8006bf8:	e7d6      	b.n	8006ba8 <_malloc_r+0xa8>
 8006bfa:	bf00      	nop
 8006bfc:	2000045c 	.word	0x2000045c

08006c00 <__malloc_lock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__malloc_lock+0x8>)
 8006c02:	f000 be5e 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 8006c06:	bf00      	nop
 8006c08:	200005a0 	.word	0x200005a0

08006c0c <__malloc_unlock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	@ (8006c14 <__malloc_unlock+0x8>)
 8006c0e:	f000 be59 	b.w	80078c4 <__retarget_lock_release_recursive>
 8006c12:	bf00      	nop
 8006c14:	200005a0 	.word	0x200005a0

08006c18 <__cvt>:
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1e:	461d      	mov	r5, r3
 8006c20:	bfbb      	ittet	lt
 8006c22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c26:	461d      	movlt	r5, r3
 8006c28:	2300      	movge	r3, #0
 8006c2a:	232d      	movlt	r3, #45	@ 0x2d
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	4614      	mov	r4, r2
 8006c30:	bfb8      	it	lt
 8006c32:	4614      	movlt	r4, r2
 8006c34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c38:	7013      	strb	r3, [r2, #0]
 8006c3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006c40:	f023 0820 	bic.w	r8, r3, #32
 8006c44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c48:	d005      	beq.n	8006c56 <__cvt+0x3e>
 8006c4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c4e:	d100      	bne.n	8006c52 <__cvt+0x3a>
 8006c50:	3601      	adds	r6, #1
 8006c52:	2302      	movs	r3, #2
 8006c54:	e000      	b.n	8006c58 <__cvt+0x40>
 8006c56:	2303      	movs	r3, #3
 8006c58:	aa07      	add	r2, sp, #28
 8006c5a:	9204      	str	r2, [sp, #16]
 8006c5c:	aa06      	add	r2, sp, #24
 8006c5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c62:	e9cd 3600 	strd	r3, r6, [sp]
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	f000 fee1 	bl	8007a30 <_dtoa_r>
 8006c6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c72:	4607      	mov	r7, r0
 8006c74:	d119      	bne.n	8006caa <__cvt+0x92>
 8006c76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c78:	07db      	lsls	r3, r3, #31
 8006c7a:	d50e      	bpl.n	8006c9a <__cvt+0x82>
 8006c7c:	eb00 0906 	add.w	r9, r0, r6
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7f9 fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8006c8c:	b108      	cbz	r0, 8006c92 <__cvt+0x7a>
 8006c8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c92:	2230      	movs	r2, #48	@ 0x30
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	454b      	cmp	r3, r9
 8006c98:	d31e      	bcc.n	8006cd8 <__cvt+0xc0>
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ca0:	1bdb      	subs	r3, r3, r7
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	b008      	add	sp, #32
 8006ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006caa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cae:	eb00 0906 	add.w	r9, r0, r6
 8006cb2:	d1e5      	bne.n	8006c80 <__cvt+0x68>
 8006cb4:	7803      	ldrb	r3, [r0, #0]
 8006cb6:	2b30      	cmp	r3, #48	@ 0x30
 8006cb8:	d10a      	bne.n	8006cd0 <__cvt+0xb8>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc6:	b918      	cbnz	r0, 8006cd0 <__cvt+0xb8>
 8006cc8:	f1c6 0601 	rsb	r6, r6, #1
 8006ccc:	f8ca 6000 	str.w	r6, [sl]
 8006cd0:	f8da 3000 	ldr.w	r3, [sl]
 8006cd4:	4499      	add	r9, r3
 8006cd6:	e7d3      	b.n	8006c80 <__cvt+0x68>
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	9107      	str	r1, [sp, #28]
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	e7d9      	b.n	8006c94 <__cvt+0x7c>

08006ce0 <__exponent>:
 8006ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce2:	2900      	cmp	r1, #0
 8006ce4:	bfb6      	itet	lt
 8006ce6:	232d      	movlt	r3, #45	@ 0x2d
 8006ce8:	232b      	movge	r3, #43	@ 0x2b
 8006cea:	4249      	neglt	r1, r1
 8006cec:	2909      	cmp	r1, #9
 8006cee:	7002      	strb	r2, [r0, #0]
 8006cf0:	7043      	strb	r3, [r0, #1]
 8006cf2:	dd29      	ble.n	8006d48 <__exponent+0x68>
 8006cf4:	f10d 0307 	add.w	r3, sp, #7
 8006cf8:	461d      	mov	r5, r3
 8006cfa:	270a      	movs	r7, #10
 8006cfc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d00:	461a      	mov	r2, r3
 8006d02:	fb07 1416 	mls	r4, r7, r6, r1
 8006d06:	3430      	adds	r4, #48	@ 0x30
 8006d08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	2c63      	cmp	r4, #99	@ 0x63
 8006d10:	4631      	mov	r1, r6
 8006d12:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006d16:	dcf1      	bgt.n	8006cfc <__exponent+0x1c>
 8006d18:	3130      	adds	r1, #48	@ 0x30
 8006d1a:	1e94      	subs	r4, r2, #2
 8006d1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d20:	4623      	mov	r3, r4
 8006d22:	1c41      	adds	r1, r0, #1
 8006d24:	42ab      	cmp	r3, r5
 8006d26:	d30a      	bcc.n	8006d3e <__exponent+0x5e>
 8006d28:	f10d 0309 	add.w	r3, sp, #9
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	42ac      	cmp	r4, r5
 8006d30:	bf88      	it	hi
 8006d32:	2300      	movhi	r3, #0
 8006d34:	3302      	adds	r3, #2
 8006d36:	4403      	add	r3, r0
 8006d38:	1a18      	subs	r0, r3, r0
 8006d3a:	b003      	add	sp, #12
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d46:	e7ed      	b.n	8006d24 <__exponent+0x44>
 8006d48:	2330      	movs	r3, #48	@ 0x30
 8006d4a:	3130      	adds	r1, #48	@ 0x30
 8006d4c:	7083      	strb	r3, [r0, #2]
 8006d4e:	70c1      	strb	r1, [r0, #3]
 8006d50:	1d03      	adds	r3, r0, #4
 8006d52:	e7f1      	b.n	8006d38 <__exponent+0x58>

08006d54 <_printf_float>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	b091      	sub	sp, #68	@ 0x44
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006d60:	4616      	mov	r6, r2
 8006d62:	461f      	mov	r7, r3
 8006d64:	4605      	mov	r5, r0
 8006d66:	f000 fd27 	bl	80077b8 <_localeconv_r>
 8006d6a:	6803      	ldr	r3, [r0, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	9308      	str	r3, [sp, #32]
 8006d70:	f7f9 f9ee 	bl	8000150 <strlen>
 8006d74:	2300      	movs	r3, #0
 8006d76:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d78:	f8d8 3000 	ldr.w	r3, [r8]
 8006d7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d7e:	3307      	adds	r3, #7
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	f103 0208 	add.w	r2, r3, #8
 8006d88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d8c:	f8d4 b000 	ldr.w	fp, [r4]
 8006d90:	f8c8 2000 	str.w	r2, [r8]
 8006d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006daa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006dae:	4b9c      	ldr	r3, [pc, #624]	@ (8007020 <_printf_float+0x2cc>)
 8006db0:	f7f9 fe2c 	bl	8000a0c <__aeabi_dcmpun>
 8006db4:	bb70      	cbnz	r0, 8006e14 <_printf_float+0xc0>
 8006db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dbe:	4b98      	ldr	r3, [pc, #608]	@ (8007020 <_printf_float+0x2cc>)
 8006dc0:	f7f9 fe06 	bl	80009d0 <__aeabi_dcmple>
 8006dc4:	bb30      	cbnz	r0, 8006e14 <_printf_float+0xc0>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	f7f9 fdf5 	bl	80009bc <__aeabi_dcmplt>
 8006dd2:	b110      	cbz	r0, 8006dda <_printf_float+0x86>
 8006dd4:	232d      	movs	r3, #45	@ 0x2d
 8006dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dda:	4a92      	ldr	r2, [pc, #584]	@ (8007024 <_printf_float+0x2d0>)
 8006ddc:	4b92      	ldr	r3, [pc, #584]	@ (8007028 <_printf_float+0x2d4>)
 8006dde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006de2:	bf94      	ite	ls
 8006de4:	4690      	movls	r8, r2
 8006de6:	4698      	movhi	r8, r3
 8006de8:	2303      	movs	r3, #3
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	f02b 0304 	bic.w	r3, fp, #4
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	4633      	mov	r3, r6
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	9700      	str	r7, [sp, #0]
 8006dfe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006e00:	f000 f9d4 	bl	80071ac <_printf_common>
 8006e04:	3001      	adds	r0, #1
 8006e06:	f040 8090 	bne.w	8006f2a <_printf_float+0x1d6>
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e0e:	b011      	add	sp, #68	@ 0x44
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	4642      	mov	r2, r8
 8006e16:	464b      	mov	r3, r9
 8006e18:	4640      	mov	r0, r8
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	f7f9 fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8006e20:	b148      	cbz	r0, 8006e36 <_printf_float+0xe2>
 8006e22:	464b      	mov	r3, r9
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bfb8      	it	lt
 8006e28:	232d      	movlt	r3, #45	@ 0x2d
 8006e2a:	4a80      	ldr	r2, [pc, #512]	@ (800702c <_printf_float+0x2d8>)
 8006e2c:	bfb8      	it	lt
 8006e2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e32:	4b7f      	ldr	r3, [pc, #508]	@ (8007030 <_printf_float+0x2dc>)
 8006e34:	e7d3      	b.n	8006dde <_printf_float+0x8a>
 8006e36:	6863      	ldr	r3, [r4, #4]
 8006e38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	d13f      	bne.n	8006ec0 <_printf_float+0x16c>
 8006e40:	2306      	movs	r3, #6
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	9206      	str	r2, [sp, #24]
 8006e4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006e50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006e54:	aa0d      	add	r2, sp, #52	@ 0x34
 8006e56:	9203      	str	r2, [sp, #12]
 8006e58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006e5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	4642      	mov	r2, r8
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	4628      	mov	r0, r5
 8006e68:	464b      	mov	r3, r9
 8006e6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e6c:	f7ff fed4 	bl	8006c18 <__cvt>
 8006e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e72:	4680      	mov	r8, r0
 8006e74:	2947      	cmp	r1, #71	@ 0x47
 8006e76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e78:	d128      	bne.n	8006ecc <_printf_float+0x178>
 8006e7a:	1cc8      	adds	r0, r1, #3
 8006e7c:	db02      	blt.n	8006e84 <_printf_float+0x130>
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	4299      	cmp	r1, r3
 8006e82:	dd40      	ble.n	8006f06 <_printf_float+0x1b2>
 8006e84:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e88:	fa5f fa8a 	uxtb.w	sl, sl
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	3901      	subs	r1, #1
 8006e90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e94:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e96:	f7ff ff23 	bl	8006ce0 <__exponent>
 8006e9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e9c:	4681      	mov	r9, r0
 8006e9e:	1813      	adds	r3, r2, r0
 8006ea0:	2a01      	cmp	r2, #1
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	dc02      	bgt.n	8006eac <_printf_float+0x158>
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	07d2      	lsls	r2, r2, #31
 8006eaa:	d501      	bpl.n	8006eb0 <_printf_float+0x15c>
 8006eac:	3301      	adds	r3, #1
 8006eae:	6123      	str	r3, [r4, #16]
 8006eb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d09e      	beq.n	8006df6 <_printf_float+0xa2>
 8006eb8:	232d      	movs	r3, #45	@ 0x2d
 8006eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ebe:	e79a      	b.n	8006df6 <_printf_float+0xa2>
 8006ec0:	2947      	cmp	r1, #71	@ 0x47
 8006ec2:	d1bf      	bne.n	8006e44 <_printf_float+0xf0>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1bd      	bne.n	8006e44 <_printf_float+0xf0>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e7ba      	b.n	8006e42 <_printf_float+0xee>
 8006ecc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ed0:	d9dc      	bls.n	8006e8c <_printf_float+0x138>
 8006ed2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ed6:	d118      	bne.n	8006f0a <_printf_float+0x1b6>
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	dd0b      	ble.n	8006ef6 <_printf_float+0x1a2>
 8006ede:	6121      	str	r1, [r4, #16]
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_printf_float+0x194>
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	07d0      	lsls	r0, r2, #31
 8006ee6:	d502      	bpl.n	8006eee <_printf_float+0x19a>
 8006ee8:	3301      	adds	r3, #1
 8006eea:	440b      	add	r3, r1
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	f04f 0900 	mov.w	r9, #0
 8006ef2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ef4:	e7dc      	b.n	8006eb0 <_printf_float+0x15c>
 8006ef6:	b913      	cbnz	r3, 8006efe <_printf_float+0x1aa>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	07d2      	lsls	r2, r2, #31
 8006efc:	d501      	bpl.n	8006f02 <_printf_float+0x1ae>
 8006efe:	3302      	adds	r3, #2
 8006f00:	e7f4      	b.n	8006eec <_printf_float+0x198>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7f2      	b.n	8006eec <_printf_float+0x198>
 8006f06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	db05      	blt.n	8006f1c <_printf_float+0x1c8>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	6121      	str	r1, [r4, #16]
 8006f14:	07d8      	lsls	r0, r3, #31
 8006f16:	d5ea      	bpl.n	8006eee <_printf_float+0x19a>
 8006f18:	1c4b      	adds	r3, r1, #1
 8006f1a:	e7e7      	b.n	8006eec <_printf_float+0x198>
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	bfcc      	ite	gt
 8006f20:	2201      	movgt	r2, #1
 8006f22:	f1c1 0202 	rsble	r2, r1, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	e7e0      	b.n	8006eec <_printf_float+0x198>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	055a      	lsls	r2, r3, #21
 8006f2e:	d407      	bmi.n	8006f40 <_printf_float+0x1ec>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	4642      	mov	r2, r8
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d12b      	bne.n	8006f96 <_printf_float+0x242>
 8006f3e:	e764      	b.n	8006e0a <_printf_float+0xb6>
 8006f40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f44:	f240 80dc 	bls.w	8007100 <_printf_float+0x3ac>
 8006f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f7f9 fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d033      	beq.n	8006fc0 <_printf_float+0x26c>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	4a35      	ldr	r2, [pc, #212]	@ (8007034 <_printf_float+0x2e0>)
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af51 	beq.w	8006e0a <_printf_float+0xb6>
 8006f68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006f6c:	4543      	cmp	r3, r8
 8006f6e:	db02      	blt.n	8006f76 <_printf_float+0x222>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	07d8      	lsls	r0, r3, #31
 8006f74:	d50f      	bpl.n	8006f96 <_printf_float+0x242>
 8006f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f af42 	beq.w	8006e0a <_printf_float+0xb6>
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f8e:	f104 0a1a 	add.w	sl, r4, #26
 8006f92:	45c8      	cmp	r8, r9
 8006f94:	dc09      	bgt.n	8006faa <_printf_float+0x256>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	079b      	lsls	r3, r3, #30
 8006f9a:	f100 8102 	bmi.w	80071a2 <_printf_float+0x44e>
 8006f9e:	68e0      	ldr	r0, [r4, #12]
 8006fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fa2:	4298      	cmp	r0, r3
 8006fa4:	bfb8      	it	lt
 8006fa6:	4618      	movlt	r0, r3
 8006fa8:	e731      	b.n	8006e0e <_printf_float+0xba>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f af28 	beq.w	8006e0a <_printf_float+0xb6>
 8006fba:	f109 0901 	add.w	r9, r9, #1
 8006fbe:	e7e8      	b.n	8006f92 <_printf_float+0x23e>
 8006fc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dc38      	bgt.n	8007038 <_printf_float+0x2e4>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	4a19      	ldr	r2, [pc, #100]	@ (8007034 <_printf_float+0x2e0>)
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f af1a 	beq.w	8006e0a <_printf_float+0xb6>
 8006fd6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006fda:	ea59 0303 	orrs.w	r3, r9, r3
 8006fde:	d102      	bne.n	8006fe6 <_printf_float+0x292>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d5d7      	bpl.n	8006f96 <_printf_float+0x242>
 8006fe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f43f af0a 	beq.w	8006e0a <_printf_float+0xb6>
 8006ff6:	f04f 0a00 	mov.w	sl, #0
 8006ffa:	f104 0b1a 	add.w	fp, r4, #26
 8006ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007000:	425b      	negs	r3, r3
 8007002:	4553      	cmp	r3, sl
 8007004:	dc01      	bgt.n	800700a <_printf_float+0x2b6>
 8007006:	464b      	mov	r3, r9
 8007008:	e793      	b.n	8006f32 <_printf_float+0x1de>
 800700a:	2301      	movs	r3, #1
 800700c:	465a      	mov	r2, fp
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f aef8 	beq.w	8006e0a <_printf_float+0xb6>
 800701a:	f10a 0a01 	add.w	sl, sl, #1
 800701e:	e7ee      	b.n	8006ffe <_printf_float+0x2aa>
 8007020:	7fefffff 	.word	0x7fefffff
 8007024:	0800999a 	.word	0x0800999a
 8007028:	0800999e 	.word	0x0800999e
 800702c:	080099a2 	.word	0x080099a2
 8007030:	080099a6 	.word	0x080099a6
 8007034:	080099aa 	.word	0x080099aa
 8007038:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800703a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800703e:	4553      	cmp	r3, sl
 8007040:	bfa8      	it	ge
 8007042:	4653      	movge	r3, sl
 8007044:	2b00      	cmp	r3, #0
 8007046:	4699      	mov	r9, r3
 8007048:	dc36      	bgt.n	80070b8 <_printf_float+0x364>
 800704a:	f04f 0b00 	mov.w	fp, #0
 800704e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007052:	f104 021a 	add.w	r2, r4, #26
 8007056:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007058:	930a      	str	r3, [sp, #40]	@ 0x28
 800705a:	eba3 0309 	sub.w	r3, r3, r9
 800705e:	455b      	cmp	r3, fp
 8007060:	dc31      	bgt.n	80070c6 <_printf_float+0x372>
 8007062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007064:	459a      	cmp	sl, r3
 8007066:	dc3a      	bgt.n	80070de <_printf_float+0x38a>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	07da      	lsls	r2, r3, #31
 800706c:	d437      	bmi.n	80070de <_printf_float+0x38a>
 800706e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007070:	ebaa 0903 	sub.w	r9, sl, r3
 8007074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007076:	ebaa 0303 	sub.w	r3, sl, r3
 800707a:	4599      	cmp	r9, r3
 800707c:	bfa8      	it	ge
 800707e:	4699      	movge	r9, r3
 8007080:	f1b9 0f00 	cmp.w	r9, #0
 8007084:	dc33      	bgt.n	80070ee <_printf_float+0x39a>
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800708e:	f104 0b1a 	add.w	fp, r4, #26
 8007092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007094:	ebaa 0303 	sub.w	r3, sl, r3
 8007098:	eba3 0309 	sub.w	r3, r3, r9
 800709c:	4543      	cmp	r3, r8
 800709e:	f77f af7a 	ble.w	8006f96 <_printf_float+0x242>
 80070a2:	2301      	movs	r3, #1
 80070a4:	465a      	mov	r2, fp
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f aeac 	beq.w	8006e0a <_printf_float+0xb6>
 80070b2:	f108 0801 	add.w	r8, r8, #1
 80070b6:	e7ec      	b.n	8007092 <_printf_float+0x33e>
 80070b8:	4642      	mov	r2, r8
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	d1c2      	bne.n	800704a <_printf_float+0x2f6>
 80070c4:	e6a1      	b.n	8006e0a <_printf_float+0xb6>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	f43f ae9a 	beq.w	8006e0a <_printf_float+0xb6>
 80070d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070d8:	f10b 0b01 	add.w	fp, fp, #1
 80070dc:	e7bb      	b.n	8007056 <_printf_float+0x302>
 80070de:	4631      	mov	r1, r6
 80070e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b8      	blx	r7
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1c0      	bne.n	800706e <_printf_float+0x31a>
 80070ec:	e68d      	b.n	8006e0a <_printf_float+0xb6>
 80070ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f0:	464b      	mov	r3, r9
 80070f2:	4631      	mov	r1, r6
 80070f4:	4628      	mov	r0, r5
 80070f6:	4442      	add	r2, r8
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	d1c3      	bne.n	8007086 <_printf_float+0x332>
 80070fe:	e684      	b.n	8006e0a <_printf_float+0xb6>
 8007100:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007104:	f1ba 0f01 	cmp.w	sl, #1
 8007108:	dc01      	bgt.n	800710e <_printf_float+0x3ba>
 800710a:	07db      	lsls	r3, r3, #31
 800710c:	d536      	bpl.n	800717c <_printf_float+0x428>
 800710e:	2301      	movs	r3, #1
 8007110:	4642      	mov	r2, r8
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f ae76 	beq.w	8006e0a <_printf_float+0xb6>
 800711e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae6e 	beq.w	8006e0a <_printf_float+0xb6>
 800712e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800713a:	f7f9 fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800713e:	b9c0      	cbnz	r0, 8007172 <_printf_float+0x41e>
 8007140:	4653      	mov	r3, sl
 8007142:	f108 0201 	add.w	r2, r8, #1
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	d10c      	bne.n	800716a <_printf_float+0x416>
 8007150:	e65b      	b.n	8006e0a <_printf_float+0xb6>
 8007152:	2301      	movs	r3, #1
 8007154:	465a      	mov	r2, fp
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f ae54 	beq.w	8006e0a <_printf_float+0xb6>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	45d0      	cmp	r8, sl
 8007168:	dbf3      	blt.n	8007152 <_printf_float+0x3fe>
 800716a:	464b      	mov	r3, r9
 800716c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007170:	e6e0      	b.n	8006f34 <_printf_float+0x1e0>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	f104 0b1a 	add.w	fp, r4, #26
 800717a:	e7f4      	b.n	8007166 <_printf_float+0x412>
 800717c:	2301      	movs	r3, #1
 800717e:	4642      	mov	r2, r8
 8007180:	e7e1      	b.n	8007146 <_printf_float+0x3f2>
 8007182:	2301      	movs	r3, #1
 8007184:	464a      	mov	r2, r9
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	f43f ae3c 	beq.w	8006e0a <_printf_float+0xb6>
 8007192:	f108 0801 	add.w	r8, r8, #1
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800719a:	1a5b      	subs	r3, r3, r1
 800719c:	4543      	cmp	r3, r8
 800719e:	dcf0      	bgt.n	8007182 <_printf_float+0x42e>
 80071a0:	e6fd      	b.n	8006f9e <_printf_float+0x24a>
 80071a2:	f04f 0800 	mov.w	r8, #0
 80071a6:	f104 0919 	add.w	r9, r4, #25
 80071aa:	e7f4      	b.n	8007196 <_printf_float+0x442>

080071ac <_printf_common>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	4616      	mov	r6, r2
 80071b2:	4698      	mov	r8, r3
 80071b4:	688a      	ldr	r2, [r1, #8]
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	4607      	mov	r7, r0
 80071ba:	4293      	cmp	r3, r2
 80071bc:	bfb8      	it	lt
 80071be:	4613      	movlt	r3, r2
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071c6:	460c      	mov	r4, r1
 80071c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071cc:	b10a      	cbz	r2, 80071d2 <_printf_common+0x26>
 80071ce:	3301      	adds	r3, #1
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	0699      	lsls	r1, r3, #26
 80071d6:	bf42      	ittt	mi
 80071d8:	6833      	ldrmi	r3, [r6, #0]
 80071da:	3302      	addmi	r3, #2
 80071dc:	6033      	strmi	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	f015 0506 	ands.w	r5, r5, #6
 80071e4:	d106      	bne.n	80071f4 <_printf_common+0x48>
 80071e6:	f104 0a19 	add.w	sl, r4, #25
 80071ea:	68e3      	ldr	r3, [r4, #12]
 80071ec:	6832      	ldr	r2, [r6, #0]
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	42ab      	cmp	r3, r5
 80071f2:	dc2b      	bgt.n	800724c <_printf_common+0xa0>
 80071f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	3b00      	subs	r3, #0
 80071fc:	bf18      	it	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	0692      	lsls	r2, r2, #26
 8007202:	d430      	bmi.n	8007266 <_printf_common+0xba>
 8007204:	4641      	mov	r1, r8
 8007206:	4638      	mov	r0, r7
 8007208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800720c:	47c8      	blx	r9
 800720e:	3001      	adds	r0, #1
 8007210:	d023      	beq.n	800725a <_printf_common+0xae>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	f003 0306 	and.w	r3, r3, #6
 800721a:	2b04      	cmp	r3, #4
 800721c:	bf14      	ite	ne
 800721e:	2500      	movne	r5, #0
 8007220:	6833      	ldreq	r3, [r6, #0]
 8007222:	f04f 0600 	mov.w	r6, #0
 8007226:	bf08      	it	eq
 8007228:	68e5      	ldreq	r5, [r4, #12]
 800722a:	f104 041a 	add.w	r4, r4, #26
 800722e:	bf08      	it	eq
 8007230:	1aed      	subeq	r5, r5, r3
 8007232:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007236:	bf08      	it	eq
 8007238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800723c:	4293      	cmp	r3, r2
 800723e:	bfc4      	itt	gt
 8007240:	1a9b      	subgt	r3, r3, r2
 8007242:	18ed      	addgt	r5, r5, r3
 8007244:	42b5      	cmp	r5, r6
 8007246:	d11a      	bne.n	800727e <_printf_common+0xd2>
 8007248:	2000      	movs	r0, #0
 800724a:	e008      	b.n	800725e <_printf_common+0xb2>
 800724c:	2301      	movs	r3, #1
 800724e:	4652      	mov	r2, sl
 8007250:	4641      	mov	r1, r8
 8007252:	4638      	mov	r0, r7
 8007254:	47c8      	blx	r9
 8007256:	3001      	adds	r0, #1
 8007258:	d103      	bne.n	8007262 <_printf_common+0xb6>
 800725a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007262:	3501      	adds	r5, #1
 8007264:	e7c1      	b.n	80071ea <_printf_common+0x3e>
 8007266:	2030      	movs	r0, #48	@ 0x30
 8007268:	18e1      	adds	r1, r4, r3
 800726a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007274:	4422      	add	r2, r4
 8007276:	3302      	adds	r3, #2
 8007278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800727c:	e7c2      	b.n	8007204 <_printf_common+0x58>
 800727e:	2301      	movs	r3, #1
 8007280:	4622      	mov	r2, r4
 8007282:	4641      	mov	r1, r8
 8007284:	4638      	mov	r0, r7
 8007286:	47c8      	blx	r9
 8007288:	3001      	adds	r0, #1
 800728a:	d0e6      	beq.n	800725a <_printf_common+0xae>
 800728c:	3601      	adds	r6, #1
 800728e:	e7d9      	b.n	8007244 <_printf_common+0x98>

08007290 <_printf_i>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	7e0f      	ldrb	r7, [r1, #24]
 8007296:	4691      	mov	r9, r2
 8007298:	2f78      	cmp	r7, #120	@ 0x78
 800729a:	4680      	mov	r8, r0
 800729c:	460c      	mov	r4, r1
 800729e:	469a      	mov	sl, r3
 80072a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072a6:	d807      	bhi.n	80072b8 <_printf_i+0x28>
 80072a8:	2f62      	cmp	r7, #98	@ 0x62
 80072aa:	d80a      	bhi.n	80072c2 <_printf_i+0x32>
 80072ac:	2f00      	cmp	r7, #0
 80072ae:	f000 80d3 	beq.w	8007458 <_printf_i+0x1c8>
 80072b2:	2f58      	cmp	r7, #88	@ 0x58
 80072b4:	f000 80ba 	beq.w	800742c <_printf_i+0x19c>
 80072b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072c0:	e03a      	b.n	8007338 <_printf_i+0xa8>
 80072c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	d8f6      	bhi.n	80072b8 <_printf_i+0x28>
 80072ca:	a101      	add	r1, pc, #4	@ (adr r1, 80072d0 <_printf_i+0x40>)
 80072cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d0:	08007329 	.word	0x08007329
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	080072b9 	.word	0x080072b9
 80072dc:	080072b9 	.word	0x080072b9
 80072e0:	080072b9 	.word	0x080072b9
 80072e4:	080072b9 	.word	0x080072b9
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080072b9 	.word	0x080072b9
 80072f0:	080072b9 	.word	0x080072b9
 80072f4:	080072b9 	.word	0x080072b9
 80072f8:	080072b9 	.word	0x080072b9
 80072fc:	0800743f 	.word	0x0800743f
 8007300:	08007367 	.word	0x08007367
 8007304:	080073f9 	.word	0x080073f9
 8007308:	080072b9 	.word	0x080072b9
 800730c:	080072b9 	.word	0x080072b9
 8007310:	08007461 	.word	0x08007461
 8007314:	080072b9 	.word	0x080072b9
 8007318:	08007367 	.word	0x08007367
 800731c:	080072b9 	.word	0x080072b9
 8007320:	080072b9 	.word	0x080072b9
 8007324:	08007401 	.word	0x08007401
 8007328:	6833      	ldr	r3, [r6, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6032      	str	r2, [r6, #0]
 8007330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007338:	2301      	movs	r3, #1
 800733a:	e09e      	b.n	800747a <_printf_i+0x1ea>
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	6031      	str	r1, [r6, #0]
 8007344:	0606      	lsls	r6, r0, #24
 8007346:	d501      	bpl.n	800734c <_printf_i+0xbc>
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	e003      	b.n	8007354 <_printf_i+0xc4>
 800734c:	0645      	lsls	r5, r0, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0xb8>
 8007350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007354:	2d00      	cmp	r5, #0
 8007356:	da03      	bge.n	8007360 <_printf_i+0xd0>
 8007358:	232d      	movs	r3, #45	@ 0x2d
 800735a:	426d      	negs	r5, r5
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007360:	230a      	movs	r3, #10
 8007362:	4859      	ldr	r0, [pc, #356]	@ (80074c8 <_printf_i+0x238>)
 8007364:	e011      	b.n	800738a <_printf_i+0xfa>
 8007366:	6821      	ldr	r1, [r4, #0]
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	0608      	lsls	r0, r1, #24
 800736c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007370:	d402      	bmi.n	8007378 <_printf_i+0xe8>
 8007372:	0649      	lsls	r1, r1, #25
 8007374:	bf48      	it	mi
 8007376:	b2ad      	uxthmi	r5, r5
 8007378:	2f6f      	cmp	r7, #111	@ 0x6f
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	bf14      	ite	ne
 800737e:	230a      	movne	r3, #10
 8007380:	2308      	moveq	r3, #8
 8007382:	4851      	ldr	r0, [pc, #324]	@ (80074c8 <_printf_i+0x238>)
 8007384:	2100      	movs	r1, #0
 8007386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800738a:	6866      	ldr	r6, [r4, #4]
 800738c:	2e00      	cmp	r6, #0
 800738e:	bfa8      	it	ge
 8007390:	6821      	ldrge	r1, [r4, #0]
 8007392:	60a6      	str	r6, [r4, #8]
 8007394:	bfa4      	itt	ge
 8007396:	f021 0104 	bicge.w	r1, r1, #4
 800739a:	6021      	strge	r1, [r4, #0]
 800739c:	b90d      	cbnz	r5, 80073a2 <_printf_i+0x112>
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d04b      	beq.n	800743a <_printf_i+0x1aa>
 80073a2:	4616      	mov	r6, r2
 80073a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80073a8:	fb03 5711 	mls	r7, r3, r1, r5
 80073ac:	5dc7      	ldrb	r7, [r0, r7]
 80073ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b2:	462f      	mov	r7, r5
 80073b4:	42bb      	cmp	r3, r7
 80073b6:	460d      	mov	r5, r1
 80073b8:	d9f4      	bls.n	80073a4 <_printf_i+0x114>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d10b      	bne.n	80073d6 <_printf_i+0x146>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	07df      	lsls	r7, r3, #31
 80073c2:	d508      	bpl.n	80073d6 <_printf_i+0x146>
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	6861      	ldr	r1, [r4, #4]
 80073c8:	4299      	cmp	r1, r3
 80073ca:	bfde      	ittt	le
 80073cc:	2330      	movle	r3, #48	@ 0x30
 80073ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073d6:	1b92      	subs	r2, r2, r6
 80073d8:	6122      	str	r2, [r4, #16]
 80073da:	464b      	mov	r3, r9
 80073dc:	4621      	mov	r1, r4
 80073de:	4640      	mov	r0, r8
 80073e0:	f8cd a000 	str.w	sl, [sp]
 80073e4:	aa03      	add	r2, sp, #12
 80073e6:	f7ff fee1 	bl	80071ac <_printf_common>
 80073ea:	3001      	adds	r0, #1
 80073ec:	d14a      	bne.n	8007484 <_printf_i+0x1f4>
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f2:	b004      	add	sp, #16
 80073f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	f043 0320 	orr.w	r3, r3, #32
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	2778      	movs	r7, #120	@ 0x78
 8007402:	4832      	ldr	r0, [pc, #200]	@ (80074cc <_printf_i+0x23c>)
 8007404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	061f      	lsls	r7, r3, #24
 800740e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007412:	d402      	bmi.n	800741a <_printf_i+0x18a>
 8007414:	065f      	lsls	r7, r3, #25
 8007416:	bf48      	it	mi
 8007418:	b2ad      	uxthmi	r5, r5
 800741a:	6031      	str	r1, [r6, #0]
 800741c:	07d9      	lsls	r1, r3, #31
 800741e:	bf44      	itt	mi
 8007420:	f043 0320 	orrmi.w	r3, r3, #32
 8007424:	6023      	strmi	r3, [r4, #0]
 8007426:	b11d      	cbz	r5, 8007430 <_printf_i+0x1a0>
 8007428:	2310      	movs	r3, #16
 800742a:	e7ab      	b.n	8007384 <_printf_i+0xf4>
 800742c:	4826      	ldr	r0, [pc, #152]	@ (80074c8 <_printf_i+0x238>)
 800742e:	e7e9      	b.n	8007404 <_printf_i+0x174>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	f023 0320 	bic.w	r3, r3, #32
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	e7f6      	b.n	8007428 <_printf_i+0x198>
 800743a:	4616      	mov	r6, r2
 800743c:	e7bd      	b.n	80073ba <_printf_i+0x12a>
 800743e:	6833      	ldr	r3, [r6, #0]
 8007440:	6825      	ldr	r5, [r4, #0]
 8007442:	1d18      	adds	r0, r3, #4
 8007444:	6961      	ldr	r1, [r4, #20]
 8007446:	6030      	str	r0, [r6, #0]
 8007448:	062e      	lsls	r6, r5, #24
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	d501      	bpl.n	8007452 <_printf_i+0x1c2>
 800744e:	6019      	str	r1, [r3, #0]
 8007450:	e002      	b.n	8007458 <_printf_i+0x1c8>
 8007452:	0668      	lsls	r0, r5, #25
 8007454:	d5fb      	bpl.n	800744e <_printf_i+0x1be>
 8007456:	8019      	strh	r1, [r3, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	4616      	mov	r6, r2
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	e7bc      	b.n	80073da <_printf_i+0x14a>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	2100      	movs	r1, #0
 8007464:	1d1a      	adds	r2, r3, #4
 8007466:	6032      	str	r2, [r6, #0]
 8007468:	681e      	ldr	r6, [r3, #0]
 800746a:	6862      	ldr	r2, [r4, #4]
 800746c:	4630      	mov	r0, r6
 800746e:	f000 fa32 	bl	80078d6 <memchr>
 8007472:	b108      	cbz	r0, 8007478 <_printf_i+0x1e8>
 8007474:	1b80      	subs	r0, r0, r6
 8007476:	6060      	str	r0, [r4, #4]
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	2300      	movs	r3, #0
 800747e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007482:	e7aa      	b.n	80073da <_printf_i+0x14a>
 8007484:	4632      	mov	r2, r6
 8007486:	4649      	mov	r1, r9
 8007488:	4640      	mov	r0, r8
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	47d0      	blx	sl
 800748e:	3001      	adds	r0, #1
 8007490:	d0ad      	beq.n	80073ee <_printf_i+0x15e>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	079b      	lsls	r3, r3, #30
 8007496:	d413      	bmi.n	80074c0 <_printf_i+0x230>
 8007498:	68e0      	ldr	r0, [r4, #12]
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	4298      	cmp	r0, r3
 800749e:	bfb8      	it	lt
 80074a0:	4618      	movlt	r0, r3
 80074a2:	e7a6      	b.n	80073f2 <_printf_i+0x162>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4632      	mov	r2, r6
 80074a8:	4649      	mov	r1, r9
 80074aa:	4640      	mov	r0, r8
 80074ac:	47d0      	blx	sl
 80074ae:	3001      	adds	r0, #1
 80074b0:	d09d      	beq.n	80073ee <_printf_i+0x15e>
 80074b2:	3501      	adds	r5, #1
 80074b4:	68e3      	ldr	r3, [r4, #12]
 80074b6:	9903      	ldr	r1, [sp, #12]
 80074b8:	1a5b      	subs	r3, r3, r1
 80074ba:	42ab      	cmp	r3, r5
 80074bc:	dcf2      	bgt.n	80074a4 <_printf_i+0x214>
 80074be:	e7eb      	b.n	8007498 <_printf_i+0x208>
 80074c0:	2500      	movs	r5, #0
 80074c2:	f104 0619 	add.w	r6, r4, #25
 80074c6:	e7f5      	b.n	80074b4 <_printf_i+0x224>
 80074c8:	080099ac 	.word	0x080099ac
 80074cc:	080099bd 	.word	0x080099bd

080074d0 <std>:
 80074d0:	2300      	movs	r3, #0
 80074d2:	b510      	push	{r4, lr}
 80074d4:	4604      	mov	r4, r0
 80074d6:	e9c0 3300 	strd	r3, r3, [r0]
 80074da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074de:	6083      	str	r3, [r0, #8]
 80074e0:	8181      	strh	r1, [r0, #12]
 80074e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e4:	81c2      	strh	r2, [r0, #14]
 80074e6:	6183      	str	r3, [r0, #24]
 80074e8:	4619      	mov	r1, r3
 80074ea:	2208      	movs	r2, #8
 80074ec:	305c      	adds	r0, #92	@ 0x5c
 80074ee:	f000 f95a 	bl	80077a6 <memset>
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x58>)
 80074f4:	6224      	str	r4, [r4, #32]
 80074f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80074f8:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <std+0x5c>)
 80074fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007530 <std+0x60>)
 80074fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007500:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <std+0x64>)
 8007502:	6323      	str	r3, [r4, #48]	@ 0x30
 8007504:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <std+0x68>)
 8007506:	429c      	cmp	r4, r3
 8007508:	d006      	beq.n	8007518 <std+0x48>
 800750a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800750e:	4294      	cmp	r4, r2
 8007510:	d002      	beq.n	8007518 <std+0x48>
 8007512:	33d0      	adds	r3, #208	@ 0xd0
 8007514:	429c      	cmp	r4, r3
 8007516:	d105      	bne.n	8007524 <std+0x54>
 8007518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f000 b9ce 	b.w	80078c0 <__retarget_lock_init_recursive>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	08007721 	.word	0x08007721
 800752c:	08007743 	.word	0x08007743
 8007530:	0800777b 	.word	0x0800777b
 8007534:	0800779f 	.word	0x0800779f
 8007538:	20000460 	.word	0x20000460

0800753c <stdio_exit_handler>:
 800753c:	4a02      	ldr	r2, [pc, #8]	@ (8007548 <stdio_exit_handler+0xc>)
 800753e:	4903      	ldr	r1, [pc, #12]	@ (800754c <stdio_exit_handler+0x10>)
 8007540:	4803      	ldr	r0, [pc, #12]	@ (8007550 <stdio_exit_handler+0x14>)
 8007542:	f000 b87b 	b.w	800763c <_fwalk_sglue>
 8007546:	bf00      	nop
 8007548:	2000001c 	.word	0x2000001c
 800754c:	08009381 	.word	0x08009381
 8007550:	2000002c 	.word	0x2000002c

08007554 <cleanup_stdio>:
 8007554:	6841      	ldr	r1, [r0, #4]
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <cleanup_stdio+0x34>)
 8007558:	b510      	push	{r4, lr}
 800755a:	4299      	cmp	r1, r3
 800755c:	4604      	mov	r4, r0
 800755e:	d001      	beq.n	8007564 <cleanup_stdio+0x10>
 8007560:	f001 ff0e 	bl	8009380 <_fflush_r>
 8007564:	68a1      	ldr	r1, [r4, #8]
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <cleanup_stdio+0x38>)
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <cleanup_stdio+0x1e>
 800756c:	4620      	mov	r0, r4
 800756e:	f001 ff07 	bl	8009380 <_fflush_r>
 8007572:	68e1      	ldr	r1, [r4, #12]
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <cleanup_stdio+0x3c>)
 8007576:	4299      	cmp	r1, r3
 8007578:	d004      	beq.n	8007584 <cleanup_stdio+0x30>
 800757a:	4620      	mov	r0, r4
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f001 befe 	b.w	8009380 <_fflush_r>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	20000460 	.word	0x20000460
 800758c:	200004c8 	.word	0x200004c8
 8007590:	20000530 	.word	0x20000530

08007594 <global_stdio_init.part.0>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <global_stdio_init.part.0+0x30>)
 8007598:	4c0b      	ldr	r4, [pc, #44]	@ (80075c8 <global_stdio_init.part.0+0x34>)
 800759a:	4a0c      	ldr	r2, [pc, #48]	@ (80075cc <global_stdio_init.part.0+0x38>)
 800759c:	4620      	mov	r0, r4
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	2104      	movs	r1, #4
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7ff ff94 	bl	80074d0 <std>
 80075a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075ac:	2201      	movs	r2, #1
 80075ae:	2109      	movs	r1, #9
 80075b0:	f7ff ff8e 	bl	80074d0 <std>
 80075b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b8:	2202      	movs	r2, #2
 80075ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075be:	2112      	movs	r1, #18
 80075c0:	f7ff bf86 	b.w	80074d0 <std>
 80075c4:	20000598 	.word	0x20000598
 80075c8:	20000460 	.word	0x20000460
 80075cc:	0800753d 	.word	0x0800753d

080075d0 <__sfp_lock_acquire>:
 80075d0:	4801      	ldr	r0, [pc, #4]	@ (80075d8 <__sfp_lock_acquire+0x8>)
 80075d2:	f000 b976 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	200005a1 	.word	0x200005a1

080075dc <__sfp_lock_release>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__sfp_lock_release+0x8>)
 80075de:	f000 b971 	b.w	80078c4 <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	200005a1 	.word	0x200005a1

080075e8 <__sinit>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	f7ff fff0 	bl	80075d0 <__sfp_lock_acquire>
 80075f0:	6a23      	ldr	r3, [r4, #32]
 80075f2:	b11b      	cbz	r3, 80075fc <__sinit+0x14>
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f7ff bff0 	b.w	80075dc <__sfp_lock_release>
 80075fc:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__sinit+0x28>)
 80075fe:	6223      	str	r3, [r4, #32]
 8007600:	4b04      	ldr	r3, [pc, #16]	@ (8007614 <__sinit+0x2c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f5      	bne.n	80075f4 <__sinit+0xc>
 8007608:	f7ff ffc4 	bl	8007594 <global_stdio_init.part.0>
 800760c:	e7f2      	b.n	80075f4 <__sinit+0xc>
 800760e:	bf00      	nop
 8007610:	08007555 	.word	0x08007555
 8007614:	20000598 	.word	0x20000598

08007618 <fiprintf>:
 8007618:	b40e      	push	{r1, r2, r3}
 800761a:	b503      	push	{r0, r1, lr}
 800761c:	4601      	mov	r1, r0
 800761e:	ab03      	add	r3, sp, #12
 8007620:	4805      	ldr	r0, [pc, #20]	@ (8007638 <fiprintf+0x20>)
 8007622:	f853 2b04 	ldr.w	r2, [r3], #4
 8007626:	6800      	ldr	r0, [r0, #0]
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	f001 fd11 	bl	8009050 <_vfiprintf_r>
 800762e:	b002      	add	sp, #8
 8007630:	f85d eb04 	ldr.w	lr, [sp], #4
 8007634:	b003      	add	sp, #12
 8007636:	4770      	bx	lr
 8007638:	20000028 	.word	0x20000028

0800763c <_fwalk_sglue>:
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	4607      	mov	r7, r0
 8007642:	4688      	mov	r8, r1
 8007644:	4614      	mov	r4, r2
 8007646:	2600      	movs	r6, #0
 8007648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800764c:	f1b9 0901 	subs.w	r9, r9, #1
 8007650:	d505      	bpl.n	800765e <_fwalk_sglue+0x22>
 8007652:	6824      	ldr	r4, [r4, #0]
 8007654:	2c00      	cmp	r4, #0
 8007656:	d1f7      	bne.n	8007648 <_fwalk_sglue+0xc>
 8007658:	4630      	mov	r0, r6
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d907      	bls.n	8007674 <_fwalk_sglue+0x38>
 8007664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007668:	3301      	adds	r3, #1
 800766a:	d003      	beq.n	8007674 <_fwalk_sglue+0x38>
 800766c:	4629      	mov	r1, r5
 800766e:	4638      	mov	r0, r7
 8007670:	47c0      	blx	r8
 8007672:	4306      	orrs	r6, r0
 8007674:	3568      	adds	r5, #104	@ 0x68
 8007676:	e7e9      	b.n	800764c <_fwalk_sglue+0x10>

08007678 <sniprintf>:
 8007678:	b40c      	push	{r2, r3}
 800767a:	b530      	push	{r4, r5, lr}
 800767c:	4b17      	ldr	r3, [pc, #92]	@ (80076dc <sniprintf+0x64>)
 800767e:	1e0c      	subs	r4, r1, #0
 8007680:	681d      	ldr	r5, [r3, #0]
 8007682:	b09d      	sub	sp, #116	@ 0x74
 8007684:	da08      	bge.n	8007698 <sniprintf+0x20>
 8007686:	238b      	movs	r3, #139	@ 0x8b
 8007688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	b01d      	add	sp, #116	@ 0x74
 8007690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007694:	b002      	add	sp, #8
 8007696:	4770      	bx	lr
 8007698:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800769c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076a0:	bf0c      	ite	eq
 80076a2:	4623      	moveq	r3, r4
 80076a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076b0:	9002      	str	r0, [sp, #8]
 80076b2:	9006      	str	r0, [sp, #24]
 80076b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076b8:	4628      	mov	r0, r5
 80076ba:	ab21      	add	r3, sp, #132	@ 0x84
 80076bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076be:	a902      	add	r1, sp, #8
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	f001 fba1 	bl	8008e08 <_svfiprintf_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	bfbc      	itt	lt
 80076ca:	238b      	movlt	r3, #139	@ 0x8b
 80076cc:	602b      	strlt	r3, [r5, #0]
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	d0dd      	beq.n	800768e <sniprintf+0x16>
 80076d2:	2200      	movs	r2, #0
 80076d4:	9b02      	ldr	r3, [sp, #8]
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	e7d9      	b.n	800768e <sniprintf+0x16>
 80076da:	bf00      	nop
 80076dc:	20000028 	.word	0x20000028

080076e0 <siprintf>:
 80076e0:	b40e      	push	{r1, r2, r3}
 80076e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076e6:	b500      	push	{lr}
 80076e8:	b09c      	sub	sp, #112	@ 0x70
 80076ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80076ec:	9002      	str	r0, [sp, #8]
 80076ee:	9006      	str	r0, [sp, #24]
 80076f0:	9107      	str	r1, [sp, #28]
 80076f2:	9104      	str	r1, [sp, #16]
 80076f4:	4808      	ldr	r0, [pc, #32]	@ (8007718 <siprintf+0x38>)
 80076f6:	4909      	ldr	r1, [pc, #36]	@ (800771c <siprintf+0x3c>)
 80076f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fc:	9105      	str	r1, [sp, #20]
 80076fe:	6800      	ldr	r0, [r0, #0]
 8007700:	a902      	add	r1, sp, #8
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	f001 fb80 	bl	8008e08 <_svfiprintf_r>
 8007708:	2200      	movs	r2, #0
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	b01c      	add	sp, #112	@ 0x70
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
 8007714:	b003      	add	sp, #12
 8007716:	4770      	bx	lr
 8007718:	20000028 	.word	0x20000028
 800771c:	ffff0208 	.word	0xffff0208

08007720 <__sread>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	f000 f86c 	bl	8007804 <_read_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	bfab      	itete	ge
 8007730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007732:	89a3      	ldrhlt	r3, [r4, #12]
 8007734:	181b      	addge	r3, r3, r0
 8007736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800773a:	bfac      	ite	ge
 800773c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800773e:	81a3      	strhlt	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__swrite>:
 8007742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	461f      	mov	r7, r3
 8007748:	898b      	ldrh	r3, [r1, #12]
 800774a:	4605      	mov	r5, r0
 800774c:	05db      	lsls	r3, r3, #23
 800774e:	460c      	mov	r4, r1
 8007750:	4616      	mov	r6, r2
 8007752:	d505      	bpl.n	8007760 <__swrite+0x1e>
 8007754:	2302      	movs	r3, #2
 8007756:	2200      	movs	r2, #0
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	f000 f840 	bl	80077e0 <_lseek_r>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	4632      	mov	r2, r6
 8007764:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	4628      	mov	r0, r5
 800776c:	463b      	mov	r3, r7
 800776e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	f000 b867 	b.w	8007848 <_write_r>

0800777a <__sseek>:
 800777a:	b510      	push	{r4, lr}
 800777c:	460c      	mov	r4, r1
 800777e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007782:	f000 f82d 	bl	80077e0 <_lseek_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	bf15      	itete	ne
 800778c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800778e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007796:	81a3      	strheq	r3, [r4, #12]
 8007798:	bf18      	it	ne
 800779a:	81a3      	strhne	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__sclose>:
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 b80d 	b.w	80077c0 <_close_r>

080077a6 <memset>:
 80077a6:	4603      	mov	r3, r0
 80077a8:	4402      	add	r2, r0
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d100      	bne.n	80077b0 <memset+0xa>
 80077ae:	4770      	bx	lr
 80077b0:	f803 1b01 	strb.w	r1, [r3], #1
 80077b4:	e7f9      	b.n	80077aa <memset+0x4>
	...

080077b8 <_localeconv_r>:
 80077b8:	4800      	ldr	r0, [pc, #0]	@ (80077bc <_localeconv_r+0x4>)
 80077ba:	4770      	bx	lr
 80077bc:	20000168 	.word	0x20000168

080077c0 <_close_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	2300      	movs	r3, #0
 80077c4:	4d05      	ldr	r5, [pc, #20]	@ (80077dc <_close_r+0x1c>)
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	f7fa fa3b 	bl	8001c46 <_close>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_close_r+0x1a>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_close_r+0x1a>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	2000059c 	.word	0x2000059c

080077e0 <_lseek_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	2200      	movs	r2, #0
 80077ea:	4d05      	ldr	r5, [pc, #20]	@ (8007800 <_lseek_r+0x20>)
 80077ec:	602a      	str	r2, [r5, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	f7fa fa4d 	bl	8001c8e <_lseek>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_lseek_r+0x1e>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_lseek_r+0x1e>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	2000059c 	.word	0x2000059c

08007804 <_read_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	2200      	movs	r2, #0
 800780e:	4d05      	ldr	r5, [pc, #20]	@ (8007824 <_read_r+0x20>)
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7fa f9de 	bl	8001bd4 <_read>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_read_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_read_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	2000059c 	.word	0x2000059c

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	2300      	movs	r3, #0
 800782c:	4d05      	ldr	r5, [pc, #20]	@ (8007844 <_sbrk_r+0x1c>)
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa fa38 	bl	8001ca8 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	2000059c 	.word	0x2000059c

08007848 <_write_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	2200      	movs	r2, #0
 8007852:	4d05      	ldr	r5, [pc, #20]	@ (8007868 <_write_r+0x20>)
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7fa f9d9 	bl	8001c0e <_write>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_write_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_write_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	2000059c 	.word	0x2000059c

0800786c <__errno>:
 800786c:	4b01      	ldr	r3, [pc, #4]	@ (8007874 <__errno+0x8>)
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000028 	.word	0x20000028

08007878 <__libc_init_array>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	2600      	movs	r6, #0
 800787c:	4d0c      	ldr	r5, [pc, #48]	@ (80078b0 <__libc_init_array+0x38>)
 800787e:	4c0d      	ldr	r4, [pc, #52]	@ (80078b4 <__libc_init_array+0x3c>)
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	42a6      	cmp	r6, r4
 8007886:	d109      	bne.n	800789c <__libc_init_array+0x24>
 8007888:	f001 ff80 	bl	800978c <_init>
 800788c:	2600      	movs	r6, #0
 800788e:	4d0a      	ldr	r5, [pc, #40]	@ (80078b8 <__libc_init_array+0x40>)
 8007890:	4c0a      	ldr	r4, [pc, #40]	@ (80078bc <__libc_init_array+0x44>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	42a6      	cmp	r6, r4
 8007898:	d105      	bne.n	80078a6 <__libc_init_array+0x2e>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a0:	4798      	blx	r3
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7ee      	b.n	8007884 <__libc_init_array+0xc>
 80078a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078aa:	4798      	blx	r3
 80078ac:	3601      	adds	r6, #1
 80078ae:	e7f2      	b.n	8007896 <__libc_init_array+0x1e>
 80078b0:	08009cd4 	.word	0x08009cd4
 80078b4:	08009cd4 	.word	0x08009cd4
 80078b8:	08009cd4 	.word	0x08009cd4
 80078bc:	08009cd8 	.word	0x08009cd8

080078c0 <__retarget_lock_init_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_acquire_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <__retarget_lock_release_recursive>:
 80078c4:	4770      	bx	lr

080078c6 <strcpy>:
 80078c6:	4603      	mov	r3, r0
 80078c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078cc:	f803 2b01 	strb.w	r2, [r3], #1
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	d1f9      	bne.n	80078c8 <strcpy+0x2>
 80078d4:	4770      	bx	lr

080078d6 <memchr>:
 80078d6:	4603      	mov	r3, r0
 80078d8:	b510      	push	{r4, lr}
 80078da:	b2c9      	uxtb	r1, r1
 80078dc:	4402      	add	r2, r0
 80078de:	4293      	cmp	r3, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	d101      	bne.n	80078e8 <memchr+0x12>
 80078e4:	2000      	movs	r0, #0
 80078e6:	e003      	b.n	80078f0 <memchr+0x1a>
 80078e8:	7804      	ldrb	r4, [r0, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	428c      	cmp	r4, r1
 80078ee:	d1f6      	bne.n	80078de <memchr+0x8>
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <memcpy>:
 80078f2:	440a      	add	r2, r1
 80078f4:	4291      	cmp	r1, r2
 80078f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80078fa:	d100      	bne.n	80078fe <memcpy+0xc>
 80078fc:	4770      	bx	lr
 80078fe:	b510      	push	{r4, lr}
 8007900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007904:	4291      	cmp	r1, r2
 8007906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800790a:	d1f9      	bne.n	8007900 <memcpy+0xe>
 800790c:	bd10      	pop	{r4, pc}

0800790e <abort>:
 800790e:	2006      	movs	r0, #6
 8007910:	b508      	push	{r3, lr}
 8007912:	f001 fe33 	bl	800957c <raise>
 8007916:	2001      	movs	r0, #1
 8007918:	f7fa f951 	bl	8001bbe <_exit>

0800791c <quorem>:
 800791c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	6903      	ldr	r3, [r0, #16]
 8007922:	690c      	ldr	r4, [r1, #16]
 8007924:	4607      	mov	r7, r0
 8007926:	42a3      	cmp	r3, r4
 8007928:	db7e      	blt.n	8007a28 <quorem+0x10c>
 800792a:	3c01      	subs	r4, #1
 800792c:	00a3      	lsls	r3, r4, #2
 800792e:	f100 0514 	add.w	r5, r0, #20
 8007932:	f101 0814 	add.w	r8, r1, #20
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007946:	3301      	adds	r3, #1
 8007948:	429a      	cmp	r2, r3
 800794a:	fbb2 f6f3 	udiv	r6, r2, r3
 800794e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007952:	d32e      	bcc.n	80079b2 <quorem+0x96>
 8007954:	f04f 0a00 	mov.w	sl, #0
 8007958:	46c4      	mov	ip, r8
 800795a:	46ae      	mov	lr, r5
 800795c:	46d3      	mov	fp, sl
 800795e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007962:	b298      	uxth	r0, r3
 8007964:	fb06 a000 	mla	r0, r6, r0, sl
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	0c02      	lsrs	r2, r0, #16
 800796c:	fb06 2303 	mla	r3, r6, r3, r2
 8007970:	f8de 2000 	ldr.w	r2, [lr]
 8007974:	b280      	uxth	r0, r0
 8007976:	b292      	uxth	r2, r2
 8007978:	1a12      	subs	r2, r2, r0
 800797a:	445a      	add	r2, fp
 800797c:	f8de 0000 	ldr.w	r0, [lr]
 8007980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007984:	b29b      	uxth	r3, r3
 8007986:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800798a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800798e:	b292      	uxth	r2, r2
 8007990:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007994:	45e1      	cmp	r9, ip
 8007996:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800799a:	f84e 2b04 	str.w	r2, [lr], #4
 800799e:	d2de      	bcs.n	800795e <quorem+0x42>
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	58eb      	ldr	r3, [r5, r3]
 80079a4:	b92b      	cbnz	r3, 80079b2 <quorem+0x96>
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	429d      	cmp	r5, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	d32f      	bcc.n	8007a10 <quorem+0xf4>
 80079b0:	613c      	str	r4, [r7, #16]
 80079b2:	4638      	mov	r0, r7
 80079b4:	f001 f8c4 	bl	8008b40 <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	db25      	blt.n	8007a08 <quorem+0xec>
 80079bc:	4629      	mov	r1, r5
 80079be:	2000      	movs	r0, #0
 80079c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079c4:	f8d1 c000 	ldr.w	ip, [r1]
 80079c8:	fa1f fe82 	uxth.w	lr, r2
 80079cc:	fa1f f38c 	uxth.w	r3, ip
 80079d0:	eba3 030e 	sub.w	r3, r3, lr
 80079d4:	4403      	add	r3, r0
 80079d6:	0c12      	lsrs	r2, r2, #16
 80079d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e6:	45c1      	cmp	r9, r8
 80079e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079ec:	f841 3b04 	str.w	r3, [r1], #4
 80079f0:	d2e6      	bcs.n	80079c0 <quorem+0xa4>
 80079f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079fa:	b922      	cbnz	r2, 8007a06 <quorem+0xea>
 80079fc:	3b04      	subs	r3, #4
 80079fe:	429d      	cmp	r5, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	d30b      	bcc.n	8007a1c <quorem+0x100>
 8007a04:	613c      	str	r4, [r7, #16]
 8007a06:	3601      	adds	r6, #1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	b003      	add	sp, #12
 8007a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	3b04      	subs	r3, #4
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	d1cb      	bne.n	80079b0 <quorem+0x94>
 8007a18:	3c01      	subs	r4, #1
 8007a1a:	e7c6      	b.n	80079aa <quorem+0x8e>
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d1ef      	bne.n	8007a04 <quorem+0xe8>
 8007a24:	3c01      	subs	r4, #1
 8007a26:	e7ea      	b.n	80079fe <quorem+0xe2>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7ee      	b.n	8007a0a <quorem+0xee>
 8007a2c:	0000      	movs	r0, r0
	...

08007a30 <_dtoa_r>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	4614      	mov	r4, r2
 8007a36:	461d      	mov	r5, r3
 8007a38:	69c7      	ldr	r7, [r0, #28]
 8007a3a:	b097      	sub	sp, #92	@ 0x5c
 8007a3c:	4683      	mov	fp, r0
 8007a3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a44:	b97f      	cbnz	r7, 8007a66 <_dtoa_r+0x36>
 8007a46:	2010      	movs	r0, #16
 8007a48:	f7ff f828 	bl	8006a9c <malloc>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a52:	b920      	cbnz	r0, 8007a5e <_dtoa_r+0x2e>
 8007a54:	21ef      	movs	r1, #239	@ 0xef
 8007a56:	4ba8      	ldr	r3, [pc, #672]	@ (8007cf8 <_dtoa_r+0x2c8>)
 8007a58:	48a8      	ldr	r0, [pc, #672]	@ (8007cfc <_dtoa_r+0x2cc>)
 8007a5a:	f7ff f801 	bl	8006a60 <__assert_func>
 8007a5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a62:	6007      	str	r7, [r0, #0]
 8007a64:	60c7      	str	r7, [r0, #12]
 8007a66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a6a:	6819      	ldr	r1, [r3, #0]
 8007a6c:	b159      	cbz	r1, 8007a86 <_dtoa_r+0x56>
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	2301      	movs	r3, #1
 8007a72:	4093      	lsls	r3, r2
 8007a74:	604a      	str	r2, [r1, #4]
 8007a76:	608b      	str	r3, [r1, #8]
 8007a78:	4658      	mov	r0, fp
 8007a7a:	f000 fe29 	bl	80086d0 <_Bfree>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	1e2b      	subs	r3, r5, #0
 8007a88:	bfaf      	iteee	ge
 8007a8a:	2300      	movge	r3, #0
 8007a8c:	2201      	movlt	r2, #1
 8007a8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a92:	9303      	strlt	r3, [sp, #12]
 8007a94:	bfa8      	it	ge
 8007a96:	6033      	strge	r3, [r6, #0]
 8007a98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a9c:	4b98      	ldr	r3, [pc, #608]	@ (8007d00 <_dtoa_r+0x2d0>)
 8007a9e:	bfb8      	it	lt
 8007aa0:	6032      	strlt	r2, [r6, #0]
 8007aa2:	ea33 0308 	bics.w	r3, r3, r8
 8007aa6:	d112      	bne.n	8007ace <_dtoa_r+0x9e>
 8007aa8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007aac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ab4:	4323      	orrs	r3, r4
 8007ab6:	f000 8550 	beq.w	800855a <_dtoa_r+0xb2a>
 8007aba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007abc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007d04 <_dtoa_r+0x2d4>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8552 	beq.w	800856a <_dtoa_r+0xb3a>
 8007ac6:	f10a 0303 	add.w	r3, sl, #3
 8007aca:	f000 bd4c 	b.w	8008566 <_dtoa_r+0xb36>
 8007ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ada:	2200      	movs	r2, #0
 8007adc:	2300      	movs	r3, #0
 8007ade:	f7f8 ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	b158      	cbz	r0, 8007afe <_dtoa_r+0xce>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007aee:	b113      	cbz	r3, 8007af6 <_dtoa_r+0xc6>
 8007af0:	4b85      	ldr	r3, [pc, #532]	@ (8007d08 <_dtoa_r+0x2d8>)
 8007af2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007d0c <_dtoa_r+0x2dc>
 8007afa:	f000 bd36 	b.w	800856a <_dtoa_r+0xb3a>
 8007afe:	ab14      	add	r3, sp, #80	@ 0x50
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	ab15      	add	r3, sp, #84	@ 0x54
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4658      	mov	r0, fp
 8007b08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b0c:	f001 f8c8 	bl	8008ca0 <__d2b>
 8007b10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b14:	4681      	mov	r9, r0
 8007b16:	2e00      	cmp	r6, #0
 8007b18:	d077      	beq.n	8007c0a <_dtoa_r+0x1da>
 8007b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b30:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b32:	4619      	mov	r1, r3
 8007b34:	2200      	movs	r2, #0
 8007b36:	4b76      	ldr	r3, [pc, #472]	@ (8007d10 <_dtoa_r+0x2e0>)
 8007b38:	f7f8 fb16 	bl	8000168 <__aeabi_dsub>
 8007b3c:	a368      	add	r3, pc, #416	@ (adr r3, 8007ce0 <_dtoa_r+0x2b0>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fcc9 	bl	80004d8 <__aeabi_dmul>
 8007b46:	a368      	add	r3, pc, #416	@ (adr r3, 8007ce8 <_dtoa_r+0x2b8>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 fb0e 	bl	800016c <__adddf3>
 8007b50:	4604      	mov	r4, r0
 8007b52:	4630      	mov	r0, r6
 8007b54:	460d      	mov	r5, r1
 8007b56:	f7f8 fc55 	bl	8000404 <__aeabi_i2d>
 8007b5a:	a365      	add	r3, pc, #404	@ (adr r3, 8007cf0 <_dtoa_r+0x2c0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fcba 	bl	80004d8 <__aeabi_dmul>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7f8 fafe 	bl	800016c <__adddf3>
 8007b70:	4604      	mov	r4, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	f7f8 ff60 	bl	8000a38 <__aeabi_d2iz>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ff1b 	bl	80009bc <__aeabi_dcmplt>
 8007b86:	b140      	cbz	r0, 8007b9a <_dtoa_r+0x16a>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7f8 fc3b 	bl	8000404 <__aeabi_i2d>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	462b      	mov	r3, r5
 8007b92:	f7f8 ff09 	bl	80009a8 <__aeabi_dcmpeq>
 8007b96:	b900      	cbnz	r0, 8007b9a <_dtoa_r+0x16a>
 8007b98:	3f01      	subs	r7, #1
 8007b9a:	2f16      	cmp	r7, #22
 8007b9c:	d853      	bhi.n	8007c46 <_dtoa_r+0x216>
 8007b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8007d14 <_dtoa_r+0x2e4>)
 8007ba4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 ff06 	bl	80009bc <__aeabi_dcmplt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d04a      	beq.n	8007c4a <_dtoa_r+0x21a>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bbc:	1b9b      	subs	r3, r3, r6
 8007bbe:	1e5a      	subs	r2, r3, #1
 8007bc0:	bf46      	itte	mi
 8007bc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007bc6:	2300      	movmi	r3, #0
 8007bc8:	f04f 0800 	movpl.w	r8, #0
 8007bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bce:	bf48      	it	mi
 8007bd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	db3b      	blt.n	8007c4e <_dtoa_r+0x21e>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007bda:	443b      	add	r3, r7
 8007bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bde:	2300      	movs	r3, #0
 8007be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d866      	bhi.n	8007cb6 <_dtoa_r+0x286>
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	bfc4      	itt	gt
 8007bec:	3b04      	subgt	r3, #4
 8007bee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007bf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bf2:	bfc8      	it	gt
 8007bf4:	2400      	movgt	r4, #0
 8007bf6:	f1a3 0302 	sub.w	r3, r3, #2
 8007bfa:	bfd8      	it	le
 8007bfc:	2401      	movle	r4, #1
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d864      	bhi.n	8007ccc <_dtoa_r+0x29c>
 8007c02:	e8df f003 	tbb	[pc, r3]
 8007c06:	382b      	.short	0x382b
 8007c08:	5636      	.short	0x5636
 8007c0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c0e:	441e      	add	r6, r3
 8007c10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	bfc1      	itttt	gt
 8007c18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c28:	bfd6      	itet	le
 8007c2a:	f1c3 0320 	rsble	r3, r3, #32
 8007c2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c32:	fa04 f003 	lslle.w	r0, r4, r3
 8007c36:	f7f8 fbd5 	bl	80003e4 <__aeabi_ui2d>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c40:	3e01      	subs	r6, #1
 8007c42:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c44:	e775      	b.n	8007b32 <_dtoa_r+0x102>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7b6      	b.n	8007bb8 <_dtoa_r+0x188>
 8007c4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c4c:	e7b5      	b.n	8007bba <_dtoa_r+0x18a>
 8007c4e:	427b      	negs	r3, r7
 8007c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c52:	2300      	movs	r3, #0
 8007c54:	eba8 0807 	sub.w	r8, r8, r7
 8007c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c5a:	e7c2      	b.n	8007be2 <_dtoa_r+0x1b2>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	dc35      	bgt.n	8007cd2 <_dtoa_r+0x2a2>
 8007c66:	2301      	movs	r3, #1
 8007c68:	461a      	mov	r2, r3
 8007c6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c70:	e00b      	b.n	8007c8a <_dtoa_r+0x25a>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7f3      	b.n	8007c5e <_dtoa_r+0x22e>
 8007c76:	2300      	movs	r3, #0
 8007c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c7c:	18fb      	adds	r3, r7, r3
 8007c7e:	9308      	str	r3, [sp, #32]
 8007c80:	3301      	adds	r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	9307      	str	r3, [sp, #28]
 8007c86:	bfb8      	it	lt
 8007c88:	2301      	movlt	r3, #1
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c92:	f102 0514 	add.w	r5, r2, #20
 8007c96:	429d      	cmp	r5, r3
 8007c98:	d91f      	bls.n	8007cda <_dtoa_r+0x2aa>
 8007c9a:	6041      	str	r1, [r0, #4]
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fcd7 	bl	8008650 <_Balloc>
 8007ca2:	4682      	mov	sl, r0
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d139      	bne.n	8007d1c <_dtoa_r+0x2ec>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cae:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <_dtoa_r+0x2e8>)
 8007cb0:	e6d2      	b.n	8007a58 <_dtoa_r+0x28>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e7e0      	b.n	8007c78 <_dtoa_r+0x248>
 8007cb6:	2401      	movs	r4, #1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cc8:	2312      	movs	r3, #18
 8007cca:	e7d0      	b.n	8007c6e <_dtoa_r+0x23e>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd0:	e7f5      	b.n	8007cbe <_dtoa_r+0x28e>
 8007cd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cd8:	e7d7      	b.n	8007c8a <_dtoa_r+0x25a>
 8007cda:	3101      	adds	r1, #1
 8007cdc:	0052      	lsls	r2, r2, #1
 8007cde:	e7d8      	b.n	8007c92 <_dtoa_r+0x262>
 8007ce0:	636f4361 	.word	0x636f4361
 8007ce4:	3fd287a7 	.word	0x3fd287a7
 8007ce8:	8b60c8b3 	.word	0x8b60c8b3
 8007cec:	3fc68a28 	.word	0x3fc68a28
 8007cf0:	509f79fb 	.word	0x509f79fb
 8007cf4:	3fd34413 	.word	0x3fd34413
 8007cf8:	080099db 	.word	0x080099db
 8007cfc:	080099f2 	.word	0x080099f2
 8007d00:	7ff00000 	.word	0x7ff00000
 8007d04:	080099d7 	.word	0x080099d7
 8007d08:	080099ab 	.word	0x080099ab
 8007d0c:	080099aa 	.word	0x080099aa
 8007d10:	3ff80000 	.word	0x3ff80000
 8007d14:	08009ae8 	.word	0x08009ae8
 8007d18:	08009a4a 	.word	0x08009a4a
 8007d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d20:	6018      	str	r0, [r3, #0]
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	2b0e      	cmp	r3, #14
 8007d26:	f200 80a4 	bhi.w	8007e72 <_dtoa_r+0x442>
 8007d2a:	2c00      	cmp	r4, #0
 8007d2c:	f000 80a1 	beq.w	8007e72 <_dtoa_r+0x442>
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	dd33      	ble.n	8007d9c <_dtoa_r+0x36c>
 8007d34:	4b86      	ldr	r3, [pc, #536]	@ (8007f50 <_dtoa_r+0x520>)
 8007d36:	f007 020f 	and.w	r2, r7, #15
 8007d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3e:	05f8      	lsls	r0, r7, #23
 8007d40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d4c:	d516      	bpl.n	8007d7c <_dtoa_r+0x34c>
 8007d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d52:	4b80      	ldr	r3, [pc, #512]	@ (8007f54 <_dtoa_r+0x524>)
 8007d54:	2603      	movs	r6, #3
 8007d56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d5a:	f7f8 fce7 	bl	800072c <__aeabi_ddiv>
 8007d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d62:	f004 040f 	and.w	r4, r4, #15
 8007d66:	4d7b      	ldr	r5, [pc, #492]	@ (8007f54 <_dtoa_r+0x524>)
 8007d68:	b954      	cbnz	r4, 8007d80 <_dtoa_r+0x350>
 8007d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d72:	f7f8 fcdb 	bl	800072c <__aeabi_ddiv>
 8007d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7a:	e028      	b.n	8007dce <_dtoa_r+0x39e>
 8007d7c:	2602      	movs	r6, #2
 8007d7e:	e7f2      	b.n	8007d66 <_dtoa_r+0x336>
 8007d80:	07e1      	lsls	r1, r4, #31
 8007d82:	d508      	bpl.n	8007d96 <_dtoa_r+0x366>
 8007d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d8c:	f7f8 fba4 	bl	80004d8 <__aeabi_dmul>
 8007d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d94:	3601      	adds	r6, #1
 8007d96:	1064      	asrs	r4, r4, #1
 8007d98:	3508      	adds	r5, #8
 8007d9a:	e7e5      	b.n	8007d68 <_dtoa_r+0x338>
 8007d9c:	f000 80d2 	beq.w	8007f44 <_dtoa_r+0x514>
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da4:	427c      	negs	r4, r7
 8007da6:	4b6a      	ldr	r3, [pc, #424]	@ (8007f50 <_dtoa_r+0x520>)
 8007da8:	f004 020f 	and.w	r2, r4, #15
 8007dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fb90 	bl	80004d8 <__aeabi_dmul>
 8007db8:	2602      	movs	r6, #2
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	4d64      	ldr	r5, [pc, #400]	@ (8007f54 <_dtoa_r+0x524>)
 8007dc2:	1124      	asrs	r4, r4, #4
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	f040 80b2 	bne.w	8007f2e <_dtoa_r+0x4fe>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1d3      	bne.n	8007d76 <_dtoa_r+0x346>
 8007dce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80b7 	beq.w	8007f48 <_dtoa_r+0x518>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f58 <_dtoa_r+0x528>)
 8007de2:	f7f8 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f000 80ae 	beq.w	8007f48 <_dtoa_r+0x518>
 8007dec:	9b07      	ldr	r3, [sp, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80aa 	beq.w	8007f48 <_dtoa_r+0x518>
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd37      	ble.n	8007e6a <_dtoa_r+0x43a>
 8007dfa:	1e7b      	subs	r3, r7, #1
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	2200      	movs	r2, #0
 8007e02:	4629      	mov	r1, r5
 8007e04:	4b55      	ldr	r3, [pc, #340]	@ (8007f5c <_dtoa_r+0x52c>)
 8007e06:	f7f8 fb67 	bl	80004d8 <__aeabi_dmul>
 8007e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0e:	9c08      	ldr	r4, [sp, #32]
 8007e10:	3601      	adds	r6, #1
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7f8 faf6 	bl	8000404 <__aeabi_i2d>
 8007e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e1c:	f7f8 fb5c 	bl	80004d8 <__aeabi_dmul>
 8007e20:	2200      	movs	r2, #0
 8007e22:	4b4f      	ldr	r3, [pc, #316]	@ (8007f60 <_dtoa_r+0x530>)
 8007e24:	f7f8 f9a2 	bl	800016c <__adddf3>
 8007e28:	4605      	mov	r5, r0
 8007e2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e2e:	2c00      	cmp	r4, #0
 8007e30:	f040 809a 	bne.w	8007f68 <_dtoa_r+0x538>
 8007e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f64 <_dtoa_r+0x534>)
 8007e3c:	f7f8 f994 	bl	8000168 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e48:	462a      	mov	r2, r5
 8007e4a:	4633      	mov	r3, r6
 8007e4c:	f7f8 fdd4 	bl	80009f8 <__aeabi_dcmpgt>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f040 828e 	bne.w	8008372 <_dtoa_r+0x942>
 8007e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e60:	f7f8 fdac 	bl	80009bc <__aeabi_dcmplt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 8127 	bne.w	80080b8 <_dtoa_r+0x688>
 8007e6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f2c0 8163 	blt.w	8008140 <_dtoa_r+0x710>
 8007e7a:	2f0e      	cmp	r7, #14
 8007e7c:	f300 8160 	bgt.w	8008140 <_dtoa_r+0x710>
 8007e80:	4b33      	ldr	r3, [pc, #204]	@ (8007f50 <_dtoa_r+0x520>)
 8007e82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	da03      	bge.n	8007e9c <_dtoa_r+0x46c>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f340 8100 	ble.w	800809c <_dtoa_r+0x66c>
 8007e9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ea0:	4656      	mov	r6, sl
 8007ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fc3f 	bl	800072c <__aeabi_ddiv>
 8007eae:	f7f8 fdc3 	bl	8000a38 <__aeabi_d2iz>
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	f7f8 faa6 	bl	8000404 <__aeabi_i2d>
 8007eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ebc:	f7f8 fb0c 	bl	80004d8 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f94e 	bl	8000168 <__aeabi_dsub>
 8007ecc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ed0:	9d07      	ldr	r5, [sp, #28]
 8007ed2:	f806 4b01 	strb.w	r4, [r6], #1
 8007ed6:	eba6 040a 	sub.w	r4, r6, sl
 8007eda:	42a5      	cmp	r5, r4
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	f040 8116 	bne.w	8008110 <_dtoa_r+0x6e0>
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eec:	4604      	mov	r4, r0
 8007eee:	460d      	mov	r5, r1
 8007ef0:	f7f8 fd82 	bl	80009f8 <__aeabi_dcmpgt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f040 80f8 	bne.w	80080ea <_dtoa_r+0x6ba>
 8007efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8007f06:	b118      	cbz	r0, 8007f10 <_dtoa_r+0x4e0>
 8007f08:	f018 0f01 	tst.w	r8, #1
 8007f0c:	f040 80ed 	bne.w	80080ea <_dtoa_r+0x6ba>
 8007f10:	4649      	mov	r1, r9
 8007f12:	4658      	mov	r0, fp
 8007f14:	f000 fbdc 	bl	80086d0 <_Bfree>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	7033      	strb	r3, [r6, #0]
 8007f1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f1e:	3701      	adds	r7, #1
 8007f20:	601f      	str	r7, [r3, #0]
 8007f22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8320 	beq.w	800856a <_dtoa_r+0xb3a>
 8007f2a:	601e      	str	r6, [r3, #0]
 8007f2c:	e31d      	b.n	800856a <_dtoa_r+0xb3a>
 8007f2e:	07e2      	lsls	r2, r4, #31
 8007f30:	d505      	bpl.n	8007f3e <_dtoa_r+0x50e>
 8007f32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f36:	f7f8 facf 	bl	80004d8 <__aeabi_dmul>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	1064      	asrs	r4, r4, #1
 8007f40:	3508      	adds	r5, #8
 8007f42:	e73f      	b.n	8007dc4 <_dtoa_r+0x394>
 8007f44:	2602      	movs	r6, #2
 8007f46:	e742      	b.n	8007dce <_dtoa_r+0x39e>
 8007f48:	9c07      	ldr	r4, [sp, #28]
 8007f4a:	9704      	str	r7, [sp, #16]
 8007f4c:	e761      	b.n	8007e12 <_dtoa_r+0x3e2>
 8007f4e:	bf00      	nop
 8007f50:	08009ae8 	.word	0x08009ae8
 8007f54:	08009ac0 	.word	0x08009ac0
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	40240000 	.word	0x40240000
 8007f60:	401c0000 	.word	0x401c0000
 8007f64:	40140000 	.word	0x40140000
 8007f68:	4b70      	ldr	r3, [pc, #448]	@ (800812c <_dtoa_r+0x6fc>)
 8007f6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f74:	4454      	add	r4, sl
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d045      	beq.n	8008006 <_dtoa_r+0x5d6>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	496c      	ldr	r1, [pc, #432]	@ (8008130 <_dtoa_r+0x700>)
 8007f7e:	f7f8 fbd5 	bl	800072c <__aeabi_ddiv>
 8007f82:	4633      	mov	r3, r6
 8007f84:	462a      	mov	r2, r5
 8007f86:	f7f8 f8ef 	bl	8000168 <__aeabi_dsub>
 8007f8a:	4656      	mov	r6, sl
 8007f8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f94:	f7f8 fd50 	bl	8000a38 <__aeabi_d2iz>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	f7f8 fa33 	bl	8000404 <__aeabi_i2d>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa6:	f7f8 f8df 	bl	8000168 <__aeabi_dsub>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	3530      	adds	r5, #48	@ 0x30
 8007fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fb8:	f806 5b01 	strb.w	r5, [r6], #1
 8007fbc:	f7f8 fcfe 	bl	80009bc <__aeabi_dcmplt>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d163      	bne.n	800808c <_dtoa_r+0x65c>
 8007fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc8:	2000      	movs	r0, #0
 8007fca:	495a      	ldr	r1, [pc, #360]	@ (8008134 <_dtoa_r+0x704>)
 8007fcc:	f7f8 f8cc 	bl	8000168 <__aeabi_dsub>
 8007fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fd4:	f7f8 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f040 8087 	bne.w	80080ec <_dtoa_r+0x6bc>
 8007fde:	42a6      	cmp	r6, r4
 8007fe0:	f43f af43 	beq.w	8007e6a <_dtoa_r+0x43a>
 8007fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4b53      	ldr	r3, [pc, #332]	@ (8008138 <_dtoa_r+0x708>)
 8007fec:	f7f8 fa74 	bl	80004d8 <__aeabi_dmul>
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8008138 <_dtoa_r+0x708>)
 8007ffc:	f7f8 fa6c 	bl	80004d8 <__aeabi_dmul>
 8008000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008004:	e7c4      	b.n	8007f90 <_dtoa_r+0x560>
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	f7f8 fa65 	bl	80004d8 <__aeabi_dmul>
 800800e:	4656      	mov	r6, sl
 8008010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008014:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 fd0d 	bl	8000a38 <__aeabi_d2iz>
 800801e:	4605      	mov	r5, r0
 8008020:	f7f8 f9f0 	bl	8000404 <__aeabi_i2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800802c:	f7f8 f89c 	bl	8000168 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	3530      	adds	r5, #48	@ 0x30
 8008036:	f806 5b01 	strb.w	r5, [r6], #1
 800803a:	42a6      	cmp	r6, r4
 800803c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	d124      	bne.n	8008090 <_dtoa_r+0x660>
 8008046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800804a:	4b39      	ldr	r3, [pc, #228]	@ (8008130 <_dtoa_r+0x700>)
 800804c:	f7f8 f88e 	bl	800016c <__adddf3>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008058:	f7f8 fcce 	bl	80009f8 <__aeabi_dcmpgt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d145      	bne.n	80080ec <_dtoa_r+0x6bc>
 8008060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008064:	2000      	movs	r0, #0
 8008066:	4932      	ldr	r1, [pc, #200]	@ (8008130 <_dtoa_r+0x700>)
 8008068:	f7f8 f87e 	bl	8000168 <__aeabi_dsub>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008074:	f7f8 fca2 	bl	80009bc <__aeabi_dcmplt>
 8008078:	2800      	cmp	r0, #0
 800807a:	f43f aef6 	beq.w	8007e6a <_dtoa_r+0x43a>
 800807e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008080:	1e73      	subs	r3, r6, #1
 8008082:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008084:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008088:	2b30      	cmp	r3, #48	@ 0x30
 800808a:	d0f8      	beq.n	800807e <_dtoa_r+0x64e>
 800808c:	9f04      	ldr	r7, [sp, #16]
 800808e:	e73f      	b.n	8007f10 <_dtoa_r+0x4e0>
 8008090:	4b29      	ldr	r3, [pc, #164]	@ (8008138 <_dtoa_r+0x708>)
 8008092:	f7f8 fa21 	bl	80004d8 <__aeabi_dmul>
 8008096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800809a:	e7bc      	b.n	8008016 <_dtoa_r+0x5e6>
 800809c:	d10c      	bne.n	80080b8 <_dtoa_r+0x688>
 800809e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080a2:	2200      	movs	r2, #0
 80080a4:	4b25      	ldr	r3, [pc, #148]	@ (800813c <_dtoa_r+0x70c>)
 80080a6:	f7f8 fa17 	bl	80004d8 <__aeabi_dmul>
 80080aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ae:	f7f8 fc99 	bl	80009e4 <__aeabi_dcmpge>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f000 815b 	beq.w	800836e <_dtoa_r+0x93e>
 80080b8:	2400      	movs	r4, #0
 80080ba:	4625      	mov	r5, r4
 80080bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080be:	4656      	mov	r6, sl
 80080c0:	43db      	mvns	r3, r3
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	2700      	movs	r7, #0
 80080c6:	4621      	mov	r1, r4
 80080c8:	4658      	mov	r0, fp
 80080ca:	f000 fb01 	bl	80086d0 <_Bfree>
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	d0dc      	beq.n	800808c <_dtoa_r+0x65c>
 80080d2:	b12f      	cbz	r7, 80080e0 <_dtoa_r+0x6b0>
 80080d4:	42af      	cmp	r7, r5
 80080d6:	d003      	beq.n	80080e0 <_dtoa_r+0x6b0>
 80080d8:	4639      	mov	r1, r7
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 faf8 	bl	80086d0 <_Bfree>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4658      	mov	r0, fp
 80080e4:	f000 faf4 	bl	80086d0 <_Bfree>
 80080e8:	e7d0      	b.n	800808c <_dtoa_r+0x65c>
 80080ea:	9704      	str	r7, [sp, #16]
 80080ec:	4633      	mov	r3, r6
 80080ee:	461e      	mov	r6, r3
 80080f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f4:	2a39      	cmp	r2, #57	@ 0x39
 80080f6:	d107      	bne.n	8008108 <_dtoa_r+0x6d8>
 80080f8:	459a      	cmp	sl, r3
 80080fa:	d1f8      	bne.n	80080ee <_dtoa_r+0x6be>
 80080fc:	9a04      	ldr	r2, [sp, #16]
 80080fe:	3201      	adds	r2, #1
 8008100:	9204      	str	r2, [sp, #16]
 8008102:	2230      	movs	r2, #48	@ 0x30
 8008104:	f88a 2000 	strb.w	r2, [sl]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	3201      	adds	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e7bd      	b.n	800808c <_dtoa_r+0x65c>
 8008110:	2200      	movs	r2, #0
 8008112:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <_dtoa_r+0x708>)
 8008114:	f7f8 f9e0 	bl	80004d8 <__aeabi_dmul>
 8008118:	2200      	movs	r2, #0
 800811a:	2300      	movs	r3, #0
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	f7f8 fc42 	bl	80009a8 <__aeabi_dcmpeq>
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f aebc 	beq.w	8007ea2 <_dtoa_r+0x472>
 800812a:	e6f1      	b.n	8007f10 <_dtoa_r+0x4e0>
 800812c:	08009ae8 	.word	0x08009ae8
 8008130:	3fe00000 	.word	0x3fe00000
 8008134:	3ff00000 	.word	0x3ff00000
 8008138:	40240000 	.word	0x40240000
 800813c:	40140000 	.word	0x40140000
 8008140:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008142:	2a00      	cmp	r2, #0
 8008144:	f000 80db 	beq.w	80082fe <_dtoa_r+0x8ce>
 8008148:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800814a:	2a01      	cmp	r2, #1
 800814c:	f300 80bf 	bgt.w	80082ce <_dtoa_r+0x89e>
 8008150:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008152:	2a00      	cmp	r2, #0
 8008154:	f000 80b7 	beq.w	80082c6 <_dtoa_r+0x896>
 8008158:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800815c:	4646      	mov	r6, r8
 800815e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008162:	2101      	movs	r1, #1
 8008164:	441a      	add	r2, r3
 8008166:	4658      	mov	r0, fp
 8008168:	4498      	add	r8, r3
 800816a:	9209      	str	r2, [sp, #36]	@ 0x24
 800816c:	f000 fb64 	bl	8008838 <__i2b>
 8008170:	4605      	mov	r5, r0
 8008172:	b15e      	cbz	r6, 800818c <_dtoa_r+0x75c>
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd08      	ble.n	800818c <_dtoa_r+0x75c>
 800817a:	42b3      	cmp	r3, r6
 800817c:	bfa8      	it	ge
 800817e:	4633      	movge	r3, r6
 8008180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008182:	eba8 0803 	sub.w	r8, r8, r3
 8008186:	1af6      	subs	r6, r6, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	9309      	str	r3, [sp, #36]	@ 0x24
 800818c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818e:	b1f3      	cbz	r3, 80081ce <_dtoa_r+0x79e>
 8008190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80b7 	beq.w	8008306 <_dtoa_r+0x8d6>
 8008198:	b18c      	cbz	r4, 80081be <_dtoa_r+0x78e>
 800819a:	4629      	mov	r1, r5
 800819c:	4622      	mov	r2, r4
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 fc08 	bl	80089b4 <__pow5mult>
 80081a4:	464a      	mov	r2, r9
 80081a6:	4601      	mov	r1, r0
 80081a8:	4605      	mov	r5, r0
 80081aa:	4658      	mov	r0, fp
 80081ac:	f000 fb5a 	bl	8008864 <__multiply>
 80081b0:	4649      	mov	r1, r9
 80081b2:	9004      	str	r0, [sp, #16]
 80081b4:	4658      	mov	r0, fp
 80081b6:	f000 fa8b 	bl	80086d0 <_Bfree>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	4699      	mov	r9, r3
 80081be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c0:	1b1a      	subs	r2, r3, r4
 80081c2:	d004      	beq.n	80081ce <_dtoa_r+0x79e>
 80081c4:	4649      	mov	r1, r9
 80081c6:	4658      	mov	r0, fp
 80081c8:	f000 fbf4 	bl	80089b4 <__pow5mult>
 80081cc:	4681      	mov	r9, r0
 80081ce:	2101      	movs	r1, #1
 80081d0:	4658      	mov	r0, fp
 80081d2:	f000 fb31 	bl	8008838 <__i2b>
 80081d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d8:	4604      	mov	r4, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 81c9 	beq.w	8008572 <_dtoa_r+0xb42>
 80081e0:	461a      	mov	r2, r3
 80081e2:	4601      	mov	r1, r0
 80081e4:	4658      	mov	r0, fp
 80081e6:	f000 fbe5 	bl	80089b4 <__pow5mult>
 80081ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081ec:	4604      	mov	r4, r0
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	f300 808f 	bgt.w	8008312 <_dtoa_r+0x8e2>
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 8087 	bne.w	800830a <_dtoa_r+0x8da>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 8083 	bne.w	800830e <_dtoa_r+0x8de>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800820e:	0d1b      	lsrs	r3, r3, #20
 8008210:	051b      	lsls	r3, r3, #20
 8008212:	b12b      	cbz	r3, 8008220 <_dtoa_r+0x7f0>
 8008214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008216:	f108 0801 	add.w	r8, r8, #1
 800821a:	3301      	adds	r3, #1
 800821c:	9309      	str	r3, [sp, #36]	@ 0x24
 800821e:	2301      	movs	r3, #1
 8008220:	930a      	str	r3, [sp, #40]	@ 0x28
 8008222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 81aa 	beq.w	800857e <_dtoa_r+0xb4e>
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008230:	6918      	ldr	r0, [r3, #16]
 8008232:	f000 fab5 	bl	80087a0 <__hi0bits>
 8008236:	f1c0 0020 	rsb	r0, r0, #32
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	4418      	add	r0, r3
 800823e:	f010 001f 	ands.w	r0, r0, #31
 8008242:	d071      	beq.n	8008328 <_dtoa_r+0x8f8>
 8008244:	f1c0 0320 	rsb	r3, r0, #32
 8008248:	2b04      	cmp	r3, #4
 800824a:	dd65      	ble.n	8008318 <_dtoa_r+0x8e8>
 800824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824e:	f1c0 001c 	rsb	r0, r0, #28
 8008252:	4403      	add	r3, r0
 8008254:	4480      	add	r8, r0
 8008256:	4406      	add	r6, r0
 8008258:	9309      	str	r3, [sp, #36]	@ 0x24
 800825a:	f1b8 0f00 	cmp.w	r8, #0
 800825e:	dd05      	ble.n	800826c <_dtoa_r+0x83c>
 8008260:	4649      	mov	r1, r9
 8008262:	4642      	mov	r2, r8
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fbff 	bl	8008a68 <__lshift>
 800826a:	4681      	mov	r9, r0
 800826c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd05      	ble.n	800827e <_dtoa_r+0x84e>
 8008272:	4621      	mov	r1, r4
 8008274:	461a      	mov	r2, r3
 8008276:	4658      	mov	r0, fp
 8008278:	f000 fbf6 	bl	8008a68 <__lshift>
 800827c:	4604      	mov	r4, r0
 800827e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d053      	beq.n	800832c <_dtoa_r+0x8fc>
 8008284:	4621      	mov	r1, r4
 8008286:	4648      	mov	r0, r9
 8008288:	f000 fc5a 	bl	8008b40 <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	da4d      	bge.n	800832c <_dtoa_r+0x8fc>
 8008290:	1e7b      	subs	r3, r7, #1
 8008292:	4649      	mov	r1, r9
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	220a      	movs	r2, #10
 8008298:	2300      	movs	r3, #0
 800829a:	4658      	mov	r0, fp
 800829c:	f000 fa3a 	bl	8008714 <__multadd>
 80082a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082a2:	4681      	mov	r9, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 816c 	beq.w	8008582 <_dtoa_r+0xb52>
 80082aa:	2300      	movs	r3, #0
 80082ac:	4629      	mov	r1, r5
 80082ae:	220a      	movs	r2, #10
 80082b0:	4658      	mov	r0, fp
 80082b2:	f000 fa2f 	bl	8008714 <__multadd>
 80082b6:	9b08      	ldr	r3, [sp, #32]
 80082b8:	4605      	mov	r5, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dc61      	bgt.n	8008382 <_dtoa_r+0x952>
 80082be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	dc3b      	bgt.n	800833c <_dtoa_r+0x90c>
 80082c4:	e05d      	b.n	8008382 <_dtoa_r+0x952>
 80082c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082cc:	e746      	b.n	800815c <_dtoa_r+0x72c>
 80082ce:	9b07      	ldr	r3, [sp, #28]
 80082d0:	1e5c      	subs	r4, r3, #1
 80082d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	bfbf      	itttt	lt
 80082d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80082dc:	1ae3      	sublt	r3, r4, r3
 80082de:	18d2      	addlt	r2, r2, r3
 80082e0:	bfa8      	it	ge
 80082e2:	1b1c      	subge	r4, r3, r4
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	bfbe      	ittt	lt
 80082e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80082ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80082ec:	2400      	movlt	r4, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfb5      	itete	lt
 80082f2:	eba8 0603 	sublt.w	r6, r8, r3
 80082f6:	4646      	movge	r6, r8
 80082f8:	2300      	movlt	r3, #0
 80082fa:	9b07      	ldrge	r3, [sp, #28]
 80082fc:	e730      	b.n	8008160 <_dtoa_r+0x730>
 80082fe:	4646      	mov	r6, r8
 8008300:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008302:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008304:	e735      	b.n	8008172 <_dtoa_r+0x742>
 8008306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008308:	e75c      	b.n	80081c4 <_dtoa_r+0x794>
 800830a:	2300      	movs	r3, #0
 800830c:	e788      	b.n	8008220 <_dtoa_r+0x7f0>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	e786      	b.n	8008220 <_dtoa_r+0x7f0>
 8008312:	2300      	movs	r3, #0
 8008314:	930a      	str	r3, [sp, #40]	@ 0x28
 8008316:	e788      	b.n	800822a <_dtoa_r+0x7fa>
 8008318:	d09f      	beq.n	800825a <_dtoa_r+0x82a>
 800831a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800831c:	331c      	adds	r3, #28
 800831e:	441a      	add	r2, r3
 8008320:	4498      	add	r8, r3
 8008322:	441e      	add	r6, r3
 8008324:	9209      	str	r2, [sp, #36]	@ 0x24
 8008326:	e798      	b.n	800825a <_dtoa_r+0x82a>
 8008328:	4603      	mov	r3, r0
 800832a:	e7f6      	b.n	800831a <_dtoa_r+0x8ea>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	9704      	str	r7, [sp, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc20      	bgt.n	8008376 <_dtoa_r+0x946>
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008338:	2b02      	cmp	r3, #2
 800833a:	dd1e      	ble.n	800837a <_dtoa_r+0x94a>
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f47f aebc 	bne.w	80080bc <_dtoa_r+0x68c>
 8008344:	4621      	mov	r1, r4
 8008346:	2205      	movs	r2, #5
 8008348:	4658      	mov	r0, fp
 800834a:	f000 f9e3 	bl	8008714 <__multadd>
 800834e:	4601      	mov	r1, r0
 8008350:	4604      	mov	r4, r0
 8008352:	4648      	mov	r0, r9
 8008354:	f000 fbf4 	bl	8008b40 <__mcmp>
 8008358:	2800      	cmp	r0, #0
 800835a:	f77f aeaf 	ble.w	80080bc <_dtoa_r+0x68c>
 800835e:	2331      	movs	r3, #49	@ 0x31
 8008360:	4656      	mov	r6, sl
 8008362:	f806 3b01 	strb.w	r3, [r6], #1
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	3301      	adds	r3, #1
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	e6aa      	b.n	80080c4 <_dtoa_r+0x694>
 800836e:	9c07      	ldr	r4, [sp, #28]
 8008370:	9704      	str	r7, [sp, #16]
 8008372:	4625      	mov	r5, r4
 8008374:	e7f3      	b.n	800835e <_dtoa_r+0x92e>
 8008376:	9b07      	ldr	r3, [sp, #28]
 8008378:	9308      	str	r3, [sp, #32]
 800837a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8104 	beq.w	800858a <_dtoa_r+0xb5a>
 8008382:	2e00      	cmp	r6, #0
 8008384:	dd05      	ble.n	8008392 <_dtoa_r+0x962>
 8008386:	4629      	mov	r1, r5
 8008388:	4632      	mov	r2, r6
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fb6c 	bl	8008a68 <__lshift>
 8008390:	4605      	mov	r5, r0
 8008392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d05a      	beq.n	800844e <_dtoa_r+0xa1e>
 8008398:	4658      	mov	r0, fp
 800839a:	6869      	ldr	r1, [r5, #4]
 800839c:	f000 f958 	bl	8008650 <_Balloc>
 80083a0:	4606      	mov	r6, r0
 80083a2:	b928      	cbnz	r0, 80083b0 <_dtoa_r+0x980>
 80083a4:	4602      	mov	r2, r0
 80083a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083aa:	4b83      	ldr	r3, [pc, #524]	@ (80085b8 <_dtoa_r+0xb88>)
 80083ac:	f7ff bb54 	b.w	8007a58 <_dtoa_r+0x28>
 80083b0:	692a      	ldr	r2, [r5, #16]
 80083b2:	f105 010c 	add.w	r1, r5, #12
 80083b6:	3202      	adds	r2, #2
 80083b8:	0092      	lsls	r2, r2, #2
 80083ba:	300c      	adds	r0, #12
 80083bc:	f7ff fa99 	bl	80078f2 <memcpy>
 80083c0:	2201      	movs	r2, #1
 80083c2:	4631      	mov	r1, r6
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fb4f 	bl	8008a68 <__lshift>
 80083ca:	462f      	mov	r7, r5
 80083cc:	4605      	mov	r5, r0
 80083ce:	f10a 0301 	add.w	r3, sl, #1
 80083d2:	9307      	str	r3, [sp, #28]
 80083d4:	9b08      	ldr	r3, [sp, #32]
 80083d6:	4453      	add	r3, sl
 80083d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083da:	9b02      	ldr	r3, [sp, #8]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083e2:	9b07      	ldr	r3, [sp, #28]
 80083e4:	4621      	mov	r1, r4
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4648      	mov	r0, r9
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	f7ff fa96 	bl	800791c <quorem>
 80083f0:	4639      	mov	r1, r7
 80083f2:	9008      	str	r0, [sp, #32]
 80083f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083f8:	4648      	mov	r0, r9
 80083fa:	f000 fba1 	bl	8008b40 <__mcmp>
 80083fe:	462a      	mov	r2, r5
 8008400:	9009      	str	r0, [sp, #36]	@ 0x24
 8008402:	4621      	mov	r1, r4
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fbb7 	bl	8008b78 <__mdiff>
 800840a:	68c2      	ldr	r2, [r0, #12]
 800840c:	4606      	mov	r6, r0
 800840e:	bb02      	cbnz	r2, 8008452 <_dtoa_r+0xa22>
 8008410:	4601      	mov	r1, r0
 8008412:	4648      	mov	r0, r9
 8008414:	f000 fb94 	bl	8008b40 <__mcmp>
 8008418:	4602      	mov	r2, r0
 800841a:	4631      	mov	r1, r6
 800841c:	4658      	mov	r0, fp
 800841e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008420:	f000 f956 	bl	80086d0 <_Bfree>
 8008424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008426:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008428:	9e07      	ldr	r6, [sp, #28]
 800842a:	ea43 0102 	orr.w	r1, r3, r2
 800842e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008430:	4319      	orrs	r1, r3
 8008432:	d110      	bne.n	8008456 <_dtoa_r+0xa26>
 8008434:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008438:	d029      	beq.n	800848e <_dtoa_r+0xa5e>
 800843a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	dd02      	ble.n	8008446 <_dtoa_r+0xa16>
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	f883 8000 	strb.w	r8, [r3]
 800844c:	e63b      	b.n	80080c6 <_dtoa_r+0x696>
 800844e:	4628      	mov	r0, r5
 8008450:	e7bb      	b.n	80083ca <_dtoa_r+0x99a>
 8008452:	2201      	movs	r2, #1
 8008454:	e7e1      	b.n	800841a <_dtoa_r+0x9ea>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	db04      	blt.n	8008466 <_dtoa_r+0xa36>
 800845c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800845e:	430b      	orrs	r3, r1
 8008460:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008462:	430b      	orrs	r3, r1
 8008464:	d120      	bne.n	80084a8 <_dtoa_r+0xa78>
 8008466:	2a00      	cmp	r2, #0
 8008468:	dded      	ble.n	8008446 <_dtoa_r+0xa16>
 800846a:	4649      	mov	r1, r9
 800846c:	2201      	movs	r2, #1
 800846e:	4658      	mov	r0, fp
 8008470:	f000 fafa 	bl	8008a68 <__lshift>
 8008474:	4621      	mov	r1, r4
 8008476:	4681      	mov	r9, r0
 8008478:	f000 fb62 	bl	8008b40 <__mcmp>
 800847c:	2800      	cmp	r0, #0
 800847e:	dc03      	bgt.n	8008488 <_dtoa_r+0xa58>
 8008480:	d1e1      	bne.n	8008446 <_dtoa_r+0xa16>
 8008482:	f018 0f01 	tst.w	r8, #1
 8008486:	d0de      	beq.n	8008446 <_dtoa_r+0xa16>
 8008488:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800848c:	d1d8      	bne.n	8008440 <_dtoa_r+0xa10>
 800848e:	2339      	movs	r3, #57	@ 0x39
 8008490:	9a02      	ldr	r2, [sp, #8]
 8008492:	7013      	strb	r3, [r2, #0]
 8008494:	4633      	mov	r3, r6
 8008496:	461e      	mov	r6, r3
 8008498:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800849c:	3b01      	subs	r3, #1
 800849e:	2a39      	cmp	r2, #57	@ 0x39
 80084a0:	d052      	beq.n	8008548 <_dtoa_r+0xb18>
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e60e      	b.n	80080c6 <_dtoa_r+0x696>
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	dd07      	ble.n	80084bc <_dtoa_r+0xa8c>
 80084ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084b0:	d0ed      	beq.n	800848e <_dtoa_r+0xa5e>
 80084b2:	9a02      	ldr	r2, [sp, #8]
 80084b4:	f108 0301 	add.w	r3, r8, #1
 80084b8:	7013      	strb	r3, [r2, #0]
 80084ba:	e604      	b.n	80080c6 <_dtoa_r+0x696>
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d028      	beq.n	800851c <_dtoa_r+0xaec>
 80084ca:	4649      	mov	r1, r9
 80084cc:	2300      	movs	r3, #0
 80084ce:	220a      	movs	r2, #10
 80084d0:	4658      	mov	r0, fp
 80084d2:	f000 f91f 	bl	8008714 <__multadd>
 80084d6:	42af      	cmp	r7, r5
 80084d8:	4681      	mov	r9, r0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	f04f 020a 	mov.w	r2, #10
 80084e2:	4639      	mov	r1, r7
 80084e4:	4658      	mov	r0, fp
 80084e6:	d107      	bne.n	80084f8 <_dtoa_r+0xac8>
 80084e8:	f000 f914 	bl	8008714 <__multadd>
 80084ec:	4607      	mov	r7, r0
 80084ee:	4605      	mov	r5, r0
 80084f0:	9b07      	ldr	r3, [sp, #28]
 80084f2:	3301      	adds	r3, #1
 80084f4:	9307      	str	r3, [sp, #28]
 80084f6:	e774      	b.n	80083e2 <_dtoa_r+0x9b2>
 80084f8:	f000 f90c 	bl	8008714 <__multadd>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4607      	mov	r7, r0
 8008500:	2300      	movs	r3, #0
 8008502:	220a      	movs	r2, #10
 8008504:	4658      	mov	r0, fp
 8008506:	f000 f905 	bl	8008714 <__multadd>
 800850a:	4605      	mov	r5, r0
 800850c:	e7f0      	b.n	80084f0 <_dtoa_r+0xac0>
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	2700      	movs	r7, #0
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfcc      	ite	gt
 8008516:	461e      	movgt	r6, r3
 8008518:	2601      	movle	r6, #1
 800851a:	4456      	add	r6, sl
 800851c:	4649      	mov	r1, r9
 800851e:	2201      	movs	r2, #1
 8008520:	4658      	mov	r0, fp
 8008522:	f000 faa1 	bl	8008a68 <__lshift>
 8008526:	4621      	mov	r1, r4
 8008528:	4681      	mov	r9, r0
 800852a:	f000 fb09 	bl	8008b40 <__mcmp>
 800852e:	2800      	cmp	r0, #0
 8008530:	dcb0      	bgt.n	8008494 <_dtoa_r+0xa64>
 8008532:	d102      	bne.n	800853a <_dtoa_r+0xb0a>
 8008534:	f018 0f01 	tst.w	r8, #1
 8008538:	d1ac      	bne.n	8008494 <_dtoa_r+0xa64>
 800853a:	4633      	mov	r3, r6
 800853c:	461e      	mov	r6, r3
 800853e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008542:	2a30      	cmp	r2, #48	@ 0x30
 8008544:	d0fa      	beq.n	800853c <_dtoa_r+0xb0c>
 8008546:	e5be      	b.n	80080c6 <_dtoa_r+0x696>
 8008548:	459a      	cmp	sl, r3
 800854a:	d1a4      	bne.n	8008496 <_dtoa_r+0xa66>
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	3301      	adds	r3, #1
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	2331      	movs	r3, #49	@ 0x31
 8008554:	f88a 3000 	strb.w	r3, [sl]
 8008558:	e5b5      	b.n	80080c6 <_dtoa_r+0x696>
 800855a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800855c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80085bc <_dtoa_r+0xb8c>
 8008560:	b11b      	cbz	r3, 800856a <_dtoa_r+0xb3a>
 8008562:	f10a 0308 	add.w	r3, sl, #8
 8008566:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4650      	mov	r0, sl
 800856c:	b017      	add	sp, #92	@ 0x5c
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008574:	2b01      	cmp	r3, #1
 8008576:	f77f ae3d 	ble.w	80081f4 <_dtoa_r+0x7c4>
 800857a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800857c:	930a      	str	r3, [sp, #40]	@ 0x28
 800857e:	2001      	movs	r0, #1
 8008580:	e65b      	b.n	800823a <_dtoa_r+0x80a>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f77f aed6 	ble.w	8008336 <_dtoa_r+0x906>
 800858a:	4656      	mov	r6, sl
 800858c:	4621      	mov	r1, r4
 800858e:	4648      	mov	r0, r9
 8008590:	f7ff f9c4 	bl	800791c <quorem>
 8008594:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008598:	9b08      	ldr	r3, [sp, #32]
 800859a:	f806 8b01 	strb.w	r8, [r6], #1
 800859e:	eba6 020a 	sub.w	r2, r6, sl
 80085a2:	4293      	cmp	r3, r2
 80085a4:	ddb3      	ble.n	800850e <_dtoa_r+0xade>
 80085a6:	4649      	mov	r1, r9
 80085a8:	2300      	movs	r3, #0
 80085aa:	220a      	movs	r2, #10
 80085ac:	4658      	mov	r0, fp
 80085ae:	f000 f8b1 	bl	8008714 <__multadd>
 80085b2:	4681      	mov	r9, r0
 80085b4:	e7ea      	b.n	800858c <_dtoa_r+0xb5c>
 80085b6:	bf00      	nop
 80085b8:	08009a4a 	.word	0x08009a4a
 80085bc:	080099ce 	.word	0x080099ce

080085c0 <_free_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4605      	mov	r5, r0
 80085c4:	2900      	cmp	r1, #0
 80085c6:	d040      	beq.n	800864a <_free_r+0x8a>
 80085c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085cc:	1f0c      	subs	r4, r1, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfb8      	it	lt
 80085d2:	18e4      	addlt	r4, r4, r3
 80085d4:	f7fe fb14 	bl	8006c00 <__malloc_lock>
 80085d8:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <_free_r+0x8c>)
 80085da:	6813      	ldr	r3, [r2, #0]
 80085dc:	b933      	cbnz	r3, 80085ec <_free_r+0x2c>
 80085de:	6063      	str	r3, [r4, #4]
 80085e0:	6014      	str	r4, [r2, #0]
 80085e2:	4628      	mov	r0, r5
 80085e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e8:	f7fe bb10 	b.w	8006c0c <__malloc_unlock>
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d908      	bls.n	8008602 <_free_r+0x42>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	1821      	adds	r1, r4, r0
 80085f4:	428b      	cmp	r3, r1
 80085f6:	bf01      	itttt	eq
 80085f8:	6819      	ldreq	r1, [r3, #0]
 80085fa:	685b      	ldreq	r3, [r3, #4]
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	e7ed      	b.n	80085de <_free_r+0x1e>
 8008602:	461a      	mov	r2, r3
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	b10b      	cbz	r3, 800860c <_free_r+0x4c>
 8008608:	42a3      	cmp	r3, r4
 800860a:	d9fa      	bls.n	8008602 <_free_r+0x42>
 800860c:	6811      	ldr	r1, [r2, #0]
 800860e:	1850      	adds	r0, r2, r1
 8008610:	42a0      	cmp	r0, r4
 8008612:	d10b      	bne.n	800862c <_free_r+0x6c>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	4401      	add	r1, r0
 8008618:	1850      	adds	r0, r2, r1
 800861a:	4283      	cmp	r3, r0
 800861c:	6011      	str	r1, [r2, #0]
 800861e:	d1e0      	bne.n	80085e2 <_free_r+0x22>
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	4408      	add	r0, r1
 8008626:	6010      	str	r0, [r2, #0]
 8008628:	6053      	str	r3, [r2, #4]
 800862a:	e7da      	b.n	80085e2 <_free_r+0x22>
 800862c:	d902      	bls.n	8008634 <_free_r+0x74>
 800862e:	230c      	movs	r3, #12
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	e7d6      	b.n	80085e2 <_free_r+0x22>
 8008634:	6820      	ldr	r0, [r4, #0]
 8008636:	1821      	adds	r1, r4, r0
 8008638:	428b      	cmp	r3, r1
 800863a:	bf01      	itttt	eq
 800863c:	6819      	ldreq	r1, [r3, #0]
 800863e:	685b      	ldreq	r3, [r3, #4]
 8008640:	1809      	addeq	r1, r1, r0
 8008642:	6021      	streq	r1, [r4, #0]
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	6054      	str	r4, [r2, #4]
 8008648:	e7cb      	b.n	80085e2 <_free_r+0x22>
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	2000045c 	.word	0x2000045c

08008650 <_Balloc>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	69c6      	ldr	r6, [r0, #28]
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	b976      	cbnz	r6, 8008678 <_Balloc+0x28>
 800865a:	2010      	movs	r0, #16
 800865c:	f7fe fa1e 	bl	8006a9c <malloc>
 8008660:	4602      	mov	r2, r0
 8008662:	61e0      	str	r0, [r4, #28]
 8008664:	b920      	cbnz	r0, 8008670 <_Balloc+0x20>
 8008666:	216b      	movs	r1, #107	@ 0x6b
 8008668:	4b17      	ldr	r3, [pc, #92]	@ (80086c8 <_Balloc+0x78>)
 800866a:	4818      	ldr	r0, [pc, #96]	@ (80086cc <_Balloc+0x7c>)
 800866c:	f7fe f9f8 	bl	8006a60 <__assert_func>
 8008670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008674:	6006      	str	r6, [r0, #0]
 8008676:	60c6      	str	r6, [r0, #12]
 8008678:	69e6      	ldr	r6, [r4, #28]
 800867a:	68f3      	ldr	r3, [r6, #12]
 800867c:	b183      	cbz	r3, 80086a0 <_Balloc+0x50>
 800867e:	69e3      	ldr	r3, [r4, #28]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008686:	b9b8      	cbnz	r0, 80086b8 <_Balloc+0x68>
 8008688:	2101      	movs	r1, #1
 800868a:	fa01 f605 	lsl.w	r6, r1, r5
 800868e:	1d72      	adds	r2, r6, #5
 8008690:	4620      	mov	r0, r4
 8008692:	0092      	lsls	r2, r2, #2
 8008694:	f000 ff8e 	bl	80095b4 <_calloc_r>
 8008698:	b160      	cbz	r0, 80086b4 <_Balloc+0x64>
 800869a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800869e:	e00e      	b.n	80086be <_Balloc+0x6e>
 80086a0:	2221      	movs	r2, #33	@ 0x21
 80086a2:	2104      	movs	r1, #4
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 ff85 	bl	80095b4 <_calloc_r>
 80086aa:	69e3      	ldr	r3, [r4, #28]
 80086ac:	60f0      	str	r0, [r6, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e4      	bne.n	800867e <_Balloc+0x2e>
 80086b4:	2000      	movs	r0, #0
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	6802      	ldr	r2, [r0, #0]
 80086ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086be:	2300      	movs	r3, #0
 80086c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086c4:	e7f7      	b.n	80086b6 <_Balloc+0x66>
 80086c6:	bf00      	nop
 80086c8:	080099db 	.word	0x080099db
 80086cc:	08009a5b 	.word	0x08009a5b

080086d0 <_Bfree>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	69c6      	ldr	r6, [r0, #28]
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	b976      	cbnz	r6, 80086f8 <_Bfree+0x28>
 80086da:	2010      	movs	r0, #16
 80086dc:	f7fe f9de 	bl	8006a9c <malloc>
 80086e0:	4602      	mov	r2, r0
 80086e2:	61e8      	str	r0, [r5, #28]
 80086e4:	b920      	cbnz	r0, 80086f0 <_Bfree+0x20>
 80086e6:	218f      	movs	r1, #143	@ 0x8f
 80086e8:	4b08      	ldr	r3, [pc, #32]	@ (800870c <_Bfree+0x3c>)
 80086ea:	4809      	ldr	r0, [pc, #36]	@ (8008710 <_Bfree+0x40>)
 80086ec:	f7fe f9b8 	bl	8006a60 <__assert_func>
 80086f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086f4:	6006      	str	r6, [r0, #0]
 80086f6:	60c6      	str	r6, [r0, #12]
 80086f8:	b13c      	cbz	r4, 800870a <_Bfree+0x3a>
 80086fa:	69eb      	ldr	r3, [r5, #28]
 80086fc:	6862      	ldr	r2, [r4, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008704:	6021      	str	r1, [r4, #0]
 8008706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	080099db 	.word	0x080099db
 8008710:	08009a5b 	.word	0x08009a5b

08008714 <__multadd>:
 8008714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	461e      	mov	r6, r3
 800871e:	2000      	movs	r0, #0
 8008720:	690d      	ldr	r5, [r1, #16]
 8008722:	f101 0c14 	add.w	ip, r1, #20
 8008726:	f8dc 3000 	ldr.w	r3, [ip]
 800872a:	3001      	adds	r0, #1
 800872c:	b299      	uxth	r1, r3
 800872e:	fb02 6101 	mla	r1, r2, r1, r6
 8008732:	0c1e      	lsrs	r6, r3, #16
 8008734:	0c0b      	lsrs	r3, r1, #16
 8008736:	fb02 3306 	mla	r3, r2, r6, r3
 800873a:	b289      	uxth	r1, r1
 800873c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008740:	4285      	cmp	r5, r0
 8008742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008746:	f84c 1b04 	str.w	r1, [ip], #4
 800874a:	dcec      	bgt.n	8008726 <__multadd+0x12>
 800874c:	b30e      	cbz	r6, 8008792 <__multadd+0x7e>
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	42ab      	cmp	r3, r5
 8008752:	dc19      	bgt.n	8008788 <__multadd+0x74>
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4638      	mov	r0, r7
 8008758:	3101      	adds	r1, #1
 800875a:	f7ff ff79 	bl	8008650 <_Balloc>
 800875e:	4680      	mov	r8, r0
 8008760:	b928      	cbnz	r0, 800876e <__multadd+0x5a>
 8008762:	4602      	mov	r2, r0
 8008764:	21ba      	movs	r1, #186	@ 0xba
 8008766:	4b0c      	ldr	r3, [pc, #48]	@ (8008798 <__multadd+0x84>)
 8008768:	480c      	ldr	r0, [pc, #48]	@ (800879c <__multadd+0x88>)
 800876a:	f7fe f979 	bl	8006a60 <__assert_func>
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	f104 010c 	add.w	r1, r4, #12
 8008774:	3202      	adds	r2, #2
 8008776:	0092      	lsls	r2, r2, #2
 8008778:	300c      	adds	r0, #12
 800877a:	f7ff f8ba 	bl	80078f2 <memcpy>
 800877e:	4621      	mov	r1, r4
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff ffa5 	bl	80086d0 <_Bfree>
 8008786:	4644      	mov	r4, r8
 8008788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800878c:	3501      	adds	r5, #1
 800878e:	615e      	str	r6, [r3, #20]
 8008790:	6125      	str	r5, [r4, #16]
 8008792:	4620      	mov	r0, r4
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	08009a4a 	.word	0x08009a4a
 800879c:	08009a5b 	.word	0x08009a5b

080087a0 <__hi0bits>:
 80087a0:	4603      	mov	r3, r0
 80087a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087a6:	bf3a      	itte	cc
 80087a8:	0403      	lslcc	r3, r0, #16
 80087aa:	2010      	movcc	r0, #16
 80087ac:	2000      	movcs	r0, #0
 80087ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087b2:	bf3c      	itt	cc
 80087b4:	021b      	lslcc	r3, r3, #8
 80087b6:	3008      	addcc	r0, #8
 80087b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087bc:	bf3c      	itt	cc
 80087be:	011b      	lslcc	r3, r3, #4
 80087c0:	3004      	addcc	r0, #4
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c6:	bf3c      	itt	cc
 80087c8:	009b      	lslcc	r3, r3, #2
 80087ca:	3002      	addcc	r0, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	db05      	blt.n	80087dc <__hi0bits+0x3c>
 80087d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80087d4:	f100 0001 	add.w	r0, r0, #1
 80087d8:	bf08      	it	eq
 80087da:	2020      	moveq	r0, #32
 80087dc:	4770      	bx	lr

080087de <__lo0bits>:
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	4602      	mov	r2, r0
 80087e2:	f013 0007 	ands.w	r0, r3, #7
 80087e6:	d00b      	beq.n	8008800 <__lo0bits+0x22>
 80087e8:	07d9      	lsls	r1, r3, #31
 80087ea:	d421      	bmi.n	8008830 <__lo0bits+0x52>
 80087ec:	0798      	lsls	r0, r3, #30
 80087ee:	bf49      	itett	mi
 80087f0:	085b      	lsrmi	r3, r3, #1
 80087f2:	089b      	lsrpl	r3, r3, #2
 80087f4:	2001      	movmi	r0, #1
 80087f6:	6013      	strmi	r3, [r2, #0]
 80087f8:	bf5c      	itt	pl
 80087fa:	2002      	movpl	r0, #2
 80087fc:	6013      	strpl	r3, [r2, #0]
 80087fe:	4770      	bx	lr
 8008800:	b299      	uxth	r1, r3
 8008802:	b909      	cbnz	r1, 8008808 <__lo0bits+0x2a>
 8008804:	2010      	movs	r0, #16
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	b2d9      	uxtb	r1, r3
 800880a:	b909      	cbnz	r1, 8008810 <__lo0bits+0x32>
 800880c:	3008      	adds	r0, #8
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	0719      	lsls	r1, r3, #28
 8008812:	bf04      	itt	eq
 8008814:	091b      	lsreq	r3, r3, #4
 8008816:	3004      	addeq	r0, #4
 8008818:	0799      	lsls	r1, r3, #30
 800881a:	bf04      	itt	eq
 800881c:	089b      	lsreq	r3, r3, #2
 800881e:	3002      	addeq	r0, #2
 8008820:	07d9      	lsls	r1, r3, #31
 8008822:	d403      	bmi.n	800882c <__lo0bits+0x4e>
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	f100 0001 	add.w	r0, r0, #1
 800882a:	d003      	beq.n	8008834 <__lo0bits+0x56>
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4770      	bx	lr
 8008830:	2000      	movs	r0, #0
 8008832:	4770      	bx	lr
 8008834:	2020      	movs	r0, #32
 8008836:	4770      	bx	lr

08008838 <__i2b>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	2101      	movs	r1, #1
 800883e:	f7ff ff07 	bl	8008650 <_Balloc>
 8008842:	4602      	mov	r2, r0
 8008844:	b928      	cbnz	r0, 8008852 <__i2b+0x1a>
 8008846:	f240 1145 	movw	r1, #325	@ 0x145
 800884a:	4b04      	ldr	r3, [pc, #16]	@ (800885c <__i2b+0x24>)
 800884c:	4804      	ldr	r0, [pc, #16]	@ (8008860 <__i2b+0x28>)
 800884e:	f7fe f907 	bl	8006a60 <__assert_func>
 8008852:	2301      	movs	r3, #1
 8008854:	6144      	str	r4, [r0, #20]
 8008856:	6103      	str	r3, [r0, #16]
 8008858:	bd10      	pop	{r4, pc}
 800885a:	bf00      	nop
 800885c:	08009a4a 	.word	0x08009a4a
 8008860:	08009a5b 	.word	0x08009a5b

08008864 <__multiply>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4614      	mov	r4, r2
 800886a:	690a      	ldr	r2, [r1, #16]
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	460f      	mov	r7, r1
 8008870:	429a      	cmp	r2, r3
 8008872:	bfa2      	ittt	ge
 8008874:	4623      	movge	r3, r4
 8008876:	460c      	movge	r4, r1
 8008878:	461f      	movge	r7, r3
 800887a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800887e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	6861      	ldr	r1, [r4, #4]
 8008886:	eb0a 0609 	add.w	r6, sl, r9
 800888a:	42b3      	cmp	r3, r6
 800888c:	b085      	sub	sp, #20
 800888e:	bfb8      	it	lt
 8008890:	3101      	addlt	r1, #1
 8008892:	f7ff fedd 	bl	8008650 <_Balloc>
 8008896:	b930      	cbnz	r0, 80088a6 <__multiply+0x42>
 8008898:	4602      	mov	r2, r0
 800889a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800889e:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <__multiply+0x148>)
 80088a0:	4843      	ldr	r0, [pc, #268]	@ (80089b0 <__multiply+0x14c>)
 80088a2:	f7fe f8dd 	bl	8006a60 <__assert_func>
 80088a6:	f100 0514 	add.w	r5, r0, #20
 80088aa:	462b      	mov	r3, r5
 80088ac:	2200      	movs	r2, #0
 80088ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088b2:	4543      	cmp	r3, r8
 80088b4:	d321      	bcc.n	80088fa <__multiply+0x96>
 80088b6:	f107 0114 	add.w	r1, r7, #20
 80088ba:	f104 0214 	add.w	r2, r4, #20
 80088be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80088c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	1b13      	subs	r3, r2, r4
 80088ca:	3b15      	subs	r3, #21
 80088cc:	f023 0303 	bic.w	r3, r3, #3
 80088d0:	3304      	adds	r3, #4
 80088d2:	f104 0715 	add.w	r7, r4, #21
 80088d6:	42ba      	cmp	r2, r7
 80088d8:	bf38      	it	cc
 80088da:	2304      	movcc	r3, #4
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	9103      	str	r1, [sp, #12]
 80088e2:	428b      	cmp	r3, r1
 80088e4:	d80c      	bhi.n	8008900 <__multiply+0x9c>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	dd03      	ble.n	80088f2 <__multiply+0x8e>
 80088ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d05a      	beq.n	80089a8 <__multiply+0x144>
 80088f2:	6106      	str	r6, [r0, #16]
 80088f4:	b005      	add	sp, #20
 80088f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fa:	f843 2b04 	str.w	r2, [r3], #4
 80088fe:	e7d8      	b.n	80088b2 <__multiply+0x4e>
 8008900:	f8b1 a000 	ldrh.w	sl, [r1]
 8008904:	f1ba 0f00 	cmp.w	sl, #0
 8008908:	d023      	beq.n	8008952 <__multiply+0xee>
 800890a:	46a9      	mov	r9, r5
 800890c:	f04f 0c00 	mov.w	ip, #0
 8008910:	f104 0e14 	add.w	lr, r4, #20
 8008914:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008918:	f8d9 3000 	ldr.w	r3, [r9]
 800891c:	fa1f fb87 	uxth.w	fp, r7
 8008920:	b29b      	uxth	r3, r3
 8008922:	fb0a 330b 	mla	r3, sl, fp, r3
 8008926:	4463      	add	r3, ip
 8008928:	f8d9 c000 	ldr.w	ip, [r9]
 800892c:	0c3f      	lsrs	r7, r7, #16
 800892e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008932:	fb0a c707 	mla	r7, sl, r7, ip
 8008936:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800893a:	b29b      	uxth	r3, r3
 800893c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008940:	4572      	cmp	r2, lr
 8008942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008946:	f849 3b04 	str.w	r3, [r9], #4
 800894a:	d8e3      	bhi.n	8008914 <__multiply+0xb0>
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	f845 c003 	str.w	ip, [r5, r3]
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	3104      	adds	r1, #4
 8008956:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800895a:	f1b9 0f00 	cmp.w	r9, #0
 800895e:	d021      	beq.n	80089a4 <__multiply+0x140>
 8008960:	46ae      	mov	lr, r5
 8008962:	f04f 0a00 	mov.w	sl, #0
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	f104 0c14 	add.w	ip, r4, #20
 800896c:	f8bc b000 	ldrh.w	fp, [ip]
 8008970:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008974:	b29b      	uxth	r3, r3
 8008976:	fb09 770b 	mla	r7, r9, fp, r7
 800897a:	4457      	add	r7, sl
 800897c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008980:	f84e 3b04 	str.w	r3, [lr], #4
 8008984:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800898c:	f8be 3000 	ldrh.w	r3, [lr]
 8008990:	4562      	cmp	r2, ip
 8008992:	fb09 330a 	mla	r3, r9, sl, r3
 8008996:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800899a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800899e:	d8e5      	bhi.n	800896c <__multiply+0x108>
 80089a0:	9f01      	ldr	r7, [sp, #4]
 80089a2:	51eb      	str	r3, [r5, r7]
 80089a4:	3504      	adds	r5, #4
 80089a6:	e79a      	b.n	80088de <__multiply+0x7a>
 80089a8:	3e01      	subs	r6, #1
 80089aa:	e79c      	b.n	80088e6 <__multiply+0x82>
 80089ac:	08009a4a 	.word	0x08009a4a
 80089b0:	08009a5b 	.word	0x08009a5b

080089b4 <__pow5mult>:
 80089b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b8:	4615      	mov	r5, r2
 80089ba:	f012 0203 	ands.w	r2, r2, #3
 80089be:	4607      	mov	r7, r0
 80089c0:	460e      	mov	r6, r1
 80089c2:	d007      	beq.n	80089d4 <__pow5mult+0x20>
 80089c4:	4c25      	ldr	r4, [pc, #148]	@ (8008a5c <__pow5mult+0xa8>)
 80089c6:	3a01      	subs	r2, #1
 80089c8:	2300      	movs	r3, #0
 80089ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089ce:	f7ff fea1 	bl	8008714 <__multadd>
 80089d2:	4606      	mov	r6, r0
 80089d4:	10ad      	asrs	r5, r5, #2
 80089d6:	d03d      	beq.n	8008a54 <__pow5mult+0xa0>
 80089d8:	69fc      	ldr	r4, [r7, #28]
 80089da:	b97c      	cbnz	r4, 80089fc <__pow5mult+0x48>
 80089dc:	2010      	movs	r0, #16
 80089de:	f7fe f85d 	bl	8006a9c <malloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	61f8      	str	r0, [r7, #28]
 80089e6:	b928      	cbnz	r0, 80089f4 <__pow5mult+0x40>
 80089e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008a60 <__pow5mult+0xac>)
 80089ee:	481d      	ldr	r0, [pc, #116]	@ (8008a64 <__pow5mult+0xb0>)
 80089f0:	f7fe f836 	bl	8006a60 <__assert_func>
 80089f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089f8:	6004      	str	r4, [r0, #0]
 80089fa:	60c4      	str	r4, [r0, #12]
 80089fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a04:	b94c      	cbnz	r4, 8008a1a <__pow5mult+0x66>
 8008a06:	f240 2171 	movw	r1, #625	@ 0x271
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f7ff ff14 	bl	8008838 <__i2b>
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a18:	6003      	str	r3, [r0, #0]
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	07eb      	lsls	r3, r5, #31
 8008a20:	d50a      	bpl.n	8008a38 <__pow5mult+0x84>
 8008a22:	4631      	mov	r1, r6
 8008a24:	4622      	mov	r2, r4
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7ff ff1c 	bl	8008864 <__multiply>
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff fe4d 	bl	80086d0 <_Bfree>
 8008a36:	4646      	mov	r6, r8
 8008a38:	106d      	asrs	r5, r5, #1
 8008a3a:	d00b      	beq.n	8008a54 <__pow5mult+0xa0>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	b938      	cbnz	r0, 8008a50 <__pow5mult+0x9c>
 8008a40:	4622      	mov	r2, r4
 8008a42:	4621      	mov	r1, r4
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff ff0d 	bl	8008864 <__multiply>
 8008a4a:	6020      	str	r0, [r4, #0]
 8008a4c:	f8c0 9000 	str.w	r9, [r0]
 8008a50:	4604      	mov	r4, r0
 8008a52:	e7e4      	b.n	8008a1e <__pow5mult+0x6a>
 8008a54:	4630      	mov	r0, r6
 8008a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08009ab4 	.word	0x08009ab4
 8008a60:	080099db 	.word	0x080099db
 8008a64:	08009a5b 	.word	0x08009a5b

08008a68 <__lshift>:
 8008a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	4607      	mov	r7, r0
 8008a70:	4691      	mov	r9, r2
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	6849      	ldr	r1, [r1, #4]
 8008a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a80:	f108 0601 	add.w	r6, r8, #1
 8008a84:	42b3      	cmp	r3, r6
 8008a86:	db0b      	blt.n	8008aa0 <__lshift+0x38>
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff fde1 	bl	8008650 <_Balloc>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b948      	cbnz	r0, 8008aa6 <__lshift+0x3e>
 8008a92:	4602      	mov	r2, r0
 8008a94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a98:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <__lshift+0xd0>)
 8008a9a:	4828      	ldr	r0, [pc, #160]	@ (8008b3c <__lshift+0xd4>)
 8008a9c:	f7fd ffe0 	bl	8006a60 <__assert_func>
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	e7ee      	b.n	8008a84 <__lshift+0x1c>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f100 0114 	add.w	r1, r0, #20
 8008aac:	f100 0210 	add.w	r2, r0, #16
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	4553      	cmp	r3, sl
 8008ab4:	db33      	blt.n	8008b1e <__lshift+0xb6>
 8008ab6:	6920      	ldr	r0, [r4, #16]
 8008ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008abc:	f104 0314 	add.w	r3, r4, #20
 8008ac0:	f019 091f 	ands.w	r9, r9, #31
 8008ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008acc:	d02b      	beq.n	8008b26 <__lshift+0xbe>
 8008ace:	468a      	mov	sl, r1
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	fa00 f009 	lsl.w	r0, r0, r9
 8008adc:	4310      	orrs	r0, r2
 8008ade:	f84a 0b04 	str.w	r0, [sl], #4
 8008ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae6:	459c      	cmp	ip, r3
 8008ae8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aec:	d8f3      	bhi.n	8008ad6 <__lshift+0x6e>
 8008aee:	ebac 0304 	sub.w	r3, ip, r4
 8008af2:	3b15      	subs	r3, #21
 8008af4:	f023 0303 	bic.w	r3, r3, #3
 8008af8:	3304      	adds	r3, #4
 8008afa:	f104 0015 	add.w	r0, r4, #21
 8008afe:	4584      	cmp	ip, r0
 8008b00:	bf38      	it	cc
 8008b02:	2304      	movcc	r3, #4
 8008b04:	50ca      	str	r2, [r1, r3]
 8008b06:	b10a      	cbz	r2, 8008b0c <__lshift+0xa4>
 8008b08:	f108 0602 	add.w	r6, r8, #2
 8008b0c:	3e01      	subs	r6, #1
 8008b0e:	4638      	mov	r0, r7
 8008b10:	4621      	mov	r1, r4
 8008b12:	612e      	str	r6, [r5, #16]
 8008b14:	f7ff fddc 	bl	80086d0 <_Bfree>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b22:	3301      	adds	r3, #1
 8008b24:	e7c5      	b.n	8008ab2 <__lshift+0x4a>
 8008b26:	3904      	subs	r1, #4
 8008b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2c:	459c      	cmp	ip, r3
 8008b2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b32:	d8f9      	bhi.n	8008b28 <__lshift+0xc0>
 8008b34:	e7ea      	b.n	8008b0c <__lshift+0xa4>
 8008b36:	bf00      	nop
 8008b38:	08009a4a 	.word	0x08009a4a
 8008b3c:	08009a5b 	.word	0x08009a5b

08008b40 <__mcmp>:
 8008b40:	4603      	mov	r3, r0
 8008b42:	690a      	ldr	r2, [r1, #16]
 8008b44:	6900      	ldr	r0, [r0, #16]
 8008b46:	b530      	push	{r4, r5, lr}
 8008b48:	1a80      	subs	r0, r0, r2
 8008b4a:	d10e      	bne.n	8008b6a <__mcmp+0x2a>
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	3114      	adds	r1, #20
 8008b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b60:	4295      	cmp	r5, r2
 8008b62:	d003      	beq.n	8008b6c <__mcmp+0x2c>
 8008b64:	d205      	bcs.n	8008b72 <__mcmp+0x32>
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b6a:	bd30      	pop	{r4, r5, pc}
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d3f3      	bcc.n	8008b58 <__mcmp+0x18>
 8008b70:	e7fb      	b.n	8008b6a <__mcmp+0x2a>
 8008b72:	2001      	movs	r0, #1
 8008b74:	e7f9      	b.n	8008b6a <__mcmp+0x2a>
	...

08008b78 <__mdiff>:
 8008b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	4689      	mov	r9, r1
 8008b7e:	4606      	mov	r6, r0
 8008b80:	4611      	mov	r1, r2
 8008b82:	4648      	mov	r0, r9
 8008b84:	4614      	mov	r4, r2
 8008b86:	f7ff ffdb 	bl	8008b40 <__mcmp>
 8008b8a:	1e05      	subs	r5, r0, #0
 8008b8c:	d112      	bne.n	8008bb4 <__mdiff+0x3c>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff fd5d 	bl	8008650 <_Balloc>
 8008b96:	4602      	mov	r2, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <__mdiff+0x2e>
 8008b9a:	f240 2137 	movw	r1, #567	@ 0x237
 8008b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c98 <__mdiff+0x120>)
 8008ba0:	483e      	ldr	r0, [pc, #248]	@ (8008c9c <__mdiff+0x124>)
 8008ba2:	f7fd ff5d 	bl	8006a60 <__assert_func>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bac:	4610      	mov	r0, r2
 8008bae:	b003      	add	sp, #12
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	bfbc      	itt	lt
 8008bb6:	464b      	movlt	r3, r9
 8008bb8:	46a1      	movlt	r9, r4
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008bc0:	bfba      	itte	lt
 8008bc2:	461c      	movlt	r4, r3
 8008bc4:	2501      	movlt	r5, #1
 8008bc6:	2500      	movge	r5, #0
 8008bc8:	f7ff fd42 	bl	8008650 <_Balloc>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	b918      	cbnz	r0, 8008bd8 <__mdiff+0x60>
 8008bd0:	f240 2145 	movw	r1, #581	@ 0x245
 8008bd4:	4b30      	ldr	r3, [pc, #192]	@ (8008c98 <__mdiff+0x120>)
 8008bd6:	e7e3      	b.n	8008ba0 <__mdiff+0x28>
 8008bd8:	f100 0b14 	add.w	fp, r0, #20
 8008bdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008be0:	f109 0310 	add.w	r3, r9, #16
 8008be4:	60c5      	str	r5, [r0, #12]
 8008be6:	f04f 0c00 	mov.w	ip, #0
 8008bea:	f109 0514 	add.w	r5, r9, #20
 8008bee:	46d9      	mov	r9, fp
 8008bf0:	6926      	ldr	r6, [r4, #16]
 8008bf2:	f104 0e14 	add.w	lr, r4, #20
 8008bf6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008bfa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c0a:	b281      	uxth	r1, r0
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	fa1f f38a 	uxth.w	r3, sl
 8008c12:	1a5b      	subs	r3, r3, r1
 8008c14:	0c00      	lsrs	r0, r0, #16
 8008c16:	4463      	add	r3, ip
 8008c18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c1c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c26:	4576      	cmp	r6, lr
 8008c28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c2c:	f849 3b04 	str.w	r3, [r9], #4
 8008c30:	d8e6      	bhi.n	8008c00 <__mdiff+0x88>
 8008c32:	1b33      	subs	r3, r6, r4
 8008c34:	3b15      	subs	r3, #21
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	3415      	adds	r4, #21
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	42a6      	cmp	r6, r4
 8008c40:	bf38      	it	cc
 8008c42:	2304      	movcc	r3, #4
 8008c44:	441d      	add	r5, r3
 8008c46:	445b      	add	r3, fp
 8008c48:	461e      	mov	r6, r3
 8008c4a:	462c      	mov	r4, r5
 8008c4c:	4544      	cmp	r4, r8
 8008c4e:	d30e      	bcc.n	8008c6e <__mdiff+0xf6>
 8008c50:	f108 0103 	add.w	r1, r8, #3
 8008c54:	1b49      	subs	r1, r1, r5
 8008c56:	f021 0103 	bic.w	r1, r1, #3
 8008c5a:	3d03      	subs	r5, #3
 8008c5c:	45a8      	cmp	r8, r5
 8008c5e:	bf38      	it	cc
 8008c60:	2100      	movcc	r1, #0
 8008c62:	440b      	add	r3, r1
 8008c64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c68:	b199      	cbz	r1, 8008c92 <__mdiff+0x11a>
 8008c6a:	6117      	str	r7, [r2, #16]
 8008c6c:	e79e      	b.n	8008bac <__mdiff+0x34>
 8008c6e:	46e6      	mov	lr, ip
 8008c70:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c74:	fa1f fc81 	uxth.w	ip, r1
 8008c78:	44f4      	add	ip, lr
 8008c7a:	0c08      	lsrs	r0, r1, #16
 8008c7c:	4471      	add	r1, lr
 8008c7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c82:	b289      	uxth	r1, r1
 8008c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c8c:	f846 1b04 	str.w	r1, [r6], #4
 8008c90:	e7dc      	b.n	8008c4c <__mdiff+0xd4>
 8008c92:	3f01      	subs	r7, #1
 8008c94:	e7e6      	b.n	8008c64 <__mdiff+0xec>
 8008c96:	bf00      	nop
 8008c98:	08009a4a 	.word	0x08009a4a
 8008c9c:	08009a5b 	.word	0x08009a5b

08008ca0 <__d2b>:
 8008ca0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4690      	mov	r8, r2
 8008ca8:	4699      	mov	r9, r3
 8008caa:	9e08      	ldr	r6, [sp, #32]
 8008cac:	f7ff fcd0 	bl	8008650 <_Balloc>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	b930      	cbnz	r0, 8008cc2 <__d2b+0x22>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cba:	4b23      	ldr	r3, [pc, #140]	@ (8008d48 <__d2b+0xa8>)
 8008cbc:	4823      	ldr	r0, [pc, #140]	@ (8008d4c <__d2b+0xac>)
 8008cbe:	f7fd fecf 	bl	8006a60 <__assert_func>
 8008cc2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cca:	b10d      	cbz	r5, 8008cd0 <__d2b+0x30>
 8008ccc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	f1b8 0300 	subs.w	r3, r8, #0
 8008cd6:	d024      	beq.n	8008d22 <__d2b+0x82>
 8008cd8:	4668      	mov	r0, sp
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	f7ff fd7f 	bl	80087de <__lo0bits>
 8008ce0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ce4:	b1d8      	cbz	r0, 8008d1e <__d2b+0x7e>
 8008ce6:	f1c0 0320 	rsb	r3, r0, #32
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	40c2      	lsrs	r2, r0
 8008cf2:	6163      	str	r3, [r4, #20]
 8008cf4:	9201      	str	r2, [sp, #4]
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2201      	moveq	r2, #1
 8008cfe:	2202      	movne	r2, #2
 8008d00:	61a3      	str	r3, [r4, #24]
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	b1ad      	cbz	r5, 8008d32 <__d2b+0x92>
 8008d06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d0a:	4405      	add	r5, r0
 8008d0c:	6035      	str	r5, [r6, #0]
 8008d0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d14:	6018      	str	r0, [r3, #0]
 8008d16:	4620      	mov	r0, r4
 8008d18:	b002      	add	sp, #8
 8008d1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d1e:	6161      	str	r1, [r4, #20]
 8008d20:	e7e9      	b.n	8008cf6 <__d2b+0x56>
 8008d22:	a801      	add	r0, sp, #4
 8008d24:	f7ff fd5b 	bl	80087de <__lo0bits>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	6163      	str	r3, [r4, #20]
 8008d2e:	3020      	adds	r0, #32
 8008d30:	e7e7      	b.n	8008d02 <__d2b+0x62>
 8008d32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d3a:	6030      	str	r0, [r6, #0]
 8008d3c:	6918      	ldr	r0, [r3, #16]
 8008d3e:	f7ff fd2f 	bl	80087a0 <__hi0bits>
 8008d42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d46:	e7e4      	b.n	8008d12 <__d2b+0x72>
 8008d48:	08009a4a 	.word	0x08009a4a
 8008d4c:	08009a5b 	.word	0x08009a5b

08008d50 <__ssputs_r>:
 8008d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	461f      	mov	r7, r3
 8008d56:	688e      	ldr	r6, [r1, #8]
 8008d58:	4682      	mov	sl, r0
 8008d5a:	42be      	cmp	r6, r7
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	4690      	mov	r8, r2
 8008d60:	680b      	ldr	r3, [r1, #0]
 8008d62:	d82d      	bhi.n	8008dc0 <__ssputs_r+0x70>
 8008d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d6c:	d026      	beq.n	8008dbc <__ssputs_r+0x6c>
 8008d6e:	6965      	ldr	r5, [r4, #20]
 8008d70:	6909      	ldr	r1, [r1, #16]
 8008d72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d76:	eba3 0901 	sub.w	r9, r3, r1
 8008d7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d7e:	1c7b      	adds	r3, r7, #1
 8008d80:	444b      	add	r3, r9
 8008d82:	106d      	asrs	r5, r5, #1
 8008d84:	429d      	cmp	r5, r3
 8008d86:	bf38      	it	cc
 8008d88:	461d      	movcc	r5, r3
 8008d8a:	0553      	lsls	r3, r2, #21
 8008d8c:	d527      	bpl.n	8008dde <__ssputs_r+0x8e>
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7fd feb6 	bl	8006b00 <_malloc_r>
 8008d94:	4606      	mov	r6, r0
 8008d96:	b360      	cbz	r0, 8008df2 <__ssputs_r+0xa2>
 8008d98:	464a      	mov	r2, r9
 8008d9a:	6921      	ldr	r1, [r4, #16]
 8008d9c:	f7fe fda9 	bl	80078f2 <memcpy>
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008daa:	81a3      	strh	r3, [r4, #12]
 8008dac:	6126      	str	r6, [r4, #16]
 8008dae:	444e      	add	r6, r9
 8008db0:	6026      	str	r6, [r4, #0]
 8008db2:	463e      	mov	r6, r7
 8008db4:	6165      	str	r5, [r4, #20]
 8008db6:	eba5 0509 	sub.w	r5, r5, r9
 8008dba:	60a5      	str	r5, [r4, #8]
 8008dbc:	42be      	cmp	r6, r7
 8008dbe:	d900      	bls.n	8008dc2 <__ssputs_r+0x72>
 8008dc0:	463e      	mov	r6, r7
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	6820      	ldr	r0, [r4, #0]
 8008dc8:	f000 fb96 	bl	80094f8 <memmove>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	1b9b      	subs	r3, r3, r6
 8008dd2:	60a3      	str	r3, [r4, #8]
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	4433      	add	r3, r6
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	462a      	mov	r2, r5
 8008de0:	f000 fc0e 	bl	8009600 <_realloc_r>
 8008de4:	4606      	mov	r6, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d1e0      	bne.n	8008dac <__ssputs_r+0x5c>
 8008dea:	4650      	mov	r0, sl
 8008dec:	6921      	ldr	r1, [r4, #16]
 8008dee:	f7ff fbe7 	bl	80085c0 <_free_r>
 8008df2:	230c      	movs	r3, #12
 8008df4:	f8ca 3000 	str.w	r3, [sl]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	e7e9      	b.n	8008dda <__ssputs_r+0x8a>
	...

08008e08 <_svfiprintf_r>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	4698      	mov	r8, r3
 8008e0e:	898b      	ldrh	r3, [r1, #12]
 8008e10:	4607      	mov	r7, r0
 8008e12:	061b      	lsls	r3, r3, #24
 8008e14:	460d      	mov	r5, r1
 8008e16:	4614      	mov	r4, r2
 8008e18:	b09d      	sub	sp, #116	@ 0x74
 8008e1a:	d510      	bpl.n	8008e3e <_svfiprintf_r+0x36>
 8008e1c:	690b      	ldr	r3, [r1, #16]
 8008e1e:	b973      	cbnz	r3, 8008e3e <_svfiprintf_r+0x36>
 8008e20:	2140      	movs	r1, #64	@ 0x40
 8008e22:	f7fd fe6d 	bl	8006b00 <_malloc_r>
 8008e26:	6028      	str	r0, [r5, #0]
 8008e28:	6128      	str	r0, [r5, #16]
 8008e2a:	b930      	cbnz	r0, 8008e3a <_svfiprintf_r+0x32>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e34:	b01d      	add	sp, #116	@ 0x74
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	2340      	movs	r3, #64	@ 0x40
 8008e3c:	616b      	str	r3, [r5, #20]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e42:	2320      	movs	r3, #32
 8008e44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e48:	2330      	movs	r3, #48	@ 0x30
 8008e4a:	f04f 0901 	mov.w	r9, #1
 8008e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e52:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008fec <_svfiprintf_r+0x1e4>
 8008e56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	469a      	mov	sl, r3
 8008e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e62:	b10a      	cbz	r2, 8008e68 <_svfiprintf_r+0x60>
 8008e64:	2a25      	cmp	r2, #37	@ 0x25
 8008e66:	d1f9      	bne.n	8008e5c <_svfiprintf_r+0x54>
 8008e68:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6c:	d00b      	beq.n	8008e86 <_svfiprintf_r+0x7e>
 8008e6e:	465b      	mov	r3, fp
 8008e70:	4622      	mov	r2, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff ff6b 	bl	8008d50 <__ssputs_r>
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f000 80a7 	beq.w	8008fce <_svfiprintf_r+0x1c6>
 8008e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e82:	445a      	add	r2, fp
 8008e84:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e86:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 809f 	beq.w	8008fce <_svfiprintf_r+0x1c6>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e9a:	f10a 0a01 	add.w	sl, sl, #1
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	9307      	str	r3, [sp, #28]
 8008ea2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ea6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ea8:	4654      	mov	r4, sl
 8008eaa:	2205      	movs	r2, #5
 8008eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb0:	484e      	ldr	r0, [pc, #312]	@ (8008fec <_svfiprintf_r+0x1e4>)
 8008eb2:	f7fe fd10 	bl	80078d6 <memchr>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	b9d8      	cbnz	r0, 8008ef2 <_svfiprintf_r+0xea>
 8008eba:	06d0      	lsls	r0, r2, #27
 8008ebc:	bf44      	itt	mi
 8008ebe:	2320      	movmi	r3, #32
 8008ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec4:	0711      	lsls	r1, r2, #28
 8008ec6:	bf44      	itt	mi
 8008ec8:	232b      	movmi	r3, #43	@ 0x2b
 8008eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed4:	d015      	beq.n	8008f02 <_svfiprintf_r+0xfa>
 8008ed6:	4654      	mov	r4, sl
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f04f 0c0a 	mov.w	ip, #10
 8008ede:	9a07      	ldr	r2, [sp, #28]
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee6:	3b30      	subs	r3, #48	@ 0x30
 8008ee8:	2b09      	cmp	r3, #9
 8008eea:	d94b      	bls.n	8008f84 <_svfiprintf_r+0x17c>
 8008eec:	b1b0      	cbz	r0, 8008f1c <_svfiprintf_r+0x114>
 8008eee:	9207      	str	r2, [sp, #28]
 8008ef0:	e014      	b.n	8008f1c <_svfiprintf_r+0x114>
 8008ef2:	eba0 0308 	sub.w	r3, r0, r8
 8008ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8008efa:	4313      	orrs	r3, r2
 8008efc:	46a2      	mov	sl, r4
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	e7d2      	b.n	8008ea8 <_svfiprintf_r+0xa0>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	9103      	str	r1, [sp, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfbb      	ittet	lt
 8008f0e:	425b      	neglt	r3, r3
 8008f10:	f042 0202 	orrlt.w	r2, r2, #2
 8008f14:	9307      	strge	r3, [sp, #28]
 8008f16:	9307      	strlt	r3, [sp, #28]
 8008f18:	bfb8      	it	lt
 8008f1a:	9204      	strlt	r2, [sp, #16]
 8008f1c:	7823      	ldrb	r3, [r4, #0]
 8008f1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f20:	d10a      	bne.n	8008f38 <_svfiprintf_r+0x130>
 8008f22:	7863      	ldrb	r3, [r4, #1]
 8008f24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f26:	d132      	bne.n	8008f8e <_svfiprintf_r+0x186>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	3402      	adds	r4, #2
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	9203      	str	r2, [sp, #12]
 8008f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f36:	9305      	str	r3, [sp, #20]
 8008f38:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ff0 <_svfiprintf_r+0x1e8>
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	4650      	mov	r0, sl
 8008f40:	7821      	ldrb	r1, [r4, #0]
 8008f42:	f7fe fcc8 	bl	80078d6 <memchr>
 8008f46:	b138      	cbz	r0, 8008f58 <_svfiprintf_r+0x150>
 8008f48:	2240      	movs	r2, #64	@ 0x40
 8008f4a:	9b04      	ldr	r3, [sp, #16]
 8008f4c:	eba0 000a 	sub.w	r0, r0, sl
 8008f50:	4082      	lsls	r2, r0
 8008f52:	4313      	orrs	r3, r2
 8008f54:	3401      	adds	r4, #1
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5c:	2206      	movs	r2, #6
 8008f5e:	4825      	ldr	r0, [pc, #148]	@ (8008ff4 <_svfiprintf_r+0x1ec>)
 8008f60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f64:	f7fe fcb7 	bl	80078d6 <memchr>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d036      	beq.n	8008fda <_svfiprintf_r+0x1d2>
 8008f6c:	4b22      	ldr	r3, [pc, #136]	@ (8008ff8 <_svfiprintf_r+0x1f0>)
 8008f6e:	bb1b      	cbnz	r3, 8008fb8 <_svfiprintf_r+0x1b0>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	3307      	adds	r3, #7
 8008f74:	f023 0307 	bic.w	r3, r3, #7
 8008f78:	3308      	adds	r3, #8
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7e:	4433      	add	r3, r6
 8008f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f82:	e76a      	b.n	8008e5a <_svfiprintf_r+0x52>
 8008f84:	460c      	mov	r4, r1
 8008f86:	2001      	movs	r0, #1
 8008f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f8c:	e7a8      	b.n	8008ee0 <_svfiprintf_r+0xd8>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f04f 0c0a 	mov.w	ip, #10
 8008f94:	4619      	mov	r1, r3
 8008f96:	3401      	adds	r4, #1
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa0:	3a30      	subs	r2, #48	@ 0x30
 8008fa2:	2a09      	cmp	r2, #9
 8008fa4:	d903      	bls.n	8008fae <_svfiprintf_r+0x1a6>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0c6      	beq.n	8008f38 <_svfiprintf_r+0x130>
 8008faa:	9105      	str	r1, [sp, #20]
 8008fac:	e7c4      	b.n	8008f38 <_svfiprintf_r+0x130>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb6:	e7f0      	b.n	8008f9a <_svfiprintf_r+0x192>
 8008fb8:	ab03      	add	r3, sp, #12
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008ffc <_svfiprintf_r+0x1f4>)
 8008fc2:	a904      	add	r1, sp, #16
 8008fc4:	f7fd fec6 	bl	8006d54 <_printf_float>
 8008fc8:	1c42      	adds	r2, r0, #1
 8008fca:	4606      	mov	r6, r0
 8008fcc:	d1d6      	bne.n	8008f7c <_svfiprintf_r+0x174>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	065b      	lsls	r3, r3, #25
 8008fd2:	f53f af2d 	bmi.w	8008e30 <_svfiprintf_r+0x28>
 8008fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fd8:	e72c      	b.n	8008e34 <_svfiprintf_r+0x2c>
 8008fda:	ab03      	add	r3, sp, #12
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	4b06      	ldr	r3, [pc, #24]	@ (8008ffc <_svfiprintf_r+0x1f4>)
 8008fe4:	a904      	add	r1, sp, #16
 8008fe6:	f7fe f953 	bl	8007290 <_printf_i>
 8008fea:	e7ed      	b.n	8008fc8 <_svfiprintf_r+0x1c0>
 8008fec:	08009bb0 	.word	0x08009bb0
 8008ff0:	08009bb6 	.word	0x08009bb6
 8008ff4:	08009bba 	.word	0x08009bba
 8008ff8:	08006d55 	.word	0x08006d55
 8008ffc:	08008d51 	.word	0x08008d51

08009000 <__sfputc_r>:
 8009000:	6893      	ldr	r3, [r2, #8]
 8009002:	b410      	push	{r4}
 8009004:	3b01      	subs	r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	6093      	str	r3, [r2, #8]
 800900a:	da07      	bge.n	800901c <__sfputc_r+0x1c>
 800900c:	6994      	ldr	r4, [r2, #24]
 800900e:	42a3      	cmp	r3, r4
 8009010:	db01      	blt.n	8009016 <__sfputc_r+0x16>
 8009012:	290a      	cmp	r1, #10
 8009014:	d102      	bne.n	800901c <__sfputc_r+0x1c>
 8009016:	bc10      	pop	{r4}
 8009018:	f000 b9da 	b.w	80093d0 <__swbuf_r>
 800901c:	6813      	ldr	r3, [r2, #0]
 800901e:	1c58      	adds	r0, r3, #1
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	7019      	strb	r1, [r3, #0]
 8009024:	4608      	mov	r0, r1
 8009026:	bc10      	pop	{r4}
 8009028:	4770      	bx	lr

0800902a <__sfputs_r>:
 800902a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	4614      	mov	r4, r2
 8009032:	18d5      	adds	r5, r2, r3
 8009034:	42ac      	cmp	r4, r5
 8009036:	d101      	bne.n	800903c <__sfputs_r+0x12>
 8009038:	2000      	movs	r0, #0
 800903a:	e007      	b.n	800904c <__sfputs_r+0x22>
 800903c:	463a      	mov	r2, r7
 800903e:	4630      	mov	r0, r6
 8009040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009044:	f7ff ffdc 	bl	8009000 <__sfputc_r>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d1f3      	bne.n	8009034 <__sfputs_r+0xa>
 800904c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009050 <_vfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	460d      	mov	r5, r1
 8009056:	4614      	mov	r4, r2
 8009058:	4698      	mov	r8, r3
 800905a:	4606      	mov	r6, r0
 800905c:	b09d      	sub	sp, #116	@ 0x74
 800905e:	b118      	cbz	r0, 8009068 <_vfiprintf_r+0x18>
 8009060:	6a03      	ldr	r3, [r0, #32]
 8009062:	b90b      	cbnz	r3, 8009068 <_vfiprintf_r+0x18>
 8009064:	f7fe fac0 	bl	80075e8 <__sinit>
 8009068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800906a:	07d9      	lsls	r1, r3, #31
 800906c:	d405      	bmi.n	800907a <_vfiprintf_r+0x2a>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	059a      	lsls	r2, r3, #22
 8009072:	d402      	bmi.n	800907a <_vfiprintf_r+0x2a>
 8009074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009076:	f7fe fc24 	bl	80078c2 <__retarget_lock_acquire_recursive>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	071b      	lsls	r3, r3, #28
 800907e:	d501      	bpl.n	8009084 <_vfiprintf_r+0x34>
 8009080:	692b      	ldr	r3, [r5, #16]
 8009082:	b99b      	cbnz	r3, 80090ac <_vfiprintf_r+0x5c>
 8009084:	4629      	mov	r1, r5
 8009086:	4630      	mov	r0, r6
 8009088:	f000 f9e0 	bl	800944c <__swsetup_r>
 800908c:	b170      	cbz	r0, 80090ac <_vfiprintf_r+0x5c>
 800908e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009090:	07dc      	lsls	r4, r3, #31
 8009092:	d504      	bpl.n	800909e <_vfiprintf_r+0x4e>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009098:	b01d      	add	sp, #116	@ 0x74
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	0598      	lsls	r0, r3, #22
 80090a2:	d4f7      	bmi.n	8009094 <_vfiprintf_r+0x44>
 80090a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090a6:	f7fe fc0d 	bl	80078c4 <__retarget_lock_release_recursive>
 80090aa:	e7f3      	b.n	8009094 <_vfiprintf_r+0x44>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80090b0:	2320      	movs	r3, #32
 80090b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090b6:	2330      	movs	r3, #48	@ 0x30
 80090b8:	f04f 0901 	mov.w	r9, #1
 80090bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800926c <_vfiprintf_r+0x21c>
 80090c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090c8:	4623      	mov	r3, r4
 80090ca:	469a      	mov	sl, r3
 80090cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d0:	b10a      	cbz	r2, 80090d6 <_vfiprintf_r+0x86>
 80090d2:	2a25      	cmp	r2, #37	@ 0x25
 80090d4:	d1f9      	bne.n	80090ca <_vfiprintf_r+0x7a>
 80090d6:	ebba 0b04 	subs.w	fp, sl, r4
 80090da:	d00b      	beq.n	80090f4 <_vfiprintf_r+0xa4>
 80090dc:	465b      	mov	r3, fp
 80090de:	4622      	mov	r2, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ffa1 	bl	800902a <__sfputs_r>
 80090e8:	3001      	adds	r0, #1
 80090ea:	f000 80a7 	beq.w	800923c <_vfiprintf_r+0x1ec>
 80090ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f0:	445a      	add	r2, fp
 80090f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090f4:	f89a 3000 	ldrb.w	r3, [sl]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 809f 	beq.w	800923c <_vfiprintf_r+0x1ec>
 80090fe:	2300      	movs	r3, #0
 8009100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009108:	f10a 0a01 	add.w	sl, sl, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009114:	931a      	str	r3, [sp, #104]	@ 0x68
 8009116:	4654      	mov	r4, sl
 8009118:	2205      	movs	r2, #5
 800911a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911e:	4853      	ldr	r0, [pc, #332]	@ (800926c <_vfiprintf_r+0x21c>)
 8009120:	f7fe fbd9 	bl	80078d6 <memchr>
 8009124:	9a04      	ldr	r2, [sp, #16]
 8009126:	b9d8      	cbnz	r0, 8009160 <_vfiprintf_r+0x110>
 8009128:	06d1      	lsls	r1, r2, #27
 800912a:	bf44      	itt	mi
 800912c:	2320      	movmi	r3, #32
 800912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009132:	0713      	lsls	r3, r2, #28
 8009134:	bf44      	itt	mi
 8009136:	232b      	movmi	r3, #43	@ 0x2b
 8009138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800913c:	f89a 3000 	ldrb.w	r3, [sl]
 8009140:	2b2a      	cmp	r3, #42	@ 0x2a
 8009142:	d015      	beq.n	8009170 <_vfiprintf_r+0x120>
 8009144:	4654      	mov	r4, sl
 8009146:	2000      	movs	r0, #0
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	9a07      	ldr	r2, [sp, #28]
 800914e:	4621      	mov	r1, r4
 8009150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009154:	3b30      	subs	r3, #48	@ 0x30
 8009156:	2b09      	cmp	r3, #9
 8009158:	d94b      	bls.n	80091f2 <_vfiprintf_r+0x1a2>
 800915a:	b1b0      	cbz	r0, 800918a <_vfiprintf_r+0x13a>
 800915c:	9207      	str	r2, [sp, #28]
 800915e:	e014      	b.n	800918a <_vfiprintf_r+0x13a>
 8009160:	eba0 0308 	sub.w	r3, r0, r8
 8009164:	fa09 f303 	lsl.w	r3, r9, r3
 8009168:	4313      	orrs	r3, r2
 800916a:	46a2      	mov	sl, r4
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	e7d2      	b.n	8009116 <_vfiprintf_r+0xc6>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	1d19      	adds	r1, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9103      	str	r1, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbb      	ittet	lt
 800917c:	425b      	neglt	r3, r3
 800917e:	f042 0202 	orrlt.w	r2, r2, #2
 8009182:	9307      	strge	r3, [sp, #28]
 8009184:	9307      	strlt	r3, [sp, #28]
 8009186:	bfb8      	it	lt
 8009188:	9204      	strlt	r2, [sp, #16]
 800918a:	7823      	ldrb	r3, [r4, #0]
 800918c:	2b2e      	cmp	r3, #46	@ 0x2e
 800918e:	d10a      	bne.n	80091a6 <_vfiprintf_r+0x156>
 8009190:	7863      	ldrb	r3, [r4, #1]
 8009192:	2b2a      	cmp	r3, #42	@ 0x2a
 8009194:	d132      	bne.n	80091fc <_vfiprintf_r+0x1ac>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3402      	adds	r4, #2
 800919a:	1d1a      	adds	r2, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	9203      	str	r2, [sp, #12]
 80091a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091a4:	9305      	str	r3, [sp, #20]
 80091a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009270 <_vfiprintf_r+0x220>
 80091aa:	2203      	movs	r2, #3
 80091ac:	4650      	mov	r0, sl
 80091ae:	7821      	ldrb	r1, [r4, #0]
 80091b0:	f7fe fb91 	bl	80078d6 <memchr>
 80091b4:	b138      	cbz	r0, 80091c6 <_vfiprintf_r+0x176>
 80091b6:	2240      	movs	r2, #64	@ 0x40
 80091b8:	9b04      	ldr	r3, [sp, #16]
 80091ba:	eba0 000a 	sub.w	r0, r0, sl
 80091be:	4082      	lsls	r2, r0
 80091c0:	4313      	orrs	r3, r2
 80091c2:	3401      	adds	r4, #1
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	2206      	movs	r2, #6
 80091cc:	4829      	ldr	r0, [pc, #164]	@ (8009274 <_vfiprintf_r+0x224>)
 80091ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091d2:	f7fe fb80 	bl	80078d6 <memchr>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d03f      	beq.n	800925a <_vfiprintf_r+0x20a>
 80091da:	4b27      	ldr	r3, [pc, #156]	@ (8009278 <_vfiprintf_r+0x228>)
 80091dc:	bb1b      	cbnz	r3, 8009226 <_vfiprintf_r+0x1d6>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	3307      	adds	r3, #7
 80091e2:	f023 0307 	bic.w	r3, r3, #7
 80091e6:	3308      	adds	r3, #8
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ec:	443b      	add	r3, r7
 80091ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f0:	e76a      	b.n	80090c8 <_vfiprintf_r+0x78>
 80091f2:	460c      	mov	r4, r1
 80091f4:	2001      	movs	r0, #1
 80091f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091fa:	e7a8      	b.n	800914e <_vfiprintf_r+0xfe>
 80091fc:	2300      	movs	r3, #0
 80091fe:	f04f 0c0a 	mov.w	ip, #10
 8009202:	4619      	mov	r1, r3
 8009204:	3401      	adds	r4, #1
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	4620      	mov	r0, r4
 800920a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800920e:	3a30      	subs	r2, #48	@ 0x30
 8009210:	2a09      	cmp	r2, #9
 8009212:	d903      	bls.n	800921c <_vfiprintf_r+0x1cc>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0c6      	beq.n	80091a6 <_vfiprintf_r+0x156>
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	e7c4      	b.n	80091a6 <_vfiprintf_r+0x156>
 800921c:	4604      	mov	r4, r0
 800921e:	2301      	movs	r3, #1
 8009220:	fb0c 2101 	mla	r1, ip, r1, r2
 8009224:	e7f0      	b.n	8009208 <_vfiprintf_r+0x1b8>
 8009226:	ab03      	add	r3, sp, #12
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	462a      	mov	r2, r5
 800922c:	4630      	mov	r0, r6
 800922e:	4b13      	ldr	r3, [pc, #76]	@ (800927c <_vfiprintf_r+0x22c>)
 8009230:	a904      	add	r1, sp, #16
 8009232:	f7fd fd8f 	bl	8006d54 <_printf_float>
 8009236:	4607      	mov	r7, r0
 8009238:	1c78      	adds	r0, r7, #1
 800923a:	d1d6      	bne.n	80091ea <_vfiprintf_r+0x19a>
 800923c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800923e:	07d9      	lsls	r1, r3, #31
 8009240:	d405      	bmi.n	800924e <_vfiprintf_r+0x1fe>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d402      	bmi.n	800924e <_vfiprintf_r+0x1fe>
 8009248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924a:	f7fe fb3b 	bl	80078c4 <__retarget_lock_release_recursive>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	065b      	lsls	r3, r3, #25
 8009252:	f53f af1f 	bmi.w	8009094 <_vfiprintf_r+0x44>
 8009256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009258:	e71e      	b.n	8009098 <_vfiprintf_r+0x48>
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4630      	mov	r0, r6
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <_vfiprintf_r+0x22c>)
 8009264:	a904      	add	r1, sp, #16
 8009266:	f7fe f813 	bl	8007290 <_printf_i>
 800926a:	e7e4      	b.n	8009236 <_vfiprintf_r+0x1e6>
 800926c:	08009bb0 	.word	0x08009bb0
 8009270:	08009bb6 	.word	0x08009bb6
 8009274:	08009bba 	.word	0x08009bba
 8009278:	08006d55 	.word	0x08006d55
 800927c:	0800902b 	.word	0x0800902b

08009280 <__sflush_r>:
 8009280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	0716      	lsls	r6, r2, #28
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	d454      	bmi.n	8009338 <__sflush_r+0xb8>
 800928e:	684b      	ldr	r3, [r1, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	dc02      	bgt.n	800929a <__sflush_r+0x1a>
 8009294:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	dd48      	ble.n	800932c <__sflush_r+0xac>
 800929a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800929c:	2e00      	cmp	r6, #0
 800929e:	d045      	beq.n	800932c <__sflush_r+0xac>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092a6:	682f      	ldr	r7, [r5, #0]
 80092a8:	6a21      	ldr	r1, [r4, #32]
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	d030      	beq.n	8009310 <__sflush_r+0x90>
 80092ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	0759      	lsls	r1, r3, #29
 80092b4:	d505      	bpl.n	80092c2 <__sflush_r+0x42>
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	1ad2      	subs	r2, r2, r3
 80092ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092bc:	b10b      	cbz	r3, 80092c2 <__sflush_r+0x42>
 80092be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	2300      	movs	r3, #0
 80092c4:	4628      	mov	r0, r5
 80092c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092c8:	6a21      	ldr	r1, [r4, #32]
 80092ca:	47b0      	blx	r6
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	d106      	bne.n	80092e0 <__sflush_r+0x60>
 80092d2:	6829      	ldr	r1, [r5, #0]
 80092d4:	291d      	cmp	r1, #29
 80092d6:	d82b      	bhi.n	8009330 <__sflush_r+0xb0>
 80092d8:	4a28      	ldr	r2, [pc, #160]	@ (800937c <__sflush_r+0xfc>)
 80092da:	410a      	asrs	r2, r1
 80092dc:	07d6      	lsls	r6, r2, #31
 80092de:	d427      	bmi.n	8009330 <__sflush_r+0xb0>
 80092e0:	2200      	movs	r2, #0
 80092e2:	6062      	str	r2, [r4, #4]
 80092e4:	6922      	ldr	r2, [r4, #16]
 80092e6:	04d9      	lsls	r1, r3, #19
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	d504      	bpl.n	80092f6 <__sflush_r+0x76>
 80092ec:	1c42      	adds	r2, r0, #1
 80092ee:	d101      	bne.n	80092f4 <__sflush_r+0x74>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b903      	cbnz	r3, 80092f6 <__sflush_r+0x76>
 80092f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80092f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092f8:	602f      	str	r7, [r5, #0]
 80092fa:	b1b9      	cbz	r1, 800932c <__sflush_r+0xac>
 80092fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009300:	4299      	cmp	r1, r3
 8009302:	d002      	beq.n	800930a <__sflush_r+0x8a>
 8009304:	4628      	mov	r0, r5
 8009306:	f7ff f95b 	bl	80085c0 <_free_r>
 800930a:	2300      	movs	r3, #0
 800930c:	6363      	str	r3, [r4, #52]	@ 0x34
 800930e:	e00d      	b.n	800932c <__sflush_r+0xac>
 8009310:	2301      	movs	r3, #1
 8009312:	4628      	mov	r0, r5
 8009314:	47b0      	blx	r6
 8009316:	4602      	mov	r2, r0
 8009318:	1c50      	adds	r0, r2, #1
 800931a:	d1c9      	bne.n	80092b0 <__sflush_r+0x30>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0c6      	beq.n	80092b0 <__sflush_r+0x30>
 8009322:	2b1d      	cmp	r3, #29
 8009324:	d001      	beq.n	800932a <__sflush_r+0xaa>
 8009326:	2b16      	cmp	r3, #22
 8009328:	d11d      	bne.n	8009366 <__sflush_r+0xe6>
 800932a:	602f      	str	r7, [r5, #0]
 800932c:	2000      	movs	r0, #0
 800932e:	e021      	b.n	8009374 <__sflush_r+0xf4>
 8009330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009334:	b21b      	sxth	r3, r3
 8009336:	e01a      	b.n	800936e <__sflush_r+0xee>
 8009338:	690f      	ldr	r7, [r1, #16]
 800933a:	2f00      	cmp	r7, #0
 800933c:	d0f6      	beq.n	800932c <__sflush_r+0xac>
 800933e:	0793      	lsls	r3, r2, #30
 8009340:	bf18      	it	ne
 8009342:	2300      	movne	r3, #0
 8009344:	680e      	ldr	r6, [r1, #0]
 8009346:	bf08      	it	eq
 8009348:	694b      	ldreq	r3, [r1, #20]
 800934a:	1bf6      	subs	r6, r6, r7
 800934c:	600f      	str	r7, [r1, #0]
 800934e:	608b      	str	r3, [r1, #8]
 8009350:	2e00      	cmp	r6, #0
 8009352:	ddeb      	ble.n	800932c <__sflush_r+0xac>
 8009354:	4633      	mov	r3, r6
 8009356:	463a      	mov	r2, r7
 8009358:	4628      	mov	r0, r5
 800935a:	6a21      	ldr	r1, [r4, #32]
 800935c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009360:	47e0      	blx	ip
 8009362:	2800      	cmp	r0, #0
 8009364:	dc07      	bgt.n	8009376 <__sflush_r+0xf6>
 8009366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800936e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009376:	4407      	add	r7, r0
 8009378:	1a36      	subs	r6, r6, r0
 800937a:	e7e9      	b.n	8009350 <__sflush_r+0xd0>
 800937c:	dfbffffe 	.word	0xdfbffffe

08009380 <_fflush_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	690b      	ldr	r3, [r1, #16]
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	b913      	cbnz	r3, 8009390 <_fflush_r+0x10>
 800938a:	2500      	movs	r5, #0
 800938c:	4628      	mov	r0, r5
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	b118      	cbz	r0, 800939a <_fflush_r+0x1a>
 8009392:	6a03      	ldr	r3, [r0, #32]
 8009394:	b90b      	cbnz	r3, 800939a <_fflush_r+0x1a>
 8009396:	f7fe f927 	bl	80075e8 <__sinit>
 800939a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0f3      	beq.n	800938a <_fflush_r+0xa>
 80093a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093a4:	07d0      	lsls	r0, r2, #31
 80093a6:	d404      	bmi.n	80093b2 <_fflush_r+0x32>
 80093a8:	0599      	lsls	r1, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_fflush_r+0x32>
 80093ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ae:	f7fe fa88 	bl	80078c2 <__retarget_lock_acquire_recursive>
 80093b2:	4628      	mov	r0, r5
 80093b4:	4621      	mov	r1, r4
 80093b6:	f7ff ff63 	bl	8009280 <__sflush_r>
 80093ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093bc:	4605      	mov	r5, r0
 80093be:	07da      	lsls	r2, r3, #31
 80093c0:	d4e4      	bmi.n	800938c <_fflush_r+0xc>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	059b      	lsls	r3, r3, #22
 80093c6:	d4e1      	bmi.n	800938c <_fflush_r+0xc>
 80093c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ca:	f7fe fa7b 	bl	80078c4 <__retarget_lock_release_recursive>
 80093ce:	e7dd      	b.n	800938c <_fflush_r+0xc>

080093d0 <__swbuf_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	4605      	mov	r5, r0
 80093d8:	b118      	cbz	r0, 80093e2 <__swbuf_r+0x12>
 80093da:	6a03      	ldr	r3, [r0, #32]
 80093dc:	b90b      	cbnz	r3, 80093e2 <__swbuf_r+0x12>
 80093de:	f7fe f903 	bl	80075e8 <__sinit>
 80093e2:	69a3      	ldr	r3, [r4, #24]
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	071a      	lsls	r2, r3, #28
 80093ea:	d501      	bpl.n	80093f0 <__swbuf_r+0x20>
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	b943      	cbnz	r3, 8009402 <__swbuf_r+0x32>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 f82a 	bl	800944c <__swsetup_r>
 80093f8:	b118      	cbz	r0, 8009402 <__swbuf_r+0x32>
 80093fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80093fe:	4638      	mov	r0, r7
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	b2f6      	uxtb	r6, r6
 8009408:	1a98      	subs	r0, r3, r2
 800940a:	6963      	ldr	r3, [r4, #20]
 800940c:	4637      	mov	r7, r6
 800940e:	4283      	cmp	r3, r0
 8009410:	dc05      	bgt.n	800941e <__swbuf_r+0x4e>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f7ff ffb3 	bl	8009380 <_fflush_r>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1ed      	bne.n	80093fa <__swbuf_r+0x2a>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	6022      	str	r2, [r4, #0]
 800942a:	701e      	strb	r6, [r3, #0]
 800942c:	6962      	ldr	r2, [r4, #20]
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	429a      	cmp	r2, r3
 8009432:	d004      	beq.n	800943e <__swbuf_r+0x6e>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d5e1      	bpl.n	80093fe <__swbuf_r+0x2e>
 800943a:	2e0a      	cmp	r6, #10
 800943c:	d1df      	bne.n	80093fe <__swbuf_r+0x2e>
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f7ff ff9d 	bl	8009380 <_fflush_r>
 8009446:	2800      	cmp	r0, #0
 8009448:	d0d9      	beq.n	80093fe <__swbuf_r+0x2e>
 800944a:	e7d6      	b.n	80093fa <__swbuf_r+0x2a>

0800944c <__swsetup_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4b29      	ldr	r3, [pc, #164]	@ (80094f4 <__swsetup_r+0xa8>)
 8009450:	4605      	mov	r5, r0
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	460c      	mov	r4, r1
 8009456:	b118      	cbz	r0, 8009460 <__swsetup_r+0x14>
 8009458:	6a03      	ldr	r3, [r0, #32]
 800945a:	b90b      	cbnz	r3, 8009460 <__swsetup_r+0x14>
 800945c:	f7fe f8c4 	bl	80075e8 <__sinit>
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	0719      	lsls	r1, r3, #28
 8009466:	d422      	bmi.n	80094ae <__swsetup_r+0x62>
 8009468:	06da      	lsls	r2, r3, #27
 800946a:	d407      	bmi.n	800947c <__swsetup_r+0x30>
 800946c:	2209      	movs	r2, #9
 800946e:	602a      	str	r2, [r5, #0]
 8009470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	e033      	b.n	80094e4 <__swsetup_r+0x98>
 800947c:	0758      	lsls	r0, r3, #29
 800947e:	d512      	bpl.n	80094a6 <__swsetup_r+0x5a>
 8009480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009482:	b141      	cbz	r1, 8009496 <__swsetup_r+0x4a>
 8009484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <__swsetup_r+0x46>
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff f897 	bl	80085c0 <_free_r>
 8009492:	2300      	movs	r3, #0
 8009494:	6363      	str	r3, [r4, #52]	@ 0x34
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	2300      	movs	r3, #0
 80094a0:	6063      	str	r3, [r4, #4]
 80094a2:	6923      	ldr	r3, [r4, #16]
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0308 	orr.w	r3, r3, #8
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	b94b      	cbnz	r3, 80094c6 <__swsetup_r+0x7a>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094bc:	d003      	beq.n	80094c6 <__swsetup_r+0x7a>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f8fd 	bl	80096c0 <__smakebuf_r>
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	f013 0201 	ands.w	r2, r3, #1
 80094ce:	d00a      	beq.n	80094e6 <__swsetup_r+0x9a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	60a2      	str	r2, [r4, #8]
 80094d4:	6962      	ldr	r2, [r4, #20]
 80094d6:	4252      	negs	r2, r2
 80094d8:	61a2      	str	r2, [r4, #24]
 80094da:	6922      	ldr	r2, [r4, #16]
 80094dc:	b942      	cbnz	r2, 80094f0 <__swsetup_r+0xa4>
 80094de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094e2:	d1c5      	bne.n	8009470 <__swsetup_r+0x24>
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	0799      	lsls	r1, r3, #30
 80094e8:	bf58      	it	pl
 80094ea:	6962      	ldrpl	r2, [r4, #20]
 80094ec:	60a2      	str	r2, [r4, #8]
 80094ee:	e7f4      	b.n	80094da <__swsetup_r+0x8e>
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7f7      	b.n	80094e4 <__swsetup_r+0x98>
 80094f4:	20000028 	.word	0x20000028

080094f8 <memmove>:
 80094f8:	4288      	cmp	r0, r1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	eb01 0402 	add.w	r4, r1, r2
 8009500:	d902      	bls.n	8009508 <memmove+0x10>
 8009502:	4284      	cmp	r4, r0
 8009504:	4623      	mov	r3, r4
 8009506:	d807      	bhi.n	8009518 <memmove+0x20>
 8009508:	1e43      	subs	r3, r0, #1
 800950a:	42a1      	cmp	r1, r4
 800950c:	d008      	beq.n	8009520 <memmove+0x28>
 800950e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009516:	e7f8      	b.n	800950a <memmove+0x12>
 8009518:	4601      	mov	r1, r0
 800951a:	4402      	add	r2, r0
 800951c:	428a      	cmp	r2, r1
 800951e:	d100      	bne.n	8009522 <memmove+0x2a>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952a:	e7f7      	b.n	800951c <memmove+0x24>

0800952c <_raise_r>:
 800952c:	291f      	cmp	r1, #31
 800952e:	b538      	push	{r3, r4, r5, lr}
 8009530:	4605      	mov	r5, r0
 8009532:	460c      	mov	r4, r1
 8009534:	d904      	bls.n	8009540 <_raise_r+0x14>
 8009536:	2316      	movs	r3, #22
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009542:	b112      	cbz	r2, 800954a <_raise_r+0x1e>
 8009544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009548:	b94b      	cbnz	r3, 800955e <_raise_r+0x32>
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f830 	bl	80095b0 <_getpid_r>
 8009550:	4622      	mov	r2, r4
 8009552:	4601      	mov	r1, r0
 8009554:	4628      	mov	r0, r5
 8009556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955a:	f000 b817 	b.w	800958c <_kill_r>
 800955e:	2b01      	cmp	r3, #1
 8009560:	d00a      	beq.n	8009578 <_raise_r+0x4c>
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	d103      	bne.n	800956e <_raise_r+0x42>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	2001      	movs	r0, #1
 800956c:	e7e7      	b.n	800953e <_raise_r+0x12>
 800956e:	2100      	movs	r1, #0
 8009570:	4620      	mov	r0, r4
 8009572:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009576:	4798      	blx	r3
 8009578:	2000      	movs	r0, #0
 800957a:	e7e0      	b.n	800953e <_raise_r+0x12>

0800957c <raise>:
 800957c:	4b02      	ldr	r3, [pc, #8]	@ (8009588 <raise+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f7ff bfd3 	b.w	800952c <_raise_r>
 8009586:	bf00      	nop
 8009588:	20000028 	.word	0x20000028

0800958c <_kill_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	2300      	movs	r3, #0
 8009590:	4d06      	ldr	r5, [pc, #24]	@ (80095ac <_kill_r+0x20>)
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	f7f8 fb00 	bl	8001b9e <_kill>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d102      	bne.n	80095a8 <_kill_r+0x1c>
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	b103      	cbz	r3, 80095a8 <_kill_r+0x1c>
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	2000059c 	.word	0x2000059c

080095b0 <_getpid_r>:
 80095b0:	f7f8 baee 	b.w	8001b90 <_getpid>

080095b4 <_calloc_r>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	fba1 5402 	umull	r5, r4, r1, r2
 80095ba:	b93c      	cbnz	r4, 80095cc <_calloc_r+0x18>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7fd fa9f 	bl	8006b00 <_malloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b928      	cbnz	r0, 80095d2 <_calloc_r+0x1e>
 80095c6:	2600      	movs	r6, #0
 80095c8:	4630      	mov	r0, r6
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	220c      	movs	r2, #12
 80095ce:	6002      	str	r2, [r0, #0]
 80095d0:	e7f9      	b.n	80095c6 <_calloc_r+0x12>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7fe f8e6 	bl	80077a6 <memset>
 80095da:	e7f5      	b.n	80095c8 <_calloc_r+0x14>

080095dc <__ascii_mbtowc>:
 80095dc:	b082      	sub	sp, #8
 80095de:	b901      	cbnz	r1, 80095e2 <__ascii_mbtowc+0x6>
 80095e0:	a901      	add	r1, sp, #4
 80095e2:	b142      	cbz	r2, 80095f6 <__ascii_mbtowc+0x1a>
 80095e4:	b14b      	cbz	r3, 80095fa <__ascii_mbtowc+0x1e>
 80095e6:	7813      	ldrb	r3, [r2, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	1e10      	subs	r0, r2, #0
 80095ee:	bf18      	it	ne
 80095f0:	2001      	movne	r0, #1
 80095f2:	b002      	add	sp, #8
 80095f4:	4770      	bx	lr
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fb      	b.n	80095f2 <__ascii_mbtowc+0x16>
 80095fa:	f06f 0001 	mvn.w	r0, #1
 80095fe:	e7f8      	b.n	80095f2 <__ascii_mbtowc+0x16>

08009600 <_realloc_r>:
 8009600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009604:	4680      	mov	r8, r0
 8009606:	4615      	mov	r5, r2
 8009608:	460c      	mov	r4, r1
 800960a:	b921      	cbnz	r1, 8009616 <_realloc_r+0x16>
 800960c:	4611      	mov	r1, r2
 800960e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	f7fd ba75 	b.w	8006b00 <_malloc_r>
 8009616:	b92a      	cbnz	r2, 8009624 <_realloc_r+0x24>
 8009618:	f7fe ffd2 	bl	80085c0 <_free_r>
 800961c:	2400      	movs	r4, #0
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	f000 f8aa 	bl	800977c <_malloc_usable_size_r>
 8009628:	4285      	cmp	r5, r0
 800962a:	4606      	mov	r6, r0
 800962c:	d802      	bhi.n	8009634 <_realloc_r+0x34>
 800962e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009632:	d8f4      	bhi.n	800961e <_realloc_r+0x1e>
 8009634:	4629      	mov	r1, r5
 8009636:	4640      	mov	r0, r8
 8009638:	f7fd fa62 	bl	8006b00 <_malloc_r>
 800963c:	4607      	mov	r7, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d0ec      	beq.n	800961c <_realloc_r+0x1c>
 8009642:	42b5      	cmp	r5, r6
 8009644:	462a      	mov	r2, r5
 8009646:	4621      	mov	r1, r4
 8009648:	bf28      	it	cs
 800964a:	4632      	movcs	r2, r6
 800964c:	f7fe f951 	bl	80078f2 <memcpy>
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7fe ffb4 	bl	80085c0 <_free_r>
 8009658:	463c      	mov	r4, r7
 800965a:	e7e0      	b.n	800961e <_realloc_r+0x1e>

0800965c <__ascii_wctomb>:
 800965c:	4603      	mov	r3, r0
 800965e:	4608      	mov	r0, r1
 8009660:	b141      	cbz	r1, 8009674 <__ascii_wctomb+0x18>
 8009662:	2aff      	cmp	r2, #255	@ 0xff
 8009664:	d904      	bls.n	8009670 <__ascii_wctomb+0x14>
 8009666:	228a      	movs	r2, #138	@ 0x8a
 8009668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	4770      	bx	lr
 8009670:	2001      	movs	r0, #1
 8009672:	700a      	strb	r2, [r1, #0]
 8009674:	4770      	bx	lr

08009676 <__swhatbuf_r>:
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	460c      	mov	r4, r1
 800967a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967e:	4615      	mov	r5, r2
 8009680:	2900      	cmp	r1, #0
 8009682:	461e      	mov	r6, r3
 8009684:	b096      	sub	sp, #88	@ 0x58
 8009686:	da0c      	bge.n	80096a2 <__swhatbuf_r+0x2c>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	2100      	movs	r1, #0
 800968c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009690:	bf14      	ite	ne
 8009692:	2340      	movne	r3, #64	@ 0x40
 8009694:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009698:	2000      	movs	r0, #0
 800969a:	6031      	str	r1, [r6, #0]
 800969c:	602b      	str	r3, [r5, #0]
 800969e:	b016      	add	sp, #88	@ 0x58
 80096a0:	bd70      	pop	{r4, r5, r6, pc}
 80096a2:	466a      	mov	r2, sp
 80096a4:	f000 f848 	bl	8009738 <_fstat_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	dbed      	blt.n	8009688 <__swhatbuf_r+0x12>
 80096ac:	9901      	ldr	r1, [sp, #4]
 80096ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096b6:	4259      	negs	r1, r3
 80096b8:	4159      	adcs	r1, r3
 80096ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096be:	e7eb      	b.n	8009698 <__swhatbuf_r+0x22>

080096c0 <__smakebuf_r>:
 80096c0:	898b      	ldrh	r3, [r1, #12]
 80096c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c4:	079d      	lsls	r5, r3, #30
 80096c6:	4606      	mov	r6, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	d507      	bpl.n	80096dc <__smakebuf_r+0x1c>
 80096cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	2301      	movs	r3, #1
 80096d6:	6163      	str	r3, [r4, #20]
 80096d8:	b003      	add	sp, #12
 80096da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096dc:	466a      	mov	r2, sp
 80096de:	ab01      	add	r3, sp, #4
 80096e0:	f7ff ffc9 	bl	8009676 <__swhatbuf_r>
 80096e4:	9f00      	ldr	r7, [sp, #0]
 80096e6:	4605      	mov	r5, r0
 80096e8:	4639      	mov	r1, r7
 80096ea:	4630      	mov	r0, r6
 80096ec:	f7fd fa08 	bl	8006b00 <_malloc_r>
 80096f0:	b948      	cbnz	r0, 8009706 <__smakebuf_r+0x46>
 80096f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f6:	059a      	lsls	r2, r3, #22
 80096f8:	d4ee      	bmi.n	80096d8 <__smakebuf_r+0x18>
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	f043 0302 	orr.w	r3, r3, #2
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	e7e2      	b.n	80096cc <__smakebuf_r+0xc>
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800970c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	6020      	str	r0, [r4, #0]
 8009716:	b15b      	cbz	r3, 8009730 <__smakebuf_r+0x70>
 8009718:	4630      	mov	r0, r6
 800971a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800971e:	f000 f81d 	bl	800975c <_isatty_r>
 8009722:	b128      	cbz	r0, 8009730 <__smakebuf_r+0x70>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	431d      	orrs	r5, r3
 8009734:	81a5      	strh	r5, [r4, #12]
 8009736:	e7cf      	b.n	80096d8 <__smakebuf_r+0x18>

08009738 <_fstat_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	2300      	movs	r3, #0
 800973c:	4d06      	ldr	r5, [pc, #24]	@ (8009758 <_fstat_r+0x20>)
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f8 fa89 	bl	8001c5c <_fstat>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_fstat_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_fstat_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	2000059c 	.word	0x2000059c

0800975c <_isatty_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	2300      	movs	r3, #0
 8009760:	4d05      	ldr	r5, [pc, #20]	@ (8009778 <_isatty_r+0x1c>)
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 fa87 	bl	8001c7a <_isatty>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_isatty_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_isatty_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	2000059c 	.word	0x2000059c

0800977c <_malloc_usable_size_r>:
 800977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009780:	1f18      	subs	r0, r3, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfbc      	itt	lt
 8009786:	580b      	ldrlt	r3, [r1, r0]
 8009788:	18c0      	addlt	r0, r0, r3
 800978a:	4770      	bx	lr

0800978c <_init>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr

08009798 <_fini>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr
