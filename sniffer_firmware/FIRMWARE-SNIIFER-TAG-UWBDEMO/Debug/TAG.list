
TAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  0800de68  0800de68  0000ee68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec74  0800ec74  0001031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec74  0800ec74  0000fc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec7c  0800ec7c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec7c  0800ec7c  0000fc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec80  0800ec80  0000fc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0800ec84  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000320  0800efa0  00010320  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800efa0  00010b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152ef  00000000  00000000  00010345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039dd  00000000  00000000  00025634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00029018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b7  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f81a  00000000  00000000  0002b68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019217  00000000  00000000  0004aea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a305f  00000000  00000000  000640c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010711f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ebc  00000000  00000000  00107164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0010e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000320 	.word	0x20000320
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de50 	.word	0x0800de50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000324 	.word	0x20000324
 800014c:	0800de50 	.word	0x0800de50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e0:	f3bf 8f4f 	dsb	sy
}
 80010e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <__NVIC_SystemReset+0x24>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010ee:	4904      	ldr	r1, [pc, #16]	@ (8001100 <__NVIC_SystemReset+0x24>)
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_SystemReset+0x28>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010f6:	f3bf 8f4f 	dsb	sy
}
 80010fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <__NVIC_SystemReset+0x20>
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0004 	.word	0x05fa0004

08001108 <hmi_recv>:
  * @brief Data from the HMI display is processed here
  * @param None
  * @retval None
  */
uint8_t hmi_recv(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
    if(flags.uart_recv)
 800110e:	4b88      	ldr	r3, [pc, #544]	@ (8001330 <hmi_recv+0x228>)
 8001110:	79db      	ldrb	r3, [r3, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8217 	beq.w	8001546 <hmi_recv+0x43e>
    {
        if(recvBuf[recvBufLen-1] == 0xff && recvBuf[recvBufLen-2] == 0xff && recvBuf[recvBufLen-3] == 0xff)
 8001118:	4b86      	ldr	r3, [pc, #536]	@ (8001334 <hmi_recv+0x22c>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	4a86      	ldr	r2, [pc, #536]	@ (8001338 <hmi_recv+0x230>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	f040 8207 	bne.w	8001536 <hmi_recv+0x42e>
 8001128:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <hmi_recv+0x22c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b02      	subs	r3, #2
 800112e:	4a82      	ldr	r2, [pc, #520]	@ (8001338 <hmi_recv+0x230>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	f040 81ff 	bne.w	8001536 <hmi_recv+0x42e>
 8001138:	4b7e      	ldr	r3, [pc, #504]	@ (8001334 <hmi_recv+0x22c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3b03      	subs	r3, #3
 800113e:	4a7e      	ldr	r2, [pc, #504]	@ (8001338 <hmi_recv+0x230>)
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	f040 81f7 	bne.w	8001536 <hmi_recv+0x42e>
        {
            if(recvBufLen == 5)
 8001148:	4b7a      	ldr	r3, [pc, #488]	@ (8001334 <hmi_recv+0x22c>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b05      	cmp	r3, #5
 800114e:	f040 80a8 	bne.w	80012a2 <hmi_recv+0x19a>
            {
                if(recvBuf[0] == 0x00)
 8001152:	4b79      	ldr	r3, [pc, #484]	@ (8001338 <hmi_recv+0x230>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11a      	bne.n	8001190 <hmi_recv+0x88>
                {
                    if(recvBuf[1] == 0xff || recvBuf[1] == 0x00)	
 800115a:	4b77      	ldr	r3, [pc, #476]	@ (8001338 <hmi_recv+0x230>)
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d004      	beq.n	800116c <hmi_recv+0x64>
 8001162:	4b75      	ldr	r3, [pc, #468]	@ (8001338 <hmi_recv+0x230>)
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 81e5 	bne.w	8001536 <hmi_recv+0x42e>
                    {
						/* Exit the running example and return to the menu */
                        reset_DWIC();  	//Reset the module to stop working
 800116c:	f005 f86c 	bl	8006248 <reset_DWIC>
                        HMISends("page menu\xff\xff\xff");//Send the command back to the menu to the HMI display
 8001170:	4872      	ldr	r0, [pc, #456]	@ (800133c <hmi_recv+0x234>)
 8001172:	f002 ff19 	bl	8003fa8 <HMISends>
                        flags.function = NULL;
 8001176:	4b6e      	ldr	r3, [pc, #440]	@ (8001330 <hmi_recv+0x228>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
                        flags.time_to_allow_run = 0;
 800117c:	4b6c      	ldr	r3, [pc, #432]	@ (8001330 <hmi_recv+0x228>)
 800117e:	2200      	movs	r2, #0
 8001180:	819a      	strh	r2, [r3, #12]
                        flags.func_allow_run = 0;
 8001182:	4b6b      	ldr	r3, [pc, #428]	@ (8001330 <hmi_recv+0x228>)
 8001184:	2200      	movs	r2, #0
 8001186:	721a      	strb	r2, [r3, #8]
                        flags.target_allow_run_time = 0;
 8001188:	4b69      	ldr	r3, [pc, #420]	@ (8001330 <hmi_recv+0x228>)
 800118a:	2200      	movs	r2, #0
 800118c:	815a      	strh	r2, [r3, #10]
 800118e:	e1d2      	b.n	8001536 <hmi_recv+0x42e>
                    }
                }
                else
                {
					/* Ready to run example */
                    if(recvBuf[0] == 0x01)
 8001190:	4b69      	ldr	r3, [pc, #420]	@ (8001338 <hmi_recv+0x230>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d127      	bne.n	80011e8 <hmi_recv+0xe0>
                    {
						HMISends("page loading\xff\xff\xff");
 8001198:	4869      	ldr	r0, [pc, #420]	@ (8001340 <hmi_recv+0x238>)
 800119a:	f002 ff05 	bl	8003fa8 <HMISends>
                        reset_DWIC(); 
 800119e:	f005 f853 	bl	8006248 <reset_DWIC>
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80011a2:	4b65      	ldr	r3, [pc, #404]	@ (8001338 <hmi_recv+0x230>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a66      	ldr	r2, [pc, #408]	@ (8001344 <hmi_recv+0x23c>)
 80011aa:	460b      	mov	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	4413      	add	r3, r2
 80011b2:	3306      	adds	r3, #6
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b64      	ldr	r3, [pc, #400]	@ (8001348 <hmi_recv+0x240>)
 80011b8:	701a      	strb	r2, [r3, #0]
                        //Initialize the UWB module before running the example
						if(example_func[recvBuf[1]].initfunction() == 0)
 80011ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <hmi_recv+0x230>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b62      	ldr	r3, [pc, #392]	@ (800134c <hmi_recv+0x244>)
 80011c2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 81b3 	bne.w	8001536 <hmi_recv+0x42e>
                        {
                            flags.function = example_func[recvBuf[1]].function;
 80011d0:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <hmi_recv+0x230>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	@ (800134c <hmi_recv+0x244>)
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a54      	ldr	r2, [pc, #336]	@ (8001330 <hmi_recv+0x228>)
 80011de:	6153      	str	r3, [r2, #20]
                            flags.func_allow_run = 1;
 80011e0:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <hmi_recv+0x228>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	721a      	strb	r2, [r3, #8]
 80011e6:	e1a6      	b.n	8001536 <hmi_recv+0x42e>
                        }
                    }
					/* Ready to run example */
                    else if(recvBuf[0] == 0x02)
 80011e8:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <hmi_recv+0x230>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	f040 81a2 	bne.w	8001536 <hmi_recv+0x42e>
                    {
						//While running the example, open the Settings screen, read the current parameters and display them on the HMI display
						int dev_id = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80011f2:	4b51      	ldr	r3, [pc, #324]	@ (8001338 <hmi_recv+0x230>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <hmi_recv+0x23c>)
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	4413      	add	r3, r2
 8001202:	3306      	adds	r3, #6
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	623b      	str	r3, [r7, #32]
                        int channel = dwt_setting_data.dwt_setting_value[recvBuf[1]].channel;
 8001208:	4b4b      	ldr	r3, [pc, #300]	@ (8001338 <hmi_recv+0x230>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	4619      	mov	r1, r3
 800120e:	4a4d      	ldr	r2, [pc, #308]	@ (8001344 <hmi_recv+0x23c>)
 8001210:	460b      	mov	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	4413      	add	r3, r2
 8001218:	3302      	adds	r3, #2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	61fb      	str	r3, [r7, #28]
                        int datarate = dwt_setting_data.dwt_setting_value[recvBuf[1]].data_rate;
 800121e:	4b46      	ldr	r3, [pc, #280]	@ (8001338 <hmi_recv+0x230>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	4619      	mov	r1, r3
 8001224:	4a47      	ldr	r2, [pc, #284]	@ (8001344 <hmi_recv+0x23c>)
 8001226:	460b      	mov	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	4413      	add	r3, r2
 800122e:	3303      	adds	r3, #3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
                        int powgain = dwt_setting_data.dwt_setting_value[recvBuf[1]].tx_power;
 8001234:	4b40      	ldr	r3, [pc, #256]	@ (8001338 <hmi_recv+0x230>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	4619      	mov	r1, r3
 800123a:	4a42      	ldr	r2, [pc, #264]	@ (8001344 <hmi_recv+0x23c>)
 800123c:	460b      	mov	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	4413      	add	r3, r2
 8001244:	3304      	adds	r3, #4
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	617b      	str	r3, [r7, #20]
                        uint8_t settingstr[20];
						sprintf(settingstr, "deviceid=%d\xff\xff\xff", dev_id);
 800124a:	463b      	mov	r3, r7
 800124c:	6a3a      	ldr	r2, [r7, #32]
 800124e:	4940      	ldr	r1, [pc, #256]	@ (8001350 <hmi_recv+0x248>)
 8001250:	4618      	mov	r0, r3
 8001252:	f009 f9ed 	bl	800a630 <siprintf>
                        HMISends(settingstr);
 8001256:	463b      	mov	r3, r7
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fea5 	bl	8003fa8 <HMISends>
                        sprintf(settingstr, "channel=%d\xff\xff\xff", channel);
 800125e:	463b      	mov	r3, r7
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	493c      	ldr	r1, [pc, #240]	@ (8001354 <hmi_recv+0x24c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f009 f9e3 	bl	800a630 <siprintf>
                        HMISends(settingstr);
 800126a:	463b      	mov	r3, r7
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe9b 	bl	8003fa8 <HMISends>
                        sprintf(settingstr, "datarage=%d\xff\xff\xff", datarate);
 8001272:	463b      	mov	r3, r7
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4938      	ldr	r1, [pc, #224]	@ (8001358 <hmi_recv+0x250>)
 8001278:	4618      	mov	r0, r3
 800127a:	f009 f9d9 	bl	800a630 <siprintf>
                        HMISends(settingstr);
 800127e:	463b      	mov	r3, r7
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fe91 	bl	8003fa8 <HMISends>
                        sprintf(settingstr, "powgain=%d\xff\xff\xff", powgain);
 8001286:	463b      	mov	r3, r7
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4934      	ldr	r1, [pc, #208]	@ (800135c <hmi_recv+0x254>)
 800128c:	4618      	mov	r0, r3
 800128e:	f009 f9cf 	bl	800a630 <siprintf>
                        HMISends(settingstr);
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fe87 	bl	8003fa8 <HMISends>
                        HMISends("page setting\xff\xff\xff");
 800129a:	4831      	ldr	r0, [pc, #196]	@ (8001360 <hmi_recv+0x258>)
 800129c:	f002 fe84 	bl	8003fa8 <HMISends>
 80012a0:	e149      	b.n	8001536 <hmi_recv+0x42e>
                    }
                } 
            }
            else if(recvBufLen == 10)
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <hmi_recv+0x22c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	f040 80c7 	bne.w	800143a <hmi_recv+0x332>
            {
                if(recvBuf[0] == 0x02)
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <hmi_recv+0x230>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	f040 8140 	bne.w	8001536 <hmi_recv+0x42e>
                {
                    if(recvBuf[1] == 0xff)
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <hmi_recv+0x230>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	2bff      	cmp	r3, #255	@ 0xff
 80012bc:	d152      	bne.n	8001364 <hmi_recv+0x25c>
                    {
						/* Global setting. All examples apply this parameter (menu -> setting)*/
                        for(int i = 1; i < MAX_FUNCTIONS; i++)
 80012be:	2301      	movs	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c2:	e02e      	b.n	8001322 <hmi_recv+0x21a>
                        {
                            dwt_setting_data.dwt_setting_value[i].channel = recvBuf[2];
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <hmi_recv+0x230>)
 80012c6:	7898      	ldrb	r0, [r3, #2]
 80012c8:	491e      	ldr	r1, [pc, #120]	@ (8001344 <hmi_recv+0x23c>)
 80012ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	3302      	adds	r3, #2
 80012d6:	4602      	mov	r2, r0
 80012d8:	701a      	strb	r2, [r3, #0]
                            dwt_setting_data.dwt_setting_value[i].data_rate = recvBuf[3];
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <hmi_recv+0x230>)
 80012dc:	78d8      	ldrb	r0, [r3, #3]
 80012de:	4919      	ldr	r1, [pc, #100]	@ (8001344 <hmi_recv+0x23c>)
 80012e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	3303      	adds	r3, #3
 80012ec:	4602      	mov	r2, r0
 80012ee:	701a      	strb	r2, [r3, #0]
                            dwt_setting_data.dwt_setting_value[i].tx_power = recvBuf[4];
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <hmi_recv+0x230>)
 80012f2:	7918      	ldrb	r0, [r3, #4]
 80012f4:	4913      	ldr	r1, [pc, #76]	@ (8001344 <hmi_recv+0x23c>)
 80012f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	440b      	add	r3, r1
 8001300:	3304      	adds	r3, #4
 8001302:	4602      	mov	r2, r0
 8001304:	701a      	strb	r2, [r3, #0]
							dwt_setting_data.dwt_setting_value[i].dev_id = recvBuf[6];
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <hmi_recv+0x230>)
 8001308:	7998      	ldrb	r0, [r3, #6]
 800130a:	490e      	ldr	r1, [pc, #56]	@ (8001344 <hmi_recv+0x23c>)
 800130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	440b      	add	r3, r1
 8001316:	3306      	adds	r3, #6
 8001318:	4602      	mov	r2, r0
 800131a:	701a      	strb	r2, [r3, #0]
                        for(int i = 1; i < MAX_FUNCTIONS; i++)
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	3301      	adds	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	2b06      	cmp	r3, #6
 8001326:	ddcd      	ble.n	80012c4 <hmi_recv+0x1bc>
                        }
                        HMISends("page menu\xff\xff\xff");
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <hmi_recv+0x234>)
 800132a:	f002 fe3d 	bl	8003fa8 <HMISends>
 800132e:	e102      	b.n	8001536 <hmi_recv+0x42e>
 8001330:	20000744 	.word	0x20000744
 8001334:	20000740 	.word	0x20000740
 8001338:	200006dc 	.word	0x200006dc
 800133c:	0800de68 	.word	0x0800de68
 8001340:	0800de78 	.word	0x0800de78
 8001344:	20000340 	.word	0x20000340
 8001348:	2000033c 	.word	0x2000033c
 800134c:	20000000 	.word	0x20000000
 8001350:	0800de88 	.word	0x0800de88
 8001354:	0800de98 	.word	0x0800de98
 8001358:	0800dea8 	.word	0x0800dea8
 800135c:	0800deb8 	.word	0x0800deb8
 8001360:	0800dec8 	.word	0x0800dec8
                    }
                    else
                    {
						//Once the parameters are set, rerun the example to apply the parameters (example -> setting)
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].channel = recvBuf[2];
 8001364:	4b7a      	ldr	r3, [pc, #488]	@ (8001550 <hmi_recv+0x448>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	4619      	mov	r1, r3
 800136a:	4b79      	ldr	r3, [pc, #484]	@ (8001550 <hmi_recv+0x448>)
 800136c:	7898      	ldrb	r0, [r3, #2]
 800136e:	4a79      	ldr	r2, [pc, #484]	@ (8001554 <hmi_recv+0x44c>)
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	4413      	add	r3, r2
 8001378:	3302      	adds	r3, #2
 800137a:	4602      	mov	r2, r0
 800137c:	701a      	strb	r2, [r3, #0]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].data_rate = recvBuf[3];
 800137e:	4b74      	ldr	r3, [pc, #464]	@ (8001550 <hmi_recv+0x448>)
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	4619      	mov	r1, r3
 8001384:	4b72      	ldr	r3, [pc, #456]	@ (8001550 <hmi_recv+0x448>)
 8001386:	78d8      	ldrb	r0, [r3, #3]
 8001388:	4a72      	ldr	r2, [pc, #456]	@ (8001554 <hmi_recv+0x44c>)
 800138a:	460b      	mov	r3, r1
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	4413      	add	r3, r2
 8001392:	3303      	adds	r3, #3
 8001394:	4602      	mov	r2, r0
 8001396:	701a      	strb	r2, [r3, #0]
                        dwt_setting_data.dwt_setting_value[recvBuf[1]].tx_power = recvBuf[4];
 8001398:	4b6d      	ldr	r3, [pc, #436]	@ (8001550 <hmi_recv+0x448>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	4619      	mov	r1, r3
 800139e:	4b6c      	ldr	r3, [pc, #432]	@ (8001550 <hmi_recv+0x448>)
 80013a0:	7918      	ldrb	r0, [r3, #4]
 80013a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001554 <hmi_recv+0x44c>)
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	4602      	mov	r2, r0
 80013b0:	701a      	strb	r2, [r3, #0]
						dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id = recvBuf[6];
 80013b2:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <hmi_recv+0x448>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4b65      	ldr	r3, [pc, #404]	@ (8001550 <hmi_recv+0x448>)
 80013ba:	7998      	ldrb	r0, [r3, #6]
 80013bc:	4a65      	ldr	r2, [pc, #404]	@ (8001554 <hmi_recv+0x44c>)
 80013be:	460b      	mov	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	4413      	add	r3, r2
 80013c6:	3306      	adds	r3, #6
 80013c8:	4602      	mov	r2, r0
 80013ca:	701a      	strb	r2, [r3, #0]
                        HMISends("page loading\xff\xff\xff");
 80013cc:	4862      	ldr	r0, [pc, #392]	@ (8001558 <hmi_recv+0x450>)
 80013ce:	f002 fdeb 	bl	8003fa8 <HMISends>
                        reset_DWIC(); 
 80013d2:	f004 ff39 	bl	8006248 <reset_DWIC>
                        running_device = dwt_setting_data.dwt_setting_value[recvBuf[1]].dev_id;
 80013d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <hmi_recv+0x448>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	4619      	mov	r1, r3
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <hmi_recv+0x44c>)
 80013de:	460b      	mov	r3, r1
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	4413      	add	r3, r2
 80013e6:	3306      	adds	r3, #6
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <hmi_recv+0x454>)
 80013ec:	701a      	strb	r2, [r3, #0]
                        if(flags.function == example_func[recvBuf[1]].function)
 80013ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001560 <hmi_recv+0x458>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	4b57      	ldr	r3, [pc, #348]	@ (8001550 <hmi_recv+0x448>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	495b      	ldr	r1, [pc, #364]	@ (8001564 <hmi_recv+0x45c>)
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d114      	bne.n	800142c <hmi_recv+0x324>
                        {
                            if(example_func[recvBuf[1]].initfunction() == 1)
 8001402:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <hmi_recv+0x448>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	461a      	mov	r2, r3
 8001408:	4b56      	ldr	r3, [pc, #344]	@ (8001564 <hmi_recv+0x45c>)
 800140a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800140e:	4798      	blx	r3
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <hmi_recv+0x31c>
                            {
                                flags.function = NULL;
 8001416:	4b52      	ldr	r3, [pc, #328]	@ (8001560 <hmi_recv+0x458>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
                                flags.func_allow_run = 0;
 800141c:	4b50      	ldr	r3, [pc, #320]	@ (8001560 <hmi_recv+0x458>)
 800141e:	2200      	movs	r2, #0
 8001420:	721a      	strb	r2, [r3, #8]
 8001422:	e088      	b.n	8001536 <hmi_recv+0x42e>
                            }
                            else
                            {
                                flags.func_allow_run = 1;
 8001424:	4b4e      	ldr	r3, [pc, #312]	@ (8001560 <hmi_recv+0x458>)
 8001426:	2201      	movs	r2, #1
 8001428:	721a      	strb	r2, [r3, #8]
 800142a:	e084      	b.n	8001536 <hmi_recv+0x42e>
                            }
                        }
                        else
                        {
                            flags.function = NULL;
 800142c:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <hmi_recv+0x458>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
                            HMISends("page menu\xff\xff\xff");
 8001432:	484d      	ldr	r0, [pc, #308]	@ (8001568 <hmi_recv+0x460>)
 8001434:	f002 fdb8 	bl	8003fa8 <HMISends>
 8001438:	e07d      	b.n	8001536 <hmi_recv+0x42e>
                        }
                    }
                }
            }
            else if(recvBufLen == 6)
 800143a:	4b4c      	ldr	r3, [pc, #304]	@ (800156c <hmi_recv+0x464>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	2b06      	cmp	r3, #6
 8001440:	d179      	bne.n	8001536 <hmi_recv+0x42e>
            {
				/* Record the current page of the HMI display */
                if(recvBuf[0] == 0xaa && recvBuf[1] == 0xbb)
 8001442:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <hmi_recv+0x448>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2baa      	cmp	r3, #170	@ 0xaa
 8001448:	d175      	bne.n	8001536 <hmi_recv+0x42e>
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <hmi_recv+0x448>)
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001450:	d171      	bne.n	8001536 <hmi_recv+0x42e>
                {
                    switch(recvBuf[2])
 8001452:	4b3f      	ldr	r3, [pc, #252]	@ (8001550 <hmi_recv+0x448>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	3b01      	subs	r3, #1
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d860      	bhi.n	800151e <hmi_recv+0x416>
 800145c:	a201      	add	r2, pc, #4	@ (adr r2, 8001464 <hmi_recv+0x35c>)
 800145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001462:	bf00      	nop
 8001464:	080014a5 	.word	0x080014a5
 8001468:	080014a9 	.word	0x080014a9
 800146c:	0800151f 	.word	0x0800151f
 8001470:	080014b1 	.word	0x080014b1
 8001474:	080014b9 	.word	0x080014b9
 8001478:	0800151f 	.word	0x0800151f
 800147c:	0800151f 	.word	0x0800151f
 8001480:	080014c1 	.word	0x080014c1
 8001484:	0800151f 	.word	0x0800151f
 8001488:	0800151f 	.word	0x0800151f
 800148c:	080014d5 	.word	0x080014d5
 8001490:	080014dd 	.word	0x080014dd
 8001494:	080014f3 	.word	0x080014f3
 8001498:	080014fb 	.word	0x080014fb
 800149c:	0800150f 	.word	0x0800150f
 80014a0:	08001517 	.word	0x08001517
                    {
                        case 0x01:
                            NVIC_SystemReset();
 80014a4:	f7ff fe1a 	bl	80010dc <__NVIC_SystemReset>
                        break;
                        case 0x02:
                            hmi_page = MENU;
 80014a8:	4b31      	ldr	r3, [pc, #196]	@ (8001570 <hmi_recv+0x468>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
                        break;
 80014ae:	e037      	b.n	8001520 <hmi_recv+0x418>
                        case 0x04:
                            hmi_page = SIMGLETXCHOOSE;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <hmi_recv+0x468>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	701a      	strb	r2, [r3, #0]
                        break;
 80014b6:	e033      	b.n	8001520 <hmi_recv+0x418>
                        case 0x05:
                            hmi_page = RANGINGCHOOSE;
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <hmi_recv+0x468>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	701a      	strb	r2, [r3, #0]
                        break;
 80014be:	e02f      	b.n	8001520 <hmi_recv+0x418>
                        case 0x08:
                            hmi_page = SETTING;
 80014c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <hmi_recv+0x468>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	701a      	strb	r2, [r3, #0]
							cur_opt[hmi_page] = 0;//It resets its highlight position each time you enter the screen
 80014c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <hmi_recv+0x468>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <hmi_recv+0x46c>)
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]
                        break;
 80014d2:	e025      	b.n	8001520 <hmi_recv+0x418>
                        case 0x0b:
                            hmi_page = SIMGLETX;
 80014d4:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <hmi_recv+0x468>)
 80014d6:	220b      	movs	r2, #11
 80014d8:	701a      	strb	r2, [r3, #0]
                        break;
 80014da:	e021      	b.n	8001520 <hmi_recv+0x418>
                        case 0x0c:
                            hmi_page = SIMGLERX;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <hmi_recv+0x468>)
 80014de:	220c      	movs	r2, #12
 80014e0:	701a      	strb	r2, [r3, #0]
							flags.target_allow_run_time = SIMGLE_RX_RERUN_INTERVAL;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <hmi_recv+0x458>)
 80014e4:	f240 32de 	movw	r2, #990	@ 0x3de
 80014e8:	815a      	strh	r2, [r3, #10]
							flags.time_to_allow_run = 1;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <hmi_recv+0x458>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	819a      	strh	r2, [r3, #12]
                        break;
 80014f0:	e016      	b.n	8001520 <hmi_recv+0x418>
                        case 0x0d:
                            hmi_page = RANGINGINIT;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <hmi_recv+0x468>)
 80014f4:	220d      	movs	r2, #13
 80014f6:	701a      	strb	r2, [r3, #0]
                        break;
 80014f8:	e012      	b.n	8001520 <hmi_recv+0x418>
                        case 0x0e:
                            hmi_page = RANGINGRESP;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <hmi_recv+0x468>)
 80014fc:	220e      	movs	r2, #14
 80014fe:	701a      	strb	r2, [r3, #0]
							flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <hmi_recv+0x458>)
 8001502:	225a      	movs	r2, #90	@ 0x5a
 8001504:	815a      	strh	r2, [r3, #10]
							flags.time_to_allow_run = 1;
 8001506:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <hmi_recv+0x458>)
 8001508:	2201      	movs	r2, #1
 800150a:	819a      	strh	r2, [r3, #12]
                        break;
 800150c:	e008      	b.n	8001520 <hmi_recv+0x418>
                        case 0x0f:
                            hmi_page = LOADING;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <hmi_recv+0x468>)
 8001510:	220f      	movs	r2, #15
 8001512:	701a      	strb	r2, [r3, #0]
                        break;
 8001514:	e004      	b.n	8001520 <hmi_recv+0x418>
                        case 0x10:
                            hmi_page = ABOUT;
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <hmi_recv+0x468>)
 8001518:	2210      	movs	r2, #16
 800151a:	701a      	strb	r2, [r3, #0]
                        break;
 800151c:	e000      	b.n	8001520 <hmi_recv+0x418>
						default:break;
 800151e:	bf00      	nop
                    }
                    page_opts_sethighlight(hmi_page, cur_opt[hmi_page]);
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <hmi_recv+0x468>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <hmi_recv+0x468>)
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	4611      	mov	r1, r2
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <hmi_recv+0x46c>)
 800152c:	5c52      	ldrb	r2, [r2, r1]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f002 ff99 	bl	8004468 <page_opts_sethighlight>
                }
            }
        }
        flags.uart_recv = 0; 
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <hmi_recv+0x458>)
 8001538:	2200      	movs	r2, #0
 800153a:	71da      	strb	r2, [r3, #7]
        recvBufLen = 0;
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <hmi_recv+0x464>)
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]
        return 1;
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <hmi_recv+0x440>
    }
    return 0;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200006dc 	.word	0x200006dc
 8001554:	20000340 	.word	0x20000340
 8001558:	0800de78 	.word	0x0800de78
 800155c:	2000033c 	.word	0x2000033c
 8001560:	20000744 	.word	0x20000744
 8001564:	20000000 	.word	0x20000000
 8001568:	0800de68 	.word	0x0800de68
 800156c:	20000740 	.word	0x20000740
 8001570:	200000e4 	.word	0x200000e4
 8001574:	2000089c 	.word	0x2000089c

08001578 <dwt_structs_init>:


void dwt_structs_init(uint8_t func_idx, dwt_config_t* dwt_config, dwt_txconfig_t* dwt_txconfig)
{
 8001578:	b4b0      	push	{r4, r5, r7}
 800157a:	b091      	sub	sp, #68	@ 0x44
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	73fb      	strb	r3, [r7, #15]
    if(dwt_setting_data.dwt_setting_value[func_idx].channel == 1)
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	4920      	ldr	r1, [pc, #128]	@ (800160c <dwt_structs_init+0x94>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	440b      	add	r3, r1
 8001592:	3302      	adds	r3, #2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d103      	bne.n	80015a2 <dwt_structs_init+0x2a>
        dwt_config->chan = 9;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2209      	movs	r2, #9
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e002      	b.n	80015a8 <dwt_structs_init+0x30>
    else
        dwt_config->chan = 5;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2205      	movs	r2, #5
 80015a6:	701a      	strb	r2, [r3, #0]
    
    if(dwt_setting_data.dwt_setting_value[func_idx].data_rate == 1)
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	4918      	ldr	r1, [pc, #96]	@ (800160c <dwt_structs_init+0x94>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	3303      	adds	r3, #3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d103      	bne.n	80015c4 <dwt_structs_init+0x4c>
        dwt_config->dataRate = DWT_BR_850K;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2200      	movs	r2, #0
 80015c0:	719a      	strb	r2, [r3, #6]
 80015c2:	e002      	b.n	80015ca <dwt_structs_init+0x52>
    else
        dwt_config->dataRate = DWT_BR_6M8;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2201      	movs	r2, #1
 80015c8:	719a      	strb	r2, [r3, #6]
    
	/* You can modify this to run other power gains */
	// The following parameters may not accurately correspond to the corresponding gain and are only an estimate
    uint32_t powervalue[11] = {
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <dwt_structs_init+0x98>)
 80015cc:	f107 0414 	add.w	r4, r7, #20
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        [GAIN_9DB]  = 0x18181818,     //9db
        [GAIN_6DB]  = 0x06060606,     //6db      
        [GAIN_3DB]  = 0x04040404,     //3db
        [GAIN_0DB]  = 0x00000000      //0db
    };    
    dwt_txconfig->power = powervalue[dwt_setting_data.dwt_setting_value[func_idx].tx_power];
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	4909      	ldr	r1, [pc, #36]	@ (800160c <dwt_structs_init+0x94>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	3304      	adds	r3, #4
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	3340      	adds	r3, #64	@ 0x40
 80015f6:	443b      	add	r3, r7
 80015f8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	605a      	str	r2, [r3, #4]
}
 8001600:	bf00      	nop
 8001602:	3744      	adds	r7, #68	@ 0x44
 8001604:	46bd      	mov	sp, r7
 8001606:	bcb0      	pop	{r4, r5, r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000340 	.word	0x20000340
 8001610:	0800ded8 	.word	0x0800ded8

08001614 <dwt_xfer3000>:
    const uint16_t    indx,       //sub-index, calculated from regFileID 0..0x7F,
    const uint16_t    length,
    uint8_t           *buffer,
    const spi_modes_e mode
)
{	
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	817b      	strh	r3, [r7, #10]
 8001622:	4613      	mov	r3, r2
 8001624:	813b      	strh	r3, [r7, #8]
    sprintf(str, "%x, %x\r\n", regFileID, indx);
    uart_transmit(str, strlen(str));
    Sleep(10);
    */
    uint8_t  header[2];           // Buffer to compose header in
    uint16_t cnt = 0;             // Counter for length of a header
 8001626:	2300      	movs	r3, #0
 8001628:	83fb      	strh	r3, [r7, #30]

    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 800162a:	897a      	ldrh	r2, [r7, #10]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	0c1b      	lsrs	r3, r3, #16
 8001632:	b29b      	uxth	r3, r3
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	83bb      	strh	r3, [r7, #28]
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	b29a      	uxth	r2, r3
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	4413      	add	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001648:	837b      	strh	r3, [r7, #26]

    assert(reg_file     <= 0x1F);
 800164a:	8bbb      	ldrh	r3, [r7, #28]
 800164c:	2b1f      	cmp	r3, #31
 800164e:	d905      	bls.n	800165c <dwt_xfer3000+0x48>
 8001650:	4b71      	ldr	r3, [pc, #452]	@ (8001818 <dwt_xfer3000+0x204>)
 8001652:	4a72      	ldr	r2, [pc, #456]	@ (800181c <dwt_xfer3000+0x208>)
 8001654:	21d9      	movs	r1, #217	@ 0xd9
 8001656:	4872      	ldr	r0, [pc, #456]	@ (8001820 <dwt_xfer3000+0x20c>)
 8001658:	f008 f88c 	bl	8009774 <__assert_func>
    assert(reg_offset   <= 0x7F);
 800165c:	8b7b      	ldrh	r3, [r7, #26]
 800165e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001660:	d905      	bls.n	800166e <dwt_xfer3000+0x5a>
 8001662:	4b70      	ldr	r3, [pc, #448]	@ (8001824 <dwt_xfer3000+0x210>)
 8001664:	4a6d      	ldr	r2, [pc, #436]	@ (800181c <dwt_xfer3000+0x208>)
 8001666:	21da      	movs	r1, #218	@ 0xda
 8001668:	486d      	ldr	r0, [pc, #436]	@ (8001820 <dwt_xfer3000+0x20c>)
 800166a:	f008 f883 	bl	8009774 <__assert_func>
    assert(length       < 0x3100);
 800166e:	893b      	ldrh	r3, [r7, #8]
 8001670:	f5b3 5f44 	cmp.w	r3, #12544	@ 0x3100
 8001674:	d305      	bcc.n	8001682 <dwt_xfer3000+0x6e>
 8001676:	4b6c      	ldr	r3, [pc, #432]	@ (8001828 <dwt_xfer3000+0x214>)
 8001678:	4a68      	ldr	r2, [pc, #416]	@ (800181c <dwt_xfer3000+0x208>)
 800167a:	21db      	movs	r1, #219	@ 0xdb
 800167c:	4868      	ldr	r0, [pc, #416]	@ (8001820 <dwt_xfer3000+0x20c>)
 800167e:	f008 f879 	bl	8009774 <__assert_func>
    assert(mode == DW3000_SPI_WR_BIT ||\
 8001682:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001688:	d017      	beq.n	80016ba <dwt_xfer3000+0xa6>
 800168a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d014      	beq.n	80016ba <dwt_xfer3000+0xa6>
 8001690:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001692:	f248 0201 	movw	r2, #32769	@ 0x8001
 8001696:	4293      	cmp	r3, r2
 8001698:	d00f      	beq.n	80016ba <dwt_xfer3000+0xa6>
 800169a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800169c:	f248 0202 	movw	r2, #32770	@ 0x8002
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00a      	beq.n	80016ba <dwt_xfer3000+0xa6>
 80016a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016a6:	f248 0203 	movw	r2, #32771	@ 0x8003
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d005      	beq.n	80016ba <dwt_xfer3000+0xa6>
 80016ae:	4b5f      	ldr	r3, [pc, #380]	@ (800182c <dwt_xfer3000+0x218>)
 80016b0:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <dwt_xfer3000+0x208>)
 80016b2:	21dc      	movs	r1, #220	@ 0xdc
 80016b4:	485a      	ldr	r0, [pc, #360]	@ (8001820 <dwt_xfer3000+0x20c>)
 80016b6:	f008 f85d 	bl	8009774 <__assert_func>
           mode == DW3000_SPI_AND_OR_16 ||\
           mode == DW3000_SPI_AND_OR_32);

    // Write message header selecting WRITE operation and addresses as appropriate
    uint16_t  addr;
    addr = (uint16_t)((reg_file << 9) | (reg_offset << 2));
 80016ba:	8bbb      	ldrh	r3, [r7, #28]
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	b21a      	sxth	r2, r3
 80016c0:	8b7b      	ldrh	r3, [r7, #26]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	833b      	strh	r3, [r7, #24]

    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 80016cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80016ce:	8b3b      	ldrh	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	743b      	strb	r3, [r7, #16]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	747b      	strb	r3, [r7, #17]

    if (/*reg_offset == 0 && */length == 0)
 80016f2:	893b      	ldrh	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d114      	bne.n	8001722 <dwt_xfer3000+0x10e>
    {   /* Fast Access Commands (FAC)
         * only write operation is possible for this mode
         * bit_7=one is W operation, bit_6=zero: FastAccess command, bit_[5..1] addr, bits_0=one: MODE of FastAccess
         */
        assert(mode == DW3000_SPI_WR_BIT);
 80016f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016fe:	d005      	beq.n	800170c <dwt_xfer3000+0xf8>
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <dwt_xfer3000+0x21c>)
 8001702:	4a46      	ldr	r2, [pc, #280]	@ (800181c <dwt_xfer3000+0x208>)
 8001704:	21ee      	movs	r1, #238	@ 0xee
 8001706:	4846      	ldr	r0, [pc, #280]	@ (8001820 <dwt_xfer3000+0x20c>)
 8001708:	f008 f834 	bl	8009774 <__assert_func>

        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8001718:	b2db      	uxtb	r3, r3
 800171a:	743b      	strb	r3, [r7, #16]
        cnt = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	83fb      	strh	r3, [r7, #30]
 8001720:	e015      	b.n	800174e <dwt_xfer3000+0x13a>
    }
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 8001722:	8b7b      	ldrh	r3, [r7, #26]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10b      	bne.n	8001740 <dwt_xfer3000+0x12c>
 8001728:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800172a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800172e:	d002      	beq.n	8001736 <dwt_xfer3000+0x122>
 8001730:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <dwt_xfer3000+0x12c>
    {   /* Fast Access Commands with Read/Write support (FACRW)
         * bit_7 is R/W operation, bit_6=zero: FastAccess command, bit_[5..1] addr, bits_0=zero: MODE of FastAccess
         */
        header[0] |= DW3000_SPI_FARW;
 8001736:	7c3b      	ldrb	r3, [r7, #16]
 8001738:	743b      	strb	r3, [r7, #16]
        cnt = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	83fb      	strh	r3, [r7, #30]
 800173e:	e006      	b.n	800174e <dwt_xfer3000+0x13a>
    else
    {   /* Extended Address Mode with Read/Write support (EAMRW)
         * b[0] = bit_7 is R/W operation, bit_6 one = ExtendedAddressMode;
         * b[1] = addr<<2 | (mode&0x3)
         */
        header[0] |= DW3000_SPI_EAMRW;
 8001740:	7c3b      	ldrb	r3, [r7, #16]
 8001742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001746:	b2db      	uxtb	r3, r3
 8001748:	743b      	strb	r3, [r7, #16]
        cnt = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	83fb      	strh	r3, [r7, #30]
    }

    switch (mode)
 800174e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001750:	2b00      	cmp	r3, #0
 8001752:	d026      	beq.n	80017a2 <dwt_xfer3000+0x18e>
 8001754:	2b00      	cmp	r3, #0
 8001756:	db59      	blt.n	800180c <dwt_xfer3000+0x1f8>
 8001758:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800175c:	2b03      	cmp	r3, #3
 800175e:	d855      	bhi.n	800180c <dwt_xfer3000+0x1f8>
    case    DW3000_SPI_AND_OR_8:
    case    DW3000_SPI_AND_OR_16:
    case    DW3000_SPI_AND_OR_32:
    case    DW3000_SPI_WR_BIT:
    {
        uint8_t crc8 = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <dwt_xfer3000+0x220>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	7d1b      	ldrb	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d011      	beq.n	8001792 <dwt_xfer3000+0x17e>
        {
            //generate 8 bit CRC
            crc8 = dwt_generatecrc8(header, cnt, 0);
 800176e:	8bf9      	ldrh	r1, [r7, #30]
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f9ac 	bl	8001ad4 <dwt_generatecrc8>
 800177c:	4603      	mov	r3, r0
 800177e:	75fb      	strb	r3, [r7, #23]
            crc8 = dwt_generatecrc8(buffer, length, crc8);
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	7dfa      	ldrb	r2, [r7, #23]
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f9a4 	bl	8001ad4 <dwt_generatecrc8>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]
        {
            
            // Write it to the SPI
            writetospi(cnt, header, length, buffer);
        }
        break;
 8001790:	e03e      	b.n	8001810 <dwt_xfer3000+0x1fc>
            writetospi(cnt, header, length, buffer);
 8001792:	893a      	ldrh	r2, [r7, #8]
 8001794:	f107 0110 	add.w	r1, r7, #16
 8001798:	8bf8      	ldrh	r0, [r7, #30]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f004 fdb4 	bl	8006308 <writetospi_serial>
        break;
 80017a0:	e036      	b.n	8001810 <dwt_xfer3000+0x1fc>
    }
    case DW3000_SPI_RD_BIT:
        {
            readfromspi(cnt, header, length, buffer);
 80017a2:	893a      	ldrh	r2, [r7, #8]
 80017a4:	f107 0110 	add.w	r1, r7, #16
 80017a8:	8bf8      	ldrh	r0, [r7, #30]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f004 fe2a 	bl	8006404 <readfromspi_serial>

            //check that the SPI read has correct CRC-8 byte
            //also don't do for SPICRC_CFG_ID register itself to prevent infinite recursion
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <dwt_xfer3000+0x220>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	7d1b      	ldrb	r3, [r3, #20]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d129      	bne.n	800180e <dwt_xfer3000+0x1fa>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b18      	cmp	r3, #24
 80017be:	d026      	beq.n	800180e <dwt_xfer3000+0x1fa>
            {
                uint8_t crc8, dwcrc8;
                //generate 8 bit CRC from the read data
                crc8 = dwt_generatecrc8(header, cnt, 0);
 80017c0:	8bf9      	ldrh	r1, [r7, #30]
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	2200      	movs	r2, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f983 	bl	8001ad4 <dwt_generatecrc8>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75bb      	strb	r3, [r7, #22]
                crc8 = dwt_generatecrc8(buffer, length, crc8);
 80017d2:	893b      	ldrh	r3, [r7, #8]
 80017d4:	7dba      	ldrb	r2, [r7, #22]
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f97b 	bl	8001ad4 <dwt_generatecrc8>
 80017de:	4603      	mov	r3, r0
 80017e0:	75bb      	strb	r3, [r7, #22]

                //read the CRC that was generated in the DW3000 for the read transaction
                dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 80017e2:	2100      	movs	r1, #0
 80017e4:	2018      	movs	r0, #24
 80017e6:	f000 f892 	bl	800190e <dwt_read8bitoffsetreg>
 80017ea:	4603      	mov	r3, r0
 80017ec:	757b      	strb	r3, [r7, #21]

                //if the two CRC don't match report SPI read error
                //potential problem in callback if it will try to read/write SPI with CRC again.
                if (crc8 != dwcrc8)
 80017ee:	7dba      	ldrb	r2, [r7, #22]
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d00b      	beq.n	800180e <dwt_xfer3000+0x1fa>
                {
                    if (pdw3000local->cbSPIRDErr != NULL)
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <dwt_xfer3000+0x220>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <dwt_xfer3000+0x1fa>
                        pdw3000local->cbSPIRDErr();
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <dwt_xfer3000+0x220>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	4798      	blx	r3
                }

            }
            break;
 8001808:	e001      	b.n	800180e <dwt_xfer3000+0x1fa>
 800180a:	e7ff      	b.n	800180c <dwt_xfer3000+0x1f8>
        }
    default:
        while(1);
 800180c:	e7fd      	b.n	800180a <dwt_xfer3000+0x1f6>
            break;
 800180e:	bf00      	nop
        break;
    }

} // end dwt_xfer3000()
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	0800df04 	.word	0x0800df04
 800181c:	0800e808 	.word	0x0800e808
 8001820:	0800df18 	.word	0x0800df18
 8001824:	0800df34 	.word	0x0800df34
 8001828:	0800df48 	.word	0x0800df48
 800182c:	0800df58 	.word	0x0800df58
 8001830:	0800dff0 	.word	0x0800dff0
 8001834:	20000038 	.word	0x20000038

08001838 <dwt_writetodevice>:
    uint32_t      regFileID,
    uint16_t      index,
    uint16_t      length,
    uint8_t       *buffer
)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	4613      	mov	r3, r2
 8001848:	813b      	strh	r3, [r7, #8]
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 800184a:	893a      	ldrh	r2, [r7, #8]
 800184c:	8979      	ldrh	r1, [r7, #10]
 800184e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fedc 	bl	8001614 <dwt_xfer3000>
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <dwt_readfromdevice>:
    uint32_t  regFileID,
    uint16_t  index,
    uint16_t  length,
    uint8_t   *buffer
)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	4613      	mov	r3, r2
 8001874:	813b      	strh	r3, [r7, #8]
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8001876:	893a      	ldrh	r2, [r7, #8]
 8001878:	8979      	ldrh	r1, [r7, #10]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff fec7 	bl	8001614 <dwt_xfer3000>
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32_t dwt_read32bitoffsetreg(uint32_t regFileID, uint16_t regOffset)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	807b      	strh	r3, [r7, #2]
    int     j ;
    uint32_t  regval = 0 ;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
    uint8_t   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	8879      	ldrh	r1, [r7, #2]
 80018a4:	2204      	movs	r2, #4
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffdc 	bl	8001864 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80018ac:	2303      	movs	r3, #3
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00b      	b.n	80018ca <dwt_read32bitoffsetreg+0x3c>
    {
        regval = (regval << 8) + buffer[j] ;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	f107 010c 	add.w	r1, r7, #12
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	440a      	add	r2, r1
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
    for (j = 3 ; j >= 0 ; j --)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	daf0      	bge.n	80018b2 <dwt_read32bitoffsetreg+0x24>
    }

    return (regval);
 80018d0:	693b      	ldr	r3, [r7, #16]

} // end dwt_read32bitoffsetreg()
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16_t dwt_read16bitoffsetreg(uint32_t regFileID,uint16_t regOffset)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
    uint16_t  regval = 0 ;
 80018e6:	2300      	movs	r3, #0
 80018e8:	81fb      	strh	r3, [r7, #14]
    uint8_t   buffer[2] ;
    
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	8879      	ldrh	r1, [r7, #2]
 80018f0:	2202      	movs	r2, #2
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffb6 	bl	8001864 <dwt_readfromdevice>

    regval = (uint16_t)((uint16_t)buffer[1] << 8) + buffer[0] ;
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	7b3a      	ldrb	r2, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001904:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8_t dwt_read8bitoffsetreg(uint32_t regFileID, uint16_t regOffset)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
    uint8_t regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800191a:	f107 030f 	add.w	r3, r7, #15
 800191e:	8879      	ldrh	r1, [r7, #2]
 8001920:	2201      	movs	r2, #1
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff9e 	bl	8001864 <dwt_readfromdevice>

    return regval ;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(uint32_t regFileID, uint16_t regOffset, uint32_t regval)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	460b      	mov	r3, r1
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	817b      	strh	r3, [r7, #10]
    int     j ;
    uint8_t   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00d      	b.n	8001962 <dwt_write32bitoffsetreg+0x30>
    {
        buffer[j] = (uint8_t)regval;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b2d9      	uxtb	r1, r3
 800194a:	f107 0210 	add.w	r2, r7, #16
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b03      	cmp	r3, #3
 8001966:	ddee      	ble.n	8001946 <dwt_write32bitoffsetreg+0x14>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	8979      	ldrh	r1, [r7, #10]
 800196e:	2204      	movs	r2, #4
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff ff61 	bl	8001838 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(uint32_t regFileID, uint16_t regOffset, uint16_t regval)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	803b      	strh	r3, [r7, #0]
    uint8_t   buffer[2] ;

    buffer[0] = (uint8_t)regval;
 800198e:	883b      	ldrh	r3, [r7, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	733b      	strb	r3, [r7, #12]
    buffer[1] = regval >> 8 ;
 8001994:	883b      	ldrh	r3, [r7, #0]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	737b      	strb	r3, [r7, #13]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	8879      	ldrh	r1, [r7, #2]
 80019a4:	2202      	movs	r2, #2
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff46 	bl	8001838 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(uint32_t regFileID, uint16_t regOffset, uint8_t regval)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
    //uint8_t   buf[1];
    //buf[0] = regval;
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80019c4:	1c7b      	adds	r3, r7, #1
 80019c6:	8879      	ldrh	r1, [r7, #2]
 80019c8:	2201      	movs	r2, #1
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff34 	bl	8001838 <dwt_writetodevice>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <dwt_modify32bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify32bitoffsetreg(const uint32_t regFileID, const uint16_t regOffset, const uint32_t _and, const uint32_t _or)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	460b      	mov	r3, r1
 80019e6:	817b      	strh	r3, [r7, #10]
    uint8_t buf[8];
    buf[0] = (uint8_t)_and;//       &0xFF;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	743b      	strb	r3, [r7, #16]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	747b      	strb	r3, [r7, #17]
    buf[2] = (uint8_t)(_and>>16);// &0xFF;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	74bb      	strb	r3, [r7, #18]
    buf[3] = (uint8_t)(_and>>24);// &0xFF;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0e1b      	lsrs	r3, r3, #24
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	74fb      	strb	r3, [r7, #19]
    buf[4] = (uint8_t)_or;//        &0xFF;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	753b      	strb	r3, [r7, #20]
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	757b      	strb	r3, [r7, #21]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	0c1b      	lsrs	r3, r3, #16
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	75bb      	strb	r3, [r7, #22]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	0e1b      	lsrs	r3, r3, #24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	75fb      	strb	r3, [r7, #23]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	f248 0203 	movw	r2, #32771	@ 0x8003
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	2208      	movs	r2, #8
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7ff fdee 	bl	8001614 <dwt_xfer3000>
}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <dwt_modify16bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify16bitoffsetreg(const uint32_t regFileID, const uint16_t regOffset, const uint16_t _and, const uint16_t _or)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	460b      	mov	r3, r1
 8001a54:	813b      	strh	r3, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[4];
    buf[0] = (uint8_t)_and;//       &0xFF;
 8001a5a:	893b      	ldrh	r3, [r7, #8]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	753b      	strb	r3, [r7, #20]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8001a60:	893b      	ldrh	r3, [r7, #8]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	757b      	strb	r3, [r7, #21]
    buf[2] = (uint8_t)_or;//        &0xFF;
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	75bb      	strb	r3, [r7, #22]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	75fb      	strb	r3, [r7, #23]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	f248 0202 	movw	r2, #32770	@ 0x8002
 8001a84:	9200      	str	r2, [sp, #0]
 8001a86:	2204      	movs	r2, #4
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fdc3 	bl	8001614 <dwt_xfer3000>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <dwt_modify8bitoffsetreg>:
 * @param regval_and:   the value to AND to register
 * @param regval_or :   the value to OR to register
 * @output          :   no return value
 */
void dwt_modify8bitoffsetreg(const uint32_t regFileID, const uint16_t regOffset, const uint8_t _and, const uint8_t _or)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af02      	add	r7, sp, #8
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	807b      	strh	r3, [r7, #2]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	707b      	strb	r3, [r7, #1]
 8001aac:	4613      	mov	r3, r2
 8001aae:	703b      	strb	r3, [r7, #0]
    uint8_t buf[2];
    buf[0] = _and;
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	733b      	strb	r3, [r7, #12]
    buf[1] = _or;
 8001ab4:	783b      	ldrb	r3, [r7, #0]
 8001ab6:	737b      	strb	r3, [r7, #13]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf),buf, DW3000_SPI_AND_OR_8);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	8879      	ldrh	r1, [r7, #2]
 8001abe:	f248 0201 	movw	r2, #32769	@ 0x8001
 8001ac2:	9200      	str	r2, [sp, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fda4 	bl	8001614 <dwt_xfer3000>
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <dwt_generatecrc8>:
* output parameters
*
* returns 8-bit calculate CRC value
*/
uint8_t dwt_generatecrc8(const uint8_t* byteArray, int len, uint8_t crcRemainderInit)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
    int byte;

    /*
    * Divide the message by the polynomial, a byte at a time.
    */
    for (byte = 0; byte < len; ++byte)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e00d      	b.n	8001b04 <dwt_generatecrc8+0x30>
    {
        data = byteArray[byte] ^ crcRemainderInit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4053      	eors	r3, r2
 8001af4:	74fb      	strb	r3, [r7, #19]
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <dwt_generatecrc8+0x44>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	71fb      	strb	r3, [r7, #7]
    for (byte = 0; byte < len; ++byte)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbed      	blt.n	8001ae8 <dwt_generatecrc8+0x14>
    }

    /*
    * The final remainder is the CRC.
    */
    return(crcRemainderInit);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	200003b8 	.word	0x200003b8

08001b1c <_dwt_prog_ldo_and_bias_tune>:
    pdw3000local->spicrc = crc_mode;
}

static
void _dwt_prog_ldo_and_bias_tune(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 8001b20:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <_dwt_prog_ldo_and_bias_tune+0x2c>)
 8001b2c:	f7ff ff88 	bl	8001a40 <dwt_modify16bitoffsetreg>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <_dwt_prog_ldo_and_bias_tune+0x30>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	7a1b      	ldrb	r3, [r3, #8]
 8001b36:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4804      	ldr	r0, [pc, #16]	@ (8001b50 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8001b3e:	f7ff ff7f 	bl	8001a40 <dwt_modify16bitoffsetreg>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	000b0008 	.word	0x000b0008
 8001b4c:	20000038 	.word	0x20000038
 8001b50:	0011001f 	.word	0x0011001f

08001b54 <_dwt_kick_dgc_on_wakeup>:
*
* no return value
*/
static
void _dwt_kick_dgc_on_wakeup(int8_t channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
    /* The DGC_SEL bit must be set to '0' for channel 5 and '1' for channel 9 */
    if (channel == 5)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d107      	bne.n	8001b76 <_dwt_kick_dgc_on_wakeup+0x22>
    {
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8001b66:	2340      	movs	r3, #64	@ 0x40
 8001b68:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <_dwt_kick_dgc_on_wakeup+0x44>)
 8001b70:	f7ff ff32 	bl	80019d8 <dwt_modify32bitoffsetreg>
    else if (channel == 9)
    {
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
                (DWT_DGC_SEL_CH9 << OTP_CFG_DGC_SEL_BIT_OFFSET) | OTP_CFG_DGC_KICK_BIT_MASK);
    }
}
 8001b74:	e00b      	b.n	8001b8e <_dwt_kick_dgc_on_wakeup+0x3a>
    else if (channel == 9)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d107      	bne.n	8001b8e <_dwt_kick_dgc_on_wakeup+0x3a>
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8001b7e:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8001b82:	f46f 5200 	mvn.w	r2, #8192	@ 0x2000
 8001b86:	2100      	movs	r1, #0
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <_dwt_kick_dgc_on_wakeup+0x44>)
 8001b8a:	f7ff ff25 	bl	80019d8 <dwt_modify32bitoffsetreg>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	000b0008 	.word	0x000b0008

08001b9c <dwt_initialise>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_initialise(int mode)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
   //uint16_t otp_addr;
   //uint32_t devid;
    uint32_t ldo_tune_lo;
    uint32_t ldo_tune_hi;

    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	73da      	strb	r2, [r3, #15]
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8001bac:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	821a      	strh	r2, [r3, #16]
    pdw3000local->spicrc = 0;
 8001bb4:	4b66      	ldr	r3, [pc, #408]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	751a      	strb	r2, [r3, #20]
    pdw3000local->stsconfig = 0; //STS off
 8001bbc:	4b64      	ldr	r3, [pc, #400]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	755a      	strb	r2, [r3, #21]
    pdw3000local->vBatP = 0;
 8001bc4:	4b62      	ldr	r3, [pc, #392]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	729a      	strb	r2, [r3, #10]
    pdw3000local->tempP = 0;
 8001bcc:	4b60      	ldr	r3, [pc, #384]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	72da      	strb	r2, [r3, #11]

    pdw3000local->cbTxDone = NULL;
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw3000local->cbRxOk = NULL;
 8001bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw3000local->cbRxTo = NULL;
 8001be4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw3000local->cbRxErr = NULL;
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34
    pdw3000local->cbSPIRdy = NULL;
 8001bf4:	4b56      	ldr	r3, [pc, #344]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pdw3000local->cbSPIErr = NULL;
 8001bfc:	4b54      	ldr	r3, [pc, #336]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	639a      	str	r2, [r3, #56]	@ 0x38

    // Read and validate device ID return -1 if not recognised
    if (dwt_check_dev_id() != DWT_SUCCESS)
 8001c04:	f000 fe94 	bl	8002930 <dwt_check_dev_id>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <dwt_initialise+0x78>
    {
        return DWT_ERROR;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c12:	e099      	b.n	8001d48 <dwt_initialise+0x1ac>
    }

    //Read LDO_TUNE and BIAS_TUNE from OTP
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 8001c14:	2004      	movs	r0, #4
 8001c16:	f000 fe63 	bl	80028e0 <_dwt_otpread>
 8001c1a:	60f8      	str	r0, [r7, #12]
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 8001c1c:	2005      	movs	r0, #5
 8001c1e:	f000 fe5f 	bl	80028e0 <_dwt_otpread>
 8001c22:	60b8      	str	r0, [r7, #8]
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 8001c24:	200a      	movs	r0, #10
 8001c26:	f000 fe5b 	bl	80028e0 <_dwt_otpread>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b47      	ldr	r3, [pc, #284]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	721a      	strb	r2, [r3, #8]

    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <dwt_initialise+0xba>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <dwt_initialise+0xba>
 8001c48:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	7a1b      	ldrb	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <dwt_initialise+0xba>
    {
        _dwt_prog_ldo_and_bias_tune();
 8001c52:	f7ff ff63 	bl	8001b1c <_dwt_prog_ldo_and_bias_tune>
    }

    // Read DGC_CFG from OTP
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 8001c56:	2020      	movs	r0, #32
 8001c58:	f000 fe42 	bl	80028e0 <_dwt_otpread>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d54 <dwt_initialise+0x1b8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d104      	bne.n	8001c6e <dwt_initialise+0xd2>
    {
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 8001c64:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	725a      	strb	r2, [r3, #9]
 8001c6c:	e003      	b.n	8001c76 <dwt_initialise+0xda>
    }
    else
    {
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	725a      	strb	r2, [r3, #9]
    }

    // Load Part and Lot ID from OTP
    if(mode & DWT_READ_OTP_PID)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <dwt_initialise+0xf2>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c82:	681c      	ldr	r4, [r3, #0]
 8001c84:	2006      	movs	r0, #6
 8001c86:	f000 fe2b 	bl	80028e0 <_dwt_otpread>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6023      	str	r3, [r4, #0]
    if (mode & DWT_READ_OTP_LID)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <dwt_initialise+0x10a>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001c9a:	681c      	ldr	r4, [r3, #0]
 8001c9c:	2007      	movs	r0, #7
 8001c9e:	f000 fe1f 	bl	80028e0 <_dwt_otpread>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6063      	str	r3, [r4, #4]
    if (mode & DWT_READ_OTP_BAT)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <dwt_initialise+0x124>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 8001cb0:	2008      	movs	r0, #8
 8001cb2:	f000 fe15 	bl	80028e0 <_dwt_otpread>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	729a      	strb	r2, [r3, #10]
    if (mode & DWT_READ_OTP_TMP)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <dwt_initialise+0x13e>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 8001cca:	2009      	movs	r0, #9
 8001ccc:	f000 fe08 	bl	80028e0 <_dwt_otpread>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	72da      	strb	r2, [r3, #11]


    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7adb      	ldrb	r3, [r3, #11]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <dwt_initialise+0x150>
    {
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2285      	movs	r2, #133	@ 0x85
 8001cea:	72da      	strb	r2, [r3, #11]
    }

    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	7a9b      	ldrb	r3, [r3, #10]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <dwt_initialise+0x162>
    {
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 8001cf6:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2274      	movs	r2, #116	@ 0x74
 8001cfc:	729a      	strb	r2, [r3, #10]
    }

    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 8001cfe:	201f      	movs	r0, #31
 8001d00:	f000 fdee 	bl	80028e0 <_dwt_otpread>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	735a      	strb	r2, [r3, #13]

    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 8001d0e:	201e      	movs	r0, #30
 8001d10:	f000 fde6 	bl	80028e0 <_dwt_otpread>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	739a      	strb	r2, [r3, #14]
    if(pdw3000local->init_xtrim == 0)
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	7b9b      	ldrb	r3, [r3, #14]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <dwt_initialise+0x19a>
    {
        pdw3000local->init_xtrim = 0x2E ; //set default value
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	222e      	movs	r2, #46	@ 0x2e
 8001d34:	739a      	strb	r2, [r3, #14]
    }
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <dwt_initialise+0x1b4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	7b9b      	ldrb	r3, [r3, #14]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <dwt_initialise+0x1bc>)
 8001d42:	f7ff fe37 	bl	80019b4 <dwt_write8bitoffsetreg>


    return DWT_SUCCESS ;
 8001d46:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	20000038 	.word	0x20000038
 8001d54:	10000240 	.word	0x10000240
 8001d58:	00090014 	.word	0x00090014

08001d5c <dwt_setdwstate>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdwstate(int state)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d109      	bne.n	8001d7e <dwt_setdwstate+0x22>
    //NOTE: PLL should be configured prior to this, and the device should be in IDLE_RC (if the PLL does not lock device will remain in IDLE_RC)
    {
        //switch clock to auto - if coming here from INIT_RC the clock will be FOSC/4, need to switch to auto prior to setting auto INIT2IDLE bit
        dwt_force_clocks(FORCE_CLK_AUTO);
 8001d6a:	2005      	movs	r0, #5
 8001d6c:	f000 fe82 	bl	8002a74 <dwt_force_clocks>
        dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 8001d70:	2301      	movs	r3, #1
 8001d72:	22ff      	movs	r2, #255	@ 0xff
 8001d74:	2101      	movs	r1, #1
 8001d76:	481b      	ldr	r0, [pc, #108]	@ (8001de4 <dwt_setdwstate+0x88>)
 8001d78:	f7ff fe8d 	bl	8001a96 <dwt_modify8bitoffsetreg>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
        //clear the auto INIT2IDLE bit and set FORCE2INIT
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
    }
}
 8001d7c:	e02e      	b.n	8001ddc <dwt_setdwstate+0x80>
    else if(state == DWT_DW_IDLE_RC)  //Change state to IDLE_RC and clear auto INIT2IDLE bit
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d117      	bne.n	8001db4 <dwt_setdwstate+0x58>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 8001d84:	2303      	movs	r3, #3
 8001d86:	22ff      	movs	r2, #255	@ 0xff
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <dwt_setdwstate+0x8c>)
 8001d8c:	f7ff fe83 	bl	8001a96 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8001d90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001d94:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <dwt_setdwstate+0x88>)
 8001d9c:	f7ff fe1c 	bl	80019d8 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8001da0:	2300      	movs	r3, #0
 8001da2:	227f      	movs	r2, #127	@ 0x7f
 8001da4:	2102      	movs	r1, #2
 8001da6:	480f      	ldr	r0, [pc, #60]	@ (8001de4 <dwt_setdwstate+0x88>)
 8001da8:	f7ff fe75 	bl	8001a96 <dwt_modify8bitoffsetreg>
        dwt_force_clocks(FORCE_CLK_AUTO);
 8001dac:	2005      	movs	r0, #5
 8001dae:	f000 fe61 	bl	8002a74 <dwt_force_clocks>
}
 8001db2:	e013      	b.n	8001ddc <dwt_setdwstate+0x80>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 8001db4:	2301      	movs	r3, #1
 8001db6:	22ff      	movs	r2, #255	@ 0xff
 8001db8:	2100      	movs	r1, #0
 8001dba:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <dwt_setdwstate+0x8c>)
 8001dbc:	f7ff fe6b 	bl	8001a96 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8001dc0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001dc4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <dwt_setdwstate+0x88>)
 8001dcc:	f7ff fe04 	bl	80019d8 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	227f      	movs	r2, #127	@ 0x7f
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <dwt_setdwstate+0x88>)
 8001dd8:	f7ff fe5d 	bl	8001a96 <dwt_modify8bitoffsetreg>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	00110008 	.word	0x00110008
 8001de8:	00110004 	.word	0x00110004

08001dec <dwt_setfinegraintxseq>:
 * output parameters none
 *
 * no return value
 */
void dwt_setfinegraintxseq(int enable)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    if (enable)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <dwt_setfinegraintxseq+0x1a>
    {
        dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_ENABLE);
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <dwt_setfinegraintxseq+0x2c>)
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <dwt_setfinegraintxseq+0x30>)
 8001e00:	f7ff fd97 	bl	8001932 <dwt_write32bitoffsetreg>
    }
    else
    {
        dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_DISABLE);
    }
}
 8001e04:	e004      	b.n	8001e10 <dwt_setfinegraintxseq+0x24>
        dwt_write32bitoffsetreg(PWR_UP_TIMES_LO_ID, 2, PMSC_TXFINESEQ_DISABLE);
 8001e06:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <dwt_setfinegraintxseq+0x34>)
 8001e08:	2102      	movs	r1, #2
 8001e0a:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <dwt_setfinegraintxseq+0x30>)
 8001e0c:	f7ff fd91 	bl	8001932 <dwt_write32bitoffsetreg>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	04d28874 	.word	0x04d28874
 8001e1c:	00110010 	.word	0x00110010
 8001e20:	00d20010 	.word	0x00d20010

08001e24 <dwt_setlnapamode>:
 * output parameters
 *
 * no return value
 */
void dwt_setlnapamode(int lna_pa)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    uint32_t gpio_mode = dwt_read32bitreg(GPIO_MODE_ID);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8001e32:	f7ff fd2c 	bl	800188e <dwt_read32bitoffsetreg>
 8001e36:	60f8      	str	r0, [r7, #12]
    gpio_mode &= (~(GPIO_MODE_MSGP0_MODE_BIT_MASK | GPIO_MODE_MSGP1_MODE_BIT_MASK
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <dwt_setlnapamode+0x68>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
            | GPIO_MODE_MSGP4_MODE_BIT_MASK | GPIO_MODE_MSGP5_MODE_BIT_MASK | GPIO_MODE_MSGP6_MODE_BIT_MASK)); //clear GPIO 4, 5, 6, configuration
    if (lna_pa & DWT_LNA_ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <dwt_setlnapamode+0x2e>
    {
        gpio_mode |= GPIO_PIN6_EXTRX;   
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e50:	60fb      	str	r3, [r7, #12]
    }
    if (lna_pa & DWT_PA_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <dwt_setlnapamode+0x40>
    {
        gpio_mode |= (GPIO_PIN4_EXTDA | GPIO_PIN5_EXTTX);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
 8001e62:	60fb      	str	r3, [r7, #12]
    }
    if (lna_pa & DWT_TXRX_EN)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <dwt_setlnapamode+0x52>
    {
        gpio_mode |= (GPIO_PIN0_EXTTXE | GPIO_PIN1_EXTRXE);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f043 0312 	orr.w	r3, r3, #18
 8001e74:	60fb      	str	r3, [r7, #12]
    }

    dwt_write32bitreg(GPIO_MODE_ID, gpio_mode);
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8001e7e:	f7ff fd58 	bl	8001932 <dwt_write32bitoffsetreg>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	ffe00fc0 	.word	0xffe00fc0

08001e90 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW3000 is 0xDECA0312/0xDECA0302
 */
uint32_t dwt_readdevid(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fcf9 	bl	800188e <dwt_read32bitoffsetreg>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    if (config->PGcount == 0) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	891b      	ldrh	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <dwt_configuretxrf+0x20>
        // Configure RF TX PG_DELAY
        dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <dwt_configuretxrf+0x60>)
 8001ebe:	f7ff fd79 	bl	80019b4 <dwt_write8bitoffsetreg>
 8001ec2:	e013      	b.n	8001eec <dwt_configuretxrf+0x48>
    }
    else
    {
        uint8_t channel = 5;
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	73fb      	strb	r3, [r7, #15]
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480f      	ldr	r0, [pc, #60]	@ (8001f08 <dwt_configuretxrf+0x64>)
 8001ecc:	f7ff fd1f 	bl	800190e <dwt_read8bitoffsetreg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <dwt_configuretxrf+0x3a>
        {
            channel = 9;
 8001eda:	2309      	movs	r3, #9
 8001edc:	73fb      	strb	r3, [r7, #15]
        }
        dwt_calcbandwidthadj(config->PGcount, channel);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	891b      	ldrh	r3, [r3, #8]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 f80e 	bl	8002f08 <dwt_calcbandwidthadj>
    }

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <dwt_configuretxrf+0x68>)
 8001ef6:	f7ff fd1c 	bl	8001932 <dwt_write32bitoffsetreg>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	0007001c 	.word	0x0007001c
 8001f08:	00010014 	.word	0x00010014
 8001f0c:	0001000c 	.word	0x0001000c

08001f10 <get_sts_mnth>:
    dwt_or8bitoffsetreg(STS_CTRL_ID, 0, STS_CTRL_LOAD_IV_BIT_MASK);
}

static
uint16_t get_sts_mnth (uint16_t cipher, uint8_t threshold, uint8_t shift_val)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	717b      	strb	r3, [r7, #5]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	713b      	strb	r3, [r7, #4]
    uint32_t  value;
    uint16_t  mod_val;

    value = cipher* (uint32_t)threshold;
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	797a      	ldrb	r2, [r7, #5]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
    if (shift_val == 3)
 8001f2c:	793b      	ldrb	r3, [r7, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d107      	bne.n	8001f42 <get_sts_mnth+0x32>
    {
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22b5      	movs	r2, #181	@ 0xb5
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
        value >>= SQRT_SHIFT_VAL;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	09db      	lsrs	r3, r3, #7
 8001f40:	60fb      	str	r3, [r7, #12]
    }

    mod_val = value % MOD_VALUE+ HALF_MOD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f50:	817b      	strh	r3, [r7, #10]
    value >>= SHIFT_VALUE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0adb      	lsrs	r3, r3, #11
 8001f56:	60fb      	str	r3, [r7, #12]
    /* Check if modulo greater than MOD_VALUE, if yes add 1 */
    if (mod_val >= MOD_VALUE)
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f5e:	d302      	bcc.n	8001f66 <get_sts_mnth+0x56>
        value += 1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]

    return (uint16_t)value;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b29b      	uxth	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <dwt_configmrxlut>:
 * @param[in] channel - Channel that the device will be transmitting/receiving on.
 *
 * no return value
 */
void dwt_configmrxlut(int channel)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	uint32_t lut0, lut1, lut2, lut3, lut4, lut5, lut6 = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]

    if (channel == 5)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10e      	bne.n	8001fa4 <dwt_configmrxlut+0x30>
    {
        lut0 = (uint32_t)CH5_DGC_LUT_0;
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <dwt_configmrxlut+0xb0>)
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
        lut1 = (uint32_t)CH5_DGC_LUT_1;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <dwt_configmrxlut+0xb4>)
 8001f8c:	623b      	str	r3, [r7, #32]
        lut2 = (uint32_t)CH5_DGC_LUT_2;
 8001f8e:	4b27      	ldr	r3, [pc, #156]	@ (800202c <dwt_configmrxlut+0xb8>)
 8001f90:	61fb      	str	r3, [r7, #28]
        lut3 = (uint32_t)CH5_DGC_LUT_3;
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <dwt_configmrxlut+0xbc>)
 8001f94:	61bb      	str	r3, [r7, #24]
        lut4 = (uint32_t)CH5_DGC_LUT_4;
 8001f96:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <dwt_configmrxlut+0xc0>)
 8001f98:	617b      	str	r3, [r7, #20]
        lut5 = (uint32_t)CH5_DGC_LUT_5;
 8001f9a:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <dwt_configmrxlut+0xc4>)
 8001f9c:	613b      	str	r3, [r7, #16]
        lut6 = (uint32_t)CH5_DGC_LUT_6;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	@ (800203c <dwt_configmrxlut+0xc8>)
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e00d      	b.n	8001fc0 <dwt_configmrxlut+0x4c>
    }
    else
    {
        lut0 = (uint32_t)CH9_DGC_LUT_0;
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <dwt_configmrxlut+0xcc>)
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        lut1 = (uint32_t)CH9_DGC_LUT_1;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	@ (8002044 <dwt_configmrxlut+0xd0>)
 8001faa:	623b      	str	r3, [r7, #32]
        lut2 = (uint32_t)CH9_DGC_LUT_2;
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <dwt_configmrxlut+0xd4>)
 8001fae:	61fb      	str	r3, [r7, #28]
        lut3 = (uint32_t)CH9_DGC_LUT_3;
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <dwt_configmrxlut+0xd8>)
 8001fb2:	61bb      	str	r3, [r7, #24]
        lut4 = (uint32_t)CH9_DGC_LUT_4;
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <dwt_configmrxlut+0xdc>)
 8001fb6:	617b      	str	r3, [r7, #20]
        lut5 = (uint32_t)CH9_DGC_LUT_5;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <dwt_configmrxlut+0xe0>)
 8001fba:	613b      	str	r3, [r7, #16]
        lut6 = (uint32_t)CH9_DGC_LUT_6;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <dwt_configmrxlut+0xe0>)
 8001fbe:	60fb      	str	r3, [r7, #12]
    }
    dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4824      	ldr	r0, [pc, #144]	@ (8002058 <dwt_configmrxlut+0xe4>)
 8001fc6:	f7ff fcb4 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4823      	ldr	r0, [pc, #140]	@ (800205c <dwt_configmrxlut+0xe8>)
 8001fd0:	f7ff fcaf 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4821      	ldr	r0, [pc, #132]	@ (8002060 <dwt_configmrxlut+0xec>)
 8001fda:	f7ff fcaa 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4820      	ldr	r0, [pc, #128]	@ (8002064 <dwt_configmrxlut+0xf0>)
 8001fe4:	f7ff fca5 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	2100      	movs	r1, #0
 8001fec:	481e      	ldr	r0, [pc, #120]	@ (8002068 <dwt_configmrxlut+0xf4>)
 8001fee:	f7ff fca0 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	481d      	ldr	r0, [pc, #116]	@ (800206c <dwt_configmrxlut+0xf8>)
 8001ff8:	f7ff fc9b 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	2100      	movs	r1, #0
 8002000:	481b      	ldr	r0, [pc, #108]	@ (8002070 <dwt_configmrxlut+0xfc>)
 8002002:	f7ff fc96 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <dwt_configmrxlut+0x100>)
 8002008:	2100      	movs	r1, #0
 800200a:	481b      	ldr	r0, [pc, #108]	@ (8002078 <dwt_configmrxlut+0x104>)
 800200c:	f7ff fc91 	bl	8001932 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 8002010:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <dwt_configmrxlut+0x108>)
 8002012:	2100      	movs	r1, #0
 8002014:	481a      	ldr	r0, [pc, #104]	@ (8002080 <dwt_configmrxlut+0x10c>)
 8002016:	f7ff fc8c 	bl	8001932 <dwt_write32bitoffsetreg>
}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	@ 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0001c0fd 	.word	0x0001c0fd
 8002028:	0001c43e 	.word	0x0001c43e
 800202c:	0001c6be 	.word	0x0001c6be
 8002030:	0001c77e 	.word	0x0001c77e
 8002034:	0001cf36 	.word	0x0001cf36
 8002038:	0001cfb5 	.word	0x0001cfb5
 800203c:	0001cff5 	.word	0x0001cff5
 8002040:	0002a8fe 	.word	0x0002a8fe
 8002044:	0002ac36 	.word	0x0002ac36
 8002048:	0002a5fe 	.word	0x0002a5fe
 800204c:	0002af3e 	.word	0x0002af3e
 8002050:	0002af7d 	.word	0x0002af7d
 8002054:	0002afb5 	.word	0x0002afb5
 8002058:	00030038 	.word	0x00030038
 800205c:	0003003c 	.word	0x0003003c
 8002060:	00030040 	.word	0x00030040
 8002064:	00030044 	.word	0x00030044
 8002068:	00030048 	.word	0x00030048
 800206c:	0003004c 	.word	0x0003004c
 8002070:	00030050 	.word	0x00030050
 8002074:	10000240 	.word	0x10000240
 8002078:	0003001c 	.word	0x0003001c
 800207c:	1b6da489 	.word	0x1b6da489
 8002080:	00030020 	.word	0x00030020

08002084 <dwt_configure>:
 * Note: If the RX calibration routine fails the device receiver performance will be severely affected,
 * the application should reset device and try again
 *
 */
int dwt_configure(dwt_config_t *config)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	@ 0x2c
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    uint8_t chan = config->chan,cnt,flag;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	767b      	strb	r3, [r7, #25]
    uint32_t temp;
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	2b18      	cmp	r3, #24
 8002098:	d803      	bhi.n	80020a2 <dwt_configure+0x1e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	78db      	ldrb	r3, [r3, #3]
 800209e:	2b18      	cmp	r3, #24
 80020a0:	d901      	bls.n	80020a6 <dwt_configure+0x22>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <dwt_configure+0x24>
 80020a6:	2300      	movs	r3, #0
 80020a8:	763b      	strb	r3, [r7, #24]
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	79db      	ldrb	r3, [r3, #7]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <dwt_configure+0x32>
 80020b2:	2310      	movs	r3, #16
 80020b4:	e000      	b.n	80020b8 <dwt_configure+0x34>
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    uint16_t sts_len;
    int error = DWT_SUCCESS;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
        || ((config->stsMode & DWT_STS_CONFIG_MASK) == (DWT_STS_MODE_ND | DWT_STS_MODE_SDC))
        || ((config->stsMode & DWT_STS_CONFIG_MASK) == DWT_STS_CONFIG_MASK));
#endif
    int preamble_len;

    switch (config->txPreambLength)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d81d      	bhi.n	8002104 <dwt_configure+0x80>
 80020c8:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <dwt_configure+0x4c>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020f3 	.word	0x080020f3
 80020d4:	08002105 	.word	0x08002105
 80020d8:	08002105 	.word	0x08002105
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	08002105 	.word	0x08002105
 80020e8:	080020f9 	.word	0x080020f9
    {
    case DWT_PLEN_32:
        preamble_len = 32;
 80020ec:	2320      	movs	r3, #32
 80020ee:	61fb      	str	r3, [r7, #28]
        break;
 80020f0:	e00c      	b.n	800210c <dwt_configure+0x88>
    case DWT_PLEN_64:
        preamble_len = 64;
 80020f2:	2340      	movs	r3, #64	@ 0x40
 80020f4:	61fb      	str	r3, [r7, #28]
        break;
 80020f6:	e009      	b.n	800210c <dwt_configure+0x88>
    case DWT_PLEN_72:
        preamble_len = 72;
 80020f8:	2348      	movs	r3, #72	@ 0x48
 80020fa:	61fb      	str	r3, [r7, #28]
        break;
 80020fc:	e006      	b.n	800210c <dwt_configure+0x88>
    case DWT_PLEN_128:
        preamble_len = 128;
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	61fb      	str	r3, [r7, #28]
        break;
 8002102:	e003      	b.n	800210c <dwt_configure+0x88>
    default:
        preamble_len = 256;
 8002104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002108:	61fb      	str	r3, [r7, #28]
        break;
 800210a:	bf00      	nop
    }

    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 800210c:	4ba7      	ldr	r3, [pc, #668]	@ (80023ac <dwt_configure+0x328>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	8a1a      	ldrh	r2, [r3, #16]
 8002112:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <dwt_configure+0x328>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800211a:	b292      	uxth	r2, r2
 800211c:	821a      	strh	r2, [r3, #16]
    pdw3000local->longFrames = config->phrMode ;
 800211e:	4ba3      	ldr	r3, [pc, #652]	@ (80023ac <dwt_configure+0x328>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	79d2      	ldrb	r2, [r2, #7]
 8002126:	731a      	strb	r2, [r3, #12]
    sts_len=(uint16_t)GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7b5b      	ldrb	r3, [r3, #13]
 800212c:	3302      	adds	r3, #2
 800212e:	2201      	movs	r2, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	81fb      	strh	r3, [r7, #14]
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fdca 	bl	8000cd4 <__aeabi_ui2f>
 8002140:	4603      	mov	r3, r0
 8002142:	499b      	ldr	r1, [pc, #620]	@ (80023b0 <dwt_configure+0x32c>)
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fe1d 	bl	8000d84 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b97      	ldr	r3, [pc, #604]	@ (80023ac <dwt_configure+0x328>)
 8002150:	681c      	ldr	r4, [r3, #0]
 8002152:	4610      	mov	r0, r2
 8002154:	f7fe ff66 	bl	8001024 <__aeabi_f2iz>
 8002158:	4603      	mov	r3, r0
 800215a:	b21b      	sxth	r3, r3
 800215c:	8263      	strh	r3, [r4, #18]
    pdw3000local->stsconfig = config->stsMode;
 800215e:	4b93      	ldr	r3, [pc, #588]	@ (80023ac <dwt_configure+0x328>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7b12      	ldrb	r2, [r2, #12]
 8002166:	755a      	strb	r2, [r3, #21]
    /////////////////////////////////////////////////////////////////////////
    //SYS_CFG
    //clear the PHR Mode, PHR Rate, STS Protocol, SDC, PDOA Mode,
    //then set the relevant bits according to configuration of the PHR Mode, PHR Rate, STS Protocol, SDC, PDOA Mode,
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7b9b      	ldrb	r3, [r3, #14]
 800216c:	041a      	lsls	r2, r3, #16
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b1b      	ldrb	r3, [r3, #12]
 8002172:	031b      	lsls	r3, r3, #12
 8002174:	f403 4330 	and.w	r3, r3, #45056	@ 0xb000
 8002178:	431a      	orrs	r2, r3
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7a1b      	ldrb	r3, [r3, #8]
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	431a      	orrs	r2, r3
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	4313      	orrs	r3, r2
 800218a:	4a8a      	ldr	r2, [pc, #552]	@ (80023b4 <dwt_configure+0x330>)
 800218c:	2100      	movs	r1, #0
 800218e:	2010      	movs	r0, #16
 8002190:	f7ff fc22 	bl	80019d8 <dwt_modify32bitoffsetreg>
        | mode);


    if (scp)
 8002194:	7e3b      	ldrb	r3, [r7, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d027      	beq.n	80021ea <dwt_configure+0x166>
    {
        //configure OPS tables for SCP mode
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 800219a:	4b84      	ldr	r3, [pc, #528]	@ (80023ac <dwt_configure+0x328>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	8a1a      	ldrh	r2, [r3, #16]
 80021a0:	4b82      	ldr	r3, [pc, #520]	@ (80023ac <dwt_configure+0x328>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80021a8:	b292      	uxth	r2, r2
 80021aa:	821a      	strh	r2, [r3, #16]
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);
 80021ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021b0:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 80021b4:	2100      	movs	r1, #0
 80021b6:	4880      	ldr	r0, [pc, #512]	@ (80023b8 <dwt_configure+0x334>)
 80021b8:	f7ff fc0e 	bl	80019d8 <dwt_modify32bitoffsetreg>

        dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP);       //Set this if Ipatov analysis is used in SCP mode
 80021bc:	f240 3206 	movw	r2, #774	@ 0x306
 80021c0:	2100      	movs	r1, #0
 80021c2:	487e      	ldr	r0, [pc, #504]	@ (80023bc <dwt_configure+0x338>)
 80021c4:	f7ff fbb5 	bl	8001932 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	f04f 100e 	mov.w	r0, #917518	@ 0xe000e
 80021d0:	f7ff fbaf 	bl	8001932 <dwt_write32bitoffsetreg>

        dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 80021d4:	4a7a      	ldr	r2, [pc, #488]	@ (80023c0 <dwt_configure+0x33c>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	487a      	ldr	r0, [pc, #488]	@ (80023c4 <dwt_configure+0x340>)
 80021da:	f7ff fbaa 	bl	8001932 <dwt_write32bitoffsetreg>
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 80021de:	227d      	movs	r2, #125	@ 0x7d
 80021e0:	2100      	movs	r1, #0
 80021e2:	4879      	ldr	r0, [pc, #484]	@ (80023c8 <dwt_configure+0x344>)
 80021e4:	f7ff fbe6 	bl	80019b4 <dwt_write8bitoffsetreg>
 80021e8:	e052      	b.n	8002290 <dwt_configure+0x20c>
    }
    else //
    {
        uint16_t sts_mnth;
        if (config->stsMode != DWT_STS_MODE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7b1b      	ldrb	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d031      	beq.n	8002256 <dwt_configure+0x1d2>
        {
           
            //configure CIA STS lower bound
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7b9b      	ldrb	r3, [r3, #14]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <dwt_configure+0x17e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7b9b      	ldrb	r3, [r3, #14]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <dwt_configure+0x19a>
            {
                //In PDOA mode 1, number of accumulated symbols is the whole length of the STS
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7b5b      	ldrb	r3, [r3, #13]
 8002206:	461a      	mov	r2, r3
 8002208:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <dwt_configure+0x348>)
 800220a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800220e:	2203      	movs	r2, #3
 8002210:	2110      	movs	r1, #16
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe7c 	bl	8001f10 <get_sts_mnth>
 8002218:	4603      	mov	r3, r0
 800221a:	837b      	strh	r3, [r7, #26]
 800221c:	e00c      	b.n	8002238 <dwt_configure+0x1b4>
            }
            else
            {
                //In PDOA mode 3 number of accumulated symbols is half of the length of STS symbols
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 4);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7b5b      	ldrb	r3, [r3, #13]
 8002222:	461a      	mov	r2, r3
 8002224:	4b69      	ldr	r3, [pc, #420]	@ (80023cc <dwt_configure+0x348>)
 8002226:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800222a:	2204      	movs	r2, #4
 800222c:	2110      	movs	r1, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fe6e 	bl	8001f10 <get_sts_mnth>
 8002234:	4603      	mov	r3, r0
 8002236:	837b      	strh	r3, [r7, #26]
            }

            preamble_len += (sts_len) * 8;
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	4413      	add	r3, r2
 8002240:	61fb      	str	r3, [r7, #28]

            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002248:	b29b      	uxth	r3, r3
 800224a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800224e:	2102      	movs	r1, #2
 8002250:	485c      	ldr	r0, [pc, #368]	@ (80023c4 <dwt_configure+0x340>)
 8002252:	f7ff fbf5 	bl	8001a40 <dwt_modify16bitoffsetreg>

        }

        //configure OPS tables for non-SCP mode
        if (preamble_len >= 256)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2bff      	cmp	r3, #255	@ 0xff
 800225a:	dd11      	ble.n	8002280 <dwt_configure+0x1fc>
        {
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <dwt_configure+0x328>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	8a1a      	ldrh	r2, [r3, #16]
 8002262:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <dwt_configure+0x328>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0220 	orr.w	r2, r2, #32
 800226a:	b292      	uxth	r2, r2
 800226c:	821a      	strh	r2, [r3, #16]
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
 800226e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002272:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 8002276:	2100      	movs	r1, #0
 8002278:	484f      	ldr	r0, [pc, #316]	@ (80023b8 <dwt_configure+0x334>)
 800227a:	f7ff fbad 	bl	80019d8 <dwt_modify32bitoffsetreg>
 800227e:	e007      	b.n	8002290 <dwt_configure+0x20c>
        }
        else
        {
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SHORT | OTP_CFG_OPS_KICK_BIT_MASK);
 8002280:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002284:	f46f 52c0 	mvn.w	r2, #6144	@ 0x1800
 8002288:	2100      	movs	r1, #0
 800228a:	484b      	ldr	r0, [pc, #300]	@ (80023b8 <dwt_configure+0x334>)
 800228c:	f7ff fba4 	bl	80019d8 <dwt_modify32bitoffsetreg>
        }

    }

    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	789b      	ldrb	r3, [r3, #2]
 8002294:	22fc      	movs	r2, #252	@ 0xfc
 8002296:	2100      	movs	r1, #0
 8002298:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 800229c:	f7ff fbfb 	bl	8001a96 <dwt_modify8bitoffsetreg>

    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, (uint8_t)(sts_len-1));    /*Starts from 0 that is why -1*/
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022b0:	f7ff fb80 	bl	80019b4 <dwt_write8bitoffsetreg>

    if (config->txPreambLength == DWT_PLEN_72)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	d103      	bne.n	80022c4 <dwt_configure+0x240>
    {
        dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 80022bc:	2008      	movs	r0, #8
 80022be:	f000 fa45 	bl	800274c <dwt_setplenfine>
 80022c2:	e002      	b.n	80022ca <dwt_configure+0x246>
    }
    else
    {
        dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 80022c4:	2000      	movs	r0, #0
 80022c6:	f000 fa41 	bl	800274c <dwt_setplenfine>
    }

    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b1b      	ldrb	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d105      	bne.n	80022e2 <dwt_configure+0x25e>
    {
        //configure lower preamble detection threshold for no data STS mode
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <dwt_configure+0x34c>)
 80022d8:	2100      	movs	r1, #0
 80022da:	483e      	ldr	r0, [pc, #248]	@ (80023d4 <dwt_configure+0x350>)
 80022dc:	f7ff fb29 	bl	8001932 <dwt_write32bitoffsetreg>
 80022e0:	e004      	b.n	80022ec <dwt_configure+0x268>
    }
    else
    {
        //configure default preamble detection threshold for other modes
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 80022e2:	4a3d      	ldr	r2, [pc, #244]	@ (80023d8 <dwt_configure+0x354>)
 80022e4:	2100      	movs	r1, #0
 80022e6:	483b      	ldr	r0, [pc, #236]	@ (80023d4 <dwt_configure+0x350>)
 80022e8:	f7ff fb23 	bl	8001932 <dwt_write32bitoffsetreg>
    }

    /////////////////////////////////////////////////////////////////////////
    //CHAN_CTRL
    temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 80022ec:	2100      	movs	r1, #0
 80022ee:	483b      	ldr	r0, [pc, #236]	@ (80023dc <dwt_configure+0x358>)
 80022f0:	f7ff facd 	bl	800188e <dwt_read32bitoffsetreg>
 80022f4:	6238      	str	r0, [r7, #32]
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80022fc:	f023 031f 	bic.w	r3, r3, #31
 8002300:	623b      	str	r3, [r7, #32]

    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8002302:	7e7b      	ldrb	r3, [r7, #25]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d103      	bne.n	8002310 <dwt_configure+0x28c>
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	623b      	str	r3, [r7, #32]

    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	791b      	ldrb	r3, [r3, #4]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800231a:	6a3a      	ldr	r2, [r7, #32]
 800231c:	4313      	orrs	r3, r2
 800231e:	623b      	str	r3, [r7, #32]
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	78db      	ldrb	r3, [r3, #3]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	4313      	orrs	r3, r2
 800232c:	623b      	str	r3, [r7, #32]
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	795b      	ldrb	r3, [r3, #5]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	f003 0306 	and.w	r3, r3, #6
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	4313      	orrs	r3, r2
 800233c:	623b      	str	r3, [r7, #32]

    dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 800233e:	6a3a      	ldr	r2, [r7, #32]
 8002340:	2100      	movs	r1, #0
 8002342:	4826      	ldr	r0, [pc, #152]	@ (80023dc <dwt_configure+0x358>)
 8002344:	f7ff faf5 	bl	8001932 <dwt_write32bitoffsetreg>

    /////////////////////////////////////////////////////////////////////////
    //TX_FCTRL
    // Set up TX Preamble Size, PRF and Data Rate
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	799b      	ldrb	r3, [r3, #6]
 800234c:	029a      	lsls	r2, r3, #10
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	785b      	ldrb	r3, [r3, #1]
 8002352:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 8002354:	4313      	orrs	r3, r2
 8002356:	f46f 4274 	mvn.w	r2, #62464	@ 0xf400
 800235a:	2100      	movs	r1, #0
 800235c:	2024      	movs	r0, #36	@ 0x24
 800235e:	f7ff fb3b 	bl	80019d8 <dwt_modify32bitoffsetreg>


    //DTUNE (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if (config->sfdTO == 0)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	895b      	ldrh	r3, [r3, #10]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <dwt_configure+0x2ec>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2281      	movs	r2, #129	@ 0x81
 800236e:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	895b      	ldrh	r3, [r3, #10]
 8002374:	461a      	mov	r2, r3
 8002376:	2102      	movs	r1, #2
 8002378:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 800237c:	f7ff faff 	bl	800197e <dwt_write16bitoffsetreg>


    ///////////////////////
    // RF
    if (chan == 9)
 8002380:	7e7b      	ldrb	r3, [r7, #25]
 8002382:	2b09      	cmp	r3, #9
 8002384:	d134      	bne.n	80023f0 <dwt_configure+0x36c>
    {
        // Setup TX analog for ch9
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8002386:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <dwt_configure+0x35c>)
 8002388:	2100      	movs	r1, #0
 800238a:	4816      	ldr	r0, [pc, #88]	@ (80023e4 <dwt_configure+0x360>)
 800238c:	f7ff fad1 	bl	8001932 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 8002390:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002394:	2100      	movs	r1, #0
 8002396:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 800239a:	f7ff faf0 	bl	800197e <dwt_write16bitoffsetreg>
        // Setup RX analog for ch9
        dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <dwt_configure+0x364>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4812      	ldr	r0, [pc, #72]	@ (80023ec <dwt_configure+0x368>)
 80023a4:	f7ff fac5 	bl	8001932 <dwt_write32bitoffsetreg>
 80023a8:	e02e      	b.n	8002408 <dwt_configure+0x384>
 80023aa:	bf00      	nop
 80023ac:	20000038 	.word	0x20000038
 80023b0:	3f666666 	.word	0x3f666666
 80023b4:	fffc4fcf 	.word	0xfffc4fcf
 80023b8:	000b0008 	.word	0x000b0008
 80023bc:	000e000c 	.word	0x000e000c
 80023c0:	000c5a0a 	.word	0x000c5a0a
 80023c4:	000e0012 	.word	0x000e0012
 80023c8:	000e0016 	.word	0x000e0016
 80023cc:	0800e7f8 	.word	0x0800e7f8
 80023d0:	af5f35cc 	.word	0xaf5f35cc
 80023d4:	0006000c 	.word	0x0006000c
 80023d8:	af5f584c 	.word	0xaf5f584c
 80023dc:	00010014 	.word	0x00010014
 80023e0:	1c010034 	.word	0x1c010034
 80023e4:	0007001c 	.word	0x0007001c
 80023e8:	08b5a833 	.word	0x08b5a833
 80023ec:	00070010 	.word	0x00070010
    }
    else
    {
        // Setup TX analog for ch5
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 80023f0:	4a3c      	ldr	r2, [pc, #240]	@ (80024e4 <dwt_configure+0x460>)
 80023f2:	2100      	movs	r1, #0
 80023f4:	483c      	ldr	r0, [pc, #240]	@ (80024e8 <dwt_configure+0x464>)
 80023f6:	f7ff fa9c 	bl	8001932 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 80023fa:	f641 723c 	movw	r2, #7996	@ 0x1f3c
 80023fe:	2100      	movs	r1, #0
 8002400:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 8002404:	f7ff fabb 	bl	800197e <dwt_write16bitoffsetreg>
    }

    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 8002408:	2214      	movs	r2, #20
 800240a:	2101      	movs	r1, #1
 800240c:	4837      	ldr	r0, [pc, #220]	@ (80024ec <dwt_configure+0x468>)
 800240e:	f7ff fad1 	bl	80019b4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8002412:	220e      	movs	r2, #14
 8002414:	2102      	movs	r1, #2
 8002416:	4836      	ldr	r0, [pc, #216]	@ (80024f0 <dwt_configure+0x46c>)
 8002418:	f7ff facc 	bl	80019b4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 800241c:	2281      	movs	r2, #129	@ 0x81
 800241e:	2100      	movs	r1, #0
 8002420:	4834      	ldr	r0, [pc, #208]	@ (80024f4 <dwt_configure+0x470>)
 8002422:	f7ff fac7 	bl	80019b4 <dwt_write8bitoffsetreg>

    //Verify PLL lock bit is cleared
    dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 8002426:	2202      	movs	r2, #2
 8002428:	2100      	movs	r1, #0
 800242a:	2044      	movs	r0, #68	@ 0x44
 800242c:	f7ff fac2 	bl	80019b4 <dwt_write8bitoffsetreg>

    ///////////////////////
    // auto cal the PLL and change to IDLE_PLL state
    dwt_setdwstate(DWT_DW_IDLE);
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff fc93 	bl	8001d5c <dwt_setdwstate>

    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002442:	e014      	b.n	800246e <dwt_configure+0x3ea>
    {
        //deca_usleep(DELAY_20uUSec);
		Sleep(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f003 fed8 	bl	80061fa <Sleep>
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 800244a:	2100      	movs	r1, #0
 800244c:	2044      	movs	r0, #68	@ 0x44
 800244e:	f7ff fa5e 	bl	800190e <dwt_read8bitoffsetreg>
 8002452:	4603      	mov	r3, r0
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <dwt_configure+0x3e0>
        {//PLL is locked
            flag=0;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            break;
 8002462:	e008      	b.n	8002476 <dwt_configure+0x3f2>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8002464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002468:	3301      	adds	r3, #1
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800246e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002472:	2b05      	cmp	r3, #5
 8002474:	d9e6      	bls.n	8002444 <dwt_configure+0x3c0>
        }
    }

    if (flag)
 8002476:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <dwt_configure+0x400>
    {
        return  DWT_ERROR;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002482:	e02a      	b.n	80024da <dwt_configure+0x456>
    }

    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d91b      	bls.n	80024c4 <dwt_configure+0x440>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	2b18      	cmp	r3, #24
 8002492:	d817      	bhi.n	80024c4 <dwt_configure+0x440>
    {
        //load RX LUTs
        /* If the OTP has DGC info programmed into it, do a manual kick from OTP. */
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <dwt_configure+0x474>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	7a5b      	ldrb	r3, [r3, #9]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <dwt_configure+0x426>
        {
            _dwt_kick_dgc_on_wakeup((int8_t)chan);
 800249e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb56 	bl	8001b54 <_dwt_kick_dgc_on_wakeup>
 80024a8:	e003      	b.n	80024b2 <dwt_configure+0x42e>
        }
        /* Else we manually program hard-coded values into the DGC registers. */
        else
        {
            dwt_configmrxlut(chan);
 80024aa:	7e7b      	ldrb	r3, [r7, #25]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fd61 	bl	8001f74 <dwt_configmrxlut>
        }
        dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0, (uint16_t)~DGC_CFG_THR_64_BIT_MASK, DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
 80024b2:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 80024b6:	f248 12ff 	movw	r2, #33279	@ 0x81ff
 80024ba:	2100      	movs	r1, #0
 80024bc:	480f      	ldr	r0, [pc, #60]	@ (80024fc <dwt_configure+0x478>)
 80024be:	f7ff fabf 	bl	8001a40 <dwt_modify16bitoffsetreg>
 80024c2:	e005      	b.n	80024d0 <dwt_configure+0x44c>
    }
    else
    {
        dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0, (uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
 80024c4:	2300      	movs	r3, #0
 80024c6:	22fe      	movs	r2, #254	@ 0xfe
 80024c8:	2100      	movs	r1, #0
 80024ca:	480c      	ldr	r0, [pc, #48]	@ (80024fc <dwt_configure+0x478>)
 80024cc:	f7ff fae3 	bl	8001a96 <dwt_modify8bitoffsetreg>
    }

    ///////////////////////
    // PGF
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 80024d0:	2001      	movs	r0, #1
 80024d2:	f000 f815 	bl	8002500 <dwt_pgf_cal>
 80024d6:	6138      	str	r0, [r7, #16]


    return error;
 80024d8:	693b      	ldr	r3, [r7, #16]
} // end dwt_configure()
 80024da:	4618      	mov	r0, r3
 80024dc:	372c      	adds	r7, #44	@ 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	1c071134 	.word	0x1c071134
 80024e8:	0007001c 	.word	0x0007001c
 80024ec:	00070050 	.word	0x00070050
 80024f0:	00070018 	.word	0x00070018
 80024f4:	00090008 	.word	0x00090008
 80024f8:	20000038 	.word	0x20000038
 80024fc:	00030018 	.word	0x00030018

08002500 <dwt_pgf_cal>:
 *
 * return result of PGF calibration (DWT_ERROR/-1 = error)
 *
 */
int dwt_pgf_cal(int ldoen)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
    int temp;
    uint16_t val;

    //PGF needs LDOs turned on - ensure PGF LDOs are enabled
    if (ldoen == 1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10d      	bne.n	800252a <dwt_pgf_cal+0x2a>
    {
        val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 800250e:	2100      	movs	r1, #0
 8002510:	480e      	ldr	r0, [pc, #56]	@ (800254c <dwt_pgf_cal+0x4c>)
 8002512:	f7ff f9e2 	bl	80018da <dwt_read16bitoffsetreg>
 8002516:	4603      	mov	r3, r0
 8002518:	81fb      	strh	r3, [r7, #14]

        dwt_or16bitoffsetreg(LDO_CTRL_ID, 0, (
 800251a:	f240 1305 	movw	r3, #261	@ 0x105
 800251e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002522:	2100      	movs	r1, #0
 8002524:	4809      	ldr	r0, [pc, #36]	@ (800254c <dwt_pgf_cal+0x4c>)
 8002526:	f7ff fa8b 	bl	8001a40 <dwt_modify16bitoffsetreg>
            LDO_CTRL_LDO_VDDMS3_EN_BIT_MASK |
            LDO_CTRL_LDO_VDDMS1_EN_BIT_MASK));
    }

    //Run PGF Cal
    temp = dwt_run_pgfcal();
 800252a:	f000 f811 	bl	8002550 <dwt_run_pgfcal>
 800252e:	60b8      	str	r0, [r7, #8]

    //Turn off RX LDOs if previously off
    if (ldoen == 1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <dwt_pgf_cal+0x42>
    {
        dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 8002536:	89fa      	ldrh	r2, [r7, #14]
 8002538:	2300      	movs	r3, #0
 800253a:	2100      	movs	r1, #0
 800253c:	4803      	ldr	r0, [pc, #12]	@ (800254c <dwt_pgf_cal+0x4c>)
 800253e:	f7ff fa7f 	bl	8001a40 <dwt_modify16bitoffsetreg>
    }
    return temp;
 8002542:	68bb      	ldr	r3, [r7, #8]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	00070048 	.word	0x00070048

08002550 <dwt_run_pgfcal>:
 *
 * return result of PGF calibration (DWT_ERROR/-1 = error)
 *
 */
int dwt_run_pgfcal(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
    int result = DWT_SUCCESS;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
    uint32_t    data;
    uint32_t    val = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
    uint8_t     cnt,flag;
    //put into cal mode
    //Turn on delay mode
    data = (((uint32_t)0x02) << RX_CAL_CFG_COMP_DLY_BIT_OFFSET) | (RX_CAL_CFG_CAL_MODE_BIT_MASK & 0x1);
 800255e:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <dwt_run_pgfcal+0xc4>)
 8002560:	603b      	str	r3, [r7, #0]
    dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	482c      	ldr	r0, [pc, #176]	@ (8002618 <dwt_run_pgfcal+0xc8>)
 8002568:	f7ff f9e3 	bl	8001932 <dwt_write32bitoffsetreg>
    // Trigger PGF Cal
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 800256c:	2310      	movs	r3, #16
 800256e:	22ff      	movs	r2, #255	@ 0xff
 8002570:	2100      	movs	r1, #0
 8002572:	4829      	ldr	r0, [pc, #164]	@ (8002618 <dwt_run_pgfcal+0xc8>)
 8002574:	f7ff fa8f 	bl	8001a96 <dwt_modify8bitoffsetreg>
    
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8002578:	2301      	movs	r3, #1
 800257a:	72bb      	strb	r3, [r7, #10]
 800257c:	2300      	movs	r3, #0
 800257e:	72fb      	strb	r3, [r7, #11]
 8002580:	e00f      	b.n	80025a2 <dwt_run_pgfcal+0x52>
    {
        deca_usleep(DELAY_20uUSec);
 8002582:	2014      	movs	r0, #20
 8002584:	f003 fe44 	bl	8006210 <deca_usleep>
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8002588:	2100      	movs	r1, #0
 800258a:	4824      	ldr	r0, [pc, #144]	@ (800261c <dwt_run_pgfcal+0xcc>)
 800258c:	f7ff f9bf 	bl	800190e <dwt_read8bitoffsetreg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <dwt_run_pgfcal+0x4c>
        {//PGF cal is complete
            flag=0;
 8002596:	2300      	movs	r3, #0
 8002598:	72bb      	strb	r3, [r7, #10]
            break;
 800259a:	e005      	b.n	80025a8 <dwt_run_pgfcal+0x58>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 800259c:	7afb      	ldrb	r3, [r7, #11]
 800259e:	3301      	adds	r3, #1
 80025a0:	72fb      	strb	r3, [r7, #11]
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d9ec      	bls.n	8002582 <dwt_run_pgfcal+0x32>
        }
    }
    if (flag)
 80025a8:	7abb      	ldrb	r3, [r7, #10]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <dwt_run_pgfcal+0x64>
    {
        result = DWT_ERROR;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025b2:	60fb      	str	r3, [r7, #12]
    }

    // Put into normal mode
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	4817      	ldr	r0, [pc, #92]	@ (8002618 <dwt_run_pgfcal+0xc8>)
 80025ba:	f7ff f9fb 	bl	80019b4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 80025be:	2201      	movs	r2, #1
 80025c0:	2100      	movs	r1, #0
 80025c2:	4816      	ldr	r0, [pc, #88]	@ (800261c <dwt_run_pgfcal+0xcc>)
 80025c4:	f7ff f9f6 	bl	80019b4 <dwt_write8bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 80025c8:	2301      	movs	r3, #1
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	2102      	movs	r1, #2
 80025ce:	4812      	ldr	r0, [pc, #72]	@ (8002618 <dwt_run_pgfcal+0xc8>)
 80025d0:	f7ff fa61 	bl	8001a96 <dwt_modify8bitoffsetreg>
    val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 80025d4:	2100      	movs	r1, #0
 80025d6:	4812      	ldr	r0, [pc, #72]	@ (8002620 <dwt_run_pgfcal+0xd0>)
 80025d8:	f7ff f959 	bl	800188e <dwt_read32bitoffsetreg>
 80025dc:	6078      	str	r0, [r7, #4]
    if (val == ERR_RX_CAL_FAIL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <dwt_run_pgfcal+0x9e>
    {
        //PGF I Cal Fail
        result = DWT_ERROR;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025ec:	60fb      	str	r3, [r7, #12]
    }
    val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <dwt_run_pgfcal+0xd4>)
 80025f2:	f7ff f94c 	bl	800188e <dwt_read32bitoffsetreg>
 80025f6:	6078      	str	r0, [r7, #4]
    if (val == ERR_RX_CAL_FAIL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80025fe:	4293      	cmp	r3, r2
 8002600:	d102      	bne.n	8002608 <dwt_run_pgfcal+0xb8>
    {
        //PGF Q Cal Fail
        result = DWT_ERROR;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002606:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	00020001 	.word	0x00020001
 8002618:	0004000c 	.word	0x0004000c
 800261c:	00040020 	.word	0x00040020
 8002620:	00040014 	.word	0x00040014
 8002624:	0004001c 	.word	0x0004001c

08002628 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16_t rxDelay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(CIA_CONF_ID, 0, rxDelay);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	461a      	mov	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 800263c:	f7ff f99f 	bl	800197e <dwt_write16bitoffsetreg>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16_t txDelay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, 0, txDelay);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	4803      	ldr	r0, [pc, #12]	@ (8002668 <dwt_settxantennadelay+0x20>)
 800265a:	f7ff f990 	bl	800197e <dwt_write16bitoffsetreg>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	00010004 	.word	0x00010004

0800266c <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16_t txDataLength, uint8_t *txDataBytes, uint16_t txBufferOffset)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	80fb      	strh	r3, [r7, #6]
 8002678:	4613      	mov	r3, r2
 800267a:	80bb      	strh	r3, [r7, #4]
    assert((pdw3000local->longFrames && (txDataLength <= EXT_FRAME_LEN)) ||\
           (txDataLength <= STD_FRAME_LEN));
    assert((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN);
#endif

    if ((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN)
 800267c:	88ba      	ldrh	r2, [r7, #4]
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4413      	add	r3, r2
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	da1e      	bge.n	80026c6 <dwt_writetxdata+0x5a>
    {
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 8002688:	88bb      	ldrh	r3, [r7, #4]
 800268a:	2b7f      	cmp	r3, #127	@ 0x7f
 800268c:	d807      	bhi.n	800269e <dwt_writetxdata+0x32>
        {
            /* Directly write the data to the IC TX buffer */
            dwt_writetodevice(TX_BUFFER_ID, txBufferOffset, txDataLength, txDataBytes);
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	88b9      	ldrh	r1, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f44f 10a0 	mov.w	r0, #1310720	@ 0x140000
 8002698:	f7ff f8ce 	bl	8001838 <dwt_writetodevice>
 800269c:	e011      	b.n	80026c2 <dwt_writetxdata+0x56>
        }
        else
        {
            /* Program the indirect offset register A for specified offset to TX buffer */
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (TX_BUFFER_ID >> 16) );
 800269e:	2214      	movs	r2, #20
 80026a0:	2100      	movs	r1, #0
 80026a2:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <dwt_writetxdata+0x68>)
 80026a4:	f7ff f945 	bl	8001932 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   txBufferOffset);
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	480a      	ldr	r0, [pc, #40]	@ (80026d8 <dwt_writetxdata+0x6c>)
 80026b0:	f7ff f93f 	bl	8001932 <dwt_write32bitoffsetreg>

            /* Indirectly write the data to the IC TX buffer */
            dwt_writetodevice(INDIRECT_POINTER_A_ID, 0, txDataLength, txDataBytes);
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	f44f 10e8 	mov.w	r0, #1900544	@ 0x1d0000
 80026be:	f7ff f8bb 	bl	8001838 <dwt_writetodevice>
        }
        return DWT_SUCCESS;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e001      	b.n	80026ca <dwt_writetxdata+0x5e>
    }
    else
        return DWT_ERROR;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
} // end dwt_writetxdata()
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	001f0004 	.word	0x001f0004
 80026d8:	001f0008 	.word	0x001f0008

080026dc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16_t txFrameLength, uint16_t txBufferOffset, uint8_t ranging)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	460b      	mov	r3, r1
 80026e8:	80bb      	strh	r3, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	70fb      	strb	r3, [r7, #3]
           (txFrameLength <= STD_FRAME_LEN));
#endif

    //DW3000/3700 - if offset is > 127, 128 needs to be added before data is written, this will be subtracted internally
    //prior to writing the data
    if(txBufferOffset <= 127)
 80026ee:	88bb      	ldrh	r3, [r7, #4]
 80026f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80026f2:	d80e      	bhi.n	8002712 <dwt_writetxfctrl+0x36>
    {
        // Write the frame length to the TX frame control register
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	88bb      	ldrh	r3, [r7, #4]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	02db      	lsls	r3, r3, #11
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <dwt_writetxfctrl+0x6c>)
 8002708:	2100      	movs	r1, #0
 800270a:	2024      	movs	r0, #36	@ 0x24
 800270c:	f7ff f964 	bl	80019d8 <dwt_modify32bitoffsetreg>
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
        reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
    }

} // end dwt_writetxfctrl()
 8002710:	e015      	b.n	800273e <dwt_writetxfctrl+0x62>
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	88bb      	ldrh	r3, [r7, #4]
 8002716:	3380      	adds	r3, #128	@ 0x80
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	02db      	lsls	r3, r3, #11
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <dwt_writetxfctrl+0x6c>)
 8002728:	2100      	movs	r1, #0
 800272a:	2024      	movs	r0, #36	@ 0x24
 800272c:	f7ff f954 	bl	80019d8 <dwt_modify32bitoffsetreg>
        reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
 8002730:	2100      	movs	r1, #0
 8002732:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002736:	f7ff f8ea 	bl	800190e <dwt_read8bitoffsetreg>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
} // end dwt_writetxfctrl()
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	fc00f400 	.word	0xfc00f400

0800274c <dwt_setplenfine>:
* output parameters
*
* no return value
*/
void dwt_setplenfine(uint8_t preambleLength)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	461a      	mov	r2, r3
 800275a:	2101      	movs	r1, #1
 800275c:	2028      	movs	r0, #40	@ 0x28
 800275e:	f7ff f929 	bl	80019b4 <dwt_write8bitoffsetreg>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8_t *buffer, uint16_t length, uint16_t rxBufferOffset)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	803b      	strh	r3, [r7, #0]
    uint32_t  rx_buff_addr;

    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <dwt_readrxdata+0x78>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	7bdb      	ldrb	r3, [r3, #15]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d103      	bne.n	800278e <dwt_readrxdata+0x22>
    {
        rx_buff_addr=RX_BUFFER_1_ID;
 8002786:	f44f 1398 	mov.w	r3, #1245184	@ 0x130000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e002      	b.n	8002794 <dwt_readrxdata+0x28>
    }
    else //reading from RX_BUFFER_0 - also when non-double buffer mode
    {
        rx_buff_addr=RX_BUFFER_0_ID;
 800278e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002792:	60fb      	str	r3, [r7, #12]
    }

    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 8002794:	883a      	ldrh	r2, [r7, #0]
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	4413      	add	r3, r2
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	da1d      	bge.n	80027dc <dwt_readrxdata+0x70>
    {
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80027a0:	883b      	ldrh	r3, [r7, #0]
 80027a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80027a4:	d806      	bhi.n	80027b4 <dwt_readrxdata+0x48>
        {
            /* Directly read data from the IC to the buffer */
            dwt_readfromdevice(rx_buff_addr,rxBufferOffset,length,buffer);
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	8839      	ldrh	r1, [r7, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff f859 	bl	8001864 <dwt_readfromdevice>

            /* Indirectly read data from the IC to the buffer */
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
        }
    }
}
 80027b2:	e013      	b.n	80027dc <dwt_readrxdata+0x70>
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16) );
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	480a      	ldr	r0, [pc, #40]	@ (80027e8 <dwt_readrxdata+0x7c>)
 80027be:	f7ff f8b8 	bl	8001932 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   rxBufferOffset);
 80027c2:	883b      	ldrh	r3, [r7, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	4808      	ldr	r0, [pc, #32]	@ (80027ec <dwt_readrxdata+0x80>)
 80027ca:	f7ff f8b2 	bl	8001932 <dwt_write32bitoffsetreg>
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2100      	movs	r1, #0
 80027d4:	f44f 10e8 	mov.w	r0, #1900544	@ 0x1d0000
 80027d8:	f7ff f844 	bl	8001864 <dwt_readfromdevice>
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000038 	.word	0x20000038
 80027e8:	001f0004 	.word	0x001f0004
 80027ec:	001f0008 	.word	0x001f0008

080027f0 <dwt_readclockoffset>:
 *
 * return value - the (int12) signed offset value. (s[-15:-26])
 *                A positive value means the local RX clock is running faster than the remote TX device.
 */
int16_t dwt_readclockoffset(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
    uint16_t  regval = 0 ;
 80027f6:	2300      	movs	r3, #0
 80027f8:	80fb      	strh	r3, [r7, #6]

    switch (pdw3000local->dblbuffon)  //if the flag is non zero - we are either accessing RX_BUFFER_0 or RX_BUFFER_1
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <dwt_readclockoffset+0x74>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	7bdb      	ldrb	r3, [r3, #15]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d00b      	beq.n	800281c <dwt_readclockoffset+0x2c>
 8002804:	2b03      	cmp	r3, #3
 8002806:	d112      	bne.n	800282e <dwt_readclockoffset+0x3e>
    {
    case DBL_BUFF_ACCESS_BUFFER_1:
        //!!! Assumes that Indirect pointer register B was already set. This is done in the dwt_setdblrxbuffmode when mode is enabled.
        regval = dwt_read16bitoffsetreg(INDIRECT_POINTER_B_ID, (BUF1_CIA_DIAG_0-BUF1_RX_FINFO)) & CIA_DIAG_0_COE_PPM_BIT_MASK;
 8002808:	210c      	movs	r1, #12
 800280a:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 800280e:	f7ff f864 	bl	80018da <dwt_read16bitoffsetreg>
 8002812:	4603      	mov	r3, r0
 8002814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002818:	80fb      	strh	r3, [r7, #6]
        break;
 800281a:	e011      	b.n	8002840 <dwt_readclockoffset+0x50>
    case DBL_BUFF_ACCESS_BUFFER_0:
        regval = dwt_read16bitoffsetreg(BUF0_CIA_DIAG_0, 0) & CIA_DIAG_0_COE_PPM_BIT_MASK;
 800281c:	2100      	movs	r1, #0
 800281e:	4812      	ldr	r0, [pc, #72]	@ (8002868 <dwt_readclockoffset+0x78>)
 8002820:	f7ff f85b 	bl	80018da <dwt_read16bitoffsetreg>
 8002824:	4603      	mov	r3, r0
 8002826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800282a:	80fb      	strh	r3, [r7, #6]
        break;
 800282c:	e008      	b.n	8002840 <dwt_readclockoffset+0x50>
    default:
        regval = dwt_read16bitoffsetreg(CIA_DIAG_0_ID, 0) & CIA_DIAG_0_COE_PPM_BIT_MASK;
 800282e:	2100      	movs	r1, #0
 8002830:	480e      	ldr	r0, [pc, #56]	@ (800286c <dwt_readclockoffset+0x7c>)
 8002832:	f7ff f852 	bl	80018da <dwt_read16bitoffsetreg>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800283c:	80fb      	strh	r3, [r7, #6]
        break;
 800283e:	bf00      	nop
    }

    if (regval & B11_SIGN_EXTEND_TEST)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <dwt_readclockoffset+0x66>
    {
        regval |= B11_SIGN_EXTEND_MASK;             // sign extend bit #12 to the whole short
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8002850:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8002854:	80fb      	strh	r3, [r7, #6]
    }

    return (int16_t) regval ;
 8002856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000038 	.word	0x20000038
 8002868:	0018000c 	.word	0x0018000c
 800286c:	000c0020 	.word	0x000c0020

08002870 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8_t * timestamp)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_LO_ID, 0, TX_TIME_TX_STAMP_LEN, timestamp); // Read bytes directly into buffer
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2205      	movs	r2, #5
 800287c:	2100      	movs	r1, #0
 800287e:	2074      	movs	r0, #116	@ 0x74
 8002880:	f7fe fff0 	bl	8001864 <dwt_readfromdevice>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8_t * timestamp)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <dwt_readrxtimestamp+0x4c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	7bdb      	ldrb	r3, [r3, #15]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d009      	beq.n	80028b2 <dwt_readrxtimestamp+0x26>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d10e      	bne.n	80028c0 <dwt_readrxtimestamp+0x34>
    {
    case DBL_BUFF_ACCESS_BUFFER_1:
        //!!! Assumes that Indirect pointer register B was already set. This is done in the dwt_setdblrxbuffmode when mode is enabled.
        dwt_readfromdevice(INDIRECT_POINTER_B_ID, BUF1_RX_TIME -BUF1_RX_FINFO, RX_TIME_RX_STAMP_LEN, timestamp);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2205      	movs	r2, #5
 80028a6:	2104      	movs	r1, #4
 80028a8:	f44f 10f0 	mov.w	r0, #1966080	@ 0x1e0000
 80028ac:	f7fe ffda 	bl	8001864 <dwt_readfromdevice>
        break;
 80028b0:	e00d      	b.n	80028ce <dwt_readrxtimestamp+0x42>
    case DBL_BUFF_ACCESS_BUFFER_0:
        dwt_readfromdevice(BUF0_RX_TIME, 0, RX_TIME_RX_STAMP_LEN, timestamp);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2205      	movs	r2, #5
 80028b6:	2100      	movs	r1, #0
 80028b8:	4808      	ldr	r0, [pc, #32]	@ (80028dc <dwt_readrxtimestamp+0x50>)
 80028ba:	f7fe ffd3 	bl	8001864 <dwt_readfromdevice>
        break;
 80028be:	e006      	b.n	80028ce <dwt_readrxtimestamp+0x42>
    default:
        dwt_readfromdevice(RX_TIME_0_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp); // Get the adjusted time of arrival
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2205      	movs	r2, #5
 80028c4:	2100      	movs	r1, #0
 80028c6:	2064      	movs	r0, #100	@ 0x64
 80028c8:	f7fe ffcc 	bl	8001864 <dwt_readfromdevice>
        break;
 80028cc:	bf00      	nop
    }
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000038 	.word	0x20000038
 80028dc:	00180004 	.word	0x00180004

080028e0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32_t _dwt_otpread(uint16_t address)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
    uint32_t ret_data = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]

    // Set manual access mode
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2100      	movs	r1, #0
 80028f2:	480c      	ldr	r0, [pc, #48]	@ (8002924 <_dwt_otpread+0x44>)
 80028f4:	f7ff f843 	bl	800197e <dwt_write16bitoffsetreg>
    // set the address
    dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	461a      	mov	r2, r3
 80028fc:	2100      	movs	r1, #0
 80028fe:	480a      	ldr	r0, [pc, #40]	@ (8002928 <_dwt_otpread+0x48>)
 8002900:	f7ff f83d 	bl	800197e <dwt_write16bitoffsetreg>
    // Assert the read strobe
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 8002904:	2202      	movs	r2, #2
 8002906:	2100      	movs	r1, #0
 8002908:	4806      	ldr	r0, [pc, #24]	@ (8002924 <_dwt_otpread+0x44>)
 800290a:	f7ff f838 	bl	800197e <dwt_write16bitoffsetreg>
    // attempt a read from OTP address
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 800290e:	2100      	movs	r1, #0
 8002910:	4806      	ldr	r0, [pc, #24]	@ (800292c <_dwt_otpread+0x4c>)
 8002912:	f7fe ffbc 	bl	800188e <dwt_read32bitoffsetreg>
 8002916:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	000b0008 	.word	0x000b0008
 8002928:	000b0004 	.word	0x000b0004
 800292c:	000b0010 	.word	0x000b0010

08002930 <dwt_check_dev_id>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_check_dev_id(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
    uint32_t  dev_id;
    dev_id = dwt_readdevid();
 8002936:	f7ff faab 	bl	8001e90 <dwt_readdevid>
 800293a:	6078      	str	r0, [r7, #4]
    
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a07      	ldr	r2, [pc, #28]	@ (800295c <dwt_check_dev_id+0x2c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d006      	beq.n	8002952 <dwt_check_dev_id+0x22>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <dwt_check_dev_id+0x30>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d002      	beq.n	8002952 <dwt_check_dev_id+0x22>
    {
        return DWT_ERROR;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002950:	e000      	b.n	8002954 <dwt_check_dev_id+0x24>
    }
    
    return DWT_SUCCESS;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	deca0312 	.word	0xdeca0312
 8002960:	deca0302 	.word	0xdeca0302

08002964 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32_t rxDelayTime)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 800296c:	2100      	movs	r1, #0
 800296e:	480b      	ldr	r0, [pc, #44]	@ (800299c <dwt_setrxaftertxdelay+0x38>)
 8002970:	f7fe ff8d 	bl	800188e <dwt_read32bitoffsetreg>
 8002974:	60f8      	str	r0, [r7, #12]

    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	0d1b      	lsrs	r3, r3, #20
 800297a:	051b      	lsls	r3, r3, #20
 800297c:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

    dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	2100      	movs	r1, #0
 800298e:	4803      	ldr	r0, [pc, #12]	@ (800299c <dwt_setrxaftertxdelay+0x38>)
 8002990:	f7fe ffcf 	bl	8001932 <dwt_write32bitoffsetreg>
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00010008 	.word	0x00010008

080029a0 <dwt_checkidlerc>:
 * output parameters
 *
 * return value is 1 if the IDLE_RC bit is set and 0 otherwise
 */
uint8_t dwt_checkidlerc(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
    //deca_sleep(2); /* wait 2 ms for DW IC to get into IDLE_RC state */
    /* Poll DW IC until IDLE_RC event set. This means that DW IC is in IDLE_RC state and ready */
    uint32_t reg = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
    reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 80029aa:	2102      	movs	r1, #2
 80029ac:	2044      	movs	r0, #68	@ 0x44
 80029ae:	f7fe ff94 	bl	80018da <dwt_read16bitoffsetreg>
 80029b2:	4603      	mov	r3, r0
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	607b      	str	r3, [r7, #4]
    
    return ( (reg & (SYS_STATUS_RCINIT_BIT_MASK)) == (SYS_STATUS_RCINIT_BIT_MASK));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8_t mode)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
    uint32_t reg;
    if (mode & DWT_LEDS_ENABLE)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d030      	beq.n	8002a46 <dwt_setleds+0x76>
    {
        // Set up MFIO for LED output.
        dwt_modify32bitoffsetreg(GPIO_MODE_ID, 0, ~(GPIO_MODE_MSGP3_MODE_BIT_MASK | GPIO_MODE_MSGP2_MODE_BIT_MASK), (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED));
 80029e4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80029e8:	f46f 627c 	mvn.w	r2, #4032	@ 0xfc0
 80029ec:	2100      	movs	r1, #0
 80029ee:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 80029f2:	f7fe fff1 	bl	80019d8 <dwt_modify32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        dwt_or32bitoffsetreg(CLK_CTRL_ID, 0, (CLK_CTRL_GPIO_DCLK_EN_BIT_MASK | CLK_CTRL_LP_CLK_EN_BIT_MASK));
 80029f6:	f44f 0304 	mov.w	r3, #8650752	@ 0x840000
 80029fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029fe:	2100      	movs	r1, #0
 8002a00:	481a      	ldr	r0, [pc, #104]	@ (8002a6c <dwt_setleds+0x9c>)
 8002a02:	f7fe ffe9 	bl	80019d8 <dwt_modify32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = LED_CTRL_BLINK_EN_BIT_MASK | DWT_LEDS_BLINK_TIME_DEF;
 8002a06:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a0a:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <dwt_setleds+0x4e>
        {
            reg |= LED_CTRL_FORCE_TRIGGER_BIT_MASK;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8002a1c:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitreg(LED_CTRL_ID, reg);
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4813      	ldr	r0, [pc, #76]	@ (8002a70 <dwt_setleds+0xa0>)
 8002a24:	f7fe ff85 	bl	8001932 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d018      	beq.n	8002a64 <dwt_setleds+0x94>
        {
            reg &= (~LED_CTRL_FORCE_TRIGGER_BIT_MASK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8002a38:	60fb      	str	r3, [r7, #12]
            dwt_write32bitreg(LED_CTRL_ID, reg);
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480c      	ldr	r0, [pc, #48]	@ (8002a70 <dwt_setleds+0xa0>)
 8002a40:	f7fe ff77 	bl	8001932 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        dwt_and32bitoffsetreg(GPIO_MODE_ID, 0, ~(GPIO_MODE_MSGP2_MODE_BIT_MASK | GPIO_MODE_MSGP3_MODE_BIT_MASK));
        dwt_and16bitoffsetreg(LED_CTRL_ID, 0, (uint16_t) ~LED_CTRL_BLINK_EN_BIT_MASK);
    }

}
 8002a44:	e00e      	b.n	8002a64 <dwt_setleds+0x94>
        dwt_and32bitoffsetreg(GPIO_MODE_ID, 0, ~(GPIO_MODE_MSGP2_MODE_BIT_MASK | GPIO_MODE_MSGP3_MODE_BIT_MASK));
 8002a46:	2300      	movs	r3, #0
 8002a48:	f46f 627c 	mvn.w	r2, #4032	@ 0xfc0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8002a52:	f7fe ffc1 	bl	80019d8 <dwt_modify32bitoffsetreg>
        dwt_and16bitoffsetreg(LED_CTRL_ID, 0, (uint16_t) ~LED_CTRL_BLINK_EN_BIT_MASK);
 8002a56:	2300      	movs	r3, #0
 8002a58:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <dwt_setleds+0xa0>)
 8002a60:	f7fe ffee 	bl	8001a40 <dwt_modify16bitoffsetreg>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	00110004 	.word	0x00110004
 8002a70:	00110016 	.word	0x00110016

08002a74 <dwt_force_clocks>:
 *
 * no return value
 */
static
void dwt_force_clocks(int clocks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

    if (clocks == FORCE_CLK_SYS_TX)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d110      	bne.n	8002aa4 <dwt_force_clocks+0x30>
    {
        uint16_t regvalue0 = CLK_CTRL_TX_BUF_CLK_ON_BIT_MASK | CLK_CTRL_RX_BUF_CLK_ON_BIT_MASK;
 8002a82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a86:	81fb      	strh	r3, [r7, #14]

        //SYS_CLK_SEL = PLL
        regvalue0 |= ((uint16_t) FORCE_SYSCLK_PLL) << CLK_CTRL_SYS_CLK_SEL_BIT_OFFSET;
 8002a88:	89fb      	ldrh	r3, [r7, #14]
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	81fb      	strh	r3, [r7, #14]

        //TX_CLK_SEL = ON
        regvalue0 |= ((uint16_t) FORCE_CLK_PLL) << CLK_CTRL_TX_CLK_SEL_BIT_OFFSET;
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	f043 0320 	orr.w	r3, r3, #32
 8002a96:	81fb      	strh	r3, [r7, #14]

        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4808      	ldr	r0, [pc, #32]	@ (8002ac0 <dwt_force_clocks+0x4c>)
 8002aa0:	f7fe ff6d 	bl	800197e <dwt_write16bitoffsetreg>

    }
    
    if (clocks == FORCE_CLK_AUTO)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d105      	bne.n	8002ab6 <dwt_force_clocks+0x42>
    {
        //Restore auto clock mode
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS);  //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4803      	ldr	r0, [pc, #12]	@ (8002ac0 <dwt_force_clocks+0x4c>)
 8002ab2:	f7fe ff64 	bl	800197e <dwt_write16bitoffsetreg>
    }

} // end dwt_force_clocks()
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00110004 	.word	0x00110004

08002ac4 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32_t starttime)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	202c      	movs	r0, #44	@ 0x2c
 8002ad2:	f7fe ff2e 	bl	8001932 <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */
int dwt_starttx(uint8_t mode)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
    uint16_t checkTxOK = 0 ;
 8002aee:	2300      	movs	r3, #0
 8002af0:	827b      	strh	r3, [r7, #18]
    uint32_t sys_state;

    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <dwt_starttx+0x3c>
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <dwt_starttx+0x3c>
            || (mode & DWT_START_TX_DLY_RS) || (mode & DWT_START_TX_DLY_TS))
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <dwt_starttx+0x3c>
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8085 	beq.w	8002c26 <dwt_starttx+0x146>
    {
        if(mode & DWT_START_TX_DELAYED) //delayed TX
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <dwt_starttx+0x6c>
        {
            if(mode & DWT_RESPONSE_EXPECTED)
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <dwt_starttx+0x5e>
            {
                dwt_writefastCMD(CMD_DTX_W4R);
 8002b30:	2300      	movs	r3, #0
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	200d      	movs	r0, #13
 8002b38:	f7fe fe7e 	bl	8001838 <dwt_writetodevice>
 8002b3c:	e048      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
            else
            {
                dwt_writefastCMD(CMD_DTX);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	2003      	movs	r0, #3
 8002b46:	f7fe fe77 	bl	8001838 <dwt_writetodevice>
 8002b4a:	e041      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
        }
        else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <dwt_starttx+0x9c>
        {
            if(mode & DWT_RESPONSE_EXPECTED)
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <dwt_starttx+0x8e>
            {
                dwt_writefastCMD(CMD_DTX_RS_W4R);
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	200f      	movs	r0, #15
 8002b68:	f7fe fe66 	bl	8001838 <dwt_writetodevice>
 8002b6c:	e030      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
            else
            {
                dwt_writefastCMD(CMD_DTX_RS);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	2007      	movs	r0, #7
 8002b76:	f7fe fe5f 	bl	8001838 <dwt_writetodevice>
 8002b7a:	e029      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
        }
        else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <dwt_starttx+0xcc>
        {
            if(mode & DWT_RESPONSE_EXPECTED)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <dwt_starttx+0xbe>
            {
                dwt_writefastCMD(CMD_DTX_TS_W4R);
 8002b90:	2300      	movs	r3, #0
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	200e      	movs	r0, #14
 8002b98:	f7fe fe4e 	bl	8001838 <dwt_writetodevice>
 8002b9c:	e018      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
            else
            {
                dwt_writefastCMD(CMD_DTX_TS);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2005      	movs	r0, #5
 8002ba6:	f7fe fe47 	bl	8001838 <dwt_writetodevice>
 8002baa:	e011      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
        }
        else  //delayed TX WRT reference time
        {
            if(mode & DWT_RESPONSE_EXPECTED)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <dwt_starttx+0xe4>
            {
                dwt_writefastCMD(CMD_DTX_REF_W4R);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2010      	movs	r0, #16
 8002bbe:	f7fe fe3b 	bl	8001838 <dwt_writetodevice>
 8002bc2:	e005      	b.n	8002bd0 <dwt_starttx+0xf0>
            }
            else
            {
                dwt_writefastCMD(CMD_DTX_REF);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2009      	movs	r0, #9
 8002bcc:	f7fe fe34 	bl	8001838 <dwt_writetodevice>
            }
        }

        checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8002bd0:	2103      	movs	r1, #3
 8002bd2:	2044      	movs	r0, #68	@ 0x44
 8002bd4:	f7fe fe9b 	bl	800190e <dwt_read8bitoffsetreg>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	827b      	strh	r3, [r7, #18]
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8002bdc:	8a7b      	ldrh	r3, [r7, #18]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d115      	bne.n	8002c12 <dwt_starttx+0x132>
        {
            sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
 8002be6:	2100      	movs	r1, #0
 8002be8:	4826      	ldr	r0, [pc, #152]	@ (8002c84 <dwt_starttx+0x1a4>)
 8002bea:	f7fe fe50 	bl	800188e <dwt_read32bitoffsetreg>
 8002bee:	60f8      	str	r0, [r7, #12]
            if (sys_state == DW_SYS_STATE_TXERR)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8002bf6:	d109      	bne.n	8002c0c <dwt_starttx+0x12c>
            {
                //uart_transmit("TXE", 3);
                dwt_writefastCMD(CMD_TXRXOFF);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fe fe1a 	bl	8001838 <dwt_writetodevice>
                retval = DWT_ERROR ; // Failed !
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c08:	617b      	str	r3, [r7, #20]
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8002c0a:	e036      	b.n	8002c7a <dwt_starttx+0x19a>
            }
            else
            {
                retval = DWT_SUCCESS ; // All okay
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8002c10:	e033      	b.n	8002c7a <dwt_starttx+0x19a>
            }
        }
        else
        {
            //uart_transmit("HPDWARN", 7);
            dwt_writefastCMD(CMD_TXRXOFF);
 8002c12:	2300      	movs	r3, #0
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe fe0d 	bl	8001838 <dwt_writetodevice>
            retval = DWT_ERROR ; // Failed !
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c22:	617b      	str	r3, [r7, #20]
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8002c24:	e029      	b.n	8002c7a <dwt_starttx+0x19a>

            //optionally could return error, and still send the frame at indicated time
            //then if the application want to cancel the sending this can be done in a separate command.
        }
    }
    else if(mode & DWT_START_TX_CCA)
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <dwt_starttx+0x176>
    {
        if(mode & DWT_RESPONSE_EXPECTED)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <dwt_starttx+0x168>
        {
            dwt_writefastCMD(CMD_CCA_TX_W4R);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2011      	movs	r0, #17
 8002c42:	f7fe fdf9 	bl	8001838 <dwt_writetodevice>
 8002c46:	e018      	b.n	8002c7a <dwt_starttx+0x19a>
        }
        else
        {
            dwt_writefastCMD(CMD_CCA_TX);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	200b      	movs	r0, #11
 8002c50:	f7fe fdf2 	bl	8001838 <dwt_writetodevice>
 8002c54:	e011      	b.n	8002c7a <dwt_starttx+0x19a>
        }
    }
    else
    {
        if(mode & DWT_RESPONSE_EXPECTED)
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <dwt_starttx+0x18e>
        {
            dwt_writefastCMD(CMD_TX_W4R);
 8002c60:	2300      	movs	r3, #0
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	200c      	movs	r0, #12
 8002c68:	f7fe fde6 	bl	8001838 <dwt_writetodevice>
 8002c6c:	e005      	b.n	8002c7a <dwt_starttx+0x19a>
        }
        else
        {
            dwt_writefastCMD(CMD_TX);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7fe fddf 	bl	8001838 <dwt_writetodevice>
        }
    }

    return retval;
 8002c7a:	697b      	ldr	r3, [r7, #20]

} // end dwt_starttx()
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	000f0030 	.word	0x000f0030

08002c88 <dwt_rxenable>:
 * (DWT_START_RX_DELAYED | DWT_IDLE_ON_DLY_ERR) 0x03 used to disable re-enabling of receiver if delayed RX failed due to "late" error
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
    uint8_t temp1 ;

    if(mode == DWT_START_RX_IMMEDIATE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <dwt_rxenable+0x1c>
    {
        dwt_writefastCMD(CMD_RX);
 8002c96:	2300      	movs	r3, #0
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7fe fdcb 	bl	8001838 <dwt_writetodevice>
 8002ca2:	e067      	b.n	8002d74 <dwt_rxenable+0xec>
    }
    else //delayed RX
    {
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d83f      	bhi.n	8002d30 <dwt_rxenable+0xa8>
 8002cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb8 <dwt_rxenable+0x30>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cf9 	.word	0x08002cf9
 8002cbc:	08002d31 	.word	0x08002d31
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002d07 	.word	0x08002d07
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002d31 	.word	0x08002d31
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d31 	.word	0x08002d31
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d31 	.word	0x08002d31
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	08002d31 	.word	0x08002d31
 8002cf0:	08002d31 	.word	0x08002d31
 8002cf4:	08002d23 	.word	0x08002d23
        {
            case DWT_START_RX_DELAYED:
                dwt_writefastCMD(CMD_DRX);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2004      	movs	r0, #4
 8002d00:	f7fe fd9a 	bl	8001838 <dwt_writetodevice>
            break;
 8002d04:	e017      	b.n	8002d36 <dwt_rxenable+0xae>
            case DWT_START_RX_DLY_REF:
                dwt_writefastCMD(CMD_DRX_REF);
 8002d06:	2300      	movs	r3, #0
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	f7fe fd93 	bl	8001838 <dwt_writetodevice>
            break;
 8002d12:	e010      	b.n	8002d36 <dwt_rxenable+0xae>
            case DWT_START_RX_DLY_RS:
                dwt_writefastCMD(CMD_DRX_RS);
 8002d14:	2300      	movs	r3, #0
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2008      	movs	r0, #8
 8002d1c:	f7fe fd8c 	bl	8001838 <dwt_writetodevice>
            break;
 8002d20:	e009      	b.n	8002d36 <dwt_rxenable+0xae>
            case DWT_START_RX_DLY_TS:
                dwt_writefastCMD(CMD_DRX_TS);
 8002d22:	2300      	movs	r3, #0
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2006      	movs	r0, #6
 8002d2a:	f7fe fd85 	bl	8001838 <dwt_writetodevice>
            break;
 8002d2e:	e002      	b.n	8002d36 <dwt_rxenable+0xae>
            default:
                return DWT_ERROR; // return error
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d34:	e01f      	b.n	8002d76 <dwt_rxenable+0xee>
        }

        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002d36:	2103      	movs	r1, #3
 8002d38:	2044      	movs	r0, #68	@ 0x44
 8002d3a:	f7fe fde8 	bl	800190e <dwt_read8bitoffsetreg>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
        if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <dwt_rxenable+0xec>
        {
            dwt_writefastCMD(CMD_TXRXOFF);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fd70 	bl	8001838 <dwt_writetodevice>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <dwt_rxenable+0xe6>
            {
                dwt_writefastCMD(CMD_RX);
 8002d62:	2300      	movs	r3, #0
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f7fe fd65 	bl	8001838 <dwt_writetodevice>
            }
            return DWT_ERROR; // return warning indication
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d72:	e000      	b.n	8002d76 <dwt_rxenable+0xee>
        }
    }

    return DWT_SUCCESS;
 8002d74:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop

08002d80 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint32_t time)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    if(time > 0)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <dwt_setrxtimeout+0x2a>
    {
        dwt_write32bitoffsetreg(RX_FWTO_ID, 0, time);
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	2100      	movs	r1, #0
 8002d92:	2034      	movs	r0, #52	@ 0x34
 8002d94:	f7fe fdcd 	bl	8001932 <dwt_write32bitoffsetreg>

        dwt_or16bitoffsetreg(SYS_CFG_ID, 0, SYS_CFG_RXWTOE_BIT_MASK); //set the RX FWTO bit
 8002d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002da0:	2100      	movs	r1, #0
 8002da2:	2010      	movs	r0, #16
 8002da4:	f7fe fe4c 	bl	8001a40 <dwt_modify16bitoffsetreg>
    }
    else
    {
        dwt_and16bitoffsetreg(SYS_CFG_ID, 0, (uint16_t)(~SYS_CFG_RXWTOE_BIT_MASK)); //clear the RX FWTO bit
    }
} // end dwt_setrxtimeout()
 8002da8:	e006      	b.n	8002db8 <dwt_setrxtimeout+0x38>
        dwt_and16bitoffsetreg(SYS_CFG_ID, 0, (uint16_t)(~SYS_CFG_RXWTOE_BIT_MASK)); //clear the RX FWTO bit
 8002daa:	2300      	movs	r3, #0
 8002dac:	f64f 52ff 	movw	r2, #65023	@ 0xfdff
 8002db0:	2100      	movs	r1, #0
 8002db2:	2010      	movs	r0, #16
 8002db4:	f7fe fe44 	bl	8001a40 <dwt_modify16bitoffsetreg>
} // end dwt_setrxtimeout()
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16_t timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DTUNE1_ID, 0, timeout);
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <dwt_setpreambledetecttimeout+0x20>)
 8002dd2:	f7fe fdd4 	bl	800197e <dwt_write16bitoffsetreg>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	00060004 	.word	0x00060004

08002de4 <dwt_disable_rf_tx>:
 * None
 *
 */
static
void dwt_disable_rf_tx(uint8_t switch_config)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
    //Turn off TX LDOs
    dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	480b      	ldr	r0, [pc, #44]	@ (8002e20 <dwt_disable_rf_tx+0x3c>)
 8002df4:	f7fe fd9d 	bl	8001932 <dwt_write32bitoffsetreg>

    //Disable RF blocks for TX (configure RF_ENABLE_ID reg)
    dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8002e00:	f7fe fd97 	bl	8001932 <dwt_write32bitoffsetreg>

    if (switch_config)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <dwt_disable_rf_tx+0x32>
    {
        //Restore the TXRX switch to auto
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8002e0a:	f04f 52e0 	mov.w	r2, #469762048	@ 0x1c000000
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <dwt_disable_rf_tx+0x40>)
 8002e12:	f7fe fd8e 	bl	8001932 <dwt_write32bitoffsetreg>
    }
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00070048 	.word	0x00070048
 8002e24:	00070014 	.word	0x00070014

08002e28 <dwt_enable_rf_tx>:
 * output parameters
 *
 */
static
void dwt_enable_rf_tx(uint32_t channel, uint8_t switch_control)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
    //Turn on TX LDOs
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK |
 8002e34:	f04f 2308 	mov.w	r3, #134219776	@ 0x8000800
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4815      	ldr	r0, [pc, #84]	@ (8002e94 <dwt_enable_rf_tx+0x6c>)
 8002e40:	f7fe fdca 	bl	80019d8 <dwt_modify32bitoffsetreg>
            LDO_CTRL_LDO_VDDHVTX_EN_BIT_MASK));
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK |
 8002e44:	f04f 1360 	mov.w	r3, #6291552	@ 0x600060
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4811      	ldr	r0, [pc, #68]	@ (8002e94 <dwt_enable_rf_tx+0x6c>)
 8002e50:	f7fe fdc2 	bl	80019d8 <dwt_modify32bitoffsetreg>
            LDO_CTRL_LDO_VDDTX1_VREF_BIT_MASK |
            LDO_CTRL_LDO_VDDTX2_EN_BIT_MASK |
            LDO_CTRL_LDO_VDDTX1_EN_BIT_MASK));

    //Enable RF blocks for TX (configure RF_ENABLE_ID reg)
    if (channel == SEL_CHANNEL5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d108      	bne.n	8002e6c <dwt_enable_rf_tx+0x44>
    {
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <dwt_enable_rf_tx+0x70>)
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e60:	2100      	movs	r1, #0
 8002e62:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8002e66:	f7fe fdb7 	bl	80019d8 <dwt_modify32bitoffsetreg>
 8002e6a:	e007      	b.n	8002e7c <dwt_enable_rf_tx+0x54>
            | RF_ENABLE_TX_CH5_BIT_MASK | RF_ENABLE_TX_EN_BIT_MASK
            | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
    }
    else
    {
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <dwt_enable_rf_tx+0x74>)
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e72:	2100      	movs	r1, #0
 8002e74:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8002e78:	f7fe fdae 	bl	80019d8 <dwt_modify32bitoffsetreg>
            | RF_ENABLE_TX_EN_BIT_MASK
            | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
    }

    if (switch_control)
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <dwt_enable_rf_tx+0x64>
    {
        //configure the TXRX switch for TX mode 
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 8002e82:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <dwt_enable_rf_tx+0x78>)
 8002e84:	2100      	movs	r1, #0
 8002e86:	4807      	ldr	r0, [pc, #28]	@ (8002ea4 <dwt_enable_rf_tx+0x7c>)
 8002e88:	f7fe fd53 	bl	8001932 <dwt_write32bitoffsetreg>
    }

}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00070048 	.word	0x00070048
 8002e98:	02003c00 	.word	0x02003c00
 8002e9c:	02001c00 	.word	0x02001c00
 8002ea0:	01011100 	.word	0x01011100
 8002ea4:	00070014 	.word	0x00070014

08002ea8 <dwt_enable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_enable_rftx_blocks(uint32_t channel)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    if (channel == SEL_CHANNEL5)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d107      	bne.n	8002ec6 <dwt_enable_rftx_blocks+0x1e>
    {
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <dwt_enable_rftx_blocks+0x3c>)
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	480a      	ldr	r0, [pc, #40]	@ (8002ee8 <dwt_enable_rftx_blocks+0x40>)
 8002ec0:	f7fe fd8a 	bl	80019d8 <dwt_modify32bitoffsetreg>
    {
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
                | RF_ENABLE_TX_EN_BIT_MASK
                | RF_ENABLE_TX_EN_BUF_BIT_MASK | RF_ENABLE_TX_BIAS_EN_BIT_MASK));
    }
}
 8002ec4:	e009      	b.n	8002eda <dwt_enable_rftx_blocks+0x32>
    else if (channel == SEL_CHANNEL9)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d106      	bne.n	8002eda <dwt_enable_rftx_blocks+0x32>
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002ecc:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <dwt_enable_rftx_blocks+0x44>)
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4804      	ldr	r0, [pc, #16]	@ (8002ee8 <dwt_enable_rftx_blocks+0x40>)
 8002ed6:	f7fe fd7f 	bl	80019d8 <dwt_modify32bitoffsetreg>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	02003c00 	.word	0x02003c00
 8002ee8:	00070004 	.word	0x00070004
 8002eec:	02001c00 	.word	0x02001c00

08002ef0 <dwt_disable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
    dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <dwt_disable_rftx_blocks+0x14>)
 8002efa:	f7fe fd1a 	bl	8001932 <dwt_write32bitoffsetreg>
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00070004 	.word	0x00070004

08002f08 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	80fb      	strh	r3, [r7, #6]
    // Force system clock to FOSC/4 and TX clocks on and enable RF blocks
    dwt_force_clocks(FORCE_CLK_SYS_TX);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7ff fdad 	bl	8002a74 <dwt_force_clocks>
    dwt_enable_rf_tx((uint32_t)channel, 0);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff82 	bl	8002e28 <dwt_enable_rf_tx>
    dwt_enable_rftx_blocks((uint32_t)channel);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ffbe 	bl	8002ea8 <dwt_enable_rftx_blocks>

    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	4813      	ldr	r0, [pc, #76]	@ (8002f88 <dwt_calcbandwidthadj+0x80>)
 8002f3a:	f7fe fd20 	bl	800197e <dwt_write16bitoffsetreg>
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
 8002f3e:	2303      	movs	r3, #3
 8002f40:	22ff      	movs	r2, #255	@ 0xff
 8002f42:	2100      	movs	r1, #0
 8002f44:	4811      	ldr	r0, [pc, #68]	@ (8002f8c <dwt_calcbandwidthadj+0x84>)
 8002f46:	f7fe fda6 	bl	8001a96 <dwt_modify8bitoffsetreg>
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 8002f4a:	bf00      	nop
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	480f      	ldr	r0, [pc, #60]	@ (8002f8c <dwt_calcbandwidthadj+0x84>)
 8002f50:	f7fe fcdd 	bl	800190e <dwt_read8bitoffsetreg>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f6      	bne.n	8002f4c <dwt_calcbandwidthadj+0x44>

    //Restore clocks to AUTO and turn off TX blocks
    dwt_disable_rftx_blocks();
 8002f5e:	f7ff ffc7 	bl	8002ef0 <dwt_disable_rftx_blocks>
    dwt_disable_rf_tx(0);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7ff ff3e 	bl	8002de4 <dwt_disable_rf_tx>
    dwt_force_clocks(FORCE_CLK_AUTO);
 8002f68:	2005      	movs	r0, #5
 8002f6a:	f7ff fd83 	bl	8002a74 <dwt_force_clocks>

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4807      	ldr	r0, [pc, #28]	@ (8002f90 <dwt_calcbandwidthadj+0x88>)
 8002f72:	f7fe fccc 	bl	800190e <dwt_read8bitoffsetreg>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7c:	b2db      	uxtb	r3, r3
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	0008001c 	.word	0x0008001c
 8002f8c:	00080010 	.word	0x00080010
 8002f90:	0007001c 	.word	0x0007001c

08002f94 <ds_twr_initiator_init>:
};
extern dwt_txconfig_t txconfig_options_ch9;


uint8_t ds_twr_initiator_init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8002f98:	f003 f956 	bl	8006248 <reset_DWIC>
    
    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	f003 f92c 	bl	80061fa <Sleep>
    flags.option_timeout = 1;
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <ds_twr_initiator_init+0x138>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	821a      	strh	r2, [r3, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8002fa8:	e013      	b.n	8002fd2 <ds_twr_initiator_init+0x3e>
    { 
        if(flags.option_timeout > 300)
 8002faa:	4b48      	ldr	r3, [pc, #288]	@ (80030cc <ds_twr_initiator_init+0x138>)
 8002fac:	8a1b      	ldrh	r3, [r3, #16]
 8002fae:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002fb2:	d90e      	bls.n	8002fd2 <ds_twr_initiator_init+0x3e>
        {
            flags.option_timeout = 0;
 8002fb4:	4b45      	ldr	r3, [pc, #276]	@ (80030cc <ds_twr_initiator_init+0x138>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	821a      	strh	r2, [r3, #16]
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 8002fba:	4845      	ldr	r0, [pc, #276]	@ (80030d0 <ds_twr_initiator_init+0x13c>)
 8002fbc:	f000 fff4 	bl	8003fa8 <HMISends>
            Sleep(1000);
 8002fc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fc4:	f003 f919 	bl	80061fa <Sleep>
            HMISends("page menu\xff\xff\xff"); 
 8002fc8:	4842      	ldr	r0, [pc, #264]	@ (80030d4 <ds_twr_initiator_init+0x140>)
 8002fca:	f000 ffed 	bl	8003fa8 <HMISends>
            return 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e079      	b.n	80030c6 <ds_twr_initiator_init+0x132>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8002fd2:	f7ff fce5 	bl	80029a0 <dwt_checkidlerc>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0e6      	beq.n	8002faa <ds_twr_initiator_init+0x16>
        }
    };
    flags.option_timeout = 0;
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <ds_twr_initiator_init+0x138>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	821a      	strh	r2, [r3, #16]
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7fe fdda 	bl	8001b9c <dwt_initialise>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fee:	d10b      	bne.n	8003008 <ds_twr_initiator_init+0x74>
    {
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8002ff0:	4839      	ldr	r0, [pc, #228]	@ (80030d8 <ds_twr_initiator_init+0x144>)
 8002ff2:	f000 ffd9 	bl	8003fa8 <HMISends>
        Sleep(1000); 
 8002ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ffa:	f003 f8fe 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 8002ffe:	4835      	ldr	r0, [pc, #212]	@ (80030d4 <ds_twr_initiator_init+0x140>)
 8003000:	f000 ffd2 	bl	8003fa8 <HMISends>
        return 1;
 8003004:	2301      	movs	r3, #1
 8003006:	e05e      	b.n	80030c6 <ds_twr_initiator_init+0x132>
    }    
    
    dwt_structs_init(DS_TWR_INITIATOR, &config, &Config_options);
 8003008:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <ds_twr_initiator_init+0x148>)
 800300a:	4935      	ldr	r1, [pc, #212]	@ (80030e0 <ds_twr_initiator_init+0x14c>)
 800300c:	2005      	movs	r0, #5
 800300e:	f7fe fab3 	bl	8001578 <dwt_structs_init>
    
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8003012:	4833      	ldr	r0, [pc, #204]	@ (80030e0 <ds_twr_initiator_init+0x14c>)
 8003014:	f7ff f836 	bl	8002084 <dwt_configure>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <ds_twr_initiator_init+0xa2>
    {
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 800301e:	4831      	ldr	r0, [pc, #196]	@ (80030e4 <ds_twr_initiator_init+0x150>)
 8003020:	f000 ffc2 	bl	8003fa8 <HMISends>
        Sleep(1000);
 8003024:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003028:	f003 f8e7 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 800302c:	4829      	ldr	r0, [pc, #164]	@ (80030d4 <ds_twr_initiator_init+0x140>)
 800302e:	f000 ffbb 	bl	8003fa8 <HMISends>
        return 1;
 8003032:	2301      	movs	r3, #1
 8003034:	e047      	b.n	80030c6 <ds_twr_initiator_init+0x132>
    }
    dwt_configuretxrf(&Config_options);
 8003036:	4829      	ldr	r0, [pc, #164]	@ (80030dc <ds_twr_initiator_init+0x148>)
 8003038:	f7fe ff34 	bl	8001ea4 <dwt_configuretxrf>

	/* Set the antenna delay. Modify the parameters to adjust the distance error */
    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 800303c:	4b2a      	ldr	r3, [pc, #168]	@ (80030e8 <ds_twr_initiator_init+0x154>)
 800303e:	7fdb      	ldrb	r3, [r3, #31]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d108      	bne.n	8003056 <ds_twr_initiator_init+0xc2>
    {
        dwt_settxantennadelay(TX_ANT_DLY_HP);
 8003044:	f244 001a 	movw	r0, #16410	@ 0x401a
 8003048:	f7ff fafe 	bl	8002648 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
 800304c:	f244 001a 	movw	r0, #16410	@ 0x401a
 8003050:	f7ff faea 	bl	8002628 <dwt_setrxantennadelay>
 8003054:	e007      	b.n	8003066 <ds_twr_initiator_init+0xd2>
    }
    else
    {
        dwt_settxantennadelay(TX_ANT_DLY_LP);
 8003056:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 800305a:	f7ff faf5 	bl	8002648 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_LP);
 800305e:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 8003062:	f7ff fae1 	bl	8002628 <dwt_setrxantennadelay>
    }

    if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <ds_twr_initiator_init+0x154>)
 8003068:	7f1b      	ldrb	r3, [r3, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <ds_twr_initiator_init+0xf2>
    {
        dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_6M8);
 800306e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003072:	f7ff fc77 	bl	8002964 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_6M8);
 8003076:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800307a:	f7ff fe81 	bl	8002d80 <dwt_setrxtimeout>
        dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 800307e:	2005      	movs	r0, #5
 8003080:	f7ff fe9e 	bl	8002dc0 <dwt_setpreambledetecttimeout>
 8003084:	e009      	b.n	800309a <ds_twr_initiator_init+0x106>
    }
    else
    {
        dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS_850K);
 8003086:	203c      	movs	r0, #60	@ 0x3c
 8003088:	f7ff fc6c 	bl	8002964 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS_850K);
 800308c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003090:	f7ff fe76 	bl	8002d80 <dwt_setrxtimeout>
        dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
 8003094:	2000      	movs	r0, #0
 8003096:	f7ff fe93 	bl	8002dc0 <dwt_setpreambledetecttimeout>
    }
	
    /* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 800309a:	2007      	movs	r0, #7
 800309c:	f7fe fec2 	bl	8001e24 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fe fea3 	bl	8001dec <dwt_setfinegraintxseq>
    
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80030a6:	2003      	movs	r0, #3
 80030a8:	f7ff fc92 	bl	80029d0 <dwt_setleds>
	d_len = 0;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <ds_twr_initiator_init+0x158>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
	error_times = 0;
 80030b2:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <ds_twr_initiator_init+0x15c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    flags.ds_twr_timeout = 1;
 80030b8:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <ds_twr_initiator_init+0x138>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	81da      	strh	r2, [r3, #14]
    HMISends("page ranginginit\xff\xff\xff");
 80030be:	480d      	ldr	r0, [pc, #52]	@ (80030f4 <ds_twr_initiator_init+0x160>)
 80030c0:	f000 ff72 	bl	8003fa8 <HMISends>
    
    return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000744 	.word	0x20000744
 80030d0:	0800e010 	.word	0x0800e010
 80030d4:	0800e038 	.word	0x0800e038
 80030d8:	0800e048 	.word	0x0800e048
 80030dc:	20000084 	.word	0x20000084
 80030e0:	2000003c 	.word	0x2000003c
 80030e4:	0800e070 	.word	0x0800e070
 80030e8:	20000340 	.word	0x20000340
 80030ec:	20000550 	.word	0x20000550
 80030f0:	200005b8 	.word	0x200005b8
 80030f4:	0800e098 	.word	0x0800e098

080030f8 <ds_twr_initiator>:
 * @param  none
 *
 * @return none
 */
void ds_twr_initiator(void) 
{
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b09c      	sub	sp, #112	@ 0x70
 80030fe:	af00      	add	r7, sp, #0
	int rets;
	/* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
	tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003100:	4b62      	ldr	r3, [pc, #392]	@ (800328c <ds_twr_initiator+0x194>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4a62      	ldr	r2, [pc, #392]	@ (8003290 <ds_twr_initiator+0x198>)
 8003106:	7093      	strb	r3, [r2, #2]
	dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8003108:	2200      	movs	r2, #0
 800310a:	4961      	ldr	r1, [pc, #388]	@ (8003290 <ds_twr_initiator+0x198>)
 800310c:	200a      	movs	r0, #10
 800310e:	f7ff faad 	bl	800266c <dwt_writetxdata>
	dwt_writetxfctrl(sizeof(tx_poll_msg)+FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */
 8003112:	2201      	movs	r2, #1
 8003114:	2100      	movs	r1, #0
 8003116:	200c      	movs	r0, #12
 8003118:	f7ff fae0 	bl	80026dc <dwt_writetxfctrl>
		   
	/* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
	 * set by dwt_setrxaftertxdelay() has elapsed. */
	rets = dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 800311c:	2002      	movs	r0, #2
 800311e:	f7ff fcdf 	bl	8002ae0 <dwt_starttx>
 8003122:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if(rets != DWT_SUCCESS)
 8003124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <ds_twr_initiator+0x40>
	{
		flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
 800312a:	4b5a      	ldr	r3, [pc, #360]	@ (8003294 <ds_twr_initiator+0x19c>)
 800312c:	2264      	movs	r2, #100	@ 0x64
 800312e:	815a      	strh	r2, [r3, #10]
		flags.time_to_allow_run = 1;
 8003130:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <ds_twr_initiator+0x19c>)
 8003132:	2201      	movs	r2, #1
 8003134:	819a      	strh	r2, [r3, #12]
		return;
 8003136:	e2c3      	b.n	80036c0 <ds_twr_initiator+0x5c8>
	}
	/* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */        
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003138:	bf00      	nop
 800313a:	2100      	movs	r1, #0
 800313c:	2044      	movs	r0, #68	@ 0x44
 800313e:	f7fe fba6 	bl	800188e <dwt_read32bitoffsetreg>
 8003142:	4602      	mov	r2, r0
 8003144:	4b54      	ldr	r3, [pc, #336]	@ (8003298 <ds_twr_initiator+0x1a0>)
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <ds_twr_initiator+0x1a0>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b53      	ldr	r3, [pc, #332]	@ (800329c <ds_twr_initiator+0x1a4>)
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f2      	beq.n	800313a <ds_twr_initiator+0x42>
	{ };
	/* Increment frame sequence number after transmission of the poll message (modulo 256). */
	frame_seq_nb++;
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <ds_twr_initiator+0x194>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <ds_twr_initiator+0x194>)
 800315e:	7013      	strb	r3, [r2, #0]

	if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003160:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <ds_twr_initiator+0x1a0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8292 	beq.w	8003692 <ds_twr_initiator+0x59a>
	{
		uint32_t frame_len;
		/* Clear good RX frame event and TX frame sent in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);
 800316e:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8003172:	2100      	movs	r1, #0
 8003174:	2044      	movs	r0, #68	@ 0x44
 8003176:	f7fe fbdc 	bl	8001932 <dwt_write32bitoffsetreg>
		
		/* A frame has been received, read it into the local buffer. */
		frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 800317a:	2100      	movs	r1, #0
 800317c:	204c      	movs	r0, #76	@ 0x4c
 800317e:	f7fe fb86 	bl	800188e <dwt_read32bitoffsetreg>
 8003182:	4603      	mov	r3, r0
 8003184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003188:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (frame_len <= RX_BUF_LEN)
 800318a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800318c:	2b14      	cmp	r3, #20
 800318e:	d806      	bhi.n	800319e <ds_twr_initiator+0xa6>
		{
			dwt_readrxdata(rx_buffer, frame_len, 0);
 8003190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003192:	b29b      	uxth	r3, r3
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	4841      	ldr	r0, [pc, #260]	@ (80032a0 <ds_twr_initiator+0x1a8>)
 800319a:	f7ff fae7 	bl	800276c <dwt_readrxdata>
		}
		/* Check that the frame is the expected response from the companion "DS TWR responder" example.
		 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 800319e:	4a40      	ldr	r2, [pc, #256]	@ (80032a0 <ds_twr_initiator+0x1a8>)
 80031a0:	2300      	movs	r3, #0
 80031a2:	7093      	strb	r3, [r2, #2]
		if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 80031a4:	220a      	movs	r2, #10
 80031a6:	493f      	ldr	r1, [pc, #252]	@ (80032a4 <ds_twr_initiator+0x1ac>)
 80031a8:	483d      	ldr	r0, [pc, #244]	@ (80032a0 <ds_twr_initiator+0x1a8>)
 80031aa:	f007 faa4 	bl	800a6f6 <memcmp>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8273 	bne.w	800369c <ds_twr_initiator+0x5a4>
			
			uint32_t final_tx_time;
			int ret;
			
			/* Retrieve poll transmission and response reception timestamp. */
			poll_tx_ts = get_tx_timestamp_u64();
 80031b6:	f002 f9ca 	bl	800554e <get_tx_timestamp_u64>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	493a      	ldr	r1, [pc, #232]	@ (80032a8 <ds_twr_initiator+0x1b0>)
 80031c0:	e9c1 2300 	strd	r2, r3, [r1]
			resp_rx_ts = get_rx_timestamp_u64();
 80031c4:	f002 fa04 	bl	80055d0 <get_rx_timestamp_u64>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4937      	ldr	r1, [pc, #220]	@ (80032ac <ds_twr_initiator+0x1b4>)
 80031ce:	e9c1 2300 	strd	r2, r3, [r1]
			
			
			/* ompute final message transmission time. See NOTE 11 below. */
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].data_rate == RATE_6M8)
 80031d2:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <ds_twr_initiator+0x1b8>)
 80031d4:	7f1b      	ldrb	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <ds_twr_initiator+0x114>
				final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS_6M8 * UUS_TO_DWT_TIME)) >> 8;
 80031da:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <ds_twr_initiator+0x1b4>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	4934      	ldr	r1, [pc, #208]	@ (80032b4 <ds_twr_initiator+0x1bc>)
 80031e2:	1851      	adds	r1, r2, r1
 80031e4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031e6:	f143 0300 	adc.w	r3, r3, #0
 80031ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80031f8:	4651      	mov	r1, sl
 80031fa:	0a0a      	lsrs	r2, r1, #8
 80031fc:	46dc      	mov	ip, fp
 80031fe:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8003202:	4659      	mov	r1, fp
 8003204:	0a0b      	lsrs	r3, r1, #8
 8003206:	4613      	mov	r3, r2
 8003208:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800320a:	e013      	b.n	8003234 <ds_twr_initiator+0x13c>
			else
				final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS_850K * UUS_TO_DWT_TIME)) >> 8;
 800320c:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <ds_twr_initiator+0x1b4>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	4929      	ldr	r1, [pc, #164]	@ (80032b8 <ds_twr_initiator+0x1c0>)
 8003214:	eb12 0a01 	adds.w	sl, r2, r1
 8003218:	f143 0b00 	adc.w	fp, r3, #0
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8003228:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 800322c:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8003230:	4613      	mov	r3, r2
 8003232:	66fb      	str	r3, [r7, #108]	@ 0x6c

			dwt_setdelayedtrxtime(final_tx_time);
 8003234:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003236:	f7ff fc45 	bl	8002ac4 <dwt_setdelayedtrxtime>
			
			/* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
			
			if(dwt_setting_data.dwt_setting_value[DS_TWR_INITIATOR].dev_id == DEV_UWB3000F27)
 800323a:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <ds_twr_initiator+0x1b8>)
 800323c:	7fdb      	ldrb	r3, [r3, #31]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d13e      	bne.n	80032c0 <ds_twr_initiator+0x1c8>
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 8003242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003244:	2200      	movs	r2, #0
 8003246:	633b      	str	r3, [r7, #48]	@ 0x30
 8003248:	637a      	str	r2, [r7, #52]	@ 0x34
 800324a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800324e:	460b      	mov	r3, r1
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003254:	460b      	mov	r3, r1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800325a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800325e:	461a      	mov	r2, r3
 8003260:	f422 78ff 	bic.w	r8, r2, #510	@ 0x1fe
 8003264:	f028 0801 	bic.w	r8, r8, #1
 8003268:	4623      	mov	r3, r4
 800326a:	f003 09ff 	and.w	r9, r3, #255	@ 0xff
 800326e:	f244 031a 	movw	r3, #16410	@ 0x401a
 8003272:	eb18 0303 	adds.w	r3, r8, r3
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	f149 0300 	adc.w	r3, r9, #0
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
 800327e:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <ds_twr_initiator+0x1c4>)
 8003280:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003284:	e9c3 1200 	strd	r1, r2, [r3]
 8003288:	e03b      	b.n	8003302 <ds_twr_initiator+0x20a>
 800328a:	bf00      	nop
 800328c:	200004b8 	.word	0x200004b8
 8003290:	2000004c 	.word	0x2000004c
 8003294:	20000744 	.word	0x20000744
 8003298:	200004d0 	.word	0x200004d0
 800329c:	2427d000 	.word	0x2427d000
 80032a0:	200004bc 	.word	0x200004bc
 80032a4:	20000058 	.word	0x20000058
 80032a8:	200004d8 	.word	0x200004d8
 80032ac:	200004e0 	.word	0x200004e0
 80032b0:	20000340 	.word	0x20000340
 80032b4:	02aa8118 	.word	0x02aa8118
 80032b8:	05b68258 	.word	0x05b68258
 80032bc:	200004e8 	.word	0x200004e8
			else
				final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_LP;
 80032c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c2:	2200      	movs	r2, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	61fa      	str	r2, [r7, #28]
 80032c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032cc:	460b      	mov	r3, r1
 80032ce:	0e1b      	lsrs	r3, r3, #24
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	460b      	mov	r3, r1
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032dc:	4611      	mov	r1, r2
 80032de:	f421 74ff 	bic.w	r4, r1, #510	@ 0x1fe
 80032e2:	f024 0401 	bic.w	r4, r4, #1
 80032e6:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80032ea:	f643 73f2 	movw	r3, #16370	@ 0x3ff2
 80032ee:	18e3      	adds	r3, r4, r3
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	f145 0300 	adc.w	r3, r5, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003580 <ds_twr_initiator+0x488>)
 80032fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80032fe:	e9c3 1200 	strd	r1, r2, [r3]
			
			/* Write all timestamps in the final message. See NOTE 12 below. */
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8003302:	4ba0      	ldr	r3, [pc, #640]	@ (8003584 <ds_twr_initiator+0x48c>)
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	489f      	ldr	r0, [pc, #636]	@ (8003588 <ds_twr_initiator+0x490>)
 800330a:	f002 f9c7 	bl	800569c <final_msg_set_ts>
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 800330e:	4b9f      	ldr	r3, [pc, #636]	@ (800358c <ds_twr_initiator+0x494>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	489e      	ldr	r0, [pc, #632]	@ (8003590 <ds_twr_initiator+0x498>)
 8003316:	f002 f9c1 	bl	800569c <final_msg_set_ts>
			final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 800331a:	4b99      	ldr	r3, [pc, #612]	@ (8003580 <ds_twr_initiator+0x488>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	489c      	ldr	r0, [pc, #624]	@ (8003594 <ds_twr_initiator+0x49c>)
 8003322:	f002 f9bb 	bl	800569c <final_msg_set_ts>

			/* Write and send final message. See NOTE 9 below. */
			tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003326:	4b9c      	ldr	r3, [pc, #624]	@ (8003598 <ds_twr_initiator+0x4a0>)
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	4b9c      	ldr	r3, [pc, #624]	@ (800359c <ds_twr_initiator+0x4a4>)
 800332c:	709a      	strb	r2, [r3, #2]
			dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 800332e:	2200      	movs	r2, #0
 8003330:	499a      	ldr	r1, [pc, #616]	@ (800359c <ds_twr_initiator+0x4a4>)
 8003332:	2016      	movs	r0, #22
 8003334:	f7ff f99a 	bl	800266c <dwt_writetxdata>
			dwt_writetxfctrl(sizeof(tx_final_msg)+FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */                
 8003338:	2201      	movs	r2, #1
 800333a:	2100      	movs	r1, #0
 800333c:	2018      	movs	r0, #24
 800333e:	f7ff f9cd 	bl	80026dc <dwt_writetxfctrl>
			
			ret = dwt_starttx(DWT_START_TX_DELAYED);
 8003342:	2001      	movs	r0, #1
 8003344:	f7ff fbcc 	bl	8002ae0 <dwt_starttx>
 8003348:	6578      	str	r0, [r7, #84]	@ 0x54
			/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 13 below. */
			
			if (ret == DWT_SUCCESS)
 800334a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334c:	2b00      	cmp	r3, #0
 800334e:	d114      	bne.n	800337a <ds_twr_initiator+0x282>
			{
				/* Poll DW IC until TX frame sent event set. See NOTE 10 below. */
				while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8003350:	bf00      	nop
 8003352:	2100      	movs	r1, #0
 8003354:	2044      	movs	r0, #68	@ 0x44
 8003356:	f7fe fa9a 	bl	800188e <dwt_read32bitoffsetreg>
 800335a:	4603      	mov	r3, r0
 800335c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f6      	beq.n	8003352 <ds_twr_initiator+0x25a>
				{ };

				/* Clear TXFRS event. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	2100      	movs	r1, #0
 8003368:	2044      	movs	r0, #68	@ 0x44
 800336a:	f7fe fae2 	bl	8001932 <dwt_write32bitoffsetreg>

				/* Increment frame sequence number after transmission of the final message (modulo 256). */
				frame_seq_nb++;
 800336e:	4b8a      	ldr	r3, [pc, #552]	@ (8003598 <ds_twr_initiator+0x4a0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b88      	ldr	r3, [pc, #544]	@ (8003598 <ds_twr_initiator+0x4a0>)
 8003378:	701a      	strb	r2, [r3, #0]
			}
			
			/*  Read carrier integrator value and calculate clock offset ratio. See NOTE 11 below. */
			clockOffsetRatio = ((float)dwt_readclockoffset()) / (uint32_t)(1<<26);
 800337a:	f7ff fa39 	bl	80027f0 <dwt_readclockoffset>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fcab 	bl	8000cdc <__aeabi_i2f>
 8003386:	4603      	mov	r3, r0
 8003388:	f04f 4199 	mov.w	r1, #1283457024	@ 0x4c800000
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fdad 	bl	8000eec <__aeabi_fdiv>
 8003392:	4603      	mov	r3, r0
 8003394:	653b      	str	r3, [r7, #80]	@ 0x50

			/* Get timestamps embedded in response message. */
			resp_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_rx_ts);
 8003396:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800339a:	4619      	mov	r1, r3
 800339c:	4880      	ldr	r0, [pc, #512]	@ (80035a0 <ds_twr_initiator+0x4a8>)
 800339e:	f002 f8b1 	bl	8005504 <resp_msg_get_ts>
			resp_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_tx_ts);
 80033a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033a6:	4619      	mov	r1, r3
 80033a8:	487e      	ldr	r0, [pc, #504]	@ (80035a4 <ds_twr_initiator+0x4ac>)
 80033aa:	f002 f8ab 	bl	8005504 <resp_msg_get_ts>
			
			/* Compute time of flight and distance, using clock offset ratio to correct for differing local and remote clock rates */
			rtd_init = resp_rx_ts - poll_tx_ts;
 80033ae:	4b77      	ldr	r3, [pc, #476]	@ (800358c <ds_twr_initiator+0x494>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <ds_twr_initiator+0x48c>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	4613      	mov	r3, r2
 80033be:	1acb      	subs	r3, r1, r3
 80033c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
			rtd_resp = resp_tx_ts - poll_rx_ts;
 80033c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	64bb      	str	r3, [r7, #72]	@ 0x48
			
			tof = ((rtd_init - rtd_resp * (1 - clockOffsetRatio)) / 2.0) * DWT_TIME_UNITS;
 80033ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80033cc:	f7fd fc86 	bl	8000cdc <__aeabi_i2f>
 80033d0:	4604      	mov	r4, r0
 80033d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033d4:	f7fd fc82 	bl	8000cdc <__aeabi_i2f>
 80033d8:	4605      	mov	r5, r0
 80033da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80033dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80033e0:	f7fd fbc6 	bl	8000b70 <__aeabi_fsub>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4619      	mov	r1, r3
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7fd fccb 	bl	8000d84 <__aeabi_fmul>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4620      	mov	r0, r4
 80033f4:	f7fd fbbc 	bl	8000b70 <__aeabi_fsub>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f814 	bl	8000428 <__aeabi_f2d>
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003408:	f7fd f990 	bl	800072c <__aeabi_ddiv>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	a356      	add	r3, pc, #344	@ (adr r3, 8003570 <ds_twr_initiator+0x478>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f85d 	bl	80004d8 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4961      	ldr	r1, [pc, #388]	@ (80035a8 <ds_twr_initiator+0x4b0>)
 8003424:	e9c1 2300 	strd	r2, r3, [r1]
			distance = tof * SPEED_OF_LIGHT;
 8003428:	4b5f      	ldr	r3, [pc, #380]	@ (80035a8 <ds_twr_initiator+0x4b0>)
 800342a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342e:	a352      	add	r3, pc, #328	@ (adr r3, 8003578 <ds_twr_initiator+0x480>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fd f850 	bl	80004d8 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	495b      	ldr	r1, [pc, #364]	@ (80035ac <ds_twr_initiator+0x4b4>)
 800343e:	e9c1 2300 	strd	r2, r3, [r1]
			//The data were smoothed and filtered
			if(d_len < 10)
 8003442:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b09      	cmp	r3, #9
 8003448:	d847      	bhi.n	80034da <ds_twr_initiator+0x3e2>
			{
				distances[d_len] = distance;
 800344a:	4b59      	ldr	r3, [pc, #356]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	4b56      	ldr	r3, [pc, #344]	@ (80035ac <ds_twr_initiator+0x4b4>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	4857      	ldr	r0, [pc, #348]	@ (80035b4 <ds_twr_initiator+0x4bc>)
 8003458:	00c9      	lsls	r1, r1, #3
 800345a:	4401      	add	r1, r0
 800345c:	e9c1 2300 	strd	r2, r3, [r1]
				d_len++;
 8003460:	4b53      	ldr	r3, [pc, #332]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 800346a:	701a      	strb	r2, [r3, #0]
				distances_sum = 0;
 800346c:	4952      	ldr	r1, [pc, #328]	@ (80035b8 <ds_twr_initiator+0x4c0>)
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i = 0; i < d_len; i++)
 800347a:	2300      	movs	r3, #0
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347e:	e012      	b.n	80034a6 <ds_twr_initiator+0x3ae>
				{
					distances_sum += distances[i];
 8003480:	4a4c      	ldr	r2, [pc, #304]	@ (80035b4 <ds_twr_initiator+0x4bc>)
 8003482:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348c:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <ds_twr_initiator+0x4c0>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fc fe6b 	bl	800016c <__adddf3>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4947      	ldr	r1, [pc, #284]	@ (80035b8 <ds_twr_initiator+0x4c0>)
 800349c:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i = 0; i < d_len; i++)
 80034a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034a2:	3301      	adds	r3, #1
 80034a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034a6:	4b42      	ldr	r3, [pc, #264]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ae:	4293      	cmp	r3, r2
 80034b0:	dbe6      	blt.n	8003480 <ds_twr_initiator+0x388>
				}
				distance = distances_sum / (double)d_len;
 80034b2:	4b41      	ldr	r3, [pc, #260]	@ (80035b8 <ds_twr_initiator+0x4c0>)
 80034b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80034b8:	4b3d      	ldr	r3, [pc, #244]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc ff91 	bl	80003e4 <__aeabi_ui2d>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4620      	mov	r0, r4
 80034c8:	4629      	mov	r1, r5
 80034ca:	f7fd f92f 	bl	800072c <__aeabi_ddiv>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4936      	ldr	r1, [pc, #216]	@ (80035ac <ds_twr_initiator+0x4b4>)
 80034d4:	e9c1 2300 	strd	r2, r3, [r1]
 80034d8:	e0cd      	b.n	8003676 <ds_twr_initiator+0x57e>
			}
			else
			{
				if(fabs(distance-last_distance) < MAX_DISTANCE_ERROR)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <ds_twr_initiator+0x4b4>)
 80034dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <ds_twr_initiator+0x4c4>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f7fc fe3f 	bl	8000168 <__aeabi_dsub>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	603a      	str	r2, [r7, #0]
 80034f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <ds_twr_initiator+0x4c8>)
 80034fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003500:	f7fd fa5c 	bl	80009bc <__aeabi_dcmplt>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 809f 	beq.w	800364a <ds_twr_initiator+0x552>
				{
					error_times = 0;
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <ds_twr_initiator+0x4cc>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < d_len-1; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	667b      	str	r3, [r7, #100]	@ 0x64
 8003516:	e00f      	b.n	8003538 <ds_twr_initiator+0x440>
					{
						new_distances[i] = distances[i+1];
 8003518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800351a:	3301      	adds	r3, #1
 800351c:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <ds_twr_initiator+0x4bc>)
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	4828      	ldr	r0, [pc, #160]	@ (80035c8 <ds_twr_initiator+0x4d0>)
 8003528:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800352a:	00c9      	lsls	r1, r1, #3
 800352c:	4401      	add	r1, r0
 800352e:	e9c1 2300 	strd	r2, r3, [r1]
					for(int i = 0; i < d_len-1; i++)
 8003532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003534:	3301      	adds	r3, #1
 8003536:	667b      	str	r3, [r7, #100]	@ 0x64
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	3b01      	subs	r3, #1
 800353e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003540:	429a      	cmp	r2, r3
 8003542:	dbe9      	blt.n	8003518 <ds_twr_initiator+0x420>
					}
					new_distances[d_len-1] = distance;
 8003544:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <ds_twr_initiator+0x4b8>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	1e59      	subs	r1, r3, #1
 800354a:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <ds_twr_initiator+0x4b4>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	481d      	ldr	r0, [pc, #116]	@ (80035c8 <ds_twr_initiator+0x4d0>)
 8003552:	00c9      	lsls	r1, r1, #3
 8003554:	4401      	add	r1, r0
 8003556:	e9c1 2300 	strd	r2, r3, [r1]
					distances_sum = 0;
 800355a:	4917      	ldr	r1, [pc, #92]	@ (80035b8 <ds_twr_initiator+0x4c0>)
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9c1 2300 	strd	r2, r3, [r1]
					for(int i = 0; i < d_len; i++)
 8003568:	2300      	movs	r3, #0
 800356a:	663b      	str	r3, [r7, #96]	@ 0x60
 800356c:	e04d      	b.n	800360a <ds_twr_initiator+0x512>
 800356e:	bf00      	nop
 8003570:	3bce48fa 	.word	0x3bce48fa
 8003574:	3db13518 	.word	0x3db13518
 8003578:	13000000 	.word	0x13000000
 800357c:	41b1dd19 	.word	0x41b1dd19
 8003580:	200004e8 	.word	0x200004e8
 8003584:	200004d8 	.word	0x200004d8
 8003588:	20000076 	.word	0x20000076
 800358c:	200004e0 	.word	0x200004e0
 8003590:	2000007a 	.word	0x2000007a
 8003594:	2000007e 	.word	0x2000007e
 8003598:	200004b8 	.word	0x200004b8
 800359c:	2000006c 	.word	0x2000006c
 80035a0:	200004c6 	.word	0x200004c6
 80035a4:	200004ca 	.word	0x200004ca
 80035a8:	200004f0 	.word	0x200004f0
 80035ac:	200004f8 	.word	0x200004f8
 80035b0:	20000550 	.word	0x20000550
 80035b4:	20000500 	.word	0x20000500
 80035b8:	200005a8 	.word	0x200005a8
 80035bc:	200005b0 	.word	0x200005b0
 80035c0:	40340000 	.word	0x40340000
 80035c4:	200005b8 	.word	0x200005b8
 80035c8:	20000558 	.word	0x20000558
					{
						distances_sum += new_distances[i];
 80035cc:	4a3e      	ldr	r2, [pc, #248]	@ (80036c8 <ds_twr_initiator+0x5d0>)
 80035ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d8:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <ds_twr_initiator+0x5d4>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fc fdc5 	bl	800016c <__adddf3>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4939      	ldr	r1, [pc, #228]	@ (80036cc <ds_twr_initiator+0x5d4>)
 80035e8:	e9c1 2300 	strd	r2, r3, [r1]
						distances[i] = new_distances[i];
 80035ec:	4a36      	ldr	r2, [pc, #216]	@ (80036c8 <ds_twr_initiator+0x5d0>)
 80035ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	4835      	ldr	r0, [pc, #212]	@ (80036d0 <ds_twr_initiator+0x5d8>)
 80035fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80035fc:	00c9      	lsls	r1, r1, #3
 80035fe:	4401      	add	r1, r0
 8003600:	e9c1 2300 	strd	r2, r3, [r1]
					for(int i = 0; i < d_len; i++)
 8003604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003606:	3301      	adds	r3, #1
 8003608:	663b      	str	r3, [r7, #96]	@ 0x60
 800360a:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <ds_twr_initiator+0x5dc>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003612:	4293      	cmp	r3, r2
 8003614:	dbda      	blt.n	80035cc <ds_twr_initiator+0x4d4>
					}
					last_distance = distance;
 8003616:	4b30      	ldr	r3, [pc, #192]	@ (80036d8 <ds_twr_initiator+0x5e0>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	492f      	ldr	r1, [pc, #188]	@ (80036dc <ds_twr_initiator+0x5e4>)
 800361e:	e9c1 2300 	strd	r2, r3, [r1]
					distance = distances_sum / (double)d_len;
 8003622:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <ds_twr_initiator+0x5d4>)
 8003624:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003628:	4b2a      	ldr	r3, [pc, #168]	@ (80036d4 <ds_twr_initiator+0x5dc>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc fed9 	bl	80003e4 <__aeabi_ui2d>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4620      	mov	r0, r4
 8003638:	4629      	mov	r1, r5
 800363a:	f7fd f877 	bl	800072c <__aeabi_ddiv>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4925      	ldr	r1, [pc, #148]	@ (80036d8 <ds_twr_initiator+0x5e0>)
 8003644:	e9c1 2300 	strd	r2, r3, [r1]
 8003648:	e015      	b.n	8003676 <ds_twr_initiator+0x57e>
				}
				else
				{
					distance = last_distance;
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <ds_twr_initiator+0x5e4>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	4921      	ldr	r1, [pc, #132]	@ (80036d8 <ds_twr_initiator+0x5e0>)
 8003652:	e9c1 2300 	strd	r2, r3, [r1]
					error_times++;
 8003656:	4b22      	ldr	r3, [pc, #136]	@ (80036e0 <ds_twr_initiator+0x5e8>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <ds_twr_initiator+0x5e8>)
 8003660:	701a      	strb	r2, [r3, #0]
					if(error_times > 20)
 8003662:	4b1f      	ldr	r3, [pc, #124]	@ (80036e0 <ds_twr_initiator+0x5e8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b14      	cmp	r3, #20
 8003668:	d905      	bls.n	8003676 <ds_twr_initiator+0x57e>
					{
						error_times = 0;
 800366a:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <ds_twr_initiator+0x5e8>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
						d_len = 0;
 8003670:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <ds_twr_initiator+0x5dc>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			/* Display computed distance on HMI display. */ 
			sprintf(dist_str, "ranginginit.t1.txt=\"%.2f\"\xff\xff\xff", distance);
 8003676:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <ds_twr_initiator+0x5e0>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	4919      	ldr	r1, [pc, #100]	@ (80036e4 <ds_twr_initiator+0x5ec>)
 800367e:	481a      	ldr	r0, [pc, #104]	@ (80036e8 <ds_twr_initiator+0x5f0>)
 8003680:	f006 ffd6 	bl	800a630 <siprintf>
			HMISends(dist_str);
 8003684:	4818      	ldr	r0, [pc, #96]	@ (80036e8 <ds_twr_initiator+0x5f0>)
 8003686:	f000 fc8f 	bl	8003fa8 <HMISends>
			flags.ds_twr_timeout = 1;
 800368a:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <ds_twr_initiator+0x5f4>)
 800368c:	2201      	movs	r2, #1
 800368e:	81da      	strh	r2, [r3, #14]
 8003690:	e004      	b.n	800369c <ds_twr_initiator+0x5a4>
		}
	}
	else
	{
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXFRS_BIT_MASK);
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <ds_twr_initiator+0x5f8>)
 8003694:	2100      	movs	r1, #0
 8003696:	2044      	movs	r0, #68	@ 0x44
 8003698:	f7fe f94b 	bl	8001932 <dwt_write32bitoffsetreg>
	}
	
	/* Data is sent to the HMI display due to a long period of time without updating the ranging data */
	if(flags.ds_twr_timeout > 3000)
 800369c:	4b13      	ldr	r3, [pc, #76]	@ (80036ec <ds_twr_initiator+0x5f4>)
 800369e:	89db      	ldrh	r3, [r3, #14]
 80036a0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d905      	bls.n	80036b4 <ds_twr_initiator+0x5bc>
	{
		flags.ds_twr_timeout = 1;
 80036a8:	4b10      	ldr	r3, [pc, #64]	@ (80036ec <ds_twr_initiator+0x5f4>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	81da      	strh	r2, [r3, #14]
		HMISends("ranginginit.t1.txt=\"???\"\xff\xff\xff");
 80036ae:	4811      	ldr	r0, [pc, #68]	@ (80036f4 <ds_twr_initiator+0x5fc>)
 80036b0:	f000 fc7a 	bl	8003fa8 <HMISends>
	}

	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = DSTWR_INIT_RERUN_INTERVAL;
 80036b4:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <ds_twr_initiator+0x5f4>)
 80036b6:	2264      	movs	r2, #100	@ 0x64
 80036b8:	815a      	strh	r2, [r3, #10]
    flags.time_to_allow_run = 1;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <ds_twr_initiator+0x5f4>)
 80036bc:	2201      	movs	r2, #1
 80036be:	819a      	strh	r2, [r3, #12]
}
 80036c0:	3770      	adds	r7, #112	@ 0x70
 80036c2:	46bd      	mov	sp, r7
 80036c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c8:	20000558 	.word	0x20000558
 80036cc:	200005a8 	.word	0x200005a8
 80036d0:	20000500 	.word	0x20000500
 80036d4:	20000550 	.word	0x20000550
 80036d8:	200004f8 	.word	0x200004f8
 80036dc:	200005b0 	.word	0x200005b0
 80036e0:	200005b8 	.word	0x200005b8
 80036e4:	0800e0ac 	.word	0x0800e0ac
 80036e8:	20000368 	.word	0x20000368
 80036ec:	20000744 	.word	0x20000744
 80036f0:	24279080 	.word	0x24279080
 80036f4:	0800e0cc 	.word	0x0800e0cc

080036f8 <ds_twr_responder_init>:
};
extern dwt_txconfig_t txconfig_options_ch9;


uint8_t ds_twr_responder_init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80036fc:	f002 fda4 	bl	8006248 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 8003700:	2002      	movs	r0, #2
 8003702:	f002 fd7a 	bl	80061fa <Sleep>

    flags.option_timeout = 1;
 8003706:	4b3c      	ldr	r3, [pc, #240]	@ (80037f8 <ds_twr_responder_init+0x100>)
 8003708:	2201      	movs	r2, #1
 800370a:	821a      	strh	r2, [r3, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 800370c:	e013      	b.n	8003736 <ds_twr_responder_init+0x3e>
    { 
        if(flags.option_timeout > 300)
 800370e:	4b3a      	ldr	r3, [pc, #232]	@ (80037f8 <ds_twr_responder_init+0x100>)
 8003710:	8a1b      	ldrh	r3, [r3, #16]
 8003712:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003716:	d90e      	bls.n	8003736 <ds_twr_responder_init+0x3e>
        {
            flags.option_timeout = 0;
 8003718:	4b37      	ldr	r3, [pc, #220]	@ (80037f8 <ds_twr_responder_init+0x100>)
 800371a:	2200      	movs	r2, #0
 800371c:	821a      	strh	r2, [r3, #16]
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 800371e:	4837      	ldr	r0, [pc, #220]	@ (80037fc <ds_twr_responder_init+0x104>)
 8003720:	f000 fc42 	bl	8003fa8 <HMISends>
            Sleep(1000);
 8003724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003728:	f002 fd67 	bl	80061fa <Sleep>
            HMISends("page menu\xff\xff\xff"); 
 800372c:	4834      	ldr	r0, [pc, #208]	@ (8003800 <ds_twr_responder_init+0x108>)
 800372e:	f000 fc3b 	bl	8003fa8 <HMISends>
            return 1;
 8003732:	2301      	movs	r3, #1
 8003734:	e05d      	b.n	80037f2 <ds_twr_responder_init+0xfa>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003736:	f7ff f933 	bl	80029a0 <dwt_checkidlerc>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0e6      	beq.n	800370e <ds_twr_responder_init+0x16>
        }
    };

    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8003740:	2000      	movs	r0, #0
 8003742:	f7fe fa2b 	bl	8001b9c <dwt_initialise>
 8003746:	4603      	mov	r3, r0
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800374c:	d10b      	bne.n	8003766 <ds_twr_responder_init+0x6e>
    {
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 800374e:	482d      	ldr	r0, [pc, #180]	@ (8003804 <ds_twr_responder_init+0x10c>)
 8003750:	f000 fc2a 	bl	8003fa8 <HMISends>
        Sleep(1000); 
 8003754:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003758:	f002 fd4f 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 800375c:	4828      	ldr	r0, [pc, #160]	@ (8003800 <ds_twr_responder_init+0x108>)
 800375e:	f000 fc23 	bl	8003fa8 <HMISends>
        return 1;
 8003762:	2301      	movs	r3, #1
 8003764:	e045      	b.n	80037f2 <ds_twr_responder_init+0xfa>
    }    
    
    dwt_structs_init(DS_TWR_RESPINDER, &config, &Config_options);
 8003766:	4a28      	ldr	r2, [pc, #160]	@ (8003808 <ds_twr_responder_init+0x110>)
 8003768:	4928      	ldr	r1, [pc, #160]	@ (800380c <ds_twr_responder_init+0x114>)
 800376a:	2006      	movs	r0, #6
 800376c:	f7fd ff04 	bl	8001578 <dwt_structs_init>
    
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8003770:	4826      	ldr	r0, [pc, #152]	@ (800380c <ds_twr_responder_init+0x114>)
 8003772:	f7fe fc87 	bl	8002084 <dwt_configure>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <ds_twr_responder_init+0x9c>
    {
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 800377c:	4824      	ldr	r0, [pc, #144]	@ (8003810 <ds_twr_responder_init+0x118>)
 800377e:	f000 fc13 	bl	8003fa8 <HMISends>
        Sleep(1000);
 8003782:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003786:	f002 fd38 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 800378a:	481d      	ldr	r0, [pc, #116]	@ (8003800 <ds_twr_responder_init+0x108>)
 800378c:	f000 fc0c 	bl	8003fa8 <HMISends>
        return 1;
 8003790:	2301      	movs	r3, #1
 8003792:	e02e      	b.n	80037f2 <ds_twr_responder_init+0xfa>
    }

    dwt_configuretxrf(&Config_options);
 8003794:	481c      	ldr	r0, [pc, #112]	@ (8003808 <ds_twr_responder_init+0x110>)
 8003796:	f7fe fb85 	bl	8001ea4 <dwt_configuretxrf>
    
	/* Set the antenna delay. Modify the parameters to adjust the distance error */
    if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 800379a:	4b1e      	ldr	r3, [pc, #120]	@ (8003814 <ds_twr_responder_init+0x11c>)
 800379c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d108      	bne.n	80037b6 <ds_twr_responder_init+0xbe>
    {
        dwt_settxantennadelay(TX_ANT_DLY_HP);
 80037a4:	f244 001a 	movw	r0, #16410	@ 0x401a
 80037a8:	f7fe ff4e 	bl	8002648 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_HP);
 80037ac:	f244 001a 	movw	r0, #16410	@ 0x401a
 80037b0:	f7fe ff3a 	bl	8002628 <dwt_setrxantennadelay>
 80037b4:	e007      	b.n	80037c6 <ds_twr_responder_init+0xce>
    }
    else
    {
        dwt_settxantennadelay(TX_ANT_DLY_LP);
 80037b6:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 80037ba:	f7fe ff45 	bl	8002648 <dwt_settxantennadelay>
        dwt_setrxantennadelay(RX_ANT_DLY_LP);
 80037be:	f643 70f2 	movw	r0, #16370	@ 0x3ff2
 80037c2:	f7fe ff31 	bl	8002628 <dwt_setrxantennadelay>
    }
	
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 80037c6:	2007      	movs	r0, #7
 80037c8:	f7fe fb2c 	bl	8001e24 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fe fb0d 	bl	8001dec <dwt_setfinegraintxseq>
	
    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 80037d2:	2003      	movs	r0, #3
 80037d4:	f7ff f8fc 	bl	80029d0 <dwt_setleds>
	d_len = 0;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003818 <ds_twr_responder_init+0x120>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
	error_times = 0;
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <ds_twr_responder_init+0x124>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    flags.ds_twr_timeout = 1;
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <ds_twr_responder_init+0x100>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	81da      	strh	r2, [r3, #14]
    HMISends("page rangingresp\xff\xff\xff");
 80037ea:	480d      	ldr	r0, [pc, #52]	@ (8003820 <ds_twr_responder_init+0x128>)
 80037ec:	f000 fbdc 	bl	8003fa8 <HMISends>
    return 0;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000744 	.word	0x20000744
 80037fc:	0800e0e8 	.word	0x0800e0e8
 8003800:	0800e110 	.word	0x0800e110
 8003804:	0800e120 	.word	0x0800e120
 8003808:	200000d8 	.word	0x200000d8
 800380c:	20000090 	.word	0x20000090
 8003810:	0800e148 	.word	0x0800e148
 8003814:	20000340 	.word	0x20000340
 8003818:	20000670 	.word	0x20000670
 800381c:	200006d8 	.word	0x200006d8
 8003820:	0800e170 	.word	0x0800e170
 8003824:	00000000 	.word	0x00000000

08003828 <ds_twr_responder>:
 * @param  none
 *
 * @return none
 */
void ds_twr_responder(void)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b0a8      	sub	sp, #160	@ 0xa0
 800382e:	af00      	add	r7, sp, #0
	/* Loop forever responding to ranging requests. */
	dwt_setpreambledetecttimeout(0);
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff fac5 	bl	8002dc0 <dwt_setpreambledetecttimeout>
	
	/* Clear reception timeout to start next ranging process. */
	dwt_setrxtimeout(0);
 8003836:	2000      	movs	r0, #0
 8003838:	f7ff faa2 	bl	8002d80 <dwt_setrxtimeout>
	
	/* Activate reception immediately. */
	dwt_rxenable(DWT_START_RX_IMMEDIATE);
 800383c:	2000      	movs	r0, #0
 800383e:	f7ff fa23 	bl	8002c88 <dwt_rxenable>
	/* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003842:	e01a      	b.n	800387a <ds_twr_responder+0x52>
	{
		if(hmi_recv() == 1)
 8003844:	f7fd fc60 	bl	8001108 <hmi_recv>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	f000 838e 	beq.w	8003f6c <ds_twr_responder+0x744>
			return;
		if(flags.opt_1ms_flag == 10)
 8003850:	4b8f      	ldr	r3, [pc, #572]	@ (8003a90 <ds_twr_responder+0x268>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b0a      	cmp	r3, #10
 8003856:	d104      	bne.n	8003862 <ds_twr_responder+0x3a>
		{
			flags.opt_1ms_flag = 0;
 8003858:	4a8d      	ldr	r2, [pc, #564]	@ (8003a90 <ds_twr_responder+0x268>)
 800385a:	2300      	movs	r3, #0
 800385c:	7013      	strb	r3, [r2, #0]
			key_scan();
 800385e:	f000 fbe9 	bl	8004034 <key_scan>
		}
		if(flags.ds_twr_timeout > 3000)
 8003862:	4b8b      	ldr	r3, [pc, #556]	@ (8003a90 <ds_twr_responder+0x268>)
 8003864:	89da      	ldrh	r2, [r3, #14]
 8003866:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800386a:	429a      	cmp	r2, r3
 800386c:	d905      	bls.n	800387a <ds_twr_responder+0x52>
		{
			flags.ds_twr_timeout = 1;
 800386e:	4a88      	ldr	r2, [pc, #544]	@ (8003a90 <ds_twr_responder+0x268>)
 8003870:	2301      	movs	r3, #1
 8003872:	81d3      	strh	r3, [r2, #14]
			HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003874:	4887      	ldr	r0, [pc, #540]	@ (8003a94 <ds_twr_responder+0x26c>)
 8003876:	f000 fb97 	bl	8003fa8 <HMISends>
	while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800387a:	2100      	movs	r1, #0
 800387c:	2044      	movs	r0, #68	@ 0x44
 800387e:	f7fe f806 	bl	800188e <dwt_read32bitoffsetreg>
 8003882:	4602      	mov	r2, r0
 8003884:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <ds_twr_responder+0x270>)
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <ds_twr_responder+0x270>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b83      	ldr	r3, [pc, #524]	@ (8003a9c <ds_twr_responder+0x274>)
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0d7      	beq.n	8003844 <ds_twr_responder+0x1c>
		}
	};
	if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003894:	4b80      	ldr	r3, [pc, #512]	@ (8003a98 <ds_twr_responder+0x270>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 834d 	beq.w	8003f3c <ds_twr_responder+0x714>
	{
		uint32_t frame_len;
		/* Clear good RX frame event in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 80038a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038a6:	2100      	movs	r1, #0
 80038a8:	2044      	movs	r0, #68	@ 0x44
 80038aa:	f7fe f842 	bl	8001932 <dwt_write32bitoffsetreg>

		/* A frame has been received, read it into the local buffer. */
		frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 80038ae:	2100      	movs	r1, #0
 80038b0:	204c      	movs	r0, #76	@ 0x4c
 80038b2:	f7fd ffec 	bl	800188e <dwt_read32bitoffsetreg>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		if (frame_len <= RX_BUF_LEN)
 80038c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038c4:	2b18      	cmp	r3, #24
 80038c6:	d807      	bhi.n	80038d8 <ds_twr_responder+0xb0>
		{
			dwt_readrxdata(rx_buffer, frame_len, 0);
 80038c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2200      	movs	r2, #0
 80038d0:	4619      	mov	r1, r3
 80038d2:	4873      	ldr	r0, [pc, #460]	@ (8003aa0 <ds_twr_responder+0x278>)
 80038d4:	f7fe ff4a 	bl	800276c <dwt_readrxdata>
		}
		
		/* Check that the frame is a poll sent by "DS TWR initiator" example.
		 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
		rx_buffer[ALL_MSG_SN_IDX] = 0;
 80038d8:	4a71      	ldr	r2, [pc, #452]	@ (8003aa0 <ds_twr_responder+0x278>)
 80038da:	2300      	movs	r3, #0
 80038dc:	7093      	strb	r3, [r2, #2]
		if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 80038de:	220a      	movs	r2, #10
 80038e0:	4970      	ldr	r1, [pc, #448]	@ (8003aa4 <ds_twr_responder+0x27c>)
 80038e2:	486f      	ldr	r0, [pc, #444]	@ (8003aa0 <ds_twr_responder+0x278>)
 80038e4:	f006 ff07 	bl	800a6f6 <memcmp>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 832b 	bne.w	8003f46 <ds_twr_responder+0x71e>
		{
			uint32_t resp_tx_time;
			int ret;

			/* Retrieve poll reception timestamp. */
			poll_rx_ts = get_rx_timestamp_u64();
 80038f0:	f001 fe6e 	bl	80055d0 <get_rx_timestamp_u64>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	496b      	ldr	r1, [pc, #428]	@ (8003aa8 <ds_twr_responder+0x280>)
 80038fa:	e9c1 2300 	strd	r2, r3, [r1]
			
			
			/* Set send time for response. See NOTE 9 below. */
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].data_rate == RATE_6M8)
 80038fe:	4b6b      	ldr	r3, [pc, #428]	@ (8003aac <ds_twr_responder+0x284>)
 8003900:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003904:	2b00      	cmp	r3, #0
 8003906:	d119      	bne.n	800393c <ds_twr_responder+0x114>
				resp_tx_time = (uint32_t)((poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS_6M8) * UUS_TO_DWT_TIME)) >> 8);
 8003908:	4b67      	ldr	r3, [pc, #412]	@ (8003aa8 <ds_twr_responder+0x280>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	4968      	ldr	r1, [pc, #416]	@ (8003ab0 <ds_twr_responder+0x288>)
 8003910:	1851      	adds	r1, r2, r1
 8003912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003914:	f143 0300 	adc.w	r3, r3, #0
 8003918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8003926:	4651      	mov	r1, sl
 8003928:	0a0a      	lsrs	r2, r1, #8
 800392a:	46dc      	mov	ip, fp
 800392c:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8003930:	4659      	mov	r1, fp
 8003932:	0a0b      	lsrs	r3, r1, #8
 8003934:	4613      	mov	r3, r2
 8003936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800393a:	e014      	b.n	8003966 <ds_twr_responder+0x13e>
			else
				resp_tx_time = (uint32_t)((poll_rx_ts + ((POLL_RX_TO_RESP_TX_DLY_UUS_850K) * UUS_TO_DWT_TIME)) >> 8);
 800393c:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa8 <ds_twr_responder+0x280>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	495b      	ldr	r1, [pc, #364]	@ (8003ab0 <ds_twr_responder+0x288>)
 8003944:	eb12 0a01 	adds.w	sl, r2, r1
 8003948:	f143 0b00 	adc.w	fp, r3, #0
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8003958:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 800395c:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8003960:	4613      	mov	r3, r2
 8003962:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

			dwt_setdelayedtrxtime(resp_tx_time);
 8003966:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800396a:	f7ff f8ab 	bl	8002ac4 <dwt_setdelayedtrxtime>
					 

			/* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].dev_id == DEV_UWB3000F27)
 800396e:	4b4f      	ldr	r3, [pc, #316]	@ (8003aac <ds_twr_responder+0x284>)
 8003970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d124      	bne.n	80039c2 <ds_twr_responder+0x19a>
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_HP;
 8003978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800397c:	2200      	movs	r2, #0
 800397e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003980:	637a      	str	r2, [r7, #52]	@ 0x34
 8003982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003986:	460b      	mov	r3, r1
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398c:	460b      	mov	r3, r1
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003992:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003996:	461a      	mov	r2, r3
 8003998:	f422 78ff 	bic.w	r8, r2, #510	@ 0x1fe
 800399c:	f028 0801 	bic.w	r8, r8, #1
 80039a0:	4623      	mov	r3, r4
 80039a2:	f003 09ff 	and.w	r9, r3, #255	@ 0xff
 80039a6:	f244 031a 	movw	r3, #16410	@ 0x401a
 80039aa:	eb18 0303 	adds.w	r3, r8, r3
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	f149 0300 	adc.w	r3, r9, #0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <ds_twr_responder+0x28c>)
 80039b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039bc:	e9c3 1200 	strd	r1, r2, [r3]
 80039c0:	e021      	b.n	8003a06 <ds_twr_responder+0x1de>
			else
				resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY_LP;
 80039c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039c6:	2200      	movs	r2, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039d0:	460b      	mov	r3, r1
 80039d2:	0e1b      	lsrs	r3, r3, #24
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	460b      	mov	r3, r1
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039e0:	4611      	mov	r1, r2
 80039e2:	f421 74ff 	bic.w	r4, r1, #510	@ 0x1fe
 80039e6:	f024 0401 	bic.w	r4, r4, #1
 80039ea:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80039ee:	f643 73f2 	movw	r3, #16370	@ 0x3ff2
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	f145 0300 	adc.w	r3, r5, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab4 <ds_twr_responder+0x28c>)
 80039fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a02:	e9c3 1200 	strd	r1, r2, [r3]
			
			/* Write all timestamps in the final message. See NOTE 8 below. */
			resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_rx_ts);
 8003a06:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <ds_twr_responder+0x280>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	482a      	ldr	r0, [pc, #168]	@ (8003ab8 <ds_twr_responder+0x290>)
 8003a0e:	f001 fe6b 	bl	80056e8 <resp_msg_set_ts>
			resp_msg_set_ts(&tx_resp_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_tx_ts);
 8003a12:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <ds_twr_responder+0x28c>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	4828      	ldr	r0, [pc, #160]	@ (8003abc <ds_twr_responder+0x294>)
 8003a1a:	f001 fe65 	bl	80056e8 <resp_msg_set_ts>
			
			if(dwt_setting_data.dwt_setting_value[DS_TWR_RESPINDER].data_rate == RATE_6M8)
 8003a1e:	4b23      	ldr	r3, [pc, #140]	@ (8003aac <ds_twr_responder+0x284>)
 8003a20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <ds_twr_responder+0x216>
			{
				/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
				dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS_6M8); 
 8003a28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a2c:	f7fe ff9a 	bl	8002964 <dwt_setrxaftertxdelay>
				/* FINAL_RX_TIMEOUT_UUS. */
				dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS_6M8);                
 8003a30:	20dc      	movs	r0, #220	@ 0xdc
 8003a32:	f7ff f9a5 	bl	8002d80 <dwt_setrxtimeout>
				/* Set preamble timeout for expected frames. See NOTE 6 below. */
				dwt_setpreambledetecttimeout(PRE_TIMEOUT_6M8);
 8003a36:	2005      	movs	r0, #5
 8003a38:	f7ff f9c2 	bl	8002dc0 <dwt_setpreambledetecttimeout>
 8003a3c:	e009      	b.n	8003a52 <ds_twr_responder+0x22a>
			}
			else
			{
				/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
				dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS_850K); 
 8003a3e:	203c      	movs	r0, #60	@ 0x3c
 8003a40:	f7fe ff90 	bl	8002964 <dwt_setrxaftertxdelay>
				/* FINAL_RX_TIMEOUT_UUS. */
				dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS_850K);                
 8003a44:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a48:	f7ff f99a 	bl	8002d80 <dwt_setrxtimeout>
				/* Set preamble timeout for expected frames. See NOTE 6 below. */
				dwt_setpreambledetecttimeout(PRE_TIMEOUT_850K);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff f9b7 	bl	8002dc0 <dwt_setpreambledetecttimeout>
			}  
			/* Write and send the response message. See NOTE 10 below.*/
			tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <ds_twr_responder+0x298>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <ds_twr_responder+0x29c>)
 8003a58:	709a      	strb	r2, [r3, #2]
			dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4919      	ldr	r1, [pc, #100]	@ (8003ac4 <ds_twr_responder+0x29c>)
 8003a5e:	2014      	movs	r0, #20
 8003a60:	f7fe fe04 	bl	800266c <dwt_writetxdata>
			dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003a64:	2201      	movs	r2, #1
 8003a66:	2100      	movs	r1, #0
 8003a68:	2014      	movs	r0, #20
 8003a6a:	f7fe fe37 	bl	80026dc <dwt_writetxfctrl>
			ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);//DWT_START_TX_DELAYED DWT_START_TX_IMMEDIATE
 8003a6e:	2003      	movs	r0, #3
 8003a70:	f7ff f836 	bl	8002ae0 <dwt_starttx>
 8003a74:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			
			/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
			if (ret == DWT_ERROR)
 8003a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a80:	d122      	bne.n	8003ac8 <ds_twr_responder+0x2a0>
			{
				flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 8003a82:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <ds_twr_responder+0x268>)
 8003a84:	225a      	movs	r2, #90	@ 0x5a
 8003a86:	815a      	strh	r2, [r3, #10]
				flags.time_to_allow_run = 1;
 8003a88:	4b01      	ldr	r3, [pc, #4]	@ (8003a90 <ds_twr_responder+0x268>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	819a      	strh	r2, [r3, #12]
				return;
 8003a8e:	e26e      	b.n	8003f6e <ds_twr_responder+0x746>
 8003a90:	20000744 	.word	0x20000744
 8003a94:	0800e184 	.word	0x0800e184
 8003a98:	200005d4 	.word	0x200005d4
 8003a9c:	2427d000 	.word	0x2427d000
 8003aa0:	200005bc 	.word	0x200005bc
 8003aa4:	200000a0 	.word	0x200000a0
 8003aa8:	200005d8 	.word	0x200005d8
 8003aac:	20000340 	.word	0x20000340
 8003ab0:	036d8168 	.word	0x036d8168
 8003ab4:	200005e0 	.word	0x200005e0
 8003ab8:	200000b6 	.word	0x200000b6
 8003abc:	200000ba 	.word	0x200000ba
 8003ac0:	200005b9 	.word	0x200005b9
 8003ac4:	200000ac 	.word	0x200000ac
			}
			
			/* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
			while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003ac8:	bf00      	nop
 8003aca:	2100      	movs	r1, #0
 8003acc:	2044      	movs	r0, #68	@ 0x44
 8003ace:	f7fd fede 	bl	800188e <dwt_read32bitoffsetreg>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4ab6      	ldr	r2, [pc, #728]	@ (8003db0 <ds_twr_responder+0x588>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4bb5      	ldr	r3, [pc, #724]	@ (8003db0 <ds_twr_responder+0x588>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4bb5      	ldr	r3, [pc, #724]	@ (8003db4 <ds_twr_responder+0x58c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f2      	beq.n	8003aca <ds_twr_responder+0x2a2>
			{
				
			};
			/* Increment frame sequence number after transmission of the response message (modulo 256). */
			frame_seq_nb++;
 8003ae4:	4bb4      	ldr	r3, [pc, #720]	@ (8003db8 <ds_twr_responder+0x590>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4bb2      	ldr	r3, [pc, #712]	@ (8003db8 <ds_twr_responder+0x590>)
 8003aee:	701a      	strb	r2, [r3, #0]
			
			if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8003af0:	4baf      	ldr	r3, [pc, #700]	@ (8003db0 <ds_twr_responder+0x588>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8219 	beq.w	8003f30 <ds_twr_responder+0x708>
			{
				/* Clear good RX frame event and TX frame sent in the DW IC status register. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);
 8003afe:	f44f 4281 	mov.w	r2, #16512	@ 0x4080
 8003b02:	2100      	movs	r1, #0
 8003b04:	2044      	movs	r0, #68	@ 0x44
 8003b06:	f7fd ff14 	bl	8001932 <dwt_write32bitoffsetreg>

				/* A frame has been received, read it into the local buffer. */
				frame_len = dwt_read32bitreg(RX_FINFO_ID) & FRAME_LEN_MAX_EX;
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	204c      	movs	r0, #76	@ 0x4c
 8003b0e:	f7fd febe 	bl	800188e <dwt_read32bitoffsetreg>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (frame_len <= RX_BUF_LEN)
 8003b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d807      	bhi.n	8003b34 <ds_twr_responder+0x30c>
				{
					dwt_readrxdata(rx_buffer, frame_len, 0);
 8003b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	48a3      	ldr	r0, [pc, #652]	@ (8003dbc <ds_twr_responder+0x594>)
 8003b30:	f7fe fe1c 	bl	800276c <dwt_readrxdata>
				}

				/* Check that the frame is a final message sent by "DS TWR initiator" example.
				 * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
				rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003b34:	4ba1      	ldr	r3, [pc, #644]	@ (8003dbc <ds_twr_responder+0x594>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	709a      	strb	r2, [r3, #2]
				
				if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	49a0      	ldr	r1, [pc, #640]	@ (8003dc0 <ds_twr_responder+0x598>)
 8003b3e:	489f      	ldr	r0, [pc, #636]	@ (8003dbc <ds_twr_responder+0x594>)
 8003b40:	f006 fdd9 	bl	800a6f6 <memcmp>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 81fd 	bne.w	8003f46 <ds_twr_responder+0x71e>
					uint32_t poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
					double Ra, Rb, Da, Db;
					int64_t tof_dtu;

					/* Retrieve response transmission and final reception timestamps. */
					resp_tx_ts = get_tx_timestamp_u64();
 8003b4c:	f001 fcff 	bl	800554e <get_tx_timestamp_u64>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	499b      	ldr	r1, [pc, #620]	@ (8003dc4 <ds_twr_responder+0x59c>)
 8003b56:	e9c1 2300 	strd	r2, r3, [r1]
					final_rx_ts = get_rx_timestamp_u64();
 8003b5a:	f001 fd39 	bl	80055d0 <get_rx_timestamp_u64>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4999      	ldr	r1, [pc, #612]	@ (8003dc8 <ds_twr_responder+0x5a0>)
 8003b64:	e9c1 2300 	strd	r2, r3, [r1]

					/* Get timestamps embedded in the final message. */
					final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003b68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4897      	ldr	r0, [pc, #604]	@ (8003dcc <ds_twr_responder+0x5a4>)
 8003b70:	f001 fd6f 	bl	8005652 <final_msg_get_ts>
					final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8003b74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4895      	ldr	r0, [pc, #596]	@ (8003dd0 <ds_twr_responder+0x5a8>)
 8003b7c:	f001 fd69 	bl	8005652 <final_msg_get_ts>
					final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8003b80:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003b84:	4619      	mov	r1, r3
 8003b86:	4893      	ldr	r0, [pc, #588]	@ (8003dd4 <ds_twr_responder+0x5ac>)
 8003b88:	f001 fd63 	bl	8005652 <final_msg_get_ts>

					/* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
					poll_rx_ts_32 = (uint32_t)poll_rx_ts;
 8003b8c:	4b92      	ldr	r3, [pc, #584]	@ (8003dd8 <ds_twr_responder+0x5b0>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	4613      	mov	r3, r2
 8003b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					resp_tx_ts_32 = (uint32_t)resp_tx_ts;
 8003b98:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc4 <ds_twr_responder+0x59c>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					final_rx_ts_32 = (uint32_t)final_rx_ts;
 8003ba4:	4b88      	ldr	r3, [pc, #544]	@ (8003dc8 <ds_twr_responder+0x5a0>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	4613      	mov	r3, r2
 8003bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
					Ra = (double)(resp_rx_ts - poll_tx_ts);
 8003bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fc15 	bl	80003e4 <__aeabi_ui2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8003bc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fc fc0a 	bl	80003e4 <__aeabi_ui2d>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
					Da = (double)(final_tx_ts - resp_rx_ts);
 8003bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc fc00 	bl	80003e4 <__aeabi_ui2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8003bec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fbf4 	bl	80003e4 <__aeabi_ui2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
					tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8003c04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003c08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c0c:	f7fc fc64 	bl	80004d8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003c20:	f7fc fc5a 	bl	80004d8 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fa9c 	bl	8000168 <__aeabi_dsub>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003c3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c40:	f7fc fa94 	bl	800016c <__adddf3>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003c50:	f7fc fa8c 	bl	800016c <__adddf3>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c60:	f7fc fa84 	bl	800016c <__adddf3>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fd5e 	bl	800072c <__aeabi_ddiv>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7fd f9fa 	bl	8001070 <__aeabi_d2lz>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

					tof = tof_dtu * DWT_TIME_UNITS;
 8003c84:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003c88:	f7fc fbf8 	bl	800047c <__aeabi_l2d>
 8003c8c:	a344      	add	r3, pc, #272	@ (adr r3, 8003da0 <ds_twr_responder+0x578>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc fc21 	bl	80004d8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4950      	ldr	r1, [pc, #320]	@ (8003ddc <ds_twr_responder+0x5b4>)
 8003c9c:	e9c1 2300 	strd	r2, r3, [r1]
					distance = tof * SPEED_OF_LIGHT;
 8003ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8003ddc <ds_twr_responder+0x5b4>)
 8003ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca6:	a340      	add	r3, pc, #256	@ (adr r3, 8003da8 <ds_twr_responder+0x580>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fc14 	bl	80004d8 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	494a      	ldr	r1, [pc, #296]	@ (8003de0 <ds_twr_responder+0x5b8>)
 8003cb6:	e9c1 2300 	strd	r2, r3, [r1]
					//The data were smoothed and filtered
					if(d_len < 10)
 8003cba:	4b4a      	ldr	r3, [pc, #296]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	d84c      	bhi.n	8003d5c <ds_twr_responder+0x534>
					{
						distances[d_len] = distance;
 8003cc2:	4b48      	ldr	r3, [pc, #288]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4b45      	ldr	r3, [pc, #276]	@ (8003de0 <ds_twr_responder+0x5b8>)
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	4846      	ldr	r0, [pc, #280]	@ (8003de8 <ds_twr_responder+0x5c0>)
 8003cd0:	00c9      	lsls	r1, r1, #3
 8003cd2:	4401      	add	r1, r0
 8003cd4:	e9c1 2300 	strd	r2, r3, [r1]
						d_len++;
 8003cd8:	4b42      	ldr	r3, [pc, #264]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b40      	ldr	r3, [pc, #256]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003ce2:	701a      	strb	r2, [r3, #0]
						distances_sum = 0;
 8003ce4:	4941      	ldr	r1, [pc, #260]	@ (8003dec <ds_twr_responder+0x5c4>)
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9c1 2300 	strd	r2, r3, [r1]
						for(int i = 0; i < d_len; i++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cf8:	e015      	b.n	8003d26 <ds_twr_responder+0x4fe>
						{
							distances_sum += distances[i];
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8003de8 <ds_twr_responder+0x5c0>)
 8003cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d08:	4b38      	ldr	r3, [pc, #224]	@ (8003dec <ds_twr_responder+0x5c4>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fa2d 	bl	800016c <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4935      	ldr	r1, [pc, #212]	@ (8003dec <ds_twr_responder+0x5c4>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
						for(int i = 0; i < d_len; i++)
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d20:	3301      	adds	r3, #1
 8003d22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d26:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d30:	4293      	cmp	r3, r2
 8003d32:	dbe2      	blt.n	8003cfa <ds_twr_responder+0x4d2>
						}
						distance = distances_sum / (double)d_len;
 8003d34:	4b2d      	ldr	r3, [pc, #180]	@ (8003dec <ds_twr_responder+0x5c4>)
 8003d36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <ds_twr_responder+0x5bc>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fb50 	bl	80003e4 <__aeabi_ui2d>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc fcee 	bl	800072c <__aeabi_ddiv>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4922      	ldr	r1, [pc, #136]	@ (8003de0 <ds_twr_responder+0x5b8>)
 8003d56:	e9c1 2300 	strd	r2, r3, [r1]
 8003d5a:	e0db      	b.n	8003f14 <ds_twr_responder+0x6ec>
					}
					else
					{
						if(fabs(distance-last_distance) < MAX_DISTANCE_ERROR)
 8003d5c:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <ds_twr_responder+0x5b8>)
 8003d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <ds_twr_responder+0x5c8>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc f9fe 	bl	8000168 <__aeabi_dsub>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	603a      	str	r2, [r7, #0]
 8003d72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <ds_twr_responder+0x5cc>)
 8003d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d82:	f7fc fe1b 	bl	80009bc <__aeabi_dcmplt>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80ad 	beq.w	8003ee8 <ds_twr_responder+0x6c0>
						{
							error_times = 0;
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <ds_twr_responder+0x5d0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < d_len-1; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d9a:	e043      	b.n	8003e24 <ds_twr_responder+0x5fc>
 8003d9c:	f3af 8000 	nop.w
 8003da0:	3bce48fa 	.word	0x3bce48fa
 8003da4:	3db13518 	.word	0x3db13518
 8003da8:	13000000 	.word	0x13000000
 8003dac:	41b1dd19 	.word	0x41b1dd19
 8003db0:	200005d4 	.word	0x200005d4
 8003db4:	2427d000 	.word	0x2427d000
 8003db8:	200005b9 	.word	0x200005b9
 8003dbc:	200005bc 	.word	0x200005bc
 8003dc0:	200000c0 	.word	0x200000c0
 8003dc4:	200005e0 	.word	0x200005e0
 8003dc8:	200005e8 	.word	0x200005e8
 8003dcc:	200005c6 	.word	0x200005c6
 8003dd0:	200005ca 	.word	0x200005ca
 8003dd4:	200005ce 	.word	0x200005ce
 8003dd8:	200005d8 	.word	0x200005d8
 8003ddc:	20000610 	.word	0x20000610
 8003de0:	20000618 	.word	0x20000618
 8003de4:	20000670 	.word	0x20000670
 8003de8:	20000620 	.word	0x20000620
 8003dec:	200006c8 	.word	0x200006c8
 8003df0:	200006d0 	.word	0x200006d0
 8003df4:	40340000 	.word	0x40340000
 8003df8:	200006d8 	.word	0x200006d8
							{
								new_distances[i] = distances[i+1];
 8003dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a5d      	ldr	r2, [pc, #372]	@ (8003f78 <ds_twr_responder+0x750>)
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	485b      	ldr	r0, [pc, #364]	@ (8003f7c <ds_twr_responder+0x754>)
 8003e0e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003e12:	00c9      	lsls	r1, r1, #3
 8003e14:	4401      	add	r1, r0
 8003e16:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i = 0; i < d_len-1; i++)
 8003e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e24:	4b56      	ldr	r3, [pc, #344]	@ (8003f80 <ds_twr_responder+0x758>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dbe4      	blt.n	8003dfc <ds_twr_responder+0x5d4>
							}
							new_distances[d_len-1] = distance;
 8003e32:	4b53      	ldr	r3, [pc, #332]	@ (8003f80 <ds_twr_responder+0x758>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	1e59      	subs	r1, r3, #1
 8003e38:	4b52      	ldr	r3, [pc, #328]	@ (8003f84 <ds_twr_responder+0x75c>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	484f      	ldr	r0, [pc, #316]	@ (8003f7c <ds_twr_responder+0x754>)
 8003e40:	00c9      	lsls	r1, r1, #3
 8003e42:	4401      	add	r1, r0
 8003e44:	e9c1 2300 	strd	r2, r3, [r1]
							distances_sum = 0;
 8003e48:	494f      	ldr	r1, [pc, #316]	@ (8003f88 <ds_twr_responder+0x760>)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i = 0; i < d_len; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e5c:	e023      	b.n	8003ea6 <ds_twr_responder+0x67e>
							{
								distances_sum += new_distances[i];
 8003e5e:	4a47      	ldr	r2, [pc, #284]	@ (8003f7c <ds_twr_responder+0x754>)
 8003e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e6c:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <ds_twr_responder+0x760>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc f97b 	bl	800016c <__adddf3>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4943      	ldr	r1, [pc, #268]	@ (8003f88 <ds_twr_responder+0x760>)
 8003e7c:	e9c1 2300 	strd	r2, r3, [r1]
								distances[i] = new_distances[i];
 8003e80:	4a3e      	ldr	r2, [pc, #248]	@ (8003f7c <ds_twr_responder+0x754>)
 8003e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	483a      	ldr	r0, [pc, #232]	@ (8003f78 <ds_twr_responder+0x750>)
 8003e90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e94:	00c9      	lsls	r1, r1, #3
 8003e96:	4401      	add	r1, r0
 8003e98:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i = 0; i < d_len; i++)
 8003e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ea6:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <ds_twr_responder+0x758>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	dbd4      	blt.n	8003e5e <ds_twr_responder+0x636>
							}
							last_distance = distance;
 8003eb4:	4b33      	ldr	r3, [pc, #204]	@ (8003f84 <ds_twr_responder+0x75c>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	4934      	ldr	r1, [pc, #208]	@ (8003f8c <ds_twr_responder+0x764>)
 8003ebc:	e9c1 2300 	strd	r2, r3, [r1]
							distance = distances_sum / (double)d_len;
 8003ec0:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <ds_twr_responder+0x760>)
 8003ec2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f80 <ds_twr_responder+0x758>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fa8a 	bl	80003e4 <__aeabi_ui2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7fc fc28 	bl	800072c <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4928      	ldr	r1, [pc, #160]	@ (8003f84 <ds_twr_responder+0x75c>)
 8003ee2:	e9c1 2300 	strd	r2, r3, [r1]
 8003ee6:	e015      	b.n	8003f14 <ds_twr_responder+0x6ec>
						}
						else
						{
							distance = last_distance;
 8003ee8:	4b28      	ldr	r3, [pc, #160]	@ (8003f8c <ds_twr_responder+0x764>)
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	4925      	ldr	r1, [pc, #148]	@ (8003f84 <ds_twr_responder+0x75c>)
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
							error_times++;
 8003ef4:	4b26      	ldr	r3, [pc, #152]	@ (8003f90 <ds_twr_responder+0x768>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <ds_twr_responder+0x768>)
 8003efe:	701a      	strb	r2, [r3, #0]
							if(error_times > 20)
 8003f00:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <ds_twr_responder+0x768>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b14      	cmp	r3, #20
 8003f06:	d905      	bls.n	8003f14 <ds_twr_responder+0x6ec>
							{
								error_times = 0;
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <ds_twr_responder+0x768>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
								d_len = 0;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <ds_twr_responder+0x758>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					/* Display computed distance on HMI display. */
					sprintf(dist_str, "rangingresp.t1.txt=\"%.2f\"\xff\xff\xff", distance);
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <ds_twr_responder+0x75c>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	491e      	ldr	r1, [pc, #120]	@ (8003f94 <ds_twr_responder+0x76c>)
 8003f1c:	481e      	ldr	r0, [pc, #120]	@ (8003f98 <ds_twr_responder+0x770>)
 8003f1e:	f006 fb87 	bl	800a630 <siprintf>
					HMISends(dist_str);
 8003f22:	481d      	ldr	r0, [pc, #116]	@ (8003f98 <ds_twr_responder+0x770>)
 8003f24:	f000 f840 	bl	8003fa8 <HMISends>
					flags.ds_twr_timeout = 1;
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <ds_twr_responder+0x774>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	81da      	strh	r2, [r3, #14]
 8003f2e:	e00a      	b.n	8003f46 <ds_twr_responder+0x71e>
				}
			}
			else
			{           
				/* Clear RX error/timeout events in the DW IC status register. */
				dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003f30:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <ds_twr_responder+0x778>)
 8003f32:	2100      	movs	r1, #0
 8003f34:	2044      	movs	r0, #68	@ 0x44
 8003f36:	f7fd fcfc 	bl	8001932 <dwt_write32bitoffsetreg>
 8003f3a:	e004      	b.n	8003f46 <ds_twr_responder+0x71e>
		}
	}
	else
	{ 
		/* Clear RX error/timeout events in the DW IC status register. */
		dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <ds_twr_responder+0x778>)
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2044      	movs	r0, #68	@ 0x44
 8003f42:	f7fd fcf6 	bl	8001932 <dwt_write32bitoffsetreg>
	}
	
	/* Data is sent to the HMI display due to a long period of time without updating the ranging data */
	if(flags.ds_twr_timeout > 3000)
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <ds_twr_responder+0x774>)
 8003f48:	89db      	ldrh	r3, [r3, #14]
 8003f4a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d905      	bls.n	8003f5e <ds_twr_responder+0x736>
	{
		flags.ds_twr_timeout = 1;
 8003f52:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <ds_twr_responder+0x774>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	81da      	strh	r2, [r3, #14]
		HMISends("rangingresp.t1.txt=\"???\"\xff\xff\xff");
 8003f58:	4812      	ldr	r0, [pc, #72]	@ (8003fa4 <ds_twr_responder+0x77c>)
 8003f5a:	f000 f825 	bl	8003fa8 <HMISends>
	}

	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = DSTWR_RESP_RERUN_INTERVAL;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <ds_twr_responder+0x774>)
 8003f60:	225a      	movs	r2, #90	@ 0x5a
 8003f62:	815a      	strh	r2, [r3, #10]
    flags.time_to_allow_run = 1;
 8003f64:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <ds_twr_responder+0x774>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	819a      	strh	r2, [r3, #12]
 8003f6a:	e000      	b.n	8003f6e <ds_twr_responder+0x746>
			return;
 8003f6c:	bf00      	nop
}
 8003f6e:	37a0      	adds	r7, #160	@ 0xa0
 8003f70:	46bd      	mov	sp, r7
 8003f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f76:	bf00      	nop
 8003f78:	20000620 	.word	0x20000620
 8003f7c:	20000678 	.word	0x20000678
 8003f80:	20000670 	.word	0x20000670
 8003f84:	20000618 	.word	0x20000618
 8003f88:	200006c8 	.word	0x200006c8
 8003f8c:	200006d0 	.word	0x200006d0
 8003f90:	200006d8 	.word	0x200006d8
 8003f94:	0800e1a0 	.word	0x0800e1a0
 8003f98:	200005f0 	.word	0x200005f0
 8003f9c:	20000744 	.word	0x20000744
 8003fa0:	24279000 	.word	0x24279000
 8003fa4:	0800e184 	.word	0x0800e184

08003fa8 <HMISends>:
/**
  *	HMISends
  * @brief Send data to the HMI display
  */
void HMISends(uint8_t *buf1)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, buf1, strlen((char*)buf1), 0xffff);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc f8cd 	bl	8000150 <strlen>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4803      	ldr	r0, [pc, #12]	@ (8003fd0 <HMISends+0x28>)
 8003fc2:	f004 fdaf 	bl	8008b24 <HAL_UART_Transmit>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000854 	.word	0x20000854

08003fd4 <HAL_UART_RxCpltCallback>:
/*
 * HAL_UART_RxCpltCallback
 * Serial port receive interrupt callback
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800401c <HAL_UART_RxCpltCallback+0x48>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d116      	bne.n	8004014 <HAL_UART_RxCpltCallback+0x40>
    {
        recvBuf[recvBufLen++] = recvChar;
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <HAL_UART_RxCpltCallback+0x4c>)
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	b291      	uxth	r1, r2
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <HAL_UART_RxCpltCallback+0x4c>)
 8003ff0:	8011      	strh	r1, [r2, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_UART_RxCpltCallback+0x50>)
 8003ff6:	7819      	ldrb	r1, [r3, #0]
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <HAL_UART_RxCpltCallback+0x54>)
 8003ffa:	5499      	strb	r1, [r3, r2]
		
		//Start receiving timing
        if(flags.uart_recv_time == 0)
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_UART_RxCpltCallback+0x58>)
 8003ffe:	799b      	ldrb	r3, [r3, #6]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <HAL_UART_RxCpltCallback+0x36>
            flags.uart_recv_time = 1;
 8004004:	4b09      	ldr	r3, [pc, #36]	@ (800402c <HAL_UART_RxCpltCallback+0x58>)
 8004006:	2201      	movs	r2, #1
 8004008:	719a      	strb	r2, [r3, #6]
		
        HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 800400a:	2201      	movs	r2, #1
 800400c:	4905      	ldr	r1, [pc, #20]	@ (8004024 <HAL_UART_RxCpltCallback+0x50>)
 800400e:	4808      	ldr	r0, [pc, #32]	@ (8004030 <HAL_UART_RxCpltCallback+0x5c>)
 8004010:	f004 fe0b 	bl	8008c2a <HAL_UART_Receive_IT>
    }
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013800 	.word	0x40013800
 8004020:	20000740 	.word	0x20000740
 8004024:	200006d9 	.word	0x200006d9
 8004028:	200006dc 	.word	0x200006dc
 800402c:	20000744 	.word	0x20000744
 8004030:	20000854 	.word	0x20000854

08004034 <key_scan>:
  *  Key DOWN   ------> PB2
  *  Key OK 	------> PB10
  *  Key BACK 	------> PB11
  */
void key_scan(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
    uint16_t key_value;
    key_value = (KEY_PORT->IDR)&KEY_UNKNOWN;
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <key_scan+0x80>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	b29a      	uxth	r2, r3
 8004040:	f640 4306 	movw	r3, #3078	@ 0xc06
 8004044:	4013      	ands	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
    if(key_value == KEY_UNKNOWN)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	f640 4206 	movw	r2, #3078	@ 0xc06
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <key_scan+0x38>
    {
        flags.key_ispress = 0;
 8004052:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <key_scan+0x84>)
 8004054:	7853      	ldrb	r3, [r2, #1]
 8004056:	f36f 0300 	bfc	r3, #0, #1
 800405a:	7053      	strb	r3, [r2, #1]
        flags.key_presstime = 0;
 800405c:	4b16      	ldr	r3, [pc, #88]	@ (80040b8 <key_scan+0x84>)
 800405e:	2200      	movs	r2, #0
 8004060:	805a      	strh	r2, [r3, #2]
        flags.key_value = KEY_UNKNOWN;
 8004062:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <key_scan+0x84>)
 8004064:	f640 4206 	movw	r2, #3078	@ 0xc06
 8004068:	809a      	strh	r2, [r3, #4]
                flags.key_value = key_value;
                key_options(flags.key_value);
            }
        }
    }
}
 800406a:	e01e      	b.n	80040aa <key_scan+0x76>
        if(!flags.key_ispress)
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <key_scan+0x84>)
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d117      	bne.n	80040aa <key_scan+0x76>
            if(flags.key_presstime == 0)
 800407a:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <key_scan+0x84>)
 800407c:	885b      	ldrh	r3, [r3, #2]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <key_scan+0x54>
                flags.key_presstime = 1;
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <key_scan+0x84>)
 8004084:	2201      	movs	r2, #1
 8004086:	805a      	strh	r2, [r3, #2]
            if(flags.key_presstime >= 20)
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <key_scan+0x84>)
 800408a:	885b      	ldrh	r3, [r3, #2]
 800408c:	2b13      	cmp	r3, #19
 800408e:	d90c      	bls.n	80040aa <key_scan+0x76>
                flags.key_ispress = 1;
 8004090:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <key_scan+0x84>)
 8004092:	7853      	ldrb	r3, [r2, #1]
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	7053      	strb	r3, [r2, #1]
                flags.key_value = key_value;
 800409a:	4a07      	ldr	r2, [pc, #28]	@ (80040b8 <key_scan+0x84>)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	8093      	strh	r3, [r2, #4]
                key_options(flags.key_value);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <key_scan+0x84>)
 80040a2:	889b      	ldrh	r3, [r3, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 f9a5 	bl	80053f4 <key_options>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40010c00 	.word	0x40010c00
 80040b8:	20000744 	.word	0x20000744

080040bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_DeInit();
 80040c0:	f002 fa2c 	bl	800651c <HAL_DeInit>
  HAL_RCC_DeInit();
 80040c4:	f002 feac 	bl	8006e20 <HAL_RCC_DeInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040c8:	f002 fa12 	bl	80064f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040cc:	f000 f826 	bl	800411c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040d0:	f000 f956 	bl	8004380 <MX_GPIO_Init>
  MX_SPI1_Init();
 80040d4:	f000 f868 	bl	80041a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80040d8:	f000 f89c 	bl	8004214 <MX_SPI2_Init>
  MX_TIM4_Init();
 80040dc:	f000 f8d0 	bl	8004280 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80040e0:	f000 f91e 	bl	8004320 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(flags.opt_1ms_flag == 10)
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <main+0x5c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b0a      	cmp	r3, #10
 80040ea:	d104      	bne.n	80040f6 <main+0x3a>
		{
			flags.opt_1ms_flag = 0;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <main+0x5c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
			key_scan();
 80040f2:	f7ff ff9f 	bl	8004034 <key_scan>
		}
		/* Receive information from the HMI display */
		hmi_recv();
 80040f6:	f7fd f807 	bl	8001108 <hmi_recv>
		if(flags.func_allow_run == 1)
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <main+0x5c>)
 80040fc:	7a1b      	ldrb	r3, [r3, #8]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d1f0      	bne.n	80040e4 <main+0x28>
		{
			flags.func_allow_run = 0;
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <main+0x5c>)
 8004104:	2200      	movs	r2, #0
 8004106:	721a      	strb	r2, [r3, #8]
			if(flags.function != NULL)
 8004108:	4b03      	ldr	r3, [pc, #12]	@ (8004118 <main+0x5c>)
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0e9      	beq.n	80040e4 <main+0x28>
			    flags.function();	//Run sample program
 8004110:	4b01      	ldr	r3, [pc, #4]	@ (8004118 <main+0x5c>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4798      	blx	r3
		if(flags.opt_1ms_flag == 10)
 8004116:	e7e5      	b.n	80040e4 <main+0x28>
 8004118:	20000744 	.word	0x20000744

0800411c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b090      	sub	sp, #64	@ 0x40
 8004120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004122:	f107 0318 	add.w	r3, r7, #24
 8004126:	2228      	movs	r2, #40	@ 0x28
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f006 faf3 	bl	800a716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800414c:	2301      	movs	r3, #1
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004150:	2302      	movs	r3, #2
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800415a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800415e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004160:	f107 0318 	add.w	r3, r7, #24
 8004164:	4618      	mov	r0, r3
 8004166:	f002 fef5 	bl	8006f54 <HAL_RCC_OscConfig>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004170:	f000 f974 	bl	800445c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004174:	230f      	movs	r3, #15
 8004176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004178:	2302      	movs	r3, #2
 800417a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f003 f962 	bl	8007458 <HAL_RCC_ClockConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800419a:	f000 f95f 	bl	800445c <Error_Handler>
  }
}
 800419e:	bf00      	nop
 80041a0:	3740      	adds	r7, #64	@ 0x40
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <MX_SPI1_Init+0x64>)
 80041ae:	4a18      	ldr	r2, [pc, #96]	@ (8004210 <MX_SPI1_Init+0x68>)
 80041b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <MX_SPI1_Init+0x64>)
 80041b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80041b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041ba:	4b14      	ldr	r3, [pc, #80]	@ (800420c <MX_SPI1_Init+0x64>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <MX_SPI1_Init+0x64>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <MX_SPI1_Init+0x64>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041cc:	4b0f      	ldr	r3, [pc, #60]	@ (800420c <MX_SPI1_Init+0x64>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <MX_SPI1_Init+0x64>)
 80041d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <MX_SPI1_Init+0x64>)
 80041dc:	2208      	movs	r2, #8
 80041de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041e0:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <MX_SPI1_Init+0x64>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <MX_SPI1_Init+0x64>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ec:	4b07      	ldr	r3, [pc, #28]	@ (800420c <MX_SPI1_Init+0x64>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <MX_SPI1_Init+0x64>)
 80041f4:	220a      	movs	r2, #10
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041f8:	4804      	ldr	r0, [pc, #16]	@ (800420c <MX_SPI1_Init+0x64>)
 80041fa:	f003 fabd 	bl	8007778 <HAL_SPI_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004204:	f000 f92a 	bl	800445c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	2000075c 	.word	0x2000075c
 8004210:	40013000 	.word	0x40013000

08004214 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004218:	4b17      	ldr	r3, [pc, #92]	@ (8004278 <MX_SPI2_Init+0x64>)
 800421a:	4a18      	ldr	r2, [pc, #96]	@ (800427c <MX_SPI2_Init+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800421e:	4b16      	ldr	r3, [pc, #88]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004224:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004226:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <MX_SPI2_Init+0x64>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004232:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <MX_SPI2_Init+0x64>)
 800423a:	2200      	movs	r2, #0
 800423c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004244:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004246:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <MX_SPI2_Init+0x64>)
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004252:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004254:	2200      	movs	r2, #0
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004258:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <MX_SPI2_Init+0x64>)
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004260:	220a      	movs	r2, #10
 8004262:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004264:	4804      	ldr	r0, [pc, #16]	@ (8004278 <MX_SPI2_Init+0x64>)
 8004266:	f003 fa87 	bl	8007778 <HAL_SPI_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004270:	f000 f8f4 	bl	800445c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}
 8004278:	200007b4 	.word	0x200007b4
 800427c:	40003800 	.word	0x40003800

08004280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004294:	463b      	mov	r3, r7
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800429c:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <MX_TIM4_Init+0x98>)
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <MX_TIM4_Init+0x9c>)
 80042a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 80042a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042a4:	229f      	movs	r2, #159	@ 0x9f
 80042a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 320-1;
 80042ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042b0:	f240 123f 	movw	r2, #319	@ 0x13f
 80042b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b6:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80042c2:	4815      	ldr	r0, [pc, #84]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042c4:	f003 ffe0 	bl	8008288 <HAL_TIM_Base_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80042ce:	f000 f8c5 	bl	800445c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4619      	mov	r1, r3
 80042de:	480e      	ldr	r0, [pc, #56]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042e0:	f004 f97c 	bl	80085dc <HAL_TIM_ConfigClockSource>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80042ea:	f000 f8b7 	bl	800445c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042f6:	463b      	mov	r3, r7
 80042f8:	4619      	mov	r1, r3
 80042fa:	4807      	ldr	r0, [pc, #28]	@ (8004318 <MX_TIM4_Init+0x98>)
 80042fc:	f004 fb52 	bl	80089a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004306:	f000 f8a9 	bl	800445c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800430a:	4803      	ldr	r0, [pc, #12]	@ (8004318 <MX_TIM4_Init+0x98>)
 800430c:	f004 f80c 	bl	8008328 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000080c 	.word	0x2000080c
 800431c:	40000800 	.word	0x40000800

08004320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004326:	4a14      	ldr	r2, [pc, #80]	@ (8004378 <MX_USART1_UART_Init+0x58>)
 8004328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800432a:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 800432c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004340:	2200      	movs	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004346:	220c      	movs	r2, #12
 8004348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004350:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004356:	4807      	ldr	r0, [pc, #28]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 8004358:	f004 fb94 	bl	8008a84 <HAL_UART_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004362:	f000 f87b 	bl	800445c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UART_Receive_IT(&huart1, &recvChar, 1);
 8004366:	2201      	movs	r2, #1
 8004368:	4904      	ldr	r1, [pc, #16]	@ (800437c <MX_USART1_UART_Init+0x5c>)
 800436a:	4802      	ldr	r0, [pc, #8]	@ (8004374 <MX_USART1_UART_Init+0x54>)
 800436c:	f004 fc5d 	bl	8008c2a <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000854 	.word	0x20000854
 8004378:	40013800 	.word	0x40013800
 800437c:	200006d9 	.word	0x200006d9

08004380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004394:	4b2e      	ldr	r3, [pc, #184]	@ (8004450 <MX_GPIO_Init+0xd0>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4a2d      	ldr	r2, [pc, #180]	@ (8004450 <MX_GPIO_Init+0xd0>)
 800439a:	f043 0320 	orr.w	r3, r3, #32
 800439e:	6193      	str	r3, [r2, #24]
 80043a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4b28      	ldr	r3, [pc, #160]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a27      	ldr	r2, [pc, #156]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b25      	ldr	r3, [pc, #148]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c4:	4b22      	ldr	r3, [pc, #136]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4a21      	ldr	r2, [pc, #132]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043ca:	f043 0308 	orr.w	r3, r3, #8
 80043ce:	6193      	str	r3, [r2, #24]
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <MX_GPIO_Init+0xd0>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80043dc:	2201      	movs	r2, #1
 80043de:	2110      	movs	r1, #16
 80043e0:	481c      	ldr	r0, [pc, #112]	@ (8004454 <MX_GPIO_Init+0xd4>)
 80043e2:	f002 fd05 	bl	8006df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80043e6:	2201      	movs	r2, #1
 80043e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043ec:	481a      	ldr	r0, [pc, #104]	@ (8004458 <MX_GPIO_Init+0xd8>)
 80043ee:	f002 fcff 	bl	8006df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80043f2:	2310      	movs	r3, #16
 80043f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043fe:	2303      	movs	r3, #3
 8004400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004402:	f107 0310 	add.w	r3, r7, #16
 8004406:	4619      	mov	r1, r3
 8004408:	4812      	ldr	r0, [pc, #72]	@ (8004454 <MX_GPIO_Init+0xd4>)
 800440a:	f002 fab1 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEVICE_SELECT_Pin KEY_UP_Pin KEY_DOWN_Pin KEY_OK_Pin
                           KEY_BACK_Pin */
  GPIO_InitStruct.Pin = DEVICE_SELECT_Pin|KEY_UP_Pin|KEY_DOWN_Pin|KEY_OK_Pin
 800440e:	f640 4307 	movw	r3, #3079	@ 0xc07
 8004412:	613b      	str	r3, [r7, #16]
                          |KEY_BACK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004418:	2301      	movs	r3, #1
 800441a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800441c:	f107 0310 	add.w	r3, r7, #16
 8004420:	4619      	mov	r1, r3
 8004422:	480d      	ldr	r0, [pc, #52]	@ (8004458 <MX_GPIO_Init+0xd8>)
 8004424:	f002 faa4 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8004428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800442c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800442e:	2301      	movs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004432:	2301      	movs	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004436:	2303      	movs	r3, #3
 8004438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800443a:	f107 0310 	add.w	r3, r7, #16
 800443e:	4619      	mov	r1, r3
 8004440:	4805      	ldr	r0, [pc, #20]	@ (8004458 <MX_GPIO_Init+0xd8>)
 8004442:	f002 fa95 	bl	8006970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004446:	bf00      	nop
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	40010800 	.word	0x40010800
 8004458:	40010c00 	.word	0x40010c00

0800445c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004460:	b672      	cpsid	i
}
 8004462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <Error_Handler+0x8>

08004468 <page_opts_sethighlight>:
#define ENGLISH 0
#define CHINESE 1
uint8_t language = ENGLISH;

void page_opts_sethighlight(enum hmi_pages page, uint8_t opt_value)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	460a      	mov	r2, r1
 8004472:	71fb      	strb	r3, [r7, #7]
 8004474:	4613      	mov	r3, r2
 8004476:	71bb      	strb	r3, [r7, #6]
    switch(page)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	3b02      	subs	r3, #2
 800447c:	2b0e      	cmp	r3, #14
 800447e:	f200 8255 	bhi.w	800492c <page_opts_sethighlight+0x4c4>
 8004482:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <page_opts_sethighlight+0x20>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044c5 	.word	0x080044c5
 800448c:	080045c7 	.word	0x080045c7
 8004490:	08004631 	.word	0x08004631
 8004494:	0800469b 	.word	0x0800469b
 8004498:	08004705 	.word	0x08004705
 800449c:	08004823 	.word	0x08004823
 80044a0:	080048cb 	.word	0x080048cb
 80044a4:	0800492d 	.word	0x0800492d
 80044a8:	0800492d 	.word	0x0800492d
 80044ac:	0800492d 	.word	0x0800492d
 80044b0:	0800492d 	.word	0x0800492d
 80044b4:	0800492d 	.word	0x0800492d
 80044b8:	0800492d 	.word	0x0800492d
 80044bc:	0800492d 	.word	0x0800492d
 80044c0:	08004911 	.word	0x08004911
    {
        case MENU:
        {
            if(opt_value == 0)
 80044c4:	79bb      	ldrb	r3, [r7, #6]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11c      	bne.n	8004504 <page_opts_sethighlight+0x9c>
            {
                if(language == ENGLISH)
 80044ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <page_opts_sethighlight+0x7e>
                {
                    HMISends("b5.picc=17\xff\xff\xff");
 80044d2:	489a      	ldr	r0, [pc, #616]	@ (800473c <page_opts_sethighlight+0x2d4>)
 80044d4:	f7ff fd68 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=31\xff\xff\xff");
 80044d8:	4899      	ldr	r0, [pc, #612]	@ (8004740 <page_opts_sethighlight+0x2d8>)
 80044da:	f7ff fd65 	bl	8003fa8 <HMISends>
                    HMISends("b2.picc=17\xff\xff\xff");
 80044de:	4899      	ldr	r0, [pc, #612]	@ (8004744 <page_opts_sethighlight+0x2dc>)
 80044e0:	f7ff fd62 	bl	8003fa8 <HMISends>
                    HMISends("b5.picc=30\xff\xff\xff");
                    HMISends("b1.picc=1\xff\xff\xff");
                }
            }
        }
        break;
 80044e4:	e224      	b.n	8004930 <page_opts_sethighlight+0x4c8>
                else if(language == CHINESE)
 80044e6:	4b94      	ldr	r3, [pc, #592]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	f040 8220 	bne.w	8004930 <page_opts_sethighlight+0x4c8>
                    HMISends("b5.picc=1\xff\xff\xff");
 80044f0:	4895      	ldr	r0, [pc, #596]	@ (8004748 <page_opts_sethighlight+0x2e0>)
 80044f2:	f7ff fd59 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=30\xff\xff\xff");
 80044f6:	4895      	ldr	r0, [pc, #596]	@ (800474c <page_opts_sethighlight+0x2e4>)
 80044f8:	f7ff fd56 	bl	8003fa8 <HMISends>
                    HMISends("b2.picc=1\xff\xff\xff");
 80044fc:	4894      	ldr	r0, [pc, #592]	@ (8004750 <page_opts_sethighlight+0x2e8>)
 80044fe:	f7ff fd53 	bl	8003fa8 <HMISends>
        break;
 8004502:	e215      	b.n	8004930 <page_opts_sethighlight+0x4c8>
            else if(opt_value == 1)
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d11c      	bne.n	8004544 <page_opts_sethighlight+0xdc>
                if(language == ENGLISH)
 800450a:	4b8b      	ldr	r3, [pc, #556]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <page_opts_sethighlight+0xbe>
                    HMISends("b1.picc=17\xff\xff\xff");
 8004512:	4890      	ldr	r0, [pc, #576]	@ (8004754 <page_opts_sethighlight+0x2ec>)
 8004514:	f7ff fd48 	bl	8003fa8 <HMISends>
                    HMISends("b2.picc=31\xff\xff\xff");
 8004518:	488f      	ldr	r0, [pc, #572]	@ (8004758 <page_opts_sethighlight+0x2f0>)
 800451a:	f7ff fd45 	bl	8003fa8 <HMISends>
                    HMISends("b4.picc=17\xff\xff\xff");
 800451e:	488f      	ldr	r0, [pc, #572]	@ (800475c <page_opts_sethighlight+0x2f4>)
 8004520:	f7ff fd42 	bl	8003fa8 <HMISends>
        break;
 8004524:	e204      	b.n	8004930 <page_opts_sethighlight+0x4c8>
                else if(language == CHINESE)
 8004526:	4b84      	ldr	r3, [pc, #528]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 8200 	bne.w	8004930 <page_opts_sethighlight+0x4c8>
                    HMISends("b1.picc=1\xff\xff\xff");
 8004530:	488b      	ldr	r0, [pc, #556]	@ (8004760 <page_opts_sethighlight+0x2f8>)
 8004532:	f7ff fd39 	bl	8003fa8 <HMISends>
                    HMISends("b2.picc=30\xff\xff\xff");
 8004536:	488b      	ldr	r0, [pc, #556]	@ (8004764 <page_opts_sethighlight+0x2fc>)
 8004538:	f7ff fd36 	bl	8003fa8 <HMISends>
                    HMISends("b4.picc=1\xff\xff\xff");
 800453c:	488a      	ldr	r0, [pc, #552]	@ (8004768 <page_opts_sethighlight+0x300>)
 800453e:	f7ff fd33 	bl	8003fa8 <HMISends>
        break;
 8004542:	e1f5      	b.n	8004930 <page_opts_sethighlight+0x4c8>
            else if(opt_value == 2)
 8004544:	79bb      	ldrb	r3, [r7, #6]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d11c      	bne.n	8004584 <page_opts_sethighlight+0x11c>
                if(language == ENGLISH)
 800454a:	4b7b      	ldr	r3, [pc, #492]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <page_opts_sethighlight+0xfe>
                    HMISends("b2.picc=17\xff\xff\xff");
 8004552:	487c      	ldr	r0, [pc, #496]	@ (8004744 <page_opts_sethighlight+0x2dc>)
 8004554:	f7ff fd28 	bl	8003fa8 <HMISends>
                    HMISends("b4.picc=31\xff\xff\xff");
 8004558:	4884      	ldr	r0, [pc, #528]	@ (800476c <page_opts_sethighlight+0x304>)
 800455a:	f7ff fd25 	bl	8003fa8 <HMISends>
                    HMISends("b5.picc=17\xff\xff\xff");
 800455e:	4877      	ldr	r0, [pc, #476]	@ (800473c <page_opts_sethighlight+0x2d4>)
 8004560:	f7ff fd22 	bl	8003fa8 <HMISends>
        break;
 8004564:	e1e4      	b.n	8004930 <page_opts_sethighlight+0x4c8>
                else if(language == CHINESE)
 8004566:	4b74      	ldr	r3, [pc, #464]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 81e0 	bne.w	8004930 <page_opts_sethighlight+0x4c8>
                    HMISends("b2.picc=1\xff\xff\xff");
 8004570:	4877      	ldr	r0, [pc, #476]	@ (8004750 <page_opts_sethighlight+0x2e8>)
 8004572:	f7ff fd19 	bl	8003fa8 <HMISends>
                    HMISends("b4.picc=30\xff\xff\xff");
 8004576:	487e      	ldr	r0, [pc, #504]	@ (8004770 <page_opts_sethighlight+0x308>)
 8004578:	f7ff fd16 	bl	8003fa8 <HMISends>
                    HMISends("b5.picc=1\xff\xff\xff");
 800457c:	4872      	ldr	r0, [pc, #456]	@ (8004748 <page_opts_sethighlight+0x2e0>)
 800457e:	f7ff fd13 	bl	8003fa8 <HMISends>
        break;
 8004582:	e1d5      	b.n	8004930 <page_opts_sethighlight+0x4c8>
            else if(opt_value == 3)
 8004584:	79bb      	ldrb	r3, [r7, #6]
 8004586:	2b03      	cmp	r3, #3
 8004588:	f040 81d2 	bne.w	8004930 <page_opts_sethighlight+0x4c8>
                if(language == ENGLISH)
 800458c:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <page_opts_sethighlight+0x140>
                    HMISends("b4.picc=17\xff\xff\xff");
 8004594:	4871      	ldr	r0, [pc, #452]	@ (800475c <page_opts_sethighlight+0x2f4>)
 8004596:	f7ff fd07 	bl	8003fa8 <HMISends>
                    HMISends("b5.picc=31\xff\xff\xff");
 800459a:	4876      	ldr	r0, [pc, #472]	@ (8004774 <page_opts_sethighlight+0x30c>)
 800459c:	f7ff fd04 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=17\xff\xff\xff");
 80045a0:	486c      	ldr	r0, [pc, #432]	@ (8004754 <page_opts_sethighlight+0x2ec>)
 80045a2:	f7ff fd01 	bl	8003fa8 <HMISends>
        break;
 80045a6:	e1c3      	b.n	8004930 <page_opts_sethighlight+0x4c8>
                else if(language == CHINESE)
 80045a8:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 81bf 	bne.w	8004930 <page_opts_sethighlight+0x4c8>
                    HMISends("b4.picc=1\xff\xff\xff");
 80045b2:	486d      	ldr	r0, [pc, #436]	@ (8004768 <page_opts_sethighlight+0x300>)
 80045b4:	f7ff fcf8 	bl	8003fa8 <HMISends>
                    HMISends("b5.picc=30\xff\xff\xff");
 80045b8:	486f      	ldr	r0, [pc, #444]	@ (8004778 <page_opts_sethighlight+0x310>)
 80045ba:	f7ff fcf5 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=1\xff\xff\xff");
 80045be:	4868      	ldr	r0, [pc, #416]	@ (8004760 <page_opts_sethighlight+0x2f8>)
 80045c0:	f7ff fcf2 	bl	8003fa8 <HMISends>
        break;
 80045c4:	e1b4      	b.n	8004930 <page_opts_sethighlight+0x4c8>
        case LONGTXCHOOSE:
        {
            if(opt_value == 0)
 80045c6:	79bb      	ldrb	r3, [r7, #6]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <page_opts_sethighlight+0x192>
            {
                if(language == ENGLISH)
 80045cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <page_opts_sethighlight+0x17a>
                {
                    HMISends("b0.picc=33\xff\xff\xff");
 80045d4:	4869      	ldr	r0, [pc, #420]	@ (800477c <page_opts_sethighlight+0x314>)
 80045d6:	f7ff fce7 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=18\xff\xff\xff");
 80045da:	4869      	ldr	r0, [pc, #420]	@ (8004780 <page_opts_sethighlight+0x318>)
 80045dc:	f7ff fce4 	bl	8003fa8 <HMISends>
                    HMISends("b0.picc=2\xff\xff\xff");
                    HMISends("b1.picc=32\xff\xff\xff");
                }
            }
        }
        break;
 80045e0:	e1a8      	b.n	8004934 <page_opts_sethighlight+0x4cc>
                else if(language == CHINESE)
 80045e2:	4b55      	ldr	r3, [pc, #340]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	f040 81a4 	bne.w	8004934 <page_opts_sethighlight+0x4cc>
                    HMISends("b0.picc=32\xff\xff\xff");
 80045ec:	4865      	ldr	r0, [pc, #404]	@ (8004784 <page_opts_sethighlight+0x31c>)
 80045ee:	f7ff fcdb 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=2\xff\xff\xff");
 80045f2:	4865      	ldr	r0, [pc, #404]	@ (8004788 <page_opts_sethighlight+0x320>)
 80045f4:	f7ff fcd8 	bl	8003fa8 <HMISends>
        break;
 80045f8:	e19c      	b.n	8004934 <page_opts_sethighlight+0x4cc>
            else if(opt_value == 1)
 80045fa:	79bb      	ldrb	r3, [r7, #6]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 8199 	bne.w	8004934 <page_opts_sethighlight+0x4cc>
                if(language == ENGLISH)
 8004602:	4b4d      	ldr	r3, [pc, #308]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <page_opts_sethighlight+0x1b0>
                    HMISends("b0.picc=18\xff\xff\xff");
 800460a:	4860      	ldr	r0, [pc, #384]	@ (800478c <page_opts_sethighlight+0x324>)
 800460c:	f7ff fccc 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=33\xff\xff\xff");
 8004610:	485f      	ldr	r0, [pc, #380]	@ (8004790 <page_opts_sethighlight+0x328>)
 8004612:	f7ff fcc9 	bl	8003fa8 <HMISends>
        break;
 8004616:	e18d      	b.n	8004934 <page_opts_sethighlight+0x4cc>
                else if(language == CHINESE)
 8004618:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	f040 8189 	bne.w	8004934 <page_opts_sethighlight+0x4cc>
                    HMISends("b0.picc=2\xff\xff\xff");
 8004622:	485c      	ldr	r0, [pc, #368]	@ (8004794 <page_opts_sethighlight+0x32c>)
 8004624:	f7ff fcc0 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=32\xff\xff\xff");
 8004628:	485b      	ldr	r0, [pc, #364]	@ (8004798 <page_opts_sethighlight+0x330>)
 800462a:	f7ff fcbd 	bl	8003fa8 <HMISends>
        break;
 800462e:	e181      	b.n	8004934 <page_opts_sethighlight+0x4cc>
        case SIMGLETXCHOOSE:
        {
            if(opt_value == 0)
 8004630:	79bb      	ldrb	r3, [r7, #6]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d116      	bne.n	8004664 <page_opts_sethighlight+0x1fc>
            {
                if(language == ENGLISH)
 8004636:	4b40      	ldr	r3, [pc, #256]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <page_opts_sethighlight+0x1e4>
                {
                    HMISends("b0.picc=35\xff\xff\xff");
 800463e:	4857      	ldr	r0, [pc, #348]	@ (800479c <page_opts_sethighlight+0x334>)
 8004640:	f7ff fcb2 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=19\xff\xff\xff");
 8004644:	4856      	ldr	r0, [pc, #344]	@ (80047a0 <page_opts_sethighlight+0x338>)
 8004646:	f7ff fcaf 	bl	8003fa8 <HMISends>
                    HMISends("b0.picc=3\xff\xff\xff");
                    HMISends("b1.picc=34\xff\xff\xff");
                }
            }
        }
        break;
 800464a:	e175      	b.n	8004938 <page_opts_sethighlight+0x4d0>
                else if(language == CHINESE)
 800464c:	4b3a      	ldr	r3, [pc, #232]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	f040 8171 	bne.w	8004938 <page_opts_sethighlight+0x4d0>
                    HMISends("b0.picc=34\xff\xff\xff");
 8004656:	4853      	ldr	r0, [pc, #332]	@ (80047a4 <page_opts_sethighlight+0x33c>)
 8004658:	f7ff fca6 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=3\xff\xff\xff");
 800465c:	4852      	ldr	r0, [pc, #328]	@ (80047a8 <page_opts_sethighlight+0x340>)
 800465e:	f7ff fca3 	bl	8003fa8 <HMISends>
        break;
 8004662:	e169      	b.n	8004938 <page_opts_sethighlight+0x4d0>
            else if(opt_value == 1)
 8004664:	79bb      	ldrb	r3, [r7, #6]
 8004666:	2b01      	cmp	r3, #1
 8004668:	f040 8166 	bne.w	8004938 <page_opts_sethighlight+0x4d0>
                if(language == ENGLISH)
 800466c:	4b32      	ldr	r3, [pc, #200]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <page_opts_sethighlight+0x21a>
                    HMISends("b0.picc=19\xff\xff\xff");
 8004674:	484d      	ldr	r0, [pc, #308]	@ (80047ac <page_opts_sethighlight+0x344>)
 8004676:	f7ff fc97 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=35\xff\xff\xff");
 800467a:	484d      	ldr	r0, [pc, #308]	@ (80047b0 <page_opts_sethighlight+0x348>)
 800467c:	f7ff fc94 	bl	8003fa8 <HMISends>
        break;
 8004680:	e15a      	b.n	8004938 <page_opts_sethighlight+0x4d0>
                else if(language == CHINESE)
 8004682:	4b2d      	ldr	r3, [pc, #180]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 8156 	bne.w	8004938 <page_opts_sethighlight+0x4d0>
                    HMISends("b0.picc=3\xff\xff\xff");
 800468c:	4849      	ldr	r0, [pc, #292]	@ (80047b4 <page_opts_sethighlight+0x34c>)
 800468e:	f7ff fc8b 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=34\xff\xff\xff");
 8004692:	4849      	ldr	r0, [pc, #292]	@ (80047b8 <page_opts_sethighlight+0x350>)
 8004694:	f7ff fc88 	bl	8003fa8 <HMISends>
        break;
 8004698:	e14e      	b.n	8004938 <page_opts_sethighlight+0x4d0>
        case RANGINGCHOOSE:
        {
            if(opt_value == 0)
 800469a:	79bb      	ldrb	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d116      	bne.n	80046ce <page_opts_sethighlight+0x266>
            {
                if(language == ENGLISH)
 80046a0:	4b25      	ldr	r3, [pc, #148]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <page_opts_sethighlight+0x24e>
                {
                    HMISends("b0.picc=37\xff\xff\xff");
 80046a8:	4844      	ldr	r0, [pc, #272]	@ (80047bc <page_opts_sethighlight+0x354>)
 80046aa:	f7ff fc7d 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=20\xff\xff\xff");
 80046ae:	4844      	ldr	r0, [pc, #272]	@ (80047c0 <page_opts_sethighlight+0x358>)
 80046b0:	f7ff fc7a 	bl	8003fa8 <HMISends>
                    HMISends("b0.picc=4\xff\xff\xff");
                    HMISends("b1.picc=36\xff\xff\xff");
                }
            }
        }
        break;
 80046b4:	e142      	b.n	800493c <page_opts_sethighlight+0x4d4>
                else if(language == CHINESE)
 80046b6:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	f040 813e 	bne.w	800493c <page_opts_sethighlight+0x4d4>
                    HMISends("b0.picc=36\xff\xff\xff");
 80046c0:	4840      	ldr	r0, [pc, #256]	@ (80047c4 <page_opts_sethighlight+0x35c>)
 80046c2:	f7ff fc71 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=4\xff\xff\xff");
 80046c6:	4840      	ldr	r0, [pc, #256]	@ (80047c8 <page_opts_sethighlight+0x360>)
 80046c8:	f7ff fc6e 	bl	8003fa8 <HMISends>
        break;
 80046cc:	e136      	b.n	800493c <page_opts_sethighlight+0x4d4>
            else if(opt_value == 1)
 80046ce:	79bb      	ldrb	r3, [r7, #6]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f040 8133 	bne.w	800493c <page_opts_sethighlight+0x4d4>
                if(language == ENGLISH)
 80046d6:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <page_opts_sethighlight+0x284>
                    HMISends("b0.picc=20\xff\xff\xff");
 80046de:	483b      	ldr	r0, [pc, #236]	@ (80047cc <page_opts_sethighlight+0x364>)
 80046e0:	f7ff fc62 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=37\xff\xff\xff");
 80046e4:	483a      	ldr	r0, [pc, #232]	@ (80047d0 <page_opts_sethighlight+0x368>)
 80046e6:	f7ff fc5f 	bl	8003fa8 <HMISends>
        break;
 80046ea:	e127      	b.n	800493c <page_opts_sethighlight+0x4d4>
                else if(language == CHINESE)
 80046ec:	4b12      	ldr	r3, [pc, #72]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 8123 	bne.w	800493c <page_opts_sethighlight+0x4d4>
                    HMISends("b0.picc=4\xff\xff\xff");
 80046f6:	4837      	ldr	r0, [pc, #220]	@ (80047d4 <page_opts_sethighlight+0x36c>)
 80046f8:	f7ff fc56 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=36\xff\xff\xff");
 80046fc:	4836      	ldr	r0, [pc, #216]	@ (80047d8 <page_opts_sethighlight+0x370>)
 80046fe:	f7ff fc53 	bl	8003fa8 <HMISends>
        break;
 8004702:	e11b      	b.n	800493c <page_opts_sethighlight+0x4d4>
        case LOCATIONCHOOSE:
        {
            if(opt_value == 0)
 8004704:	79bb      	ldrb	r3, [r7, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d170      	bne.n	80047ec <page_opts_sethighlight+0x384>
            {
                if(language == ENGLISH)
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <page_opts_sethighlight+0x2b8>
                {
                    HMISends("b0.picc=21\xff\xff\xff");
 8004712:	4832      	ldr	r0, [pc, #200]	@ (80047dc <page_opts_sethighlight+0x374>)
 8004714:	f7ff fc48 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=39\xff\xff\xff");
 8004718:	4831      	ldr	r0, [pc, #196]	@ (80047e0 <page_opts_sethighlight+0x378>)
 800471a:	f7ff fc45 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=5\xff\xff\xff");
                }
                
            }
        }
        break;
 800471e:	e10f      	b.n	8004940 <page_opts_sethighlight+0x4d8>
                else if(language == CHINESE)
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <page_opts_sethighlight+0x2d0>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 810b 	bne.w	8004940 <page_opts_sethighlight+0x4d8>
                    HMISends("b0.picc=5\xff\xff\xff");
 800472a:	482e      	ldr	r0, [pc, #184]	@ (80047e4 <page_opts_sethighlight+0x37c>)
 800472c:	f7ff fc3c 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=38\xff\xff\xff");
 8004730:	482d      	ldr	r0, [pc, #180]	@ (80047e8 <page_opts_sethighlight+0x380>)
 8004732:	f7ff fc39 	bl	8003fa8 <HMISends>
        break;
 8004736:	e103      	b.n	8004940 <page_opts_sethighlight+0x4d8>
 8004738:	200008ae 	.word	0x200008ae
 800473c:	0800e1c0 	.word	0x0800e1c0
 8004740:	0800e1d0 	.word	0x0800e1d0
 8004744:	0800e1e0 	.word	0x0800e1e0
 8004748:	0800e1f0 	.word	0x0800e1f0
 800474c:	0800e200 	.word	0x0800e200
 8004750:	0800e210 	.word	0x0800e210
 8004754:	0800e220 	.word	0x0800e220
 8004758:	0800e230 	.word	0x0800e230
 800475c:	0800e240 	.word	0x0800e240
 8004760:	0800e250 	.word	0x0800e250
 8004764:	0800e260 	.word	0x0800e260
 8004768:	0800e270 	.word	0x0800e270
 800476c:	0800e280 	.word	0x0800e280
 8004770:	0800e290 	.word	0x0800e290
 8004774:	0800e2a0 	.word	0x0800e2a0
 8004778:	0800e2b0 	.word	0x0800e2b0
 800477c:	0800e2c0 	.word	0x0800e2c0
 8004780:	0800e2d0 	.word	0x0800e2d0
 8004784:	0800e2e0 	.word	0x0800e2e0
 8004788:	0800e2f0 	.word	0x0800e2f0
 800478c:	0800e300 	.word	0x0800e300
 8004790:	0800e310 	.word	0x0800e310
 8004794:	0800e320 	.word	0x0800e320
 8004798:	0800e330 	.word	0x0800e330
 800479c:	0800e340 	.word	0x0800e340
 80047a0:	0800e350 	.word	0x0800e350
 80047a4:	0800e360 	.word	0x0800e360
 80047a8:	0800e370 	.word	0x0800e370
 80047ac:	0800e380 	.word	0x0800e380
 80047b0:	0800e390 	.word	0x0800e390
 80047b4:	0800e3a0 	.word	0x0800e3a0
 80047b8:	0800e3b0 	.word	0x0800e3b0
 80047bc:	0800e3c0 	.word	0x0800e3c0
 80047c0:	0800e3d0 	.word	0x0800e3d0
 80047c4:	0800e3e0 	.word	0x0800e3e0
 80047c8:	0800e3f0 	.word	0x0800e3f0
 80047cc:	0800e400 	.word	0x0800e400
 80047d0:	0800e410 	.word	0x0800e410
 80047d4:	0800e420 	.word	0x0800e420
 80047d8:	0800e430 	.word	0x0800e430
 80047dc:	0800e440 	.word	0x0800e440
 80047e0:	0800e450 	.word	0x0800e450
 80047e4:	0800e460 	.word	0x0800e460
 80047e8:	0800e470 	.word	0x0800e470
            else if(opt_value == 1)
 80047ec:	79bb      	ldrb	r3, [r7, #6]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 80a6 	bne.w	8004940 <page_opts_sethighlight+0x4d8>
                if(language == ENGLISH)
 80047f4:	4b58      	ldr	r3, [pc, #352]	@ (8004958 <page_opts_sethighlight+0x4f0>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <page_opts_sethighlight+0x3a2>
                    HMISends("b0.picc=39\xff\xff\xff");
 80047fc:	4857      	ldr	r0, [pc, #348]	@ (800495c <page_opts_sethighlight+0x4f4>)
 80047fe:	f7ff fbd3 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=21\xff\xff\xff");
 8004802:	4857      	ldr	r0, [pc, #348]	@ (8004960 <page_opts_sethighlight+0x4f8>)
 8004804:	f7ff fbd0 	bl	8003fa8 <HMISends>
        break;
 8004808:	e09a      	b.n	8004940 <page_opts_sethighlight+0x4d8>
                else if(language == CHINESE)
 800480a:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <page_opts_sethighlight+0x4f0>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	f040 8096 	bne.w	8004940 <page_opts_sethighlight+0x4d8>
                    HMISends("b0.picc=38\xff\xff\xff");
 8004814:	4853      	ldr	r0, [pc, #332]	@ (8004964 <page_opts_sethighlight+0x4fc>)
 8004816:	f7ff fbc7 	bl	8003fa8 <HMISends>
                    HMISends("b1.picc=5\xff\xff\xff");
 800481a:	4853      	ldr	r0, [pc, #332]	@ (8004968 <page_opts_sethighlight+0x500>)
 800481c:	f7ff fbc4 	bl	8003fa8 <HMISends>
        break;
 8004820:	e08e      	b.n	8004940 <page_opts_sethighlight+0x4d8>
        case LOCA_ID_CHOOSE:
        {
            if(opt_value == 0)
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <page_opts_sethighlight+0x3c8>
                HMISends("click b4,0\xff\xff\xff");
 8004828:	4850      	ldr	r0, [pc, #320]	@ (800496c <page_opts_sethighlight+0x504>)
 800482a:	f7ff fbbd 	bl	8003fa8 <HMISends>
            else if(opt_value == 10)
                HMISends("click b14,0\xff\xff\xff");
            else if(opt_value == 11)
                HMISends("click b15,0\xff\xff\xff");
        }
        break;
 800482e:	e089      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 1)
 8004830:	79bb      	ldrb	r3, [r7, #6]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d103      	bne.n	800483e <page_opts_sethighlight+0x3d6>
                HMISends("click b5,0\xff\xff\xff");
 8004836:	484e      	ldr	r0, [pc, #312]	@ (8004970 <page_opts_sethighlight+0x508>)
 8004838:	f7ff fbb6 	bl	8003fa8 <HMISends>
        break;
 800483c:	e082      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 2)
 800483e:	79bb      	ldrb	r3, [r7, #6]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d103      	bne.n	800484c <page_opts_sethighlight+0x3e4>
                HMISends("click b6,0\xff\xff\xff");
 8004844:	484b      	ldr	r0, [pc, #300]	@ (8004974 <page_opts_sethighlight+0x50c>)
 8004846:	f7ff fbaf 	bl	8003fa8 <HMISends>
        break;
 800484a:	e07b      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 3)
 800484c:	79bb      	ldrb	r3, [r7, #6]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d103      	bne.n	800485a <page_opts_sethighlight+0x3f2>
                HMISends("click b7,0\xff\xff\xff");
 8004852:	4849      	ldr	r0, [pc, #292]	@ (8004978 <page_opts_sethighlight+0x510>)
 8004854:	f7ff fba8 	bl	8003fa8 <HMISends>
        break;
 8004858:	e074      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 4)
 800485a:	79bb      	ldrb	r3, [r7, #6]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d103      	bne.n	8004868 <page_opts_sethighlight+0x400>
                HMISends("click b8,0\xff\xff\xff");
 8004860:	4846      	ldr	r0, [pc, #280]	@ (800497c <page_opts_sethighlight+0x514>)
 8004862:	f7ff fba1 	bl	8003fa8 <HMISends>
        break;
 8004866:	e06d      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 5)
 8004868:	79bb      	ldrb	r3, [r7, #6]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d103      	bne.n	8004876 <page_opts_sethighlight+0x40e>
                HMISends("click b9,0\xff\xff\xff");
 800486e:	4844      	ldr	r0, [pc, #272]	@ (8004980 <page_opts_sethighlight+0x518>)
 8004870:	f7ff fb9a 	bl	8003fa8 <HMISends>
        break;
 8004874:	e066      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 6)
 8004876:	79bb      	ldrb	r3, [r7, #6]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d103      	bne.n	8004884 <page_opts_sethighlight+0x41c>
                HMISends("click b10,0\xff\xff\xff");
 800487c:	4841      	ldr	r0, [pc, #260]	@ (8004984 <page_opts_sethighlight+0x51c>)
 800487e:	f7ff fb93 	bl	8003fa8 <HMISends>
        break;
 8004882:	e05f      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 7)
 8004884:	79bb      	ldrb	r3, [r7, #6]
 8004886:	2b07      	cmp	r3, #7
 8004888:	d103      	bne.n	8004892 <page_opts_sethighlight+0x42a>
                HMISends("click b11,0\xff\xff\xff");
 800488a:	483f      	ldr	r0, [pc, #252]	@ (8004988 <page_opts_sethighlight+0x520>)
 800488c:	f7ff fb8c 	bl	8003fa8 <HMISends>
        break;
 8004890:	e058      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 8)
 8004892:	79bb      	ldrb	r3, [r7, #6]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d103      	bne.n	80048a0 <page_opts_sethighlight+0x438>
                HMISends("click b12,0\xff\xff\xff");
 8004898:	483c      	ldr	r0, [pc, #240]	@ (800498c <page_opts_sethighlight+0x524>)
 800489a:	f7ff fb85 	bl	8003fa8 <HMISends>
        break;
 800489e:	e051      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 9)
 80048a0:	79bb      	ldrb	r3, [r7, #6]
 80048a2:	2b09      	cmp	r3, #9
 80048a4:	d103      	bne.n	80048ae <page_opts_sethighlight+0x446>
                HMISends("click b13,0\xff\xff\xff");
 80048a6:	483a      	ldr	r0, [pc, #232]	@ (8004990 <page_opts_sethighlight+0x528>)
 80048a8:	f7ff fb7e 	bl	8003fa8 <HMISends>
        break;
 80048ac:	e04a      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 10)
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	2b0a      	cmp	r3, #10
 80048b2:	d103      	bne.n	80048bc <page_opts_sethighlight+0x454>
                HMISends("click b14,0\xff\xff\xff");
 80048b4:	4837      	ldr	r0, [pc, #220]	@ (8004994 <page_opts_sethighlight+0x52c>)
 80048b6:	f7ff fb77 	bl	8003fa8 <HMISends>
        break;
 80048ba:	e043      	b.n	8004944 <page_opts_sethighlight+0x4dc>
            else if(opt_value == 11)
 80048bc:	79bb      	ldrb	r3, [r7, #6]
 80048be:	2b0b      	cmp	r3, #11
 80048c0:	d140      	bne.n	8004944 <page_opts_sethighlight+0x4dc>
                HMISends("click b15,0\xff\xff\xff");
 80048c2:	4835      	ldr	r0, [pc, #212]	@ (8004998 <page_opts_sethighlight+0x530>)
 80048c4:	f7ff fb70 	bl	8003fa8 <HMISends>
        break;
 80048c8:	e03c      	b.n	8004944 <page_opts_sethighlight+0x4dc>
        case SETTING:
        {
			if(opt_value == 0)
 80048ca:	79bb      	ldrb	r3, [r7, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <page_opts_sethighlight+0x470>
                HMISends("click b12,0\xff\xff\xff");
 80048d0:	482e      	ldr	r0, [pc, #184]	@ (800498c <page_opts_sethighlight+0x524>)
 80048d2:	f7ff fb69 	bl	8003fa8 <HMISends>
            else if(opt_value == 3)
                HMISends("click b15,0\xff\xff\xff");
            else if(opt_value == 4)
                HMISends("click b16,0\xff\xff\xff");
        }
        break;
 80048d6:	e037      	b.n	8004948 <page_opts_sethighlight+0x4e0>
            else if(opt_value == 1)
 80048d8:	79bb      	ldrb	r3, [r7, #6]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d103      	bne.n	80048e6 <page_opts_sethighlight+0x47e>
                HMISends("click b13,0\xff\xff\xff");
 80048de:	482c      	ldr	r0, [pc, #176]	@ (8004990 <page_opts_sethighlight+0x528>)
 80048e0:	f7ff fb62 	bl	8003fa8 <HMISends>
        break;
 80048e4:	e030      	b.n	8004948 <page_opts_sethighlight+0x4e0>
            else if(opt_value == 2)
 80048e6:	79bb      	ldrb	r3, [r7, #6]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d103      	bne.n	80048f4 <page_opts_sethighlight+0x48c>
                HMISends("click b14,0\xff\xff\xff");
 80048ec:	4829      	ldr	r0, [pc, #164]	@ (8004994 <page_opts_sethighlight+0x52c>)
 80048ee:	f7ff fb5b 	bl	8003fa8 <HMISends>
        break;
 80048f2:	e029      	b.n	8004948 <page_opts_sethighlight+0x4e0>
            else if(opt_value == 3)
 80048f4:	79bb      	ldrb	r3, [r7, #6]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d103      	bne.n	8004902 <page_opts_sethighlight+0x49a>
                HMISends("click b15,0\xff\xff\xff");
 80048fa:	4827      	ldr	r0, [pc, #156]	@ (8004998 <page_opts_sethighlight+0x530>)
 80048fc:	f7ff fb54 	bl	8003fa8 <HMISends>
        break;
 8004900:	e022      	b.n	8004948 <page_opts_sethighlight+0x4e0>
            else if(opt_value == 4)
 8004902:	79bb      	ldrb	r3, [r7, #6]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11f      	bne.n	8004948 <page_opts_sethighlight+0x4e0>
                HMISends("click b16,0\xff\xff\xff");
 8004908:	4824      	ldr	r0, [pc, #144]	@ (800499c <page_opts_sethighlight+0x534>)
 800490a:	f7ff fb4d 	bl	8003fa8 <HMISends>
        break;
 800490e:	e01b      	b.n	8004948 <page_opts_sethighlight+0x4e0>
        case ABOUT:
        {
            if(opt_value == 0)
 8004910:	79bb      	ldrb	r3, [r7, #6]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <page_opts_sethighlight+0x4b6>
                HMISends("click b3,0\xff\xff\xff");
 8004916:	4822      	ldr	r0, [pc, #136]	@ (80049a0 <page_opts_sethighlight+0x538>)
 8004918:	f7ff fb46 	bl	8003fa8 <HMISends>
            else if(opt_value == 1)
                HMISends("click b2,0\xff\xff\xff");
        }
        break;
 800491c:	e016      	b.n	800494c <page_opts_sethighlight+0x4e4>
            else if(opt_value == 1)
 800491e:	79bb      	ldrb	r3, [r7, #6]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d113      	bne.n	800494c <page_opts_sethighlight+0x4e4>
                HMISends("click b2,0\xff\xff\xff");
 8004924:	481f      	ldr	r0, [pc, #124]	@ (80049a4 <page_opts_sethighlight+0x53c>)
 8004926:	f7ff fb3f 	bl	8003fa8 <HMISends>
        break;
 800492a:	e00f      	b.n	800494c <page_opts_sethighlight+0x4e4>
        default:break;
 800492c:	bf00      	nop
 800492e:	e00e      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004930:	bf00      	nop
 8004932:	e00c      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004934:	bf00      	nop
 8004936:	e00a      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004938:	bf00      	nop
 800493a:	e008      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 800493c:	bf00      	nop
 800493e:	e006      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004940:	bf00      	nop
 8004942:	e004      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004944:	bf00      	nop
 8004946:	e002      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <page_opts_sethighlight+0x4e6>
        break;
 800494c:	bf00      	nop
    }
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200008ae 	.word	0x200008ae
 800495c:	0800e480 	.word	0x0800e480
 8004960:	0800e490 	.word	0x0800e490
 8004964:	0800e4a0 	.word	0x0800e4a0
 8004968:	0800e4b0 	.word	0x0800e4b0
 800496c:	0800e4c0 	.word	0x0800e4c0
 8004970:	0800e4d0 	.word	0x0800e4d0
 8004974:	0800e4e0 	.word	0x0800e4e0
 8004978:	0800e4f0 	.word	0x0800e4f0
 800497c:	0800e500 	.word	0x0800e500
 8004980:	0800e510 	.word	0x0800e510
 8004984:	0800e520 	.word	0x0800e520
 8004988:	0800e530 	.word	0x0800e530
 800498c:	0800e540 	.word	0x0800e540
 8004990:	0800e550 	.word	0x0800e550
 8004994:	0800e560 	.word	0x0800e560
 8004998:	0800e570 	.word	0x0800e570
 800499c:	0800e580 	.word	0x0800e580
 80049a0:	0800e590 	.word	0x0800e590
 80049a4:	0800e5a0 	.word	0x0800e5a0

080049a8 <menu_key_options>:



void menu_key_options(uint16_t key_value)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	f640 4204 	movw	r2, #3076	@ 0xc04
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d014      	beq.n	80049e6 <menu_key_options+0x3e>
 80049bc:	f640 4204 	movw	r2, #3076	@ 0xc04
 80049c0:	4293      	cmp	r3, r2
 80049c2:	dc58      	bgt.n	8004a76 <menu_key_options+0xce>
 80049c4:	f640 4202 	movw	r2, #3074	@ 0xc02
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d020      	beq.n	8004a0e <menu_key_options+0x66>
 80049cc:	f640 4202 	movw	r2, #3074	@ 0xc02
 80049d0:	4293      	cmp	r3, r2
 80049d2:	dc50      	bgt.n	8004a76 <menu_key_options+0xce>
 80049d4:	f240 4206 	movw	r2, #1030	@ 0x406
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04e      	beq.n	8004a7a <menu_key_options+0xd2>
 80049dc:	f640 0206 	movw	r2, #2054	@ 0x806
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d028      	beq.n	8004a36 <menu_key_options+0x8e>
                HMISends("click b5,0\xff\xff\xff");
        }
        break;
        case KEY_BACK:
        break;
        default:break;
 80049e4:	e047      	b.n	8004a76 <menu_key_options+0xce>
            cur_opt[MENU]--;
 80049e6:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <menu_key_options+0xe0>)
 80049e8:	789b      	ldrb	r3, [r3, #2]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4b26      	ldr	r3, [pc, #152]	@ (8004a88 <menu_key_options+0xe0>)
 80049f0:	709a      	strb	r2, [r3, #2]
            if(cur_opt[MENU] == 0xff)
 80049f2:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <menu_key_options+0xe0>)
 80049f4:	789b      	ldrb	r3, [r3, #2]
 80049f6:	2bff      	cmp	r3, #255	@ 0xff
 80049f8:	d102      	bne.n	8004a00 <menu_key_options+0x58>
                cur_opt[MENU] = 3;
 80049fa:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <menu_key_options+0xe0>)
 80049fc:	2203      	movs	r2, #3
 80049fe:	709a      	strb	r2, [r3, #2]
            page_opts_sethighlight(MENU, cur_opt[MENU]);
 8004a00:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <menu_key_options+0xe0>)
 8004a02:	789b      	ldrb	r3, [r3, #2]
 8004a04:	4619      	mov	r1, r3
 8004a06:	2002      	movs	r0, #2
 8004a08:	f7ff fd2e 	bl	8004468 <page_opts_sethighlight>
        break;
 8004a0c:	e038      	b.n	8004a80 <menu_key_options+0xd8>
            cur_opt[MENU]++;
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a88 <menu_key_options+0xe0>)
 8004a10:	789b      	ldrb	r3, [r3, #2]
 8004a12:	3301      	adds	r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b1c      	ldr	r3, [pc, #112]	@ (8004a88 <menu_key_options+0xe0>)
 8004a18:	709a      	strb	r2, [r3, #2]
            if(cur_opt[MENU] == 4)
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <menu_key_options+0xe0>)
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d102      	bne.n	8004a28 <menu_key_options+0x80>
                cur_opt[MENU] = 0;
 8004a22:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <menu_key_options+0xe0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	709a      	strb	r2, [r3, #2]
            page_opts_sethighlight(MENU, cur_opt[MENU]);
 8004a28:	4b17      	ldr	r3, [pc, #92]	@ (8004a88 <menu_key_options+0xe0>)
 8004a2a:	789b      	ldrb	r3, [r3, #2]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f7ff fd1a 	bl	8004468 <page_opts_sethighlight>
        break;
 8004a34:	e024      	b.n	8004a80 <menu_key_options+0xd8>
            if(cur_opt[MENU] == 0)
 8004a36:	4b14      	ldr	r3, [pc, #80]	@ (8004a88 <menu_key_options+0xe0>)
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <menu_key_options+0x9e>
                HMISends("click b1,0\xff\xff\xff");
 8004a3e:	4813      	ldr	r0, [pc, #76]	@ (8004a8c <menu_key_options+0xe4>)
 8004a40:	f7ff fab2 	bl	8003fa8 <HMISends>
        break;
 8004a44:	e01b      	b.n	8004a7e <menu_key_options+0xd6>
            else if(cur_opt[MENU] == 1)
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <menu_key_options+0xe0>)
 8004a48:	789b      	ldrb	r3, [r3, #2]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d103      	bne.n	8004a56 <menu_key_options+0xae>
                HMISends("click b2,0\xff\xff\xff");
 8004a4e:	4810      	ldr	r0, [pc, #64]	@ (8004a90 <menu_key_options+0xe8>)
 8004a50:	f7ff faaa 	bl	8003fa8 <HMISends>
        break;
 8004a54:	e013      	b.n	8004a7e <menu_key_options+0xd6>
            else if(cur_opt[MENU] == 2)
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <menu_key_options+0xe0>)
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <menu_key_options+0xbe>
                HMISends("click b4,0\xff\xff\xff");
 8004a5e:	480d      	ldr	r0, [pc, #52]	@ (8004a94 <menu_key_options+0xec>)
 8004a60:	f7ff faa2 	bl	8003fa8 <HMISends>
        break;
 8004a64:	e00b      	b.n	8004a7e <menu_key_options+0xd6>
            else if(cur_opt[MENU] == 3)
 8004a66:	4b08      	ldr	r3, [pc, #32]	@ (8004a88 <menu_key_options+0xe0>)
 8004a68:	789b      	ldrb	r3, [r3, #2]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <menu_key_options+0xd6>
                HMISends("click b5,0\xff\xff\xff");
 8004a6e:	480a      	ldr	r0, [pc, #40]	@ (8004a98 <menu_key_options+0xf0>)
 8004a70:	f7ff fa9a 	bl	8003fa8 <HMISends>
        break;
 8004a74:	e003      	b.n	8004a7e <menu_key_options+0xd6>
        default:break;
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <menu_key_options+0xd8>
        break;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <menu_key_options+0xd8>
        break;
 8004a7e:	bf00      	nop
    }
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	2000089c 	.word	0x2000089c
 8004a8c:	0800e5b0 	.word	0x0800e5b0
 8004a90:	0800e5a0 	.word	0x0800e5a0
 8004a94:	0800e4c0 	.word	0x0800e4c0
 8004a98:	0800e4d0 	.word	0x0800e4d0

08004a9c <longtxchoose_key_options>:

void longtxchoose_key_options(uint16_t key_value)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d014      	beq.n	8004ada <longtxchoose_key_options+0x3e>
 8004ab0:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	dc4c      	bgt.n	8004b52 <longtxchoose_key_options+0xb6>
 8004ab8:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d020      	beq.n	8004b02 <longtxchoose_key_options+0x66>
 8004ac0:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	dc44      	bgt.n	8004b52 <longtxchoose_key_options+0xb6>
 8004ac8:	f240 4206 	movw	r2, #1030	@ 0x406
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d03c      	beq.n	8004b4a <longtxchoose_key_options+0xae>
 8004ad0:	f640 0206 	movw	r2, #2054	@ 0x806
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d028      	beq.n	8004b2a <longtxchoose_key_options+0x8e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004ad8:	e03b      	b.n	8004b52 <longtxchoose_key_options+0xb6>
            cur_opt[LONGTXCHOOSE]--;
 8004ada:	4b21      	ldr	r3, [pc, #132]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004ae4:	70da      	strb	r2, [r3, #3]
            if(cur_opt[LONGTXCHOOSE] == 0xff)
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d102      	bne.n	8004af4 <longtxchoose_key_options+0x58>
                cur_opt[LONGTXCHOOSE] = 1;
 8004aee:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	70da      	strb	r2, [r3, #3]
            page_opts_sethighlight(LONGTXCHOOSE, cur_opt[LONGTXCHOOSE]);
 8004af4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2003      	movs	r0, #3
 8004afc:	f7ff fcb4 	bl	8004468 <page_opts_sethighlight>
        break;
 8004b00:	e02a      	b.n	8004b58 <longtxchoose_key_options+0xbc>
            cur_opt[LONGTXCHOOSE]++;
 8004b02:	4b17      	ldr	r3, [pc, #92]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	3301      	adds	r3, #1
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b0c:	70da      	strb	r2, [r3, #3]
            if(cur_opt[LONGTXCHOOSE] == 2)
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d102      	bne.n	8004b1c <longtxchoose_key_options+0x80>
                cur_opt[LONGTXCHOOSE] = 0;
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	70da      	strb	r2, [r3, #3]
            page_opts_sethighlight(LONGTXCHOOSE, cur_opt[LONGTXCHOOSE]);
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b1e:	78db      	ldrb	r3, [r3, #3]
 8004b20:	4619      	mov	r1, r3
 8004b22:	2003      	movs	r0, #3
 8004b24:	f7ff fca0 	bl	8004468 <page_opts_sethighlight>
        break;
 8004b28:	e016      	b.n	8004b58 <longtxchoose_key_options+0xbc>
            if(cur_opt[LONGTXCHOOSE] == 0)
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b2c:	78db      	ldrb	r3, [r3, #3]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <longtxchoose_key_options+0x9e>
                HMISends("click b0,0\xff\xff\xff");
 8004b32:	480c      	ldr	r0, [pc, #48]	@ (8004b64 <longtxchoose_key_options+0xc8>)
 8004b34:	f7ff fa38 	bl	8003fa8 <HMISends>
        break;
 8004b38:	e00d      	b.n	8004b56 <longtxchoose_key_options+0xba>
            else if(cur_opt[LONGTXCHOOSE] == 1)
 8004b3a:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <longtxchoose_key_options+0xc4>)
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d109      	bne.n	8004b56 <longtxchoose_key_options+0xba>
                HMISends("click b1,0\xff\xff\xff");
 8004b42:	4809      	ldr	r0, [pc, #36]	@ (8004b68 <longtxchoose_key_options+0xcc>)
 8004b44:	f7ff fa30 	bl	8003fa8 <HMISends>
        break;
 8004b48:	e005      	b.n	8004b56 <longtxchoose_key_options+0xba>
            HMISends("click b2,0\xff\xff\xff");
 8004b4a:	4808      	ldr	r0, [pc, #32]	@ (8004b6c <longtxchoose_key_options+0xd0>)
 8004b4c:	f7ff fa2c 	bl	8003fa8 <HMISends>
        break;
 8004b50:	e002      	b.n	8004b58 <longtxchoose_key_options+0xbc>
        default:break;
 8004b52:	bf00      	nop
 8004b54:	e000      	b.n	8004b58 <longtxchoose_key_options+0xbc>
        break;
 8004b56:	bf00      	nop
    }
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2000089c 	.word	0x2000089c
 8004b64:	0800e5c0 	.word	0x0800e5c0
 8004b68:	0800e5b0 	.word	0x0800e5b0
 8004b6c:	0800e5a0 	.word	0x0800e5a0

08004b70 <simgletxchoose_key_options>:

void simgletxchoose_key_options(uint16_t key_value)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d014      	beq.n	8004bae <simgletxchoose_key_options+0x3e>
 8004b84:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	dc4c      	bgt.n	8004c26 <simgletxchoose_key_options+0xb6>
 8004b8c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d020      	beq.n	8004bd6 <simgletxchoose_key_options+0x66>
 8004b94:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	dc44      	bgt.n	8004c26 <simgletxchoose_key_options+0xb6>
 8004b9c:	f240 4206 	movw	r2, #1030	@ 0x406
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d03c      	beq.n	8004c1e <simgletxchoose_key_options+0xae>
 8004ba4:	f640 0206 	movw	r2, #2054	@ 0x806
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d028      	beq.n	8004bfe <simgletxchoose_key_options+0x8e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004bac:	e03b      	b.n	8004c26 <simgletxchoose_key_options+0xb6>
            cur_opt[SIMGLETXCHOOSE]--;
 8004bae:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bb0:	791b      	ldrb	r3, [r3, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bb8:	711a      	strb	r2, [r3, #4]
            if(cur_opt[SIMGLETXCHOOSE] == 0xff)
 8004bba:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bbc:	791b      	ldrb	r3, [r3, #4]
 8004bbe:	2bff      	cmp	r3, #255	@ 0xff
 8004bc0:	d102      	bne.n	8004bc8 <simgletxchoose_key_options+0x58>
                cur_opt[SIMGLETXCHOOSE] = 1;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	711a      	strb	r2, [r3, #4]
            page_opts_sethighlight(SIMGLETXCHOOSE, cur_opt[SIMGLETXCHOOSE]);
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bca:	791b      	ldrb	r3, [r3, #4]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	2004      	movs	r0, #4
 8004bd0:	f7ff fc4a 	bl	8004468 <page_opts_sethighlight>
        break;
 8004bd4:	e02a      	b.n	8004c2c <simgletxchoose_key_options+0xbc>
            cur_opt[SIMGLETXCHOOSE]++;
 8004bd6:	4b17      	ldr	r3, [pc, #92]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004be0:	711a      	strb	r2, [r3, #4]
            if(cur_opt[SIMGLETXCHOOSE] == 2)
 8004be2:	4b14      	ldr	r3, [pc, #80]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004be4:	791b      	ldrb	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d102      	bne.n	8004bf0 <simgletxchoose_key_options+0x80>
                cur_opt[SIMGLETXCHOOSE] = 0;
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	711a      	strb	r2, [r3, #4]
            page_opts_sethighlight(SIMGLETXCHOOSE, cur_opt[SIMGLETXCHOOSE]);
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	2004      	movs	r0, #4
 8004bf8:	f7ff fc36 	bl	8004468 <page_opts_sethighlight>
        break;
 8004bfc:	e016      	b.n	8004c2c <simgletxchoose_key_options+0xbc>
            if(cur_opt[SIMGLETXCHOOSE] == 0)
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004c00:	791b      	ldrb	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <simgletxchoose_key_options+0x9e>
                HMISends("click b0,0\xff\xff\xff");
 8004c06:	480c      	ldr	r0, [pc, #48]	@ (8004c38 <simgletxchoose_key_options+0xc8>)
 8004c08:	f7ff f9ce 	bl	8003fa8 <HMISends>
        break;
 8004c0c:	e00d      	b.n	8004c2a <simgletxchoose_key_options+0xba>
            else if(cur_opt[SIMGLETXCHOOSE] == 1)
 8004c0e:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <simgletxchoose_key_options+0xc4>)
 8004c10:	791b      	ldrb	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d109      	bne.n	8004c2a <simgletxchoose_key_options+0xba>
                HMISends("click b1,0\xff\xff\xff");
 8004c16:	4809      	ldr	r0, [pc, #36]	@ (8004c3c <simgletxchoose_key_options+0xcc>)
 8004c18:	f7ff f9c6 	bl	8003fa8 <HMISends>
        break;
 8004c1c:	e005      	b.n	8004c2a <simgletxchoose_key_options+0xba>
            HMISends("click b2,0\xff\xff\xff");
 8004c1e:	4808      	ldr	r0, [pc, #32]	@ (8004c40 <simgletxchoose_key_options+0xd0>)
 8004c20:	f7ff f9c2 	bl	8003fa8 <HMISends>
        break;
 8004c24:	e002      	b.n	8004c2c <simgletxchoose_key_options+0xbc>
        default:break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <simgletxchoose_key_options+0xbc>
        break;
 8004c2a:	bf00      	nop
    }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000089c 	.word	0x2000089c
 8004c38:	0800e5c0 	.word	0x0800e5c0
 8004c3c:	0800e5b0 	.word	0x0800e5b0
 8004c40:	0800e5a0 	.word	0x0800e5a0

08004c44 <rangingchoose_key_options>:

void rangingchoose_key_options(uint16_t key_value)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d014      	beq.n	8004c82 <rangingchoose_key_options+0x3e>
 8004c58:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	dc4c      	bgt.n	8004cfa <rangingchoose_key_options+0xb6>
 8004c60:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d020      	beq.n	8004caa <rangingchoose_key_options+0x66>
 8004c68:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	dc44      	bgt.n	8004cfa <rangingchoose_key_options+0xb6>
 8004c70:	f240 4206 	movw	r2, #1030	@ 0x406
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d03c      	beq.n	8004cf2 <rangingchoose_key_options+0xae>
 8004c78:	f640 0206 	movw	r2, #2054	@ 0x806
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d028      	beq.n	8004cd2 <rangingchoose_key_options+0x8e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004c80:	e03b      	b.n	8004cfa <rangingchoose_key_options+0xb6>
            cur_opt[RANGINGCHOOSE]--;
 8004c82:	4b21      	ldr	r3, [pc, #132]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004c84:	795b      	ldrb	r3, [r3, #5]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004c8c:	715a      	strb	r2, [r3, #5]
            if(cur_opt[RANGINGCHOOSE] == 0xff)
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004c90:	795b      	ldrb	r3, [r3, #5]
 8004c92:	2bff      	cmp	r3, #255	@ 0xff
 8004c94:	d102      	bne.n	8004c9c <rangingchoose_key_options+0x58>
                cur_opt[RANGINGCHOOSE] = 1;
 8004c96:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	715a      	strb	r2, [r3, #5]
            page_opts_sethighlight(RANGINGCHOOSE, cur_opt[RANGINGCHOOSE]);
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004c9e:	795b      	ldrb	r3, [r3, #5]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	2005      	movs	r0, #5
 8004ca4:	f7ff fbe0 	bl	8004468 <page_opts_sethighlight>
        break;
 8004ca8:	e02a      	b.n	8004d00 <rangingchoose_key_options+0xbc>
            cur_opt[RANGINGCHOOSE]++;
 8004caa:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cac:	795b      	ldrb	r3, [r3, #5]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cb4:	715a      	strb	r2, [r3, #5]
            if(cur_opt[RANGINGCHOOSE] == 2)
 8004cb6:	4b14      	ldr	r3, [pc, #80]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cb8:	795b      	ldrb	r3, [r3, #5]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d102      	bne.n	8004cc4 <rangingchoose_key_options+0x80>
                cur_opt[RANGINGCHOOSE] = 0;
 8004cbe:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	715a      	strb	r2, [r3, #5]
            page_opts_sethighlight(RANGINGCHOOSE, cur_opt[RANGINGCHOOSE]);
 8004cc4:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cc6:	795b      	ldrb	r3, [r3, #5]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	2005      	movs	r0, #5
 8004ccc:	f7ff fbcc 	bl	8004468 <page_opts_sethighlight>
        break;
 8004cd0:	e016      	b.n	8004d00 <rangingchoose_key_options+0xbc>
            if(cur_opt[RANGINGCHOOSE] == 0)
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004cd4:	795b      	ldrb	r3, [r3, #5]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <rangingchoose_key_options+0x9e>
                HMISends("click b0,0\xff\xff\xff");
 8004cda:	480c      	ldr	r0, [pc, #48]	@ (8004d0c <rangingchoose_key_options+0xc8>)
 8004cdc:	f7ff f964 	bl	8003fa8 <HMISends>
        break;
 8004ce0:	e00d      	b.n	8004cfe <rangingchoose_key_options+0xba>
            else if(cur_opt[RANGINGCHOOSE] == 1)
 8004ce2:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <rangingchoose_key_options+0xc4>)
 8004ce4:	795b      	ldrb	r3, [r3, #5]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d109      	bne.n	8004cfe <rangingchoose_key_options+0xba>
                HMISends("click b1,0\xff\xff\xff");
 8004cea:	4809      	ldr	r0, [pc, #36]	@ (8004d10 <rangingchoose_key_options+0xcc>)
 8004cec:	f7ff f95c 	bl	8003fa8 <HMISends>
        break;
 8004cf0:	e005      	b.n	8004cfe <rangingchoose_key_options+0xba>
            HMISends("click b2,0\xff\xff\xff");
 8004cf2:	4808      	ldr	r0, [pc, #32]	@ (8004d14 <rangingchoose_key_options+0xd0>)
 8004cf4:	f7ff f958 	bl	8003fa8 <HMISends>
        break;
 8004cf8:	e002      	b.n	8004d00 <rangingchoose_key_options+0xbc>
        default:break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <rangingchoose_key_options+0xbc>
        break;
 8004cfe:	bf00      	nop
    }
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2000089c 	.word	0x2000089c
 8004d0c:	0800e5c0 	.word	0x0800e5c0
 8004d10:	0800e5b0 	.word	0x0800e5b0
 8004d14:	0800e5a0 	.word	0x0800e5a0

08004d18 <locationchoose_key_options>:

void locationchoose_key_options(uint16_t key_value)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d014      	beq.n	8004d56 <locationchoose_key_options+0x3e>
 8004d2c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004d30:	4293      	cmp	r3, r2
 8004d32:	dc4c      	bgt.n	8004dce <locationchoose_key_options+0xb6>
 8004d34:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d020      	beq.n	8004d7e <locationchoose_key_options+0x66>
 8004d3c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004d40:	4293      	cmp	r3, r2
 8004d42:	dc44      	bgt.n	8004dce <locationchoose_key_options+0xb6>
 8004d44:	f240 4206 	movw	r2, #1030	@ 0x406
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d03c      	beq.n	8004dc6 <locationchoose_key_options+0xae>
 8004d4c:	f640 0206 	movw	r2, #2054	@ 0x806
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d028      	beq.n	8004da6 <locationchoose_key_options+0x8e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004d54:	e03b      	b.n	8004dce <locationchoose_key_options+0xb6>
            cur_opt[LOCATIONCHOOSE]--;
 8004d56:	4b21      	ldr	r3, [pc, #132]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d58:	799b      	ldrb	r3, [r3, #6]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d60:	719a      	strb	r2, [r3, #6]
            if(cur_opt[LOCATIONCHOOSE] == 0xff)
 8004d62:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d64:	799b      	ldrb	r3, [r3, #6]
 8004d66:	2bff      	cmp	r3, #255	@ 0xff
 8004d68:	d102      	bne.n	8004d70 <locationchoose_key_options+0x58>
                cur_opt[LOCATIONCHOOSE] = 1;
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	719a      	strb	r2, [r3, #6]
            page_opts_sethighlight(LOCATIONCHOOSE, cur_opt[LOCATIONCHOOSE]);
 8004d70:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d72:	799b      	ldrb	r3, [r3, #6]
 8004d74:	4619      	mov	r1, r3
 8004d76:	2006      	movs	r0, #6
 8004d78:	f7ff fb76 	bl	8004468 <page_opts_sethighlight>
        break;
 8004d7c:	e02a      	b.n	8004dd4 <locationchoose_key_options+0xbc>
            cur_opt[LOCATIONCHOOSE]++;
 8004d7e:	4b17      	ldr	r3, [pc, #92]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d80:	799b      	ldrb	r3, [r3, #6]
 8004d82:	3301      	adds	r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d88:	719a      	strb	r2, [r3, #6]
            if(cur_opt[LOCATIONCHOOSE] == 2)
 8004d8a:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d8c:	799b      	ldrb	r3, [r3, #6]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d102      	bne.n	8004d98 <locationchoose_key_options+0x80>
                cur_opt[LOCATIONCHOOSE] = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	719a      	strb	r2, [r3, #6]
            page_opts_sethighlight(LOCATIONCHOOSE, cur_opt[LOCATIONCHOOSE]);
 8004d98:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004d9a:	799b      	ldrb	r3, [r3, #6]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	2006      	movs	r0, #6
 8004da0:	f7ff fb62 	bl	8004468 <page_opts_sethighlight>
        break;
 8004da4:	e016      	b.n	8004dd4 <locationchoose_key_options+0xbc>
            if(cur_opt[LOCATIONCHOOSE] == 0)
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004da8:	799b      	ldrb	r3, [r3, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <locationchoose_key_options+0x9e>
                HMISends("click b1,0\xff\xff\xff");
 8004dae:	480c      	ldr	r0, [pc, #48]	@ (8004de0 <locationchoose_key_options+0xc8>)
 8004db0:	f7ff f8fa 	bl	8003fa8 <HMISends>
        break;
 8004db4:	e00d      	b.n	8004dd2 <locationchoose_key_options+0xba>
            else if(cur_opt[LOCATIONCHOOSE] == 1)
 8004db6:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <locationchoose_key_options+0xc4>)
 8004db8:	799b      	ldrb	r3, [r3, #6]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d109      	bne.n	8004dd2 <locationchoose_key_options+0xba>
                HMISends("click b0,0\xff\xff\xff");
 8004dbe:	4809      	ldr	r0, [pc, #36]	@ (8004de4 <locationchoose_key_options+0xcc>)
 8004dc0:	f7ff f8f2 	bl	8003fa8 <HMISends>
        break;
 8004dc4:	e005      	b.n	8004dd2 <locationchoose_key_options+0xba>
            HMISends("click b2,0\xff\xff\xff");
 8004dc6:	4808      	ldr	r0, [pc, #32]	@ (8004de8 <locationchoose_key_options+0xd0>)
 8004dc8:	f7ff f8ee 	bl	8003fa8 <HMISends>
        break;
 8004dcc:	e002      	b.n	8004dd4 <locationchoose_key_options+0xbc>
        default:break;
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <locationchoose_key_options+0xbc>
        break;
 8004dd2:	bf00      	nop
    }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2000089c 	.word	0x2000089c
 8004de0:	0800e5b0 	.word	0x0800e5b0
 8004de4:	0800e5c0 	.word	0x0800e5c0
 8004de8:	0800e5a0 	.word	0x0800e5a0

08004dec <loca_id_choose_key_options>:

void loca_id_choose_key_options(uint16_t key_value)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d017      	beq.n	8004e30 <loca_id_choose_key_options+0x44>
 8004e00:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004e04:	4293      	cmp	r3, r2
 8004e06:	f300 809f 	bgt.w	8004f48 <loca_id_choose_key_options+0x15c>
 8004e0a:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <loca_id_choose_key_options+0x6c>
 8004e12:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004e16:	4293      	cmp	r3, r2
 8004e18:	f300 8096 	bgt.w	8004f48 <loca_id_choose_key_options+0x15c>
 8004e1c:	f240 4206 	movw	r2, #1030	@ 0x406
 8004e20:	4293      	cmp	r3, r2
 8004e22:	f000 808d 	beq.w	8004f40 <loca_id_choose_key_options+0x154>
 8004e26:	f640 0206 	movw	r2, #2054	@ 0x806
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d028      	beq.n	8004e80 <loca_id_choose_key_options+0x94>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004e2e:	e08b      	b.n	8004f48 <loca_id_choose_key_options+0x15c>
            cur_opt[LOCA_ID_CHOOSE]--;
 8004e30:	4b49      	ldr	r3, [pc, #292]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e32:	79db      	ldrb	r3, [r3, #7]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b47      	ldr	r3, [pc, #284]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e3a:	71da      	strb	r2, [r3, #7]
            if(cur_opt[LOCA_ID_CHOOSE] == 0xff)
 8004e3c:	4b46      	ldr	r3, [pc, #280]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e3e:	79db      	ldrb	r3, [r3, #7]
 8004e40:	2bff      	cmp	r3, #255	@ 0xff
 8004e42:	d102      	bne.n	8004e4a <loca_id_choose_key_options+0x5e>
                cur_opt[LOCA_ID_CHOOSE] = 11;
 8004e44:	4b44      	ldr	r3, [pc, #272]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e46:	220b      	movs	r2, #11
 8004e48:	71da      	strb	r2, [r3, #7]
            page_opts_sethighlight(LOCA_ID_CHOOSE, cur_opt[LOCA_ID_CHOOSE]);
 8004e4a:	4b43      	ldr	r3, [pc, #268]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e4c:	79db      	ldrb	r3, [r3, #7]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	2007      	movs	r0, #7
 8004e52:	f7ff fb09 	bl	8004468 <page_opts_sethighlight>
        break;
 8004e56:	e07a      	b.n	8004f4e <loca_id_choose_key_options+0x162>
            cur_opt[LOCA_ID_CHOOSE]++;
 8004e58:	4b3f      	ldr	r3, [pc, #252]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e5a:	79db      	ldrb	r3, [r3, #7]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	4b3d      	ldr	r3, [pc, #244]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e62:	71da      	strb	r2, [r3, #7]
            if(cur_opt[LOCA_ID_CHOOSE] == 12)
 8004e64:	4b3c      	ldr	r3, [pc, #240]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e66:	79db      	ldrb	r3, [r3, #7]
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d102      	bne.n	8004e72 <loca_id_choose_key_options+0x86>
                cur_opt[LOCA_ID_CHOOSE] = 0;
 8004e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	71da      	strb	r2, [r3, #7]
            page_opts_sethighlight(LOCA_ID_CHOOSE, cur_opt[LOCA_ID_CHOOSE]);
 8004e72:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e74:	79db      	ldrb	r3, [r3, #7]
 8004e76:	4619      	mov	r1, r3
 8004e78:	2007      	movs	r0, #7
 8004e7a:	f7ff faf5 	bl	8004468 <page_opts_sethighlight>
        break;
 8004e7e:	e066      	b.n	8004f4e <loca_id_choose_key_options+0x162>
            if(cur_opt[LOCA_ID_CHOOSE] == 0)
 8004e80:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e82:	79db      	ldrb	r3, [r3, #7]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <loca_id_choose_key_options+0xa4>
                HMISends("click n0,0\xff\xff\xff");
 8004e88:	4834      	ldr	r0, [pc, #208]	@ (8004f5c <loca_id_choose_key_options+0x170>)
 8004e8a:	f7ff f88d 	bl	8003fa8 <HMISends>
        break;
 8004e8e:	e05d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 1)
 8004e90:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004e92:	79db      	ldrb	r3, [r3, #7]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d103      	bne.n	8004ea0 <loca_id_choose_key_options+0xb4>
                HMISends("click n1,0\xff\xff\xff");
 8004e98:	4831      	ldr	r0, [pc, #196]	@ (8004f60 <loca_id_choose_key_options+0x174>)
 8004e9a:	f7ff f885 	bl	8003fa8 <HMISends>
        break;
 8004e9e:	e055      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 2)
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004ea2:	79db      	ldrb	r3, [r3, #7]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d103      	bne.n	8004eb0 <loca_id_choose_key_options+0xc4>
                HMISends("click n2,0\xff\xff\xff");
 8004ea8:	482e      	ldr	r0, [pc, #184]	@ (8004f64 <loca_id_choose_key_options+0x178>)
 8004eaa:	f7ff f87d 	bl	8003fa8 <HMISends>
        break;
 8004eae:	e04d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 3)
 8004eb0:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004eb2:	79db      	ldrb	r3, [r3, #7]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d103      	bne.n	8004ec0 <loca_id_choose_key_options+0xd4>
                HMISends("click n3,0\xff\xff\xff");
 8004eb8:	482b      	ldr	r0, [pc, #172]	@ (8004f68 <loca_id_choose_key_options+0x17c>)
 8004eba:	f7ff f875 	bl	8003fa8 <HMISends>
        break;
 8004ebe:	e045      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 4)
 8004ec0:	4b25      	ldr	r3, [pc, #148]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004ec2:	79db      	ldrb	r3, [r3, #7]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d103      	bne.n	8004ed0 <loca_id_choose_key_options+0xe4>
                HMISends("click n4,0\xff\xff\xff");
 8004ec8:	4828      	ldr	r0, [pc, #160]	@ (8004f6c <loca_id_choose_key_options+0x180>)
 8004eca:	f7ff f86d 	bl	8003fa8 <HMISends>
        break;
 8004ece:	e03d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 5)
 8004ed0:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004ed2:	79db      	ldrb	r3, [r3, #7]
 8004ed4:	2b05      	cmp	r3, #5
 8004ed6:	d103      	bne.n	8004ee0 <loca_id_choose_key_options+0xf4>
                HMISends("click n5,0\xff\xff\xff");
 8004ed8:	4825      	ldr	r0, [pc, #148]	@ (8004f70 <loca_id_choose_key_options+0x184>)
 8004eda:	f7ff f865 	bl	8003fa8 <HMISends>
        break;
 8004ede:	e035      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 6)
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004ee2:	79db      	ldrb	r3, [r3, #7]
 8004ee4:	2b06      	cmp	r3, #6
 8004ee6:	d103      	bne.n	8004ef0 <loca_id_choose_key_options+0x104>
                HMISends("click n6,0\xff\xff\xff");
 8004ee8:	4822      	ldr	r0, [pc, #136]	@ (8004f74 <loca_id_choose_key_options+0x188>)
 8004eea:	f7ff f85d 	bl	8003fa8 <HMISends>
        break;
 8004eee:	e02d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 7)
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004ef2:	79db      	ldrb	r3, [r3, #7]
 8004ef4:	2b07      	cmp	r3, #7
 8004ef6:	d103      	bne.n	8004f00 <loca_id_choose_key_options+0x114>
                HMISends("click n7,0\xff\xff\xff");
 8004ef8:	481f      	ldr	r0, [pc, #124]	@ (8004f78 <loca_id_choose_key_options+0x18c>)
 8004efa:	f7ff f855 	bl	8003fa8 <HMISends>
        break;
 8004efe:	e025      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 8)
 8004f00:	4b15      	ldr	r3, [pc, #84]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004f02:	79db      	ldrb	r3, [r3, #7]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d103      	bne.n	8004f10 <loca_id_choose_key_options+0x124>
                HMISends("click b0,0\xff\xff\xff");
 8004f08:	481c      	ldr	r0, [pc, #112]	@ (8004f7c <loca_id_choose_key_options+0x190>)
 8004f0a:	f7ff f84d 	bl	8003fa8 <HMISends>
        break;
 8004f0e:	e01d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 9)
 8004f10:	4b11      	ldr	r3, [pc, #68]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004f12:	79db      	ldrb	r3, [r3, #7]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	d103      	bne.n	8004f20 <loca_id_choose_key_options+0x134>
                HMISends("click b1,0\xff\xff\xff");
 8004f18:	4819      	ldr	r0, [pc, #100]	@ (8004f80 <loca_id_choose_key_options+0x194>)
 8004f1a:	f7ff f845 	bl	8003fa8 <HMISends>
        break;
 8004f1e:	e015      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 10)
 8004f20:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004f22:	79db      	ldrb	r3, [r3, #7]
 8004f24:	2b0a      	cmp	r3, #10
 8004f26:	d103      	bne.n	8004f30 <loca_id_choose_key_options+0x144>
                HMISends("click b3,0\xff\xff\xff");
 8004f28:	4816      	ldr	r0, [pc, #88]	@ (8004f84 <loca_id_choose_key_options+0x198>)
 8004f2a:	f7ff f83d 	bl	8003fa8 <HMISends>
        break;
 8004f2e:	e00d      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            else if(cur_opt[LOCA_ID_CHOOSE] == 11)
 8004f30:	4b09      	ldr	r3, [pc, #36]	@ (8004f58 <loca_id_choose_key_options+0x16c>)
 8004f32:	79db      	ldrb	r3, [r3, #7]
 8004f34:	2b0b      	cmp	r3, #11
 8004f36:	d109      	bne.n	8004f4c <loca_id_choose_key_options+0x160>
                HMISends("click b20,0\xff\xff\xff");
 8004f38:	4813      	ldr	r0, [pc, #76]	@ (8004f88 <loca_id_choose_key_options+0x19c>)
 8004f3a:	f7ff f835 	bl	8003fa8 <HMISends>
        break;
 8004f3e:	e005      	b.n	8004f4c <loca_id_choose_key_options+0x160>
            HMISends("click b2,0\xff\xff\xff");
 8004f40:	4812      	ldr	r0, [pc, #72]	@ (8004f8c <loca_id_choose_key_options+0x1a0>)
 8004f42:	f7ff f831 	bl	8003fa8 <HMISends>
        break;
 8004f46:	e002      	b.n	8004f4e <loca_id_choose_key_options+0x162>
        default:break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <loca_id_choose_key_options+0x162>
        break;
 8004f4c:	bf00      	nop
    }
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000089c 	.word	0x2000089c
 8004f5c:	0800e5d0 	.word	0x0800e5d0
 8004f60:	0800e5e0 	.word	0x0800e5e0
 8004f64:	0800e5f0 	.word	0x0800e5f0
 8004f68:	0800e600 	.word	0x0800e600
 8004f6c:	0800e610 	.word	0x0800e610
 8004f70:	0800e620 	.word	0x0800e620
 8004f74:	0800e630 	.word	0x0800e630
 8004f78:	0800e640 	.word	0x0800e640
 8004f7c:	0800e5c0 	.word	0x0800e5c0
 8004f80:	0800e5b0 	.word	0x0800e5b0
 8004f84:	0800e590 	.word	0x0800e590
 8004f88:	0800e650 	.word	0x0800e650
 8004f8c:	0800e5a0 	.word	0x0800e5a0

08004f90 <setting_key_options>:

void setting_key_options(uint16_t key_value)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d014      	beq.n	8004fce <setting_key_options+0x3e>
 8004fa4:	f640 4204 	movw	r2, #3076	@ 0xc04
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	dc64      	bgt.n	8005076 <setting_key_options+0xe6>
 8004fac:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d020      	beq.n	8004ff6 <setting_key_options+0x66>
 8004fb4:	f640 4202 	movw	r2, #3074	@ 0xc02
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	dc5c      	bgt.n	8005076 <setting_key_options+0xe6>
 8004fbc:	f240 4206 	movw	r2, #1030	@ 0x406
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d054      	beq.n	800506e <setting_key_options+0xde>
 8004fc4:	f640 0206 	movw	r2, #2054	@ 0x806
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d028      	beq.n	800501e <setting_key_options+0x8e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8004fcc:	e053      	b.n	8005076 <setting_key_options+0xe6>
            cur_opt[SETTING]--;
 8004fce:	4b2d      	ldr	r3, [pc, #180]	@ (8005084 <setting_key_options+0xf4>)
 8004fd0:	7a1b      	ldrb	r3, [r3, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <setting_key_options+0xf4>)
 8004fd8:	721a      	strb	r2, [r3, #8]
            if(cur_opt[SETTING] == 0xff)
 8004fda:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <setting_key_options+0xf4>)
 8004fdc:	7a1b      	ldrb	r3, [r3, #8]
 8004fde:	2bff      	cmp	r3, #255	@ 0xff
 8004fe0:	d102      	bne.n	8004fe8 <setting_key_options+0x58>
                cur_opt[SETTING] = 4;
 8004fe2:	4b28      	ldr	r3, [pc, #160]	@ (8005084 <setting_key_options+0xf4>)
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	721a      	strb	r2, [r3, #8]
            page_opts_sethighlight(SETTING, cur_opt[SETTING]);
 8004fe8:	4b26      	ldr	r3, [pc, #152]	@ (8005084 <setting_key_options+0xf4>)
 8004fea:	7a1b      	ldrb	r3, [r3, #8]
 8004fec:	4619      	mov	r1, r3
 8004fee:	2008      	movs	r0, #8
 8004ff0:	f7ff fa3a 	bl	8004468 <page_opts_sethighlight>
        break;
 8004ff4:	e042      	b.n	800507c <setting_key_options+0xec>
            cur_opt[SETTING]++;
 8004ff6:	4b23      	ldr	r3, [pc, #140]	@ (8005084 <setting_key_options+0xf4>)
 8004ff8:	7a1b      	ldrb	r3, [r3, #8]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b21      	ldr	r3, [pc, #132]	@ (8005084 <setting_key_options+0xf4>)
 8005000:	721a      	strb	r2, [r3, #8]
            if(cur_opt[SETTING] == 5)
 8005002:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <setting_key_options+0xf4>)
 8005004:	7a1b      	ldrb	r3, [r3, #8]
 8005006:	2b05      	cmp	r3, #5
 8005008:	d102      	bne.n	8005010 <setting_key_options+0x80>
                cur_opt[SETTING] = 0;
 800500a:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <setting_key_options+0xf4>)
 800500c:	2200      	movs	r2, #0
 800500e:	721a      	strb	r2, [r3, #8]
            page_opts_sethighlight(SETTING, cur_opt[SETTING]);
 8005010:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <setting_key_options+0xf4>)
 8005012:	7a1b      	ldrb	r3, [r3, #8]
 8005014:	4619      	mov	r1, r3
 8005016:	2008      	movs	r0, #8
 8005018:	f7ff fa26 	bl	8004468 <page_opts_sethighlight>
        break;
 800501c:	e02e      	b.n	800507c <setting_key_options+0xec>
            if(cur_opt[SETTING] == 0)
 800501e:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <setting_key_options+0xf4>)
 8005020:	7a1b      	ldrb	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <setting_key_options+0x9e>
                HMISends("click b11,0\xff\xff\xff");
 8005026:	4818      	ldr	r0, [pc, #96]	@ (8005088 <setting_key_options+0xf8>)
 8005028:	f7fe ffbe 	bl	8003fa8 <HMISends>
        break;
 800502c:	e025      	b.n	800507a <setting_key_options+0xea>
            else if(cur_opt[SETTING] == 1)
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <setting_key_options+0xf4>)
 8005030:	7a1b      	ldrb	r3, [r3, #8]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d103      	bne.n	800503e <setting_key_options+0xae>
                HMISends("click b3,0\xff\xff\xff");
 8005036:	4815      	ldr	r0, [pc, #84]	@ (800508c <setting_key_options+0xfc>)
 8005038:	f7fe ffb6 	bl	8003fa8 <HMISends>
        break;
 800503c:	e01d      	b.n	800507a <setting_key_options+0xea>
            else if(cur_opt[SETTING] == 2)
 800503e:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <setting_key_options+0xf4>)
 8005040:	7a1b      	ldrb	r3, [r3, #8]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d103      	bne.n	800504e <setting_key_options+0xbe>
                HMISends("click b5,0\xff\xff\xff");
 8005046:	4812      	ldr	r0, [pc, #72]	@ (8005090 <setting_key_options+0x100>)
 8005048:	f7fe ffae 	bl	8003fa8 <HMISends>
        break;
 800504c:	e015      	b.n	800507a <setting_key_options+0xea>
            else if(cur_opt[SETTING] == 3)
 800504e:	4b0d      	ldr	r3, [pc, #52]	@ (8005084 <setting_key_options+0xf4>)
 8005050:	7a1b      	ldrb	r3, [r3, #8]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d103      	bne.n	800505e <setting_key_options+0xce>
                HMISends("click b7,0\xff\xff\xff");
 8005056:	480f      	ldr	r0, [pc, #60]	@ (8005094 <setting_key_options+0x104>)
 8005058:	f7fe ffa6 	bl	8003fa8 <HMISends>
        break;
 800505c:	e00d      	b.n	800507a <setting_key_options+0xea>
            else if(cur_opt[SETTING] == 4)
 800505e:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <setting_key_options+0xf4>)
 8005060:	7a1b      	ldrb	r3, [r3, #8]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d109      	bne.n	800507a <setting_key_options+0xea>
                HMISends("click b0,0\xff\xff\xff");
 8005066:	480c      	ldr	r0, [pc, #48]	@ (8005098 <setting_key_options+0x108>)
 8005068:	f7fe ff9e 	bl	8003fa8 <HMISends>
        break;
 800506c:	e005      	b.n	800507a <setting_key_options+0xea>
            HMISends("click b2,0\xff\xff\xff");
 800506e:	480b      	ldr	r0, [pc, #44]	@ (800509c <setting_key_options+0x10c>)
 8005070:	f7fe ff9a 	bl	8003fa8 <HMISends>
        break;
 8005074:	e002      	b.n	800507c <setting_key_options+0xec>
        default:break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <setting_key_options+0xec>
        break;
 800507a:	bf00      	nop
    }
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000089c 	.word	0x2000089c
 8005088:	0800e530 	.word	0x0800e530
 800508c:	0800e590 	.word	0x0800e590
 8005090:	0800e4d0 	.word	0x0800e4d0
 8005094:	0800e4f0 	.word	0x0800e4f0
 8005098:	0800e5c0 	.word	0x0800e5c0
 800509c:	0800e5a0 	.word	0x0800e5a0

080050a0 <longtxwave_key_options>:

void longtxwave_key_options(uint16_t key_value)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	f640 4204 	movw	r2, #3076	@ 0xc04
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01c      	beq.n	80050ee <longtxwave_key_options+0x4e>
 80050b4:	f640 4204 	movw	r2, #3076	@ 0xc04
 80050b8:	4293      	cmp	r3, r2
 80050ba:	dc1a      	bgt.n	80050f2 <longtxwave_key_options+0x52>
 80050bc:	f640 4202 	movw	r2, #3074	@ 0xc02
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <longtxwave_key_options+0x56>
 80050c4:	f640 4202 	movw	r2, #3074	@ 0xc02
 80050c8:	4293      	cmp	r3, r2
 80050ca:	dc12      	bgt.n	80050f2 <longtxwave_key_options+0x52>
 80050cc:	f240 4206 	movw	r2, #1030	@ 0x406
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d008      	beq.n	80050e6 <longtxwave_key_options+0x46>
 80050d4:	f640 0206 	movw	r2, #2054	@ 0x806
 80050d8:	4293      	cmp	r3, r2
 80050da:	d000      	beq.n	80050de <longtxwave_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 80050dc:	e009      	b.n	80050f2 <longtxwave_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 80050de:	4808      	ldr	r0, [pc, #32]	@ (8005100 <longtxwave_key_options+0x60>)
 80050e0:	f7fe ff62 	bl	8003fa8 <HMISends>
        break;
 80050e4:	e008      	b.n	80050f8 <longtxwave_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 80050e6:	4807      	ldr	r0, [pc, #28]	@ (8005104 <longtxwave_key_options+0x64>)
 80050e8:	f7fe ff5e 	bl	8003fa8 <HMISends>
        break;
 80050ec:	e004      	b.n	80050f8 <longtxwave_key_options+0x58>
        break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <longtxwave_key_options+0x58>
        default:break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <longtxwave_key_options+0x58>
        break;
 80050f6:	bf00      	nop
    }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	0800e5c0 	.word	0x0800e5c0
 8005104:	0800e5a0 	.word	0x0800e5a0

08005108 <longtxframe_key_options>:

void longtxframe_key_options(uint16_t key_value)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005118:	4293      	cmp	r3, r2
 800511a:	d01c      	beq.n	8005156 <longtxframe_key_options+0x4e>
 800511c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005120:	4293      	cmp	r3, r2
 8005122:	dc1a      	bgt.n	800515a <longtxframe_key_options+0x52>
 8005124:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <longtxframe_key_options+0x56>
 800512c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005130:	4293      	cmp	r3, r2
 8005132:	dc12      	bgt.n	800515a <longtxframe_key_options+0x52>
 8005134:	f240 4206 	movw	r2, #1030	@ 0x406
 8005138:	4293      	cmp	r3, r2
 800513a:	d008      	beq.n	800514e <longtxframe_key_options+0x46>
 800513c:	f640 0206 	movw	r2, #2054	@ 0x806
 8005140:	4293      	cmp	r3, r2
 8005142:	d000      	beq.n	8005146 <longtxframe_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8005144:	e009      	b.n	800515a <longtxframe_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 8005146:	4808      	ldr	r0, [pc, #32]	@ (8005168 <longtxframe_key_options+0x60>)
 8005148:	f7fe ff2e 	bl	8003fa8 <HMISends>
        break;
 800514c:	e008      	b.n	8005160 <longtxframe_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 800514e:	4807      	ldr	r0, [pc, #28]	@ (800516c <longtxframe_key_options+0x64>)
 8005150:	f7fe ff2a 	bl	8003fa8 <HMISends>
        break;
 8005154:	e004      	b.n	8005160 <longtxframe_key_options+0x58>
        break;
 8005156:	bf00      	nop
 8005158:	e002      	b.n	8005160 <longtxframe_key_options+0x58>
        default:break;
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <longtxframe_key_options+0x58>
        break;
 800515e:	bf00      	nop
    }
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	0800e5c0 	.word	0x0800e5c0
 800516c:	0800e5a0 	.word	0x0800e5a0

08005170 <simgletx_key_options>:

void simgletx_key_options(uint16_t key_value)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005180:	4293      	cmp	r3, r2
 8005182:	d01c      	beq.n	80051be <simgletx_key_options+0x4e>
 8005184:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005188:	4293      	cmp	r3, r2
 800518a:	dc1a      	bgt.n	80051c2 <simgletx_key_options+0x52>
 800518c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005190:	4293      	cmp	r3, r2
 8005192:	d018      	beq.n	80051c6 <simgletx_key_options+0x56>
 8005194:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005198:	4293      	cmp	r3, r2
 800519a:	dc12      	bgt.n	80051c2 <simgletx_key_options+0x52>
 800519c:	f240 4206 	movw	r2, #1030	@ 0x406
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d008      	beq.n	80051b6 <simgletx_key_options+0x46>
 80051a4:	f640 0206 	movw	r2, #2054	@ 0x806
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d000      	beq.n	80051ae <simgletx_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 80051ac:	e009      	b.n	80051c2 <simgletx_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 80051ae:	4808      	ldr	r0, [pc, #32]	@ (80051d0 <simgletx_key_options+0x60>)
 80051b0:	f7fe fefa 	bl	8003fa8 <HMISends>
        break;
 80051b4:	e008      	b.n	80051c8 <simgletx_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 80051b6:	4807      	ldr	r0, [pc, #28]	@ (80051d4 <simgletx_key_options+0x64>)
 80051b8:	f7fe fef6 	bl	8003fa8 <HMISends>
        break;
 80051bc:	e004      	b.n	80051c8 <simgletx_key_options+0x58>
        break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <simgletx_key_options+0x58>
        default:break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <simgletx_key_options+0x58>
        break;
 80051c6:	bf00      	nop
    }
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0800e5c0 	.word	0x0800e5c0
 80051d4:	0800e5a0 	.word	0x0800e5a0

080051d8 <simglerx_key_options>:

void simglerx_key_options(uint16_t key_value)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	f640 4204 	movw	r2, #3076	@ 0xc04
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01c      	beq.n	8005226 <simglerx_key_options+0x4e>
 80051ec:	f640 4204 	movw	r2, #3076	@ 0xc04
 80051f0:	4293      	cmp	r3, r2
 80051f2:	dc1a      	bgt.n	800522a <simglerx_key_options+0x52>
 80051f4:	f640 4202 	movw	r2, #3074	@ 0xc02
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <simglerx_key_options+0x56>
 80051fc:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005200:	4293      	cmp	r3, r2
 8005202:	dc12      	bgt.n	800522a <simglerx_key_options+0x52>
 8005204:	f240 4206 	movw	r2, #1030	@ 0x406
 8005208:	4293      	cmp	r3, r2
 800520a:	d008      	beq.n	800521e <simglerx_key_options+0x46>
 800520c:	f640 0206 	movw	r2, #2054	@ 0x806
 8005210:	4293      	cmp	r3, r2
 8005212:	d000      	beq.n	8005216 <simglerx_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 8005214:	e009      	b.n	800522a <simglerx_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 8005216:	4808      	ldr	r0, [pc, #32]	@ (8005238 <simglerx_key_options+0x60>)
 8005218:	f7fe fec6 	bl	8003fa8 <HMISends>
        break;
 800521c:	e008      	b.n	8005230 <simglerx_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 800521e:	4807      	ldr	r0, [pc, #28]	@ (800523c <simglerx_key_options+0x64>)
 8005220:	f7fe fec2 	bl	8003fa8 <HMISends>
        break;
 8005224:	e004      	b.n	8005230 <simglerx_key_options+0x58>
        break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <simglerx_key_options+0x58>
        default:break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <simglerx_key_options+0x58>
        break;
 800522e:	bf00      	nop
    }
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	0800e5c0 	.word	0x0800e5c0
 800523c:	0800e5a0 	.word	0x0800e5a0

08005240 <ranginginit_key_options>:

void ranginginit_key_options(uint16_t key_value)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005250:	4293      	cmp	r3, r2
 8005252:	d01c      	beq.n	800528e <ranginginit_key_options+0x4e>
 8005254:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005258:	4293      	cmp	r3, r2
 800525a:	dc1a      	bgt.n	8005292 <ranginginit_key_options+0x52>
 800525c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <ranginginit_key_options+0x56>
 8005264:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005268:	4293      	cmp	r3, r2
 800526a:	dc12      	bgt.n	8005292 <ranginginit_key_options+0x52>
 800526c:	f240 4206 	movw	r2, #1030	@ 0x406
 8005270:	4293      	cmp	r3, r2
 8005272:	d008      	beq.n	8005286 <ranginginit_key_options+0x46>
 8005274:	f640 0206 	movw	r2, #2054	@ 0x806
 8005278:	4293      	cmp	r3, r2
 800527a:	d000      	beq.n	800527e <ranginginit_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 800527c:	e009      	b.n	8005292 <ranginginit_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 800527e:	4808      	ldr	r0, [pc, #32]	@ (80052a0 <ranginginit_key_options+0x60>)
 8005280:	f7fe fe92 	bl	8003fa8 <HMISends>
        break;
 8005284:	e008      	b.n	8005298 <ranginginit_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 8005286:	4807      	ldr	r0, [pc, #28]	@ (80052a4 <ranginginit_key_options+0x64>)
 8005288:	f7fe fe8e 	bl	8003fa8 <HMISends>
        break;
 800528c:	e004      	b.n	8005298 <ranginginit_key_options+0x58>
        break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <ranginginit_key_options+0x58>
        default:break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <ranginginit_key_options+0x58>
        break;
 8005296:	bf00      	nop
    }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	0800e5c0 	.word	0x0800e5c0
 80052a4:	0800e5a0 	.word	0x0800e5a0

080052a8 <rangingresp_key_options>:

void rangingresp_key_options(uint16_t key_value)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	f640 4204 	movw	r2, #3076	@ 0xc04
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01c      	beq.n	80052f6 <rangingresp_key_options+0x4e>
 80052bc:	f640 4204 	movw	r2, #3076	@ 0xc04
 80052c0:	4293      	cmp	r3, r2
 80052c2:	dc1a      	bgt.n	80052fa <rangingresp_key_options+0x52>
 80052c4:	f640 4202 	movw	r2, #3074	@ 0xc02
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <rangingresp_key_options+0x56>
 80052cc:	f640 4202 	movw	r2, #3074	@ 0xc02
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dc12      	bgt.n	80052fa <rangingresp_key_options+0x52>
 80052d4:	f240 4206 	movw	r2, #1030	@ 0x406
 80052d8:	4293      	cmp	r3, r2
 80052da:	d008      	beq.n	80052ee <rangingresp_key_options+0x46>
 80052dc:	f640 0206 	movw	r2, #2054	@ 0x806
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d000      	beq.n	80052e6 <rangingresp_key_options+0x3e>
        case KEY_BACK:
        {
            HMISends("click b2,0\xff\xff\xff");
        }
        break;
        default:break;
 80052e4:	e009      	b.n	80052fa <rangingresp_key_options+0x52>
            HMISends("click b0,0\xff\xff\xff");
 80052e6:	4808      	ldr	r0, [pc, #32]	@ (8005308 <rangingresp_key_options+0x60>)
 80052e8:	f7fe fe5e 	bl	8003fa8 <HMISends>
        break;
 80052ec:	e008      	b.n	8005300 <rangingresp_key_options+0x58>
            HMISends("click b2,0\xff\xff\xff");
 80052ee:	4807      	ldr	r0, [pc, #28]	@ (800530c <rangingresp_key_options+0x64>)
 80052f0:	f7fe fe5a 	bl	8003fa8 <HMISends>
        break;
 80052f4:	e004      	b.n	8005300 <rangingresp_key_options+0x58>
        break;
 80052f6:	bf00      	nop
 80052f8:	e002      	b.n	8005300 <rangingresp_key_options+0x58>
        default:break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <rangingresp_key_options+0x58>
        break;
 80052fe:	bf00      	nop
    }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	0800e5c0 	.word	0x0800e5c0
 800530c:	0800e5a0 	.word	0x0800e5a0

08005310 <about_key_options>:
        default:break;
    }
}

void about_key_options(uint16_t key_value)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	80fb      	strh	r3, [r7, #6]
    switch(key_value)
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005320:	4293      	cmp	r3, r2
 8005322:	d014      	beq.n	800534e <about_key_options+0x3e>
 8005324:	f640 4204 	movw	r2, #3076	@ 0xc04
 8005328:	4293      	cmp	r3, r2
 800532a:	dc52      	bgt.n	80053d2 <about_key_options+0xc2>
 800532c:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005330:	4293      	cmp	r3, r2
 8005332:	d020      	beq.n	8005376 <about_key_options+0x66>
 8005334:	f640 4202 	movw	r2, #3074	@ 0xc02
 8005338:	4293      	cmp	r3, r2
 800533a:	dc4a      	bgt.n	80053d2 <about_key_options+0xc2>
 800533c:	f240 4206 	movw	r2, #1030	@ 0x406
 8005340:	4293      	cmp	r3, r2
 8005342:	d042      	beq.n	80053ca <about_key_options+0xba>
 8005344:	f640 0206 	movw	r2, #2054	@ 0x806
 8005348:	4293      	cmp	r3, r2
 800534a:	d028      	beq.n	800539e <about_key_options+0x8e>
        }
        break;
        case KEY_BACK:
            HMISends("page menu\xff\xff\xff");
        break;
        default:break;
 800534c:	e041      	b.n	80053d2 <about_key_options+0xc2>
            cur_opt[ABOUT]++;
 800534e:	4b24      	ldr	r3, [pc, #144]	@ (80053e0 <about_key_options+0xd0>)
 8005350:	7c1b      	ldrb	r3, [r3, #16]
 8005352:	3301      	adds	r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4b22      	ldr	r3, [pc, #136]	@ (80053e0 <about_key_options+0xd0>)
 8005358:	741a      	strb	r2, [r3, #16]
            if(cur_opt[ABOUT] == 2)
 800535a:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <about_key_options+0xd0>)
 800535c:	7c1b      	ldrb	r3, [r3, #16]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d102      	bne.n	8005368 <about_key_options+0x58>
                cur_opt[ABOUT] = 0;
 8005362:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <about_key_options+0xd0>)
 8005364:	2200      	movs	r2, #0
 8005366:	741a      	strb	r2, [r3, #16]
            page_opts_sethighlight(ABOUT, cur_opt[ABOUT]);
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <about_key_options+0xd0>)
 800536a:	7c1b      	ldrb	r3, [r3, #16]
 800536c:	4619      	mov	r1, r3
 800536e:	2010      	movs	r0, #16
 8005370:	f7ff f87a 	bl	8004468 <page_opts_sethighlight>
        break;
 8005374:	e030      	b.n	80053d8 <about_key_options+0xc8>
            cur_opt[ABOUT]--;
 8005376:	4b1a      	ldr	r3, [pc, #104]	@ (80053e0 <about_key_options+0xd0>)
 8005378:	7c1b      	ldrb	r3, [r3, #16]
 800537a:	3b01      	subs	r3, #1
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b18      	ldr	r3, [pc, #96]	@ (80053e0 <about_key_options+0xd0>)
 8005380:	741a      	strb	r2, [r3, #16]
            if(cur_opt[ABOUT] == 0xff)
 8005382:	4b17      	ldr	r3, [pc, #92]	@ (80053e0 <about_key_options+0xd0>)
 8005384:	7c1b      	ldrb	r3, [r3, #16]
 8005386:	2bff      	cmp	r3, #255	@ 0xff
 8005388:	d102      	bne.n	8005390 <about_key_options+0x80>
                cur_opt[ABOUT] = 1;
 800538a:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <about_key_options+0xd0>)
 800538c:	2201      	movs	r2, #1
 800538e:	741a      	strb	r2, [r3, #16]
            page_opts_sethighlight(ABOUT, cur_opt[ABOUT]);
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <about_key_options+0xd0>)
 8005392:	7c1b      	ldrb	r3, [r3, #16]
 8005394:	4619      	mov	r1, r3
 8005396:	2010      	movs	r0, #16
 8005398:	f7ff f866 	bl	8004468 <page_opts_sethighlight>
        break;
 800539c:	e01c      	b.n	80053d8 <about_key_options+0xc8>
            if(cur_opt[ABOUT] == 0)
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <about_key_options+0xd0>)
 80053a0:	7c1b      	ldrb	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <about_key_options+0xa4>
                language = ENGLISH;
 80053a6:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <about_key_options+0xd4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
                HMISends("click b1,0\xff\xff\xff");
 80053ac:	480e      	ldr	r0, [pc, #56]	@ (80053e8 <about_key_options+0xd8>)
 80053ae:	f7fe fdfb 	bl	8003fa8 <HMISends>
        break;
 80053b2:	e010      	b.n	80053d6 <about_key_options+0xc6>
            else if(cur_opt[ABOUT] == 1)
 80053b4:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <about_key_options+0xd0>)
 80053b6:	7c1b      	ldrb	r3, [r3, #16]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10c      	bne.n	80053d6 <about_key_options+0xc6>
                language = CHINESE;
 80053bc:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <about_key_options+0xd4>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
                HMISends("click b0,0\xff\xff\xff");
 80053c2:	480a      	ldr	r0, [pc, #40]	@ (80053ec <about_key_options+0xdc>)
 80053c4:	f7fe fdf0 	bl	8003fa8 <HMISends>
        break;
 80053c8:	e005      	b.n	80053d6 <about_key_options+0xc6>
            HMISends("page menu\xff\xff\xff");
 80053ca:	4809      	ldr	r0, [pc, #36]	@ (80053f0 <about_key_options+0xe0>)
 80053cc:	f7fe fdec 	bl	8003fa8 <HMISends>
        break;
 80053d0:	e002      	b.n	80053d8 <about_key_options+0xc8>
        default:break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <about_key_options+0xc8>
        break;
 80053d6:	bf00      	nop
    }
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	2000089c 	.word	0x2000089c
 80053e4:	200008ae 	.word	0x200008ae
 80053e8:	0800e5b0 	.word	0x0800e5b0
 80053ec:	0800e5c0 	.word	0x0800e5c0
 80053f0:	0800e660 	.word	0x0800e660

080053f4 <key_options>:

void key_options(uint16_t key_value)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
    if(hmi_page == MENU)
 80053fe:	4b40      	ldr	r3, [pc, #256]	@ (8005500 <key_options+0x10c>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d104      	bne.n	8005410 <key_options+0x1c>
        menu_key_options(key_value);
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff facd 	bl	80049a8 <menu_key_options>
        ranginginit_key_options(key_value);
    else if(hmi_page == RANGINGRESP)
        rangingresp_key_options(key_value);
    else if(hmi_page == ABOUT)
        about_key_options(key_value);
}
 800540e:	e073      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == LONGTXCHOOSE)
 8005410:	4b3b      	ldr	r3, [pc, #236]	@ (8005500 <key_options+0x10c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d104      	bne.n	8005422 <key_options+0x2e>
        longtxchoose_key_options(key_value);
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fb3e 	bl	8004a9c <longtxchoose_key_options>
}
 8005420:	e06a      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == SIMGLETXCHOOSE)
 8005422:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <key_options+0x10c>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d104      	bne.n	8005434 <key_options+0x40>
        simgletxchoose_key_options(key_value);
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fb9f 	bl	8004b70 <simgletxchoose_key_options>
}
 8005432:	e061      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == RANGINGCHOOSE)
 8005434:	4b32      	ldr	r3, [pc, #200]	@ (8005500 <key_options+0x10c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b05      	cmp	r3, #5
 800543a:	d104      	bne.n	8005446 <key_options+0x52>
        rangingchoose_key_options(key_value);
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fc00 	bl	8004c44 <rangingchoose_key_options>
}
 8005444:	e058      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == LOCATIONCHOOSE)
 8005446:	4b2e      	ldr	r3, [pc, #184]	@ (8005500 <key_options+0x10c>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b06      	cmp	r3, #6
 800544c:	d104      	bne.n	8005458 <key_options+0x64>
        locationchoose_key_options(key_value);
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fc61 	bl	8004d18 <locationchoose_key_options>
}
 8005456:	e04f      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == LOCA_ID_CHOOSE)
 8005458:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <key_options+0x10c>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b07      	cmp	r3, #7
 800545e:	d104      	bne.n	800546a <key_options+0x76>
        loca_id_choose_key_options(key_value);
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fcc2 	bl	8004dec <loca_id_choose_key_options>
}
 8005468:	e046      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == SETTING)
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <key_options+0x10c>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b08      	cmp	r3, #8
 8005470:	d104      	bne.n	800547c <key_options+0x88>
        setting_key_options(key_value);
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fd8b 	bl	8004f90 <setting_key_options>
}
 800547a:	e03d      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == LONGTXWAVE)
 800547c:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <key_options+0x10c>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b09      	cmp	r3, #9
 8005482:	d104      	bne.n	800548e <key_options+0x9a>
        longtxwave_key_options(key_value);
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fe0a 	bl	80050a0 <longtxwave_key_options>
}
 800548c:	e034      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == LONGTXFRAME)
 800548e:	4b1c      	ldr	r3, [pc, #112]	@ (8005500 <key_options+0x10c>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b0a      	cmp	r3, #10
 8005494:	d104      	bne.n	80054a0 <key_options+0xac>
        longtxframe_key_options(key_value);
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff fe35 	bl	8005108 <longtxframe_key_options>
}
 800549e:	e02b      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == SIMGLETX)
 80054a0:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <key_options+0x10c>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b0b      	cmp	r3, #11
 80054a6:	d104      	bne.n	80054b2 <key_options+0xbe>
        simgletx_key_options(key_value);
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fe60 	bl	8005170 <simgletx_key_options>
}
 80054b0:	e022      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == SIMGLERX)
 80054b2:	4b13      	ldr	r3, [pc, #76]	@ (8005500 <key_options+0x10c>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d104      	bne.n	80054c4 <key_options+0xd0>
        simglerx_key_options(key_value);
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fe8b 	bl	80051d8 <simglerx_key_options>
}
 80054c2:	e019      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == RANGINGINIT)
 80054c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <key_options+0x10c>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b0d      	cmp	r3, #13
 80054ca:	d104      	bne.n	80054d6 <key_options+0xe2>
        ranginginit_key_options(key_value);
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff feb6 	bl	8005240 <ranginginit_key_options>
}
 80054d4:	e010      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == RANGINGRESP)
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <key_options+0x10c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b0e      	cmp	r3, #14
 80054dc:	d104      	bne.n	80054e8 <key_options+0xf4>
        rangingresp_key_options(key_value);
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fee1 	bl	80052a8 <rangingresp_key_options>
}
 80054e6:	e007      	b.n	80054f8 <key_options+0x104>
    else if(hmi_page == ABOUT)
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <key_options+0x10c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d103      	bne.n	80054f8 <key_options+0x104>
        about_key_options(key_value);
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff0c 	bl	8005310 <about_key_options>
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	200000e4 	.word	0x200000e4

08005504 <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e010      	b.n	800553c <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	440b      	add	r3, r1
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	441a      	add	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b03      	cmp	r3, #3
 8005540:	ddeb      	ble.n	800551a <resp_msg_get_ts+0x16>
    }
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 800554e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 8005562:	463b      	mov	r3, r7
 8005564:	4618      	mov	r0, r3
 8005566:	f7fd f983 	bl	8002870 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 800556a:	2304      	movs	r3, #4
 800556c:	71fb      	strb	r3, [r7, #7]
 800556e:	e023      	b.n	80055b8 <get_tx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 8005570:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	020b      	lsls	r3, r1, #8
 800557e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005582:	0202      	lsls	r2, r0, #8
 8005584:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 8005588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558c:	3310      	adds	r3, #16
 800558e:	443b      	add	r3, r7
 8005590:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2200      	movs	r2, #0
 8005598:	461c      	mov	r4, r3
 800559a:	4615      	mov	r5, r2
 800559c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a0:	ea42 0804 	orr.w	r8, r2, r4
 80055a4:	ea43 0905 	orr.w	r9, r3, r5
 80055a8:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 80055ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	71fb      	strb	r3, [r7, #7]
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dad7      	bge.n	8005570 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 80055c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080055d0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 80055d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 80055e4:	463b      	mov	r3, r7
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd f950 	bl	800288c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80055ec:	2304      	movs	r3, #4
 80055ee:	71fb      	strb	r3, [r7, #7]
 80055f0:	e023      	b.n	800563a <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 80055f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	020b      	lsls	r3, r1, #8
 8005600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005604:	0202      	lsls	r2, r0, #8
 8005606:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	3310      	adds	r3, #16
 8005610:	443b      	add	r3, r7
 8005612:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2200      	movs	r2, #0
 800561a:	461c      	mov	r4, r3
 800561c:	4615      	mov	r5, r2
 800561e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005622:	ea42 0804 	orr.w	r8, r2, r4
 8005626:	ea43 0905 	orr.w	r9, r3, r5
 800562a:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 800562e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	71fb      	strb	r3, [r7, #7]
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	2b00      	cmp	r3, #0
 8005640:	dad7      	bge.n	80055f2 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8005642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005652 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
    uint8_t i;
    *ts = 0;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
 8005666:	e010      	b.n	800568a <final_msg_get_ts+0x38>
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	440b      	add	r3, r1
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	441a      	add	r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	3301      	adds	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d9eb      	bls.n	8005668 <final_msg_get_ts+0x16>
    }
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_set_ts(uint8_t *ts_field, uint64_t ts)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	75fb      	strb	r3, [r7, #23]
 80056ac:	e013      	b.n	80056d6 <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8_t)ts;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	783a      	ldrb	r2, [r7, #0]
 80056b6:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 80056b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	0a02      	lsrs	r2, r0, #8
 80056c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80056ca:	0a0b      	lsrs	r3, r1, #8
 80056cc:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	3301      	adds	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d9e8      	bls.n	80056ae <final_msg_set_ts+0x12>
    }
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <resp_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
 80056e8:	b4f0      	push	{r4, r5, r6, r7}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	75fb      	strb	r3, [r7, #23]
 80056f8:	e019      	b.n	800572e <resp_msg_set_ts+0x46>
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	00d9      	lsls	r1, r3, #3
 80056fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005702:	f1c1 0620 	rsb	r6, r1, #32
 8005706:	f1a1 0020 	sub.w	r0, r1, #32
 800570a:	fa22 f401 	lsr.w	r4, r2, r1
 800570e:	fa03 f606 	lsl.w	r6, r3, r6
 8005712:	4334      	orrs	r4, r6
 8005714:	fa23 f000 	lsr.w	r0, r3, r0
 8005718:	4304      	orrs	r4, r0
 800571a:	fa23 f501 	lsr.w	r5, r3, r1
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	b2e2      	uxtb	r2, r4
 8005726:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	3301      	adds	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d9e2      	bls.n	80056fa <resp_msg_set_ts+0x12>
    }
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bcf0      	pop	{r4, r5, r6, r7}
 800573e:	4770      	bx	lr

08005740 <rx_reset_count>:
static uint16_t frame_len = 0;
static uint16_t tx_cnt = 0;
static uint16_t rx_cnt = 0;
static char msg_str[17] = {0};
void rx_reset_count(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
    tx_cnt = 0;
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <rx_reset_count+0x18>)
 8005746:	2200      	movs	r2, #0
 8005748:	801a      	strh	r2, [r3, #0]
    rx_cnt = 0;
 800574a:	4b04      	ldr	r3, [pc, #16]	@ (800575c <rx_reset_count+0x1c>)
 800574c:	2200      	movs	r2, #0
 800574e:	801a      	strh	r2, [r3, #0]
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	20000936 	.word	0x20000936
 800575c:	20000938 	.word	0x20000938

08005760 <simple_rx_init>:

uint8_t simple_rx_init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8005764:	f000 fd70 	bl	8006248 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8005768:	2002      	movs	r0, #2
 800576a:	f000 fd46 	bl	80061fa <Sleep>
    flags.option_timeout = 1;
 800576e:	4b34      	ldr	r3, [pc, #208]	@ (8005840 <simple_rx_init+0xe0>)
 8005770:	2201      	movs	r2, #1
 8005772:	821a      	strh	r2, [r3, #16]
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8005774:	e015      	b.n	80057a2 <simple_rx_init+0x42>
    {
        hmi_recv();
 8005776:	f7fb fcc7 	bl	8001108 <hmi_recv>
        if(flags.option_timeout > 300)
 800577a:	4b31      	ldr	r3, [pc, #196]	@ (8005840 <simple_rx_init+0xe0>)
 800577c:	8a1b      	ldrh	r3, [r3, #16]
 800577e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005782:	d90e      	bls.n	80057a2 <simple_rx_init+0x42>
        {
            flags.option_timeout = 0;
 8005784:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <simple_rx_init+0xe0>)
 8005786:	2200      	movs	r2, #0
 8005788:	821a      	strh	r2, [r3, #16]
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 800578a:	482e      	ldr	r0, [pc, #184]	@ (8005844 <simple_rx_init+0xe4>)
 800578c:	f7fe fc0c 	bl	8003fa8 <HMISends>
            Sleep(1000);
 8005790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005794:	f000 fd31 	bl	80061fa <Sleep>
            HMISends("page menu\xff\xff\xff"); 
 8005798:	482b      	ldr	r0, [pc, #172]	@ (8005848 <simple_rx_init+0xe8>)
 800579a:	f7fe fc05 	bl	8003fa8 <HMISends>
            return 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	e04b      	b.n	800583a <simple_rx_init+0xda>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80057a2:	f7fd f8fd 	bl	80029a0 <dwt_checkidlerc>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0e4      	beq.n	8005776 <simple_rx_init+0x16>
        }
    };
    flags.option_timeout = 0;
 80057ac:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <simple_rx_init+0xe0>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	821a      	strh	r2, [r3, #16]
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 80057b2:	2000      	movs	r0, #0
 80057b4:	f7fc f9f2 	bl	8001b9c <dwt_initialise>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057be:	d10b      	bne.n	80057d8 <simple_rx_init+0x78>
    {
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 80057c0:	4822      	ldr	r0, [pc, #136]	@ (800584c <simple_rx_init+0xec>)
 80057c2:	f7fe fbf1 	bl	8003fa8 <HMISends>
        Sleep(1000); 
 80057c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057ca:	f000 fd16 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 80057ce:	481e      	ldr	r0, [pc, #120]	@ (8005848 <simple_rx_init+0xe8>)
 80057d0:	f7fe fbea 	bl	8003fa8 <HMISends>
        return 1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e030      	b.n	800583a <simple_rx_init+0xda>
    }

    /* Configure DW IC. */
    dwt_structs_init(SIMPLE_RX, &config, &Config_options);
 80057d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <simple_rx_init+0xf0>)
 80057da:	491e      	ldr	r1, [pc, #120]	@ (8005854 <simple_rx_init+0xf4>)
 80057dc:	2004      	movs	r0, #4
 80057de:	f7fb fecb 	bl	8001578 <dwt_structs_init>
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 80057e2:	481c      	ldr	r0, [pc, #112]	@ (8005854 <simple_rx_init+0xf4>)
 80057e4:	f7fc fc4e 	bl	8002084 <dwt_configure>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <simple_rx_init+0xa6>
    {
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 80057ee:	481a      	ldr	r0, [pc, #104]	@ (8005858 <simple_rx_init+0xf8>)
 80057f0:	f7fe fbda 	bl	8003fa8 <HMISends>
        Sleep(1000);
 80057f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057f8:	f000 fcff 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 80057fc:	4812      	ldr	r0, [pc, #72]	@ (8005848 <simple_rx_init+0xe8>)
 80057fe:	f7fe fbd3 	bl	8003fa8 <HMISends>
        return 1;
 8005802:	2301      	movs	r3, #1
 8005804:	e019      	b.n	800583a <simple_rx_init+0xda>
    }
    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&Config_options);
 8005806:	4812      	ldr	r0, [pc, #72]	@ (8005850 <simple_rx_init+0xf0>)
 8005808:	f7fc fb4c 	bl	8001ea4 <dwt_configuretxrf>
    
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 800580c:	2007      	movs	r0, #7
 800580e:	f7fc fb09 	bl	8001e24 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 8005812:	2000      	movs	r0, #0
 8005814:	f7fc faea 	bl	8001dec <dwt_setfinegraintxseq>

    dwt_setrxantennadelay(RX_ANT_DLY);
 8005818:	f244 0001 	movw	r0, #16385	@ 0x4001
 800581c:	f7fc ff04 	bl	8002628 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8005820:	f244 0001 	movw	r0, #16385	@ 0x4001
 8005824:	f7fc ff10 	bl	8002648 <dwt_settxantennadelay>
        
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK); 
 8005828:	2003      	movs	r0, #3
 800582a:	f7fd f8d1 	bl	80029d0 <dwt_setleds>
    
    HMISends("page simglerx\xff\xff\xff");
 800582e:	480b      	ldr	r0, [pc, #44]	@ (800585c <simple_rx_init+0xfc>)
 8005830:	f7fe fbba 	bl	8003fa8 <HMISends>
    rx_reset_count();
 8005834:	f7ff ff84 	bl	8005740 <rx_reset_count>
    return 0;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000744 	.word	0x20000744
 8005844:	0800e670 	.word	0x0800e670
 8005848:	0800e698 	.word	0x0800e698
 800584c:	0800e6a8 	.word	0x0800e6a8
 8005850:	20000110 	.word	0x20000110
 8005854:	200000e8 	.word	0x200000e8
 8005858:	0800e6d0 	.word	0x0800e6d0
 800585c:	0800e6f8 	.word	0x0800e6f8

08005860 <simple_rx>:
/**
 * Application entry point.
 */
void simple_rx(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
    /* Activate reception immediately. See NOTE 4 below. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE); 
 8005866:	2000      	movs	r0, #0
 8005868:	f7fd fa0e 	bl	8002c88 <dwt_rxenable>

    /* Poll until a frame is properly received or an error occurs. 
     * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
     * function to access it. */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR)))
 800586c:	e00e      	b.n	800588c <simple_rx+0x2c>
    {
        if(hmi_recv() == 1)
 800586e:	f7fb fc4b 	bl	8001108 <hmi_recv>
 8005872:	4603      	mov	r3, r0
 8005874:	2b01      	cmp	r3, #1
 8005876:	f000 80a9 	beq.w	80059cc <simple_rx+0x16c>
			return;
		if(flags.opt_1ms_flag == 10)
 800587a:	4b56      	ldr	r3, [pc, #344]	@ (80059d4 <simple_rx+0x174>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d104      	bne.n	800588c <simple_rx+0x2c>
		{
			flags.opt_1ms_flag = 0;
 8005882:	4b54      	ldr	r3, [pc, #336]	@ (80059d4 <simple_rx+0x174>)
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
			key_scan();
 8005888:	f7fe fbd4 	bl	8004034 <key_scan>
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_ERR)))
 800588c:	2100      	movs	r1, #0
 800588e:	2044      	movs	r0, #68	@ 0x44
 8005890:	f7fb fffd 	bl	800188e <dwt_read32bitoffsetreg>
 8005894:	4603      	mov	r3, r0
 8005896:	4a50      	ldr	r2, [pc, #320]	@ (80059d8 <simple_rx+0x178>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <simple_rx+0x178>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b4f      	ldr	r3, [pc, #316]	@ (80059dc <simple_rx+0x17c>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0e3      	beq.n	800586e <simple_rx+0xe>
		}
        //if(flags.key_value == KEY_BACK || flags.key_value == KEY_OK) return;
    };
    if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 80058a6:	4b4c      	ldr	r3, [pc, #304]	@ (80059d8 <simple_rx+0x178>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d07f      	beq.n	80059b2 <simple_rx+0x152>
    {
        /* A frame has been received, read it into the local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 80058b2:	2100      	movs	r1, #0
 80058b4:	204c      	movs	r0, #76	@ 0x4c
 80058b6:	f7fb ffea 	bl	800188e <dwt_read32bitoffsetreg>
 80058ba:	4603      	mov	r3, r0
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	4b46      	ldr	r3, [pc, #280]	@ (80059e0 <simple_rx+0x180>)
 80058c6:	801a      	strh	r2, [r3, #0]
        if (frame_len <= FRAME_LEN_MAX)
 80058c8:	4b45      	ldr	r3, [pc, #276]	@ (80059e0 <simple_rx+0x180>)
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ce:	d806      	bhi.n	80058de <simple_rx+0x7e>
        {
            dwt_readrxdata(rx_buffer, frame_len, 0);
 80058d0:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <simple_rx+0x180>)
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	2200      	movs	r2, #0
 80058d6:	4619      	mov	r1, r3
 80058d8:	4842      	ldr	r0, [pc, #264]	@ (80059e4 <simple_rx+0x184>)
 80058da:	f7fc ff47 	bl	800276c <dwt_readrxdata>
        }
        
        /* Clear good RX frame event in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 80058de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80058e2:	2100      	movs	r1, #0
 80058e4:	2044      	movs	r0, #68	@ 0x44
 80058e6:	f7fc f824 	bl	8001932 <dwt_write32bitoffsetreg>
        
        /* Validate the frame is the one expected as sent by "TX then wait for a response" example. */
        if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 80058ea:	4b3d      	ldr	r3, [pc, #244]	@ (80059e0 <simple_rx+0x180>)
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	2b0e      	cmp	r3, #14
 80058f0:	d164      	bne.n	80059bc <simple_rx+0x15c>
 80058f2:	4b3c      	ldr	r3, [pc, #240]	@ (80059e4 <simple_rx+0x184>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2bc5      	cmp	r3, #197	@ 0xc5
 80058f8:	d160      	bne.n	80059bc <simple_rx+0x15c>
 80058fa:	4b3a      	ldr	r3, [pc, #232]	@ (80059e4 <simple_rx+0x184>)
 80058fc:	7a9b      	ldrb	r3, [r3, #10]
 80058fe:	2b43      	cmp	r3, #67	@ 0x43
 8005900:	d15c      	bne.n	80059bc <simple_rx+0x15c>
 8005902:	4b38      	ldr	r3, [pc, #224]	@ (80059e4 <simple_rx+0x184>)
 8005904:	7adb      	ldrb	r3, [r3, #11]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d158      	bne.n	80059bc <simple_rx+0x15c>
        {
            rx_cnt++;
 800590a:	4b37      	ldr	r3, [pc, #220]	@ (80059e8 <simple_rx+0x188>)
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	4b35      	ldr	r3, [pc, #212]	@ (80059e8 <simple_rx+0x188>)
 8005914:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005916:	4b34      	ldr	r3, [pc, #208]	@ (80059e8 <simple_rx+0x188>)
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	4933      	ldr	r1, [pc, #204]	@ (80059ec <simple_rx+0x18c>)
 800591e:	4834      	ldr	r0, [pc, #208]	@ (80059f0 <simple_rx+0x190>)
 8005920:	f004 fe86 	bl	800a630 <siprintf>
            HMISends(msg_str);
 8005924:	4832      	ldr	r0, [pc, #200]	@ (80059f0 <simple_rx+0x190>)
 8005926:	f7fe fb3f 	bl	8003fa8 <HMISends>
            
            int i;

            /* Copy source address of blink in response destination address. */
            for (i = 0; i < 8; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	e00a      	b.n	8005946 <simple_rx+0xe6>
            {
                tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1c9a      	adds	r2, r3, #2
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3305      	adds	r3, #5
 8005938:	492a      	ldr	r1, [pc, #168]	@ (80059e4 <simple_rx+0x184>)
 800593a:	5c89      	ldrb	r1, [r1, r2]
 800593c:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <simple_rx+0x194>)
 800593e:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < 8; i++)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3301      	adds	r3, #1
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b07      	cmp	r3, #7
 800594a:	ddf1      	ble.n	8005930 <simple_rx+0xd0>
            }
            /* Write response frame data to DW IC and prepare transmission. See NOTE 6 below.*/
            dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 800594c:	2200      	movs	r2, #0
 800594e:	4929      	ldr	r1, [pc, #164]	@ (80059f4 <simple_rx+0x194>)
 8005950:	2015      	movs	r0, #21
 8005952:	f7fc fe8b 	bl	800266c <dwt_writetxdata>
            dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8005956:	2200      	movs	r2, #0
 8005958:	2100      	movs	r1, #0
 800595a:	2015      	movs	r0, #21
 800595c:	f7fc febe 	bl	80026dc <dwt_writetxfctrl>
            

            /* Send the response. */
            dwt_starttx(DWT_START_TX_IMMEDIATE);
 8005960:	2000      	movs	r0, #0
 8005962:	f7fd f8bd 	bl	8002ae0 <dwt_starttx>
            /* Poll DW IC until TX frame sent event set. */
            while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8005966:	bf00      	nop
 8005968:	2100      	movs	r1, #0
 800596a:	2044      	movs	r0, #68	@ 0x44
 800596c:	f7fb ff8f 	bl	800188e <dwt_read32bitoffsetreg>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f6      	beq.n	8005968 <simple_rx+0x108>
            { };
            tx_cnt++;
 800597a:	4b1f      	ldr	r3, [pc, #124]	@ (80059f8 <simple_rx+0x198>)
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	4b1d      	ldr	r3, [pc, #116]	@ (80059f8 <simple_rx+0x198>)
 8005984:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 8005986:	4b1c      	ldr	r3, [pc, #112]	@ (80059f8 <simple_rx+0x198>)
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	491b      	ldr	r1, [pc, #108]	@ (80059fc <simple_rx+0x19c>)
 800598e:	4818      	ldr	r0, [pc, #96]	@ (80059f0 <simple_rx+0x190>)
 8005990:	f004 fe4e 	bl	800a630 <siprintf>
            HMISends(msg_str);
 8005994:	4816      	ldr	r0, [pc, #88]	@ (80059f0 <simple_rx+0x190>)
 8005996:	f7fe fb07 	bl	8003fa8 <HMISends>
            /* Clear TX frame sent event. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 800599a:	2280      	movs	r2, #128	@ 0x80
 800599c:	2100      	movs	r1, #0
 800599e:	2044      	movs	r0, #68	@ 0x44
 80059a0:	f7fb ffc7 	bl	8001932 <dwt_write32bitoffsetreg>

            /* Increment the data frame sequence number (modulo 256). */
            tx_msg[DATA_FRAME_SN_IDX]++;
 80059a4:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <simple_rx+0x194>)
 80059a6:	789b      	ldrb	r3, [r3, #2]
 80059a8:	3301      	adds	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <simple_rx+0x194>)
 80059ae:	709a      	strb	r2, [r3, #2]
 80059b0:	e004      	b.n	80059bc <simple_rx+0x15c>
    }
    else
    {

        /* Clear RX error events in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 80059b2:	4a13      	ldr	r2, [pc, #76]	@ (8005a00 <simple_rx+0x1a0>)
 80059b4:	2100      	movs	r1, #0
 80059b6:	2044      	movs	r0, #68	@ 0x44
 80059b8:	f7fb ffbb 	bl	8001932 <dwt_write32bitoffsetreg>
    }
	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = SIMGLE_RX_RERUN_INTERVAL;
 80059bc:	4b05      	ldr	r3, [pc, #20]	@ (80059d4 <simple_rx+0x174>)
 80059be:	f240 32de 	movw	r2, #990	@ 0x3de
 80059c2:	815a      	strh	r2, [r3, #10]
    flags.time_to_allow_run = 1; /* start counting */
 80059c4:	4b03      	ldr	r3, [pc, #12]	@ (80059d4 <simple_rx+0x174>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	819a      	strh	r2, [r3, #12]
 80059ca:	e000      	b.n	80059ce <simple_rx+0x16e>
			return;
 80059cc:	bf00      	nop
}
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000744 	.word	0x20000744
 80059d8:	20000930 	.word	0x20000930
 80059dc:	2405d000 	.word	0x2405d000
 80059e0:	20000934 	.word	0x20000934
 80059e4:	200008b0 	.word	0x200008b0
 80059e8:	20000938 	.word	0x20000938
 80059ec:	0800e70c 	.word	0x0800e70c
 80059f0:	2000093c 	.word	0x2000093c
 80059f4:	200000f8 	.word	0x200000f8
 80059f8:	20000936 	.word	0x20000936
 80059fc:	0800e71c 	.word	0x0800e71c
 8005a00:	24059000 	.word	0x24059000

08005a04 <tx_reset_count>:
static uint16_t frame_len = 0;
static uint16_t tx_cnt = 0;
static uint16_t rx_cnt = 0;
static char msg_str[17] = {0};
void tx_reset_count(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
    tx_cnt = 0;
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <tx_reset_count+0x18>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	801a      	strh	r2, [r3, #0]
    rx_cnt = 0;
 8005a0e:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <tx_reset_count+0x1c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	801a      	strh	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	200009d6 	.word	0x200009d6
 8005a20:	200009d8 	.word	0x200009d8

08005a24 <simple_tx_init>:
uint8_t simple_tx_init(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8005a28:	f000 fc0e 	bl	8006248 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8005a2c:	2002      	movs	r0, #2
 8005a2e:	f000 fbe4 	bl	80061fa <Sleep>
    flags.option_timeout = 1;
 8005a32:	4b36      	ldr	r3, [pc, #216]	@ (8005b0c <simple_tx_init+0xe8>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	821a      	strh	r2, [r3, #16]
	
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8005a38:	e013      	b.n	8005a62 <simple_tx_init+0x3e>
    {
        if(flags.option_timeout > 300)
 8005a3a:	4b34      	ldr	r3, [pc, #208]	@ (8005b0c <simple_tx_init+0xe8>)
 8005a3c:	8a1b      	ldrh	r3, [r3, #16]
 8005a3e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005a42:	d90e      	bls.n	8005a62 <simple_tx_init+0x3e>
        {
            flags.option_timeout = 0;
 8005a44:	4b31      	ldr	r3, [pc, #196]	@ (8005b0c <simple_tx_init+0xe8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	821a      	strh	r2, [r3, #16]
            HMISends("loading.L1.txt=\"Init fail.IDLERC\"\xff\xff\xff");
 8005a4a:	4831      	ldr	r0, [pc, #196]	@ (8005b10 <simple_tx_init+0xec>)
 8005a4c:	f7fe faac 	bl	8003fa8 <HMISends>
            Sleep(1000);
 8005a50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a54:	f000 fbd1 	bl	80061fa <Sleep>
            HMISends("page menu\xff\xff\xff"); 
 8005a58:	482e      	ldr	r0, [pc, #184]	@ (8005b14 <simple_tx_init+0xf0>)
 8005a5a:	f7fe faa5 	bl	8003fa8 <HMISends>
            return 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e052      	b.n	8005b08 <simple_tx_init+0xe4>
    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8005a62:	f7fc ff9d 	bl	80029a0 <dwt_checkidlerc>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0e6      	beq.n	8005a3a <simple_tx_init+0x16>
        }
    };
    flags.option_timeout = 0;
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <simple_tx_init+0xe8>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	821a      	strh	r2, [r3, #16]
	
    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7fc f892 	bl	8001b9c <dwt_initialise>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	d10b      	bne.n	8005a98 <simple_tx_init+0x74>
    {
        HMISends("loading.L1.txt=\"Init fail.DWTINIT\"\xff\xff\xff");
 8005a80:	4825      	ldr	r0, [pc, #148]	@ (8005b18 <simple_tx_init+0xf4>)
 8005a82:	f7fe fa91 	bl	8003fa8 <HMISends>
        Sleep(1000); 
 8005a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a8a:	f000 fbb6 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 8005a8e:	4821      	ldr	r0, [pc, #132]	@ (8005b14 <simple_tx_init+0xf0>)
 8005a90:	f7fe fa8a 	bl	8003fa8 <HMISends>
        return 1;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e037      	b.n	8005b08 <simple_tx_init+0xe4>
    }

    /* Configure DW IC. See NOTE 8 below. */
    dwt_structs_init(SIMPLE_TX, &config, &Config_options);
 8005a98:	4a20      	ldr	r2, [pc, #128]	@ (8005b1c <simple_tx_init+0xf8>)
 8005a9a:	4921      	ldr	r1, [pc, #132]	@ (8005b20 <simple_tx_init+0xfc>)
 8005a9c:	2003      	movs	r0, #3
 8005a9e:	f7fb fd6b 	bl	8001578 <dwt_structs_init>
    if(dwt_configure(&config)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8005aa2:	481f      	ldr	r0, [pc, #124]	@ (8005b20 <simple_tx_init+0xfc>)
 8005aa4:	f7fc faee 	bl	8002084 <dwt_configure>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <simple_tx_init+0xa2>
    {
        HMISends("loading.L1.txt=\"Init fail.CONFIG\"\xff\xff\xff");
 8005aae:	481d      	ldr	r0, [pc, #116]	@ (8005b24 <simple_tx_init+0x100>)
 8005ab0:	f7fe fa7a 	bl	8003fa8 <HMISends>
        Sleep(1000);
 8005ab4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ab8:	f000 fb9f 	bl	80061fa <Sleep>
        HMISends("page menu\xff\xff\xff");
 8005abc:	4815      	ldr	r0, [pc, #84]	@ (8005b14 <simple_tx_init+0xf0>)
 8005abe:	f7fe fa73 	bl	8003fa8 <HMISends>
        return 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e020      	b.n	8005b08 <simple_tx_init+0xe4>
    }
    
	/* If the UWB3000F27 module is used, DWT_LNA_ENABLE and DWT_PA_ENABLE must be enabled; otherwise, the power amplifier circuit cannot be started */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE | DWT_TXRX_EN);
 8005ac6:	2007      	movs	r0, #7
 8005ac8:	f7fc f9ac 	bl	8001e24 <dwt_setlnapamode>
    dwt_setfinegraintxseq(0);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f7fc f98d 	bl	8001dec <dwt_setfinegraintxseq>
    
    dwt_setrxantennadelay(RX_ANT_DLY);
 8005ad2:	f244 0001 	movw	r0, #16385	@ 0x4001
 8005ad6:	f7fc fda7 	bl	8002628 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8005ada:	f244 0001 	movw	r0, #16385	@ 0x4001
 8005ade:	f7fc fdb3 	bl	8002648 <dwt_settxantennadelay>
    
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK) ;
 8005ae2:	2003      	movs	r0, #3
 8005ae4:	f7fc ff74 	bl	80029d0 <dwt_setleds>

    /* Configure the TX spectrum parameters (power PG delay and PG Count) */
    dwt_configuretxrf(&Config_options);
 8005ae8:	480c      	ldr	r0, [pc, #48]	@ (8005b1c <simple_tx_init+0xf8>)
 8005aea:	f7fc f9db 	bl	8001ea4 <dwt_configuretxrf>
    
    /* Set delay to turn reception on after transmission of the frame. See NOTE 3 below. */
    dwt_setrxaftertxdelay(TX_TO_RX_DELAY_UUS);
 8005aee:	203c      	movs	r0, #60	@ 0x3c
 8005af0:	f7fc ff38 	bl	8002964 <dwt_setrxaftertxdelay>

    /* Set response frame timeout. */
    dwt_setrxtimeout(RX_RESP_TO_UUS);
 8005af4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005af8:	f7fd f942 	bl	8002d80 <dwt_setrxtimeout>
	
    HMISends("page simgletx\xff\xff\xff");
 8005afc:	480a      	ldr	r0, [pc, #40]	@ (8005b28 <simple_tx_init+0x104>)
 8005afe:	f7fe fa53 	bl	8003fa8 <HMISends>
    tx_reset_count();
 8005b02:	f7ff ff7f 	bl	8005a04 <tx_reset_count>
    return 0;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000744 	.word	0x20000744
 8005b10:	0800e72c 	.word	0x0800e72c
 8005b14:	0800e754 	.word	0x0800e754
 8005b18:	0800e764 	.word	0x0800e764
 8005b1c:	2000013c 	.word	0x2000013c
 8005b20:	2000011c 	.word	0x2000011c
 8005b24:	0800e78c 	.word	0x0800e78c
 8005b28:	0800e7b4 	.word	0x0800e7b4

08005b2c <simple_tx>:
/**
 * Application entry point.
 */
void simple_tx(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
    /* Write frame data to DW3000 and prepare transmission. See NOTE 7 below. */
    dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8005b32:	2200      	movs	r2, #0
 8005b34:	4940      	ldr	r1, [pc, #256]	@ (8005c38 <simple_tx+0x10c>)
 8005b36:	200e      	movs	r0, #14
 8005b38:	f7fc fd98 	bl	800266c <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	200e      	movs	r0, #14
 8005b42:	f7fc fdcb 	bl	80026dc <dwt_writetxfctrl>

    tx_cnt++;
 8005b46:	4b3d      	ldr	r3, [pc, #244]	@ (8005c3c <simple_tx+0x110>)
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c3c <simple_tx+0x110>)
 8005b50:	801a      	strh	r2, [r3, #0]
    sprintf(msg_str, "simgletx.t1.txt=\"%d\"\xff\xff\xff", tx_cnt);
 8005b52:	4b3a      	ldr	r3, [pc, #232]	@ (8005c3c <simple_tx+0x110>)
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	4939      	ldr	r1, [pc, #228]	@ (8005c40 <simple_tx+0x114>)
 8005b5a:	483a      	ldr	r0, [pc, #232]	@ (8005c44 <simple_tx+0x118>)
 8005b5c:	f004 fd68 	bl	800a630 <siprintf>
    HMISends(msg_str);
 8005b60:	4838      	ldr	r0, [pc, #224]	@ (8005c44 <simple_tx+0x118>)
 8005b62:	f7fe fa21 	bl	8003fa8 <HMISends>
    

    /* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8005b66:	2002      	movs	r0, #2
 8005b68:	f7fc ffba 	bl	8002ae0 <dwt_starttx>
    /* We assume that the transmission is achieved normally, now poll for reception of a frame or error/timeout.*/
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8005b6c:	bf00      	nop
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2044      	movs	r0, #68	@ 0x44
 8005b72:	f7fb fe8c 	bl	800188e <dwt_read32bitoffsetreg>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a33      	ldr	r2, [pc, #204]	@ (8005c48 <simple_tx+0x11c>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <simple_tx+0x11c>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4b32      	ldr	r3, [pc, #200]	@ (8005c4c <simple_tx+0x120>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f2      	beq.n	8005b6e <simple_tx+0x42>
    { 
    };

    if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
 8005b88:	4b2f      	ldr	r3, [pc, #188]	@ (8005c48 <simple_tx+0x11c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d03a      	beq.n	8005c0a <simple_tx+0xde>
    {
        int i;

        /* Clear local RX buffer to avoid having leftovers from previous receptions. This is not necessary but is included here to aid reading
         * the RX buffer. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8005b94:	2300      	movs	r3, #0
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	e007      	b.n	8005baa <simple_tx+0x7e>
        {
            rx_buffer[i] = 0;
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <simple_tx+0x124>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b7e      	cmp	r3, #126	@ 0x7e
 8005bae:	ddf4      	ble.n	8005b9a <simple_tx+0x6e>
        }

        /* A frame has been received, copy it to our local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_BIT_MASK;
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	204c      	movs	r0, #76	@ 0x4c
 8005bb4:	f7fb fe6b 	bl	800188e <dwt_read32bitoffsetreg>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	4b24      	ldr	r3, [pc, #144]	@ (8005c54 <simple_tx+0x128>)
 8005bc4:	801a      	strh	r2, [r3, #0]
        if (frame_len <= FRAME_LEN_MAX)
 8005bc6:	4b23      	ldr	r3, [pc, #140]	@ (8005c54 <simple_tx+0x128>)
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bcc:	d816      	bhi.n	8005bfc <simple_tx+0xd0>
        {
            dwt_readrxdata(rx_buffer, frame_len, 0);
 8005bce:	4b21      	ldr	r3, [pc, #132]	@ (8005c54 <simple_tx+0x128>)
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	481e      	ldr	r0, [pc, #120]	@ (8005c50 <simple_tx+0x124>)
 8005bd8:	f7fc fdc8 	bl	800276c <dwt_readrxdata>
            rx_cnt++;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <simple_tx+0x12c>)
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c58 <simple_tx+0x12c>)
 8005be6:	801a      	strh	r2, [r3, #0]
            sprintf(msg_str, "simgletx.t2.txt=\"%d\"\xff\xff\xff", rx_cnt);
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <simple_tx+0x12c>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	491b      	ldr	r1, [pc, #108]	@ (8005c5c <simple_tx+0x130>)
 8005bf0:	4814      	ldr	r0, [pc, #80]	@ (8005c44 <simple_tx+0x118>)
 8005bf2:	f004 fd1d 	bl	800a630 <siprintf>
            HMISends(msg_str);
 8005bf6:	4813      	ldr	r0, [pc, #76]	@ (8005c44 <simple_tx+0x118>)
 8005bf8:	f7fe f9d6 	bl	8003fa8 <HMISends>
        }

        /* Clear good RX frame event in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8005bfc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c00:	2100      	movs	r1, #0
 8005c02:	2044      	movs	r0, #68	@ 0x44
 8005c04:	f7fb fe95 	bl	8001932 <dwt_write32bitoffsetreg>
 8005c08:	e004      	b.n	8005c14 <simple_tx+0xe8>
    }
    else
    {
        /* Clear RX error/timeout events in the DW3000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8005c0a:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <simple_tx+0x134>)
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	2044      	movs	r0, #68	@ 0x44
 8005c10:	f7fb fe8f 	bl	8001932 <dwt_write32bitoffsetreg>
    }

    /* Increment the blink frame sequence number (modulo 256). */
    tx_msg[BLINK_FRAME_SN_IDX]++;
 8005c14:	4b08      	ldr	r3, [pc, #32]	@ (8005c38 <simple_tx+0x10c>)
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <simple_tx+0x10c>)
 8005c1e:	705a      	strb	r2, [r3, #1]
	
	/* Changing the value of target_allow_run_time adjusts the interval (in ms) between runs of the example again */
    flags.target_allow_run_time = SIMGLE_TX_RERUN_INTERVAL;
 8005c20:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <simple_tx+0x138>)
 8005c22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c26:	815a      	strh	r2, [r3, #10]
    flags.time_to_allow_run = 1;	/* start counting */
 8005c28:	4b0e      	ldr	r3, [pc, #56]	@ (8005c64 <simple_tx+0x138>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	819a      	strh	r2, [r3, #12]
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000012c 	.word	0x2000012c
 8005c3c:	200009d6 	.word	0x200009d6
 8005c40:	0800e7c8 	.word	0x0800e7c8
 8005c44:	200009dc 	.word	0x200009dc
 8005c48:	200009d0 	.word	0x200009d0
 8005c4c:	2427d000 	.word	0x2427d000
 8005c50:	20000950 	.word	0x20000950
 8005c54:	200009d4 	.word	0x200009d4
 8005c58:	200009d8 	.word	0x200009d8
 8005c5c:	0800e7e0 	.word	0x0800e7e0
 8005c60:	24279000 	.word	0x24279000
 8005c64:	20000744 	.word	0x20000744

08005c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c6e:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	4a14      	ldr	r2, [pc, #80]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	6193      	str	r3, [r2, #24]
 8005c7a:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c90:	61d3      	str	r3, [r2, #28]
 8005c92:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <HAL_MspInit+0x5c>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <HAL_MspInit+0x60>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	4a04      	ldr	r2, [pc, #16]	@ (8005cc8 <HAL_MspInit+0x60>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40010000 	.word	0x40010000

08005ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	@ 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd4:	f107 0318 	add.w	r3, r7, #24
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a37      	ldr	r2, [pc, #220]	@ (8005dc4 <HAL_SPI_MspInit+0xf8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d130      	bne.n	8005d4e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005cec:	4b36      	ldr	r3, [pc, #216]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005cf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cf6:	6193      	str	r3, [r2, #24]
 8005cf8:	4b33      	ldr	r3, [pc, #204]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d04:	4b30      	ldr	r3, [pc, #192]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d0a:	f043 0304 	orr.w	r3, r3, #4
 8005d0e:	6193      	str	r3, [r2, #24]
 8005d10:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005d1c:	23a0      	movs	r3, #160	@ 0xa0
 8005d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d20:	2302      	movs	r3, #2
 8005d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d24:	2303      	movs	r3, #3
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d28:	f107 0318 	add.w	r3, r7, #24
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4827      	ldr	r0, [pc, #156]	@ (8005dcc <HAL_SPI_MspInit+0x100>)
 8005d30:	f000 fe1e 	bl	8006970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d40:	f107 0318 	add.w	r3, r7, #24
 8005d44:	4619      	mov	r1, r3
 8005d46:	4821      	ldr	r0, [pc, #132]	@ (8005dcc <HAL_SPI_MspInit+0x100>)
 8005d48:	f000 fe12 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005d4c:	e036      	b.n	8005dbc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_SPI_MspInit+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d131      	bne.n	8005dbc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d58:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d62:	61d3      	str	r3, [r2, #28]
 8005d64:	4b18      	ldr	r3, [pc, #96]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d70:	4b15      	ldr	r3, [pc, #84]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4a14      	ldr	r2, [pc, #80]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d76:	f043 0308 	orr.w	r3, r3, #8
 8005d7a:	6193      	str	r3, [r2, #24]
 8005d7c:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <HAL_SPI_MspInit+0xfc>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005d88:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d92:	2303      	movs	r3, #3
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d96:	f107 0318 	add.w	r3, r7, #24
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	480d      	ldr	r0, [pc, #52]	@ (8005dd4 <HAL_SPI_MspInit+0x108>)
 8005d9e:	f000 fde7 	bl	8006970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005da2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db0:	f107 0318 	add.w	r3, r7, #24
 8005db4:	4619      	mov	r1, r3
 8005db6:	4807      	ldr	r0, [pc, #28]	@ (8005dd4 <HAL_SPI_MspInit+0x108>)
 8005db8:	f000 fdda 	bl	8006970 <HAL_GPIO_Init>
}
 8005dbc:	bf00      	nop
 8005dbe:	3728      	adds	r7, #40	@ 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40013000 	.word	0x40013000
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40010800 	.word	0x40010800
 8005dd0:	40003800 	.word	0x40003800
 8005dd4:	40010c00 	.word	0x40010c00

08005dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e1c <HAL_TIM_Base_MspInit+0x44>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d113      	bne.n	8005e12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <HAL_TIM_Base_MspInit+0x48>)
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	4a0c      	ldr	r2, [pc, #48]	@ (8005e20 <HAL_TIM_Base_MspInit+0x48>)
 8005df0:	f043 0304 	orr.w	r3, r3, #4
 8005df4:	61d3      	str	r3, [r2, #28]
 8005df6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <HAL_TIM_Base_MspInit+0x48>)
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2100      	movs	r1, #0
 8005e06:	201e      	movs	r0, #30
 8005e08:	f000 fcc9 	bl	800679e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005e0c:	201e      	movs	r0, #30
 8005e0e:	f000 fce2 	bl	80067d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40021000 	.word	0x40021000

08005e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2c:	f107 0310 	add.w	r3, r7, #16
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	@ (8005ec0 <HAL_UART_MspInit+0x9c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d139      	bne.n	8005eb8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e44:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4a1e      	ldr	r2, [pc, #120]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e4e:	6193      	str	r3, [r2, #24]
 8005e50:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	4a18      	ldr	r2, [pc, #96]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e62:	f043 0304 	orr.w	r3, r3, #4
 8005e66:	6193      	str	r3, [r2, #24]
 8005e68:	4b16      	ldr	r3, [pc, #88]	@ (8005ec4 <HAL_UART_MspInit+0xa0>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e82:	f107 0310 	add.w	r3, r7, #16
 8005e86:	4619      	mov	r1, r3
 8005e88:	480f      	ldr	r0, [pc, #60]	@ (8005ec8 <HAL_UART_MspInit+0xa4>)
 8005e8a:	f000 fd71 	bl	8006970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9c:	f107 0310 	add.w	r3, r7, #16
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4809      	ldr	r0, [pc, #36]	@ (8005ec8 <HAL_UART_MspInit+0xa4>)
 8005ea4:	f000 fd64 	bl	8006970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	2025      	movs	r0, #37	@ 0x25
 8005eae:	f000 fc76 	bl	800679e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005eb2:	2025      	movs	r0, #37	@ 0x25
 8005eb4:	f000 fc8f 	bl	80067d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005eb8:	bf00      	nop
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40013800 	.word	0x40013800
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40010800 	.word	0x40010800

08005ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  while (1)
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <NMI_Handler+0x4>

08005ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  while (1)
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <HardFault_Handler+0x4>

08005edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  while (1)
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <MemManage_Handler+0x4>

08005ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
  while (1)
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <BusFault_Handler+0x4>

08005eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  while (1)
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <UsageFault_Handler+0x4>

08005ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
	time32_incr++;
 8005f1c:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <SysTick_Handler+0x18>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a03      	ldr	r2, [pc, #12]	@ (8005f30 <SysTick_Handler+0x18>)
 8005f24:	6013      	str	r3, [r2, #0]
	HAL_IncTick();
 8005f26:	f000 fb47 	bl	80065b8 <HAL_IncTick>
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200009f4 	.word	0x200009f4

08005f34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8005f38:	4802      	ldr	r0, [pc, #8]	@ (8005f44 <TIM4_IRQHandler+0x10>)
 8005f3a:	f002 fa47 	bl	80083cc <HAL_TIM_IRQHandler>
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	2000080c 	.word	0x2000080c

08005f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8005f4c:	4802      	ldr	r0, [pc, #8]	@ (8005f58 <USART1_IRQHandler+0x10>)
 8005f4e:	f002 fe91 	bl	8008c74 <HAL_UART_IRQHandler>
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000854 	.word	0x20000854

08005f5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    if(htim->Instance == htim4.Instance)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	4b2d      	ldr	r3, [pc, #180]	@ (8006020 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d151      	bne.n	8006014 <HAL_TIM_PeriodElapsedCallback+0xb8>
    {
        if(flags.opt_1ms_flag < 10)
 8005f70:	4b2c      	ldr	r3, [pc, #176]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	d805      	bhi.n	8005f84 <HAL_TIM_PeriodElapsedCallback+0x28>
            flags.opt_1ms_flag++;
 8005f78:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b28      	ldr	r3, [pc, #160]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f82:	701a      	strb	r2, [r3, #0]
        if(flags.key_presstime > 0)
 8005f84:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f86:	885b      	ldrh	r3, [r3, #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_TIM_PeriodElapsedCallback+0x3c>
            flags.key_presstime++;
 8005f8c:	4b25      	ldr	r3, [pc, #148]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f8e:	885b      	ldrh	r3, [r3, #2]
 8005f90:	3301      	adds	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	4b23      	ldr	r3, [pc, #140]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f96:	805a      	strh	r2, [r3, #2]

        if(flags.uart_recv_time > 0)
 8005f98:	4b22      	ldr	r3, [pc, #136]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005f9a:	799b      	ldrb	r3, [r3, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_TIM_PeriodElapsedCallback+0x50>
            flags.uart_recv_time++;
 8005fa0:	4b20      	ldr	r3, [pc, #128]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fa2:	799b      	ldrb	r3, [r3, #6]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005faa:	719a      	strb	r2, [r3, #6]
        if(flags.uart_recv_time > 10)
 8005fac:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fae:	799b      	ldrb	r3, [r3, #6]
 8005fb0:	2b0a      	cmp	r3, #10
 8005fb2:	d905      	bls.n	8005fc0 <HAL_TIM_PeriodElapsedCallback+0x64>
        {
            flags.uart_recv_time = 0;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	719a      	strb	r2, [r3, #6]
            flags.uart_recv = 1;
 8005fba:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	71da      	strb	r2, [r3, #7]
        }

        if(flags.time_to_allow_run > 0)
 8005fc0:	4b18      	ldr	r3, [pc, #96]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fc2:	899b      	ldrh	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d011      	beq.n	8005fec <HAL_TIM_PeriodElapsedCallback+0x90>
        {
            flags.time_to_allow_run++;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fca:	899b      	ldrh	r3, [r3, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fd2:	819a      	strh	r2, [r3, #12]
            if(flags.time_to_allow_run > flags.target_allow_run_time)
 8005fd4:	4b13      	ldr	r3, [pc, #76]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fd6:	899a      	ldrh	r2, [r3, #12]
 8005fd8:	4b12      	ldr	r3, [pc, #72]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fda:	895b      	ldrh	r3, [r3, #10]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d905      	bls.n	8005fec <HAL_TIM_PeriodElapsedCallback+0x90>
            {
                flags.time_to_allow_run = 0;
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	819a      	strh	r2, [r3, #12]
                flags.func_allow_run = 1;
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	721a      	strb	r2, [r3, #8]
            }
        }

        if(flags.option_timeout > 0)
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005fee:	8a1b      	ldrh	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_TIM_PeriodElapsedCallback+0xa4>
            flags.option_timeout++;
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005ff6:	8a1b      	ldrh	r3, [r3, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	4b09      	ldr	r3, [pc, #36]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005ffe:	821a      	strh	r2, [r3, #16]

        if(flags.ds_twr_timeout > 0)
 8006000:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8006002:	89db      	ldrh	r3, [r3, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_TIM_PeriodElapsedCallback+0xb8>
            flags.ds_twr_timeout++;
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800600a:	89db      	ldrh	r3, [r3, #14]
 800600c:	3301      	adds	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	4b04      	ldr	r3, [pc, #16]	@ (8006024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8006012:	81da      	strh	r2, [r3, #14]
    }
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2000080c 	.word	0x2000080c
 8006024:	20000744 	.word	0x20000744

08006028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return 1;
 800602c:	2301      	movs	r3, #1
}
 800602e:	4618      	mov	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <_kill>:

int _kill(int pid, int sig)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006040:	f004 fbbc 	bl	800a7bc <__errno>
 8006044:	4603      	mov	r3, r0
 8006046:	2216      	movs	r2, #22
 8006048:	601a      	str	r2, [r3, #0]
  return -1;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <_exit>:

void _exit (int status)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800605e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ffe7 	bl	8006036 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <_exit+0x12>

0800606c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e00a      	b.n	8006094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800607e:	f3af 8000 	nop.w
 8006082:	4601      	mov	r1, r0
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	60ba      	str	r2, [r7, #8]
 800608a:	b2ca      	uxtb	r2, r1
 800608c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	3301      	adds	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	dbf0      	blt.n	800607e <_read+0x12>
  }

  return len;
 800609c:	687b      	ldr	r3, [r7, #4]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b086      	sub	sp, #24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e009      	b.n	80060cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	60ba      	str	r2, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3301      	adds	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	dbf1      	blt.n	80060b8 <_write+0x12>
  }
  return len;
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <_close>:

int _close(int file)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006104:	605a      	str	r2, [r3, #4]
  return 0;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <_isatty>:

int _isatty(int file)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800611a:	2301      	movs	r3, #1
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
	...

08006140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <_sbrk+0x5c>)
 800614a:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <_sbrk+0x60>)
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006154:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <_sbrk+0x64>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800615c:	4b11      	ldr	r3, [pc, #68]	@ (80061a4 <_sbrk+0x64>)
 800615e:	4a12      	ldr	r2, [pc, #72]	@ (80061a8 <_sbrk+0x68>)
 8006160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <_sbrk+0x64>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	429a      	cmp	r2, r3
 800616e:	d207      	bcs.n	8006180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006170:	f004 fb24 	bl	800a7bc <__errno>
 8006174:	4603      	mov	r3, r0
 8006176:	220c      	movs	r2, #12
 8006178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800617e:	e009      	b.n	8006194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006180:	4b08      	ldr	r3, [pc, #32]	@ (80061a4 <_sbrk+0x64>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006186:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <_sbrk+0x64>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	4a05      	ldr	r2, [pc, #20]	@ (80061a4 <_sbrk+0x64>)
 8006190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20005000 	.word	0x20005000
 80061a0:	00000400 	.word	0x00000400
 80061a4:	200009f0 	.word	0x200009f0
 80061a8:	20000b48 	.word	0x20000b48

080061ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <portGetTickCnt>:
volatile unsigned long time32_incr;
/******************************************
*          Get Tick Count
*******************************************/
unsigned long portGetTickCnt(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
	return time32_incr;
 80061bc:	4b02      	ldr	r3, [pc, #8]	@ (80061c8 <portGetTickCnt+0x10>)
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	200009f4 	.word	0x200009f4

080061cc <sleep_ms>:

/******************************************
*   
*******************************************/
void sleep_ms(unsigned int time_ms)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	unsigned long end = portGetTickCnt() + time_ms;
 80061d4:	f7ff fff0 	bl	80061b8 <portGetTickCnt>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	while ((signed long)(portGetTickCnt() - end) <= 0)
 80061e0:	bf00      	nop
 80061e2:	f7ff ffe9 	bl	80061b8 <portGetTickCnt>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	ddf8      	ble.n	80061e2 <sleep_ms+0x16>
	    ;
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <Sleep>:

/******************************************
*          sleep functions
*******************************************/
void Sleep(uint32_t time_ms)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
	sleep_ms(time_ms);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff ffe2 	bl	80061cc <sleep_ms>
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <deca_usleep>:


void deca_usleep(unsigned int usec)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
    unsigned int i;

	usec*=12;
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	607b      	str	r3, [r7, #4]
	for(i=0;i<usec;i++)
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e003      	b.n	8006232 <deca_usleep+0x22>
	{
		__NOP();
 800622a:	bf00      	nop
	for(i=0;i<usec;i++)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3f7      	bcc.n	800622a <deca_usleep+0x1a>
	}
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
	...

08006248 <reset_DWIC>:

/******************************************
*             reset UWB
*******************************************/
void reset_DWIC(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    if(running_device == DEV_UWB3000F27)
 800624e:	4b2c      	ldr	r3, [pc, #176]	@ (8006300 <reset_DWIC+0xb8>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d126      	bne.n	80062a4 <reset_DWIC+0x5c>
    {
        // Enable GPIO used for DW3000 reset
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8006256:	2301      	movs	r3, #1
 8006258:	603b      	str	r3, [r7, #0]
        GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800625a:	2301      	movs	r3, #1
 800625c:	607b      	str	r3, [r7, #4]
        GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800625e:	2302      	movs	r3, #2
 8006260:	60bb      	str	r3, [r7, #8]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006262:	2303      	movs	r3, #3
 8006264:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006266:	463b      	mov	r3, r7
 8006268:	4619      	mov	r1, r3
 800626a:	4826      	ldr	r0, [pc, #152]	@ (8006304 <reset_DWIC+0xbc>)
 800626c:	f000 fb80 	bl	8006970 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, DW3000_RST_PIN, GPIO_PIN_RESET);
 8006270:	2200      	movs	r2, #0
 8006272:	2101      	movs	r1, #1
 8006274:	4823      	ldr	r0, [pc, #140]	@ (8006304 <reset_DWIC+0xbc>)
 8006276:	f000 fdbb 	bl	8006df0 <HAL_GPIO_WritePin>
        
        //drive the RSTn pin low
        HAL_GPIO_DeInit(GPIOA, DW3000_RST_PIN);
 800627a:	2101      	movs	r1, #1
 800627c:	4821      	ldr	r0, [pc, #132]	@ (8006304 <reset_DWIC+0xbc>)
 800627e:	f000 fcfb 	bl	8006c78 <HAL_GPIO_DeInit>
        //put the pin back to tri-state ... as input
        GPIO_InitStructure.Pin = DW3000_RST_PIN;
 8006282:	2301      	movs	r3, #1
 8006284:	603b      	str	r3, [r7, #0]
        GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800628e:	2303      	movs	r3, #3
 8006290:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8006292:	463b      	mov	r3, r7
 8006294:	4619      	mov	r1, r3
 8006296:	481b      	ldr	r0, [pc, #108]	@ (8006304 <reset_DWIC+0xbc>)
 8006298:	f000 fb6a 	bl	8006970 <HAL_GPIO_Init>
        Sleep(3);
 800629c:	2003      	movs	r0, #3
 800629e:	f7ff ffac 	bl	80061fa <Sleep>
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
        Sleep(3);
    }

}
 80062a2:	e029      	b.n	80062f8 <reset_DWIC+0xb0>
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 80062a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062a8:	603b      	str	r3, [r7, #0]
        GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80062aa:	2301      	movs	r3, #1
 80062ac:	607b      	str	r3, [r7, #4]
        GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80062ae:	2302      	movs	r3, #2
 80062b0:	60bb      	str	r3, [r7, #8]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80062b2:	2303      	movs	r3, #3
 80062b4:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80062b6:	463b      	mov	r3, r7
 80062b8:	4619      	mov	r1, r3
 80062ba:	4812      	ldr	r0, [pc, #72]	@ (8006304 <reset_DWIC+0xbc>)
 80062bc:	f000 fb58 	bl	8006970 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, DW3000_RST1_PIN, GPIO_PIN_RESET);
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062c6:	480f      	ldr	r0, [pc, #60]	@ (8006304 <reset_DWIC+0xbc>)
 80062c8:	f000 fd92 	bl	8006df0 <HAL_GPIO_WritePin>
        HAL_GPIO_DeInit(GPIOA, DW3000_RST1_PIN);
 80062cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062d0:	480c      	ldr	r0, [pc, #48]	@ (8006304 <reset_DWIC+0xbc>)
 80062d2:	f000 fcd1 	bl	8006c78 <HAL_GPIO_DeInit>
        GPIO_InitStructure.Pin = DW3000_RST1_PIN;
 80062d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062da:	603b      	str	r3, [r7, #0]
        GPIO_InitStructure.Pull = GPIO_NOPULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	60bb      	str	r3, [r7, #8]
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80062e0:	2300      	movs	r3, #0
 80062e2:	607b      	str	r3, [r7, #4]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80062e4:	2303      	movs	r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);    
 80062e8:	463b      	mov	r3, r7
 80062ea:	4619      	mov	r1, r3
 80062ec:	4805      	ldr	r0, [pc, #20]	@ (8006304 <reset_DWIC+0xbc>)
 80062ee:	f000 fb3f 	bl	8006970 <HAL_GPIO_Init>
        Sleep(3);
 80062f2:	2003      	movs	r0, #3
 80062f4:	f7ff ff81 	bl	80061fa <Sleep>
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	2000033c 	.word	0x2000033c
 8006304:	40010800 	.word	0x40010800

08006308 <writetospi_serial>:
int writetospi_serial( uint16_t headerLength,
			   	    const uint8_t *headerBuffer,
					uint32_t bodylength,
					const uint8_t *bodyBuffer
				  )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b0a0      	sub	sp, #128	@ 0x80
 800630c:	af00      	add	r7, sp, #0
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4603      	mov	r3, r0
 8006316:	81fb      	strh	r3, [r7, #14]
    int i, j;  

    uint8_t buf[100] = {0};
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	f107 0318 	add.w	r3, r7, #24
 8006320:	2260      	movs	r2, #96	@ 0x60
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f004 f9f6 	bl	800a716 <memset>
    for(i = 0; i < headerLength; i++)
 800632a:	2300      	movs	r3, #0
 800632c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800632e:	e00c      	b.n	800634a <writetospi_serial+0x42>
    {
        buf[i] = headerBuffer[i];
 8006330:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	7819      	ldrb	r1, [r3, #0]
 8006338:	f107 0214 	add.w	r2, r7, #20
 800633c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800633e:	4413      	add	r3, r2
 8006340:	460a      	mov	r2, r1
 8006342:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < headerLength; i++)
 8006344:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006346:	3301      	adds	r3, #1
 8006348:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800634a:	89fb      	ldrh	r3, [r7, #14]
 800634c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800634e:	429a      	cmp	r2, r3
 8006350:	dbee      	blt.n	8006330 <writetospi_serial+0x28>
    }
    for(j = 0; j < bodylength; j++)
 8006352:	2300      	movs	r3, #0
 8006354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006356:	e00d      	b.n	8006374 <writetospi_serial+0x6c>
    {
        buf[i+j] = bodyBuffer[j];
 8006358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	441a      	add	r2, r3
 800635e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006362:	440b      	add	r3, r1
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	3380      	adds	r3, #128	@ 0x80
 8006368:	443b      	add	r3, r7
 800636a:	f803 2c6c 	strb.w	r2, [r3, #-108]
    for(j = 0; j < bodylength; j++)
 800636e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006370:	3301      	adds	r3, #1
 8006372:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	429a      	cmp	r2, r3
 800637a:	d8ed      	bhi.n	8006358 <writetospi_serial+0x50>
    }
    if(running_device == DEV_UWB3000F27)
 800637c:	4b1c      	ldr	r3, [pc, #112]	@ (80063f0 <writetospi_serial+0xe8>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d117      	bne.n	80063b4 <writetospi_serial+0xac>
    {
        port_SPIx_set_chip_select();
 8006384:	2200      	movs	r2, #0
 8006386:	2110      	movs	r1, #16
 8006388:	481a      	ldr	r0, [pc, #104]	@ (80063f4 <writetospi_serial+0xec>)
 800638a:	f000 fd31 	bl	8006df0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, buf, i+j, 0xffff);
 800638e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006390:	b29a      	uxth	r2, r3
 8006392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006394:	b29b      	uxth	r3, r3
 8006396:	4413      	add	r3, r2
 8006398:	b29a      	uxth	r2, r3
 800639a:	f107 0114 	add.w	r1, r7, #20
 800639e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063a2:	4815      	ldr	r0, [pc, #84]	@ (80063f8 <writetospi_serial+0xf0>)
 80063a4:	f001 fa6c 	bl	8007880 <HAL_SPI_Transmit>
        port_SPIx_clear_chip_select();
 80063a8:	2201      	movs	r2, #1
 80063aa:	2110      	movs	r1, #16
 80063ac:	4811      	ldr	r0, [pc, #68]	@ (80063f4 <writetospi_serial+0xec>)
 80063ae:	f000 fd1f 	bl	8006df0 <HAL_GPIO_WritePin>
 80063b2:	e018      	b.n	80063e6 <writetospi_serial+0xde>
    }
    else
    {
        port_SPI2_set_chip_select();
 80063b4:	2200      	movs	r2, #0
 80063b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063ba:	4810      	ldr	r0, [pc, #64]	@ (80063fc <writetospi_serial+0xf4>)
 80063bc:	f000 fd18 	bl	8006df0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, buf, i+j, 0xffff);
 80063c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f107 0114 	add.w	r1, r7, #20
 80063d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063d4:	480a      	ldr	r0, [pc, #40]	@ (8006400 <writetospi_serial+0xf8>)
 80063d6:	f001 fa53 	bl	8007880 <HAL_SPI_Transmit>
        port_SPI2_clear_chip_select();
 80063da:	2201      	movs	r2, #1
 80063dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063e0:	4806      	ldr	r0, [pc, #24]	@ (80063fc <writetospi_serial+0xf4>)
 80063e2:	f000 fd05 	bl	8006df0 <HAL_GPIO_WritePin>
    }
    
    return 0;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3780      	adds	r7, #128	@ 0x80
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000033c 	.word	0x2000033c
 80063f4:	40010800 	.word	0x40010800
 80063f8:	2000075c 	.word	0x2000075c
 80063fc:	40010c00 	.word	0x40010c00
 8006400:	200007b4 	.word	0x200007b4

08006404 <readfromspi_serial>:

int readfromspi_serial( uint16_t	headerLength,
			    	 const uint8_t *headerBuffer,
					 uint32_t readlength,
					 uint8_t *readBuffer )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4603      	mov	r3, r0
 8006412:	81fb      	strh	r3, [r7, #14]
    if(running_device == DEV_UWB3000F27)
 8006414:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <readfromspi_serial+0x8c>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d119      	bne.n	8006450 <readfromspi_serial+0x4c>
    {
        port_SPIx_set_chip_select();
 800641c:	2200      	movs	r2, #0
 800641e:	2110      	movs	r1, #16
 8006420:	481c      	ldr	r0, [pc, #112]	@ (8006494 <readfromspi_serial+0x90>)
 8006422:	f000 fce5 	bl	8006df0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, (uint8_t*)headerBuffer, headerLength, 0xffff);
 8006426:	89fa      	ldrh	r2, [r7, #14]
 8006428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	481a      	ldr	r0, [pc, #104]	@ (8006498 <readfromspi_serial+0x94>)
 8006430:	f001 fa26 	bl	8007880 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, readBuffer, readlength, 0xffff);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	b29a      	uxth	r2, r3
 8006438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	4816      	ldr	r0, [pc, #88]	@ (8006498 <readfromspi_serial+0x94>)
 8006440:	f001 fb61 	bl	8007b06 <HAL_SPI_Receive>
        port_SPIx_clear_chip_select();
 8006444:	2201      	movs	r2, #1
 8006446:	2110      	movs	r1, #16
 8006448:	4812      	ldr	r0, [pc, #72]	@ (8006494 <readfromspi_serial+0x90>)
 800644a:	f000 fcd1 	bl	8006df0 <HAL_GPIO_WritePin>
 800644e:	e01a      	b.n	8006486 <readfromspi_serial+0x82>
    }
    else
    {
        port_SPI2_set_chip_select();
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006456:	4811      	ldr	r0, [pc, #68]	@ (800649c <readfromspi_serial+0x98>)
 8006458:	f000 fcca 	bl	8006df0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, (uint8_t*)headerBuffer, headerLength, 0xffff);
 800645c:	89fa      	ldrh	r2, [r7, #14]
 800645e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	480e      	ldr	r0, [pc, #56]	@ (80064a0 <readfromspi_serial+0x9c>)
 8006466:	f001 fa0b 	bl	8007880 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi2, readBuffer, readlength, 0xffff);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	b29a      	uxth	r2, r3
 800646e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	480a      	ldr	r0, [pc, #40]	@ (80064a0 <readfromspi_serial+0x9c>)
 8006476:	f001 fb46 	bl	8007b06 <HAL_SPI_Receive>
        port_SPI2_clear_chip_select();
 800647a:	2201      	movs	r2, #1
 800647c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006480:	4806      	ldr	r0, [pc, #24]	@ (800649c <readfromspi_serial+0x98>)
 8006482:	f000 fcb5 	bl	8006df0 <HAL_GPIO_WritePin>
    }
    return 0;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	2000033c 	.word	0x2000033c
 8006494:	40010800 	.word	0x40010800
 8006498:	2000075c 	.word	0x2000075c
 800649c:	40010c00 	.word	0x40010c00
 80064a0:	200007b4 	.word	0x200007b4

080064a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80064a4:	f7ff fe82 	bl	80061ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064a8:	480b      	ldr	r0, [pc, #44]	@ (80064d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80064aa:	490c      	ldr	r1, [pc, #48]	@ (80064dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80064ac:	4a0c      	ldr	r2, [pc, #48]	@ (80064e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80064ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064b0:	e002      	b.n	80064b8 <LoopCopyDataInit>

080064b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064b6:	3304      	adds	r3, #4

080064b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064bc:	d3f9      	bcc.n	80064b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064be:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80064c0:	4c09      	ldr	r4, [pc, #36]	@ (80064e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064c4:	e001      	b.n	80064ca <LoopFillZerobss>

080064c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064c8:	3204      	adds	r2, #4

080064ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064cc:	d3fb      	bcc.n	80064c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064ce:	f004 f97b 	bl	800a7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064d2:	f7fd fdf3 	bl	80040bc <main>
  bx lr
 80064d6:	4770      	bx	lr
  ldr r0, =_sdata
 80064d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064dc:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 80064e0:	0800ec84 	.word	0x0800ec84
  ldr r2, =_sbss
 80064e4:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80064e8:	20000b48 	.word	0x20000b48

080064ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064ec:	e7fe      	b.n	80064ec <ADC1_2_IRQHandler>
	...

080064f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064f4:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <HAL_Init+0x28>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a07      	ldr	r2, [pc, #28]	@ (8006518 <HAL_Init+0x28>)
 80064fa:	f043 0310 	orr.w	r3, r3, #16
 80064fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006500:	2003      	movs	r0, #3
 8006502:	f000 f941 	bl	8006788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006506:	200f      	movs	r0, #15
 8006508:	f000 f826 	bl	8006558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800650c:	f7ff fbac 	bl	8005c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40022000 	.word	0x40022000

0800651c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006520:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <HAL_DeInit+0x2c>)
 8006522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006526:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006528:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <HAL_DeInit+0x2c>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800652e:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <HAL_DeInit+0x2c>)
 8006530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006534:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8006536:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <HAL_DeInit+0x2c>)
 8006538:	2200      	movs	r2, #0
 800653a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800653c:	f000 f806 	bl	800654c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000

0800654c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006560:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <HAL_InitTick+0x54>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <HAL_InitTick+0x58>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800656e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f93b 	bl	80067f2 <HAL_SYSTICK_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e00e      	b.n	80065a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	d80a      	bhi.n	80065a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800658c:	2200      	movs	r2, #0
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006594:	f000 f903 	bl	800679e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006598:	4a06      	ldr	r2, [pc, #24]	@ (80065b4 <HAL_InitTick+0x5c>)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000148 	.word	0x20000148
 80065b0:	20000150 	.word	0x20000150
 80065b4:	2000014c 	.word	0x2000014c

080065b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <HAL_IncTick+0x1c>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <HAL_IncTick+0x20>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4413      	add	r3, r2
 80065c8:	4a03      	ldr	r2, [pc, #12]	@ (80065d8 <HAL_IncTick+0x20>)
 80065ca:	6013      	str	r3, [r2, #0]
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	20000150 	.word	0x20000150
 80065d8:	200009f8 	.word	0x200009f8

080065dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return uwTick;
 80065e0:	4b02      	ldr	r3, [pc, #8]	@ (80065ec <HAL_GetTick+0x10>)
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	200009f8 	.word	0x200009f8

080065f0 <__NVIC_SetPriorityGrouping>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006600:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800661c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006622:	4a04      	ldr	r2, [pc, #16]	@ (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	60d3      	str	r3, [r2, #12]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <__NVIC_GetPriorityGrouping>:
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800663c:	4b04      	ldr	r3, [pc, #16]	@ (8006650 <__NVIC_GetPriorityGrouping+0x18>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0307 	and.w	r3, r3, #7
}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_EnableIRQ>:
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	db0b      	blt.n	800667e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	4906      	ldr	r1, [pc, #24]	@ (8006688 <__NVIC_EnableIRQ+0x34>)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2001      	movs	r0, #1
 8006676:	fa00 f202 	lsl.w	r2, r0, r2
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	e000e100 	.word	0xe000e100

0800668c <__NVIC_SetPriority>:
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669c:	2b00      	cmp	r3, #0
 800669e:	db0a      	blt.n	80066b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	490c      	ldr	r1, [pc, #48]	@ (80066d8 <__NVIC_SetPriority+0x4c>)
 80066a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066aa:	0112      	lsls	r2, r2, #4
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	440b      	add	r3, r1
 80066b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80066b4:	e00a      	b.n	80066cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4908      	ldr	r1, [pc, #32]	@ (80066dc <__NVIC_SetPriority+0x50>)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	3b04      	subs	r3, #4
 80066c4:	0112      	lsls	r2, r2, #4
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	440b      	add	r3, r1
 80066ca:	761a      	strb	r2, [r3, #24]
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	e000e100 	.word	0xe000e100
 80066dc:	e000ed00 	.word	0xe000ed00

080066e0 <NVIC_EncodePriority>:
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	@ 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f1c3 0307 	rsb	r3, r3, #7
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	bf28      	it	cs
 80066fe:	2304      	movcs	r3, #4
 8006700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3304      	adds	r3, #4
 8006706:	2b06      	cmp	r3, #6
 8006708:	d902      	bls.n	8006710 <NVIC_EncodePriority+0x30>
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3b03      	subs	r3, #3
 800670e:	e000      	b.n	8006712 <NVIC_EncodePriority+0x32>
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	43da      	mvns	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	401a      	ands	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006728:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	43d9      	mvns	r1, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006738:	4313      	orrs	r3, r2
}
 800673a:	4618      	mov	r0, r3
 800673c:	3724      	adds	r7, #36	@ 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3b01      	subs	r3, #1
 8006750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006754:	d301      	bcc.n	800675a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006756:	2301      	movs	r3, #1
 8006758:	e00f      	b.n	800677a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800675a:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <SysTick_Config+0x40>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006762:	210f      	movs	r1, #15
 8006764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006768:	f7ff ff90 	bl	800668c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800676c:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <SysTick_Config+0x40>)
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006772:	4b04      	ldr	r3, [pc, #16]	@ (8006784 <SysTick_Config+0x40>)
 8006774:	2207      	movs	r2, #7
 8006776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	e000e010 	.word	0xe000e010

08006788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff2d 	bl	80065f0 <__NVIC_SetPriorityGrouping>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	4603      	mov	r3, r0
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067b0:	f7ff ff42 	bl	8006638 <__NVIC_GetPriorityGrouping>
 80067b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	6978      	ldr	r0, [r7, #20]
 80067bc:	f7ff ff90 	bl	80066e0 <NVIC_EncodePriority>
 80067c0:	4602      	mov	r2, r0
 80067c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ff5f 	bl	800668c <__NVIC_SetPriority>
}
 80067ce:	bf00      	nop
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	4603      	mov	r3, r0
 80067de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff ff35 	bl	8006654 <__NVIC_EnableIRQ>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ffa2 	bl	8006744 <SysTick_Config>
 8006800:	4603      	mov	r3, r0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d008      	beq.n	8006834 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2204      	movs	r2, #4
 8006826:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e020      	b.n	8006876 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 020e 	bic.w	r2, r2, #14
 8006842:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	2101      	movs	r1, #1
 800685e:	fa01 f202 	lsl.w	r2, r1, r2
 8006862:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d005      	beq.n	80068a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2204      	movs	r2, #4
 800689c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	e051      	b.n	8006948 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 020e 	bic.w	r2, r2, #14
 80068b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a22      	ldr	r2, [pc, #136]	@ (8006954 <HAL_DMA_Abort_IT+0xd4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d029      	beq.n	8006922 <HAL_DMA_Abort_IT+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a21      	ldr	r2, [pc, #132]	@ (8006958 <HAL_DMA_Abort_IT+0xd8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_Abort_IT+0x9e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <HAL_DMA_Abort_IT+0xdc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01a      	beq.n	8006918 <HAL_DMA_Abort_IT+0x98>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006960 <HAL_DMA_Abort_IT+0xe0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d012      	beq.n	8006912 <HAL_DMA_Abort_IT+0x92>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006964 <HAL_DMA_Abort_IT+0xe4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00a      	beq.n	800690c <HAL_DMA_Abort_IT+0x8c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006968 <HAL_DMA_Abort_IT+0xe8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d102      	bne.n	8006906 <HAL_DMA_Abort_IT+0x86>
 8006900:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006904:	e00e      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 8006906:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800690a:	e00b      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 800690c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006910:	e008      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 8006912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006916:	e005      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 8006918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800691c:	e002      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 800691e:	2310      	movs	r3, #16
 8006920:	e000      	b.n	8006924 <HAL_DMA_Abort_IT+0xa4>
 8006922:	2301      	movs	r3, #1
 8006924:	4a11      	ldr	r2, [pc, #68]	@ (800696c <HAL_DMA_Abort_IT+0xec>)
 8006926:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
    } 
  }
  return status;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40020008 	.word	0x40020008
 8006958:	4002001c 	.word	0x4002001c
 800695c:	40020030 	.word	0x40020030
 8006960:	40020044 	.word	0x40020044
 8006964:	40020058 	.word	0x40020058
 8006968:	4002006c 	.word	0x4002006c
 800696c:	40020000 	.word	0x40020000

08006970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006970:	b480      	push	{r7}
 8006972:	b08b      	sub	sp, #44	@ 0x2c
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800697e:	2300      	movs	r3, #0
 8006980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006982:	e169      	b.n	8006c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006984:	2201      	movs	r2, #1
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	4013      	ands	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	429a      	cmp	r2, r3
 800699e:	f040 8158 	bne.w	8006c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4a9a      	ldr	r2, [pc, #616]	@ (8006c10 <HAL_GPIO_Init+0x2a0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d05e      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069ac:	4a98      	ldr	r2, [pc, #608]	@ (8006c10 <HAL_GPIO_Init+0x2a0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d875      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069b2:	4a98      	ldr	r2, [pc, #608]	@ (8006c14 <HAL_GPIO_Init+0x2a4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d058      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069b8:	4a96      	ldr	r2, [pc, #600]	@ (8006c14 <HAL_GPIO_Init+0x2a4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d86f      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069be:	4a96      	ldr	r2, [pc, #600]	@ (8006c18 <HAL_GPIO_Init+0x2a8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d052      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069c4:	4a94      	ldr	r2, [pc, #592]	@ (8006c18 <HAL_GPIO_Init+0x2a8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d869      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069ca:	4a94      	ldr	r2, [pc, #592]	@ (8006c1c <HAL_GPIO_Init+0x2ac>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d04c      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069d0:	4a92      	ldr	r2, [pc, #584]	@ (8006c1c <HAL_GPIO_Init+0x2ac>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d863      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069d6:	4a92      	ldr	r2, [pc, #584]	@ (8006c20 <HAL_GPIO_Init+0x2b0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d046      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
 80069dc:	4a90      	ldr	r2, [pc, #576]	@ (8006c20 <HAL_GPIO_Init+0x2b0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d85d      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069e2:	2b12      	cmp	r3, #18
 80069e4:	d82a      	bhi.n	8006a3c <HAL_GPIO_Init+0xcc>
 80069e6:	2b12      	cmp	r3, #18
 80069e8:	d859      	bhi.n	8006a9e <HAL_GPIO_Init+0x12e>
 80069ea:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <HAL_GPIO_Init+0x80>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a6b 	.word	0x08006a6b
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a57 	.word	0x08006a57
 80069fc:	08006a99 	.word	0x08006a99
 8006a00:	08006a9f 	.word	0x08006a9f
 8006a04:	08006a9f 	.word	0x08006a9f
 8006a08:	08006a9f 	.word	0x08006a9f
 8006a0c:	08006a9f 	.word	0x08006a9f
 8006a10:	08006a9f 	.word	0x08006a9f
 8006a14:	08006a9f 	.word	0x08006a9f
 8006a18:	08006a9f 	.word	0x08006a9f
 8006a1c:	08006a9f 	.word	0x08006a9f
 8006a20:	08006a9f 	.word	0x08006a9f
 8006a24:	08006a9f 	.word	0x08006a9f
 8006a28:	08006a9f 	.word	0x08006a9f
 8006a2c:	08006a9f 	.word	0x08006a9f
 8006a30:	08006a9f 	.word	0x08006a9f
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	4a79      	ldr	r2, [pc, #484]	@ (8006c24 <HAL_GPIO_Init+0x2b4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a42:	e02c      	b.n	8006a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	623b      	str	r3, [r7, #32]
          break;
 8006a4a:	e029      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	3304      	adds	r3, #4
 8006a52:	623b      	str	r3, [r7, #32]
          break;
 8006a54:	e024      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	623b      	str	r3, [r7, #32]
          break;
 8006a5e:	e01f      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	330c      	adds	r3, #12
 8006a66:	623b      	str	r3, [r7, #32]
          break;
 8006a68:	e01a      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006a72:	2304      	movs	r3, #4
 8006a74:	623b      	str	r3, [r7, #32]
          break;
 8006a76:	e013      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d105      	bne.n	8006a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a80:	2308      	movs	r3, #8
 8006a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	611a      	str	r2, [r3, #16]
          break;
 8006a8a:	e009      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	615a      	str	r2, [r3, #20]
          break;
 8006a96:	e003      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	623b      	str	r3, [r7, #32]
          break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_GPIO_Init+0x130>
          break;
 8006a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2bff      	cmp	r3, #255	@ 0xff
 8006aa4:	d801      	bhi.n	8006aaa <HAL_GPIO_Init+0x13a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	e001      	b.n	8006aae <HAL_GPIO_Init+0x13e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2bff      	cmp	r3, #255	@ 0xff
 8006ab4:	d802      	bhi.n	8006abc <HAL_GPIO_Init+0x14c>
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	e002      	b.n	8006ac2 <HAL_GPIO_Init+0x152>
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	3b08      	subs	r3, #8
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	210f      	movs	r1, #15
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	431a      	orrs	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80b1 	beq.w	8006c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006af0:	4b4d      	ldr	r3, [pc, #308]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	4a4c      	ldr	r2, [pc, #304]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6193      	str	r3, [r2, #24]
 8006afc:	4b4a      	ldr	r3, [pc, #296]	@ (8006c28 <HAL_GPIO_Init+0x2b8>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b08:	4a48      	ldr	r2, [pc, #288]	@ (8006c2c <HAL_GPIO_Init+0x2bc>)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	089b      	lsrs	r3, r3, #2
 8006b0e:	3302      	adds	r3, #2
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	220f      	movs	r2, #15
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a40      	ldr	r2, [pc, #256]	@ (8006c30 <HAL_GPIO_Init+0x2c0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_GPIO_Init+0x1ec>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3f      	ldr	r2, [pc, #252]	@ (8006c34 <HAL_GPIO_Init+0x2c4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00d      	beq.n	8006b58 <HAL_GPIO_Init+0x1e8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8006c38 <HAL_GPIO_Init+0x2c8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <HAL_GPIO_Init+0x1e4>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3d      	ldr	r2, [pc, #244]	@ (8006c3c <HAL_GPIO_Init+0x2cc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_GPIO_Init+0x1e0>
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e006      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b50:	2304      	movs	r3, #4
 8006b52:	e004      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e002      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_GPIO_Init+0x1ee>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b60:	f002 0203 	and.w	r2, r2, #3
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	4093      	lsls	r3, r2
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006b6e:	492f      	ldr	r1, [pc, #188]	@ (8006c2c <HAL_GPIO_Init+0x2bc>)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	089b      	lsrs	r3, r3, #2
 8006b74:	3302      	adds	r3, #2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006b88:	4b2d      	ldr	r3, [pc, #180]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	492c      	ldr	r1, [pc, #176]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]
 8006b94:	e006      	b.n	8006ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b96:	4b2a      	ldr	r3, [pc, #168]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006b98:	689a      	ldr	r2, [r3, #8]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	4928      	ldr	r1, [pc, #160]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006bb0:	4b23      	ldr	r3, [pc, #140]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	4922      	ldr	r1, [pc, #136]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
 8006bbc:	e006      	b.n	8006bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006bbe:	4b20      	ldr	r3, [pc, #128]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	491e      	ldr	r1, [pc, #120]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4918      	ldr	r1, [pc, #96]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006be6:	4b16      	ldr	r3, [pc, #88]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	43db      	mvns	r3, r3
 8006bee:	4914      	ldr	r1, [pc, #80]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d021      	beq.n	8006c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c00:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	490e      	ldr	r1, [pc, #56]	@ (8006c40 <HAL_GPIO_Init+0x2d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
 8006c0c:	e021      	b.n	8006c52 <HAL_GPIO_Init+0x2e2>
 8006c0e:	bf00      	nop
 8006c10:	10320000 	.word	0x10320000
 8006c14:	10310000 	.word	0x10310000
 8006c18:	10220000 	.word	0x10220000
 8006c1c:	10210000 	.word	0x10210000
 8006c20:	10120000 	.word	0x10120000
 8006c24:	10110000 	.word	0x10110000
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40010800 	.word	0x40010800
 8006c34:	40010c00 	.word	0x40010c00
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006c44:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <HAL_GPIO_Init+0x304>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	4909      	ldr	r1, [pc, #36]	@ (8006c74 <HAL_GPIO_Init+0x304>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	3301      	adds	r3, #1
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f47f ae8e 	bne.w	8006984 <HAL_GPIO_Init+0x14>
  }
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	372c      	adds	r7, #44	@ 0x2c
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr
 8006c74:	40010400 	.word	0x40010400

08006c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b089      	sub	sp, #36	@ 0x24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006c86:	e09a      	b.n	8006dbe <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006c88:	2201      	movs	r2, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	4013      	ands	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 808d 	beq.w	8006db8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8006dd8 <HAL_GPIO_DeInit+0x160>)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	220f      	movs	r2, #15
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a46      	ldr	r2, [pc, #280]	@ (8006ddc <HAL_GPIO_DeInit+0x164>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <HAL_GPIO_DeInit+0x78>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a45      	ldr	r2, [pc, #276]	@ (8006de0 <HAL_GPIO_DeInit+0x168>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00d      	beq.n	8006cec <HAL_GPIO_DeInit+0x74>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a44      	ldr	r2, [pc, #272]	@ (8006de4 <HAL_GPIO_DeInit+0x16c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <HAL_GPIO_DeInit+0x70>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a43      	ldr	r2, [pc, #268]	@ (8006de8 <HAL_GPIO_DeInit+0x170>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d101      	bne.n	8006ce4 <HAL_GPIO_DeInit+0x6c>
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e006      	b.n	8006cf2 <HAL_GPIO_DeInit+0x7a>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	e004      	b.n	8006cf2 <HAL_GPIO_DeInit+0x7a>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e002      	b.n	8006cf2 <HAL_GPIO_DeInit+0x7a>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_GPIO_DeInit+0x7a>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	f002 0203 	and.w	r2, r2, #3
 8006cf8:	0092      	lsls	r2, r2, #2
 8006cfa:	4093      	lsls	r3, r2
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d132      	bne.n	8006d68 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006d02:	4b3a      	ldr	r3, [pc, #232]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	4938      	ldr	r1, [pc, #224]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006d10:	4b36      	ldr	r3, [pc, #216]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	4934      	ldr	r1, [pc, #208]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006d1e:	4b33      	ldr	r3, [pc, #204]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	4931      	ldr	r1, [pc, #196]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	43db      	mvns	r3, r3
 8006d34:	492d      	ldr	r1, [pc, #180]	@ (8006dec <HAL_GPIO_DeInit+0x174>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	220f      	movs	r2, #15
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006d4a:	4a23      	ldr	r2, [pc, #140]	@ (8006dd8 <HAL_GPIO_DeInit+0x160>)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	3302      	adds	r3, #2
 8006d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	43da      	mvns	r2, r3
 8006d5a:	481f      	ldr	r0, [pc, #124]	@ (8006dd8 <HAL_GPIO_DeInit+0x160>)
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	089b      	lsrs	r3, r3, #2
 8006d60:	400a      	ands	r2, r1
 8006d62:	3302      	adds	r3, #2
 8006d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2bff      	cmp	r3, #255	@ 0xff
 8006d6c:	d801      	bhi.n	8006d72 <HAL_GPIO_DeInit+0xfa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	e001      	b.n	8006d76 <HAL_GPIO_DeInit+0xfe>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2bff      	cmp	r3, #255	@ 0xff
 8006d7c:	d802      	bhi.n	8006d84 <HAL_GPIO_DeInit+0x10c>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	e002      	b.n	8006d8a <HAL_GPIO_DeInit+0x112>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	3b08      	subs	r3, #8
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	210f      	movs	r1, #15
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	2104      	movs	r1, #4
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	fa01 f303 	lsl.w	r3, r1, r3
 8006da4:	431a      	orrs	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	401a      	ands	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f47f af5e 	bne.w	8006c88 <HAL_GPIO_DeInit+0x10>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	3724      	adds	r7, #36	@ 0x24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40010800 	.word	0x40010800
 8006de0:	40010c00 	.word	0x40010c00
 8006de4:	40011000 	.word	0x40011000
 8006de8:	40011400 	.word	0x40011400
 8006dec:	40010400 	.word	0x40010400

08006df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	807b      	strh	r3, [r7, #2]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e00:	787b      	ldrb	r3, [r7, #1]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006e0c:	e003      	b.n	8006e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006e0e:	887b      	ldrh	r3, [r7, #2]
 8006e10:	041a      	lsls	r2, r3, #16
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006e26:	f7ff fbd9 	bl	80065dc <HAL_GetTick>
 8006e2a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e2c:	4b45      	ldr	r3, [pc, #276]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a44      	ldr	r2, [pc, #272]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3a:	f7ff fbcf 	bl	80065dc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e077      	b.n	8006f3c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8006e58:	4b3a      	ldr	r3, [pc, #232]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006e60:	4a38      	ldr	r2, [pc, #224]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006e68:	f7ff fbb8 	bl	80065dc <HAL_GetTick>
 8006e6c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8006e6e:	4b35      	ldr	r3, [pc, #212]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e76:	f7ff fbb1 	bl	80065dc <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e057      	b.n	8006f3c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 030c 	and.w	r3, r3, #12
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ee      	bne.n	8006e76 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006e98:	4b2b      	ldr	r3, [pc, #172]	@ (8006f48 <HAL_RCC_DeInit+0x128>)
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f4c <HAL_RCC_DeInit+0x12c>)
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <HAL_RCC_DeInit+0x130>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fb58 	bl	8006558 <HAL_InitTick>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e044      	b.n	8006f3c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006eb2:	f7ff fb93 	bl	80065dc <HAL_GetTick>
 8006eb6:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006eb8:	4b22      	ldr	r3, [pc, #136]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a21      	ldr	r2, [pc, #132]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ec2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7ff fb89 	bl	80065dc <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e031      	b.n	8006f3c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8006ee4:	4b17      	ldr	r3, [pc, #92]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006eea:	f7ff fb77 	bl	80065dc <HAL_GetTick>
 8006eee:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8006ef0:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006ef6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8006efa:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006efe:	f7ff fb6d 	bl	80065dc <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b64      	cmp	r3, #100	@ 0x64
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e015      	b.n	8006f3c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006f10:	4b0c      	ldr	r3, [pc, #48]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f0      	bne.n	8006efe <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006f1c:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a08      	ldr	r2, [pc, #32]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f26:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8006f28:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	4a05      	ldr	r2, [pc, #20]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f32:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8006f34:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <HAL_RCC_DeInit+0x124>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40021000 	.word	0x40021000
 8006f48:	20000148 	.word	0x20000148
 8006f4c:	007a1200 	.word	0x007a1200
 8006f50:	2000014c 	.word	0x2000014c

08006f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e272      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8087 	beq.w	8007082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f74:	4b92      	ldr	r3, [pc, #584]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 030c 	and.w	r3, r3, #12
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d00c      	beq.n	8006f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f80:	4b8f      	ldr	r3, [pc, #572]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 030c 	and.w	r3, r3, #12
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d112      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x5e>
 8006f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f98:	d10b      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9a:	4b89      	ldr	r3, [pc, #548]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d06c      	beq.n	8007080 <HAL_RCC_OscConfig+0x12c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d168      	bne.n	8007080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e24c      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x76>
 8006fbc:	4b80      	ldr	r3, [pc, #512]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e02e      	b.n	8007028 <HAL_RCC_OscConfig+0xd4>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x98>
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4b78      	ldr	r3, [pc, #480]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a77      	ldr	r2, [pc, #476]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e01d      	b.n	8007028 <HAL_RCC_OscConfig+0xd4>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0xbc>
 8006ff6:	4b72      	ldr	r3, [pc, #456]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a71      	ldr	r2, [pc, #452]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8006ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b6f      	ldr	r3, [pc, #444]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a6e      	ldr	r2, [pc, #440]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e00b      	b.n	8007028 <HAL_RCC_OscConfig+0xd4>
 8007010:	4b6b      	ldr	r3, [pc, #428]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a6a      	ldr	r2, [pc, #424]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	4b68      	ldr	r3, [pc, #416]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a67      	ldr	r2, [pc, #412]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d013      	beq.n	8007058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007030:	f7ff fad4 	bl	80065dc <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	e008      	b.n	800704a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007038:	f7ff fad0 	bl	80065dc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b64      	cmp	r3, #100	@ 0x64
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e200      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4b5d      	ldr	r3, [pc, #372]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCC_OscConfig+0xe4>
 8007056:	e014      	b.n	8007082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007058:	f7ff fac0 	bl	80065dc <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007060:	f7ff fabc 	bl	80065dc <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b64      	cmp	r3, #100	@ 0x64
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e1ec      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007072:	4b53      	ldr	r3, [pc, #332]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x10c>
 800707e:	e000      	b.n	8007082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d063      	beq.n	8007156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800708e:	4b4c      	ldr	r3, [pc, #304]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800709a:	4b49      	ldr	r3, [pc, #292]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d11c      	bne.n	80070e0 <HAL_RCC_OscConfig+0x18c>
 80070a6:	4b46      	ldr	r3, [pc, #280]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d116      	bne.n	80070e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b2:	4b43      	ldr	r3, [pc, #268]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_RCC_OscConfig+0x176>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d001      	beq.n	80070ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e1c0      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ca:	4b3d      	ldr	r3, [pc, #244]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4939      	ldr	r1, [pc, #228]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070de:	e03a      	b.n	8007156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d020      	beq.n	800712a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070e8:	4b36      	ldr	r3, [pc, #216]	@ (80071c4 <HAL_RCC_OscConfig+0x270>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7ff fa75 	bl	80065dc <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f6:	f7ff fa71 	bl	80065dc <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e1a1      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007108:	4b2d      	ldr	r3, [pc, #180]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007114:	4b2a      	ldr	r3, [pc, #168]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4927      	ldr	r1, [pc, #156]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]
 8007128:	e015      	b.n	8007156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712a:	4b26      	ldr	r3, [pc, #152]	@ (80071c4 <HAL_RCC_OscConfig+0x270>)
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007130:	f7ff fa54 	bl	80065dc <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007138:	f7ff fa50 	bl	80065dc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e180      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800714a:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d03a      	beq.n	80071d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800716a:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <HAL_RCC_OscConfig+0x274>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007170:	f7ff fa34 	bl	80065dc <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007178:	f7ff fa30 	bl	80065dc <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e160      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800718a:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <HAL_RCC_OscConfig+0x26c>)
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007196:	2001      	movs	r0, #1
 8007198:	f000 fad0 	bl	800773c <RCC_Delay>
 800719c:	e01c      	b.n	80071d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719e:	4b0a      	ldr	r3, [pc, #40]	@ (80071c8 <HAL_RCC_OscConfig+0x274>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071a4:	f7ff fa1a 	bl	80065dc <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071aa:	e00f      	b.n	80071cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ac:	f7ff fa16 	bl	80065dc <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d908      	bls.n	80071cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e146      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
 80071be:	bf00      	nop
 80071c0:	40021000 	.word	0x40021000
 80071c4:	42420000 	.word	0x42420000
 80071c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071cc:	4b92      	ldr	r3, [pc, #584]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e9      	bne.n	80071ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80a6 	beq.w	8007332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ea:	4b8b      	ldr	r3, [pc, #556]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071f6:	4b88      	ldr	r3, [pc, #544]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	4a87      	ldr	r2, [pc, #540]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80071fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007200:	61d3      	str	r3, [r2, #28]
 8007202:	4b85      	ldr	r3, [pc, #532]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007212:	4b82      	ldr	r3, [pc, #520]	@ (800741c <HAL_RCC_OscConfig+0x4c8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d118      	bne.n	8007250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800721e:	4b7f      	ldr	r3, [pc, #508]	@ (800741c <HAL_RCC_OscConfig+0x4c8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a7e      	ldr	r2, [pc, #504]	@ (800741c <HAL_RCC_OscConfig+0x4c8>)
 8007224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800722a:	f7ff f9d7 	bl	80065dc <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007232:	f7ff f9d3 	bl	80065dc <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b64      	cmp	r3, #100	@ 0x64
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e103      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007244:	4b75      	ldr	r3, [pc, #468]	@ (800741c <HAL_RCC_OscConfig+0x4c8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d106      	bne.n	8007266 <HAL_RCC_OscConfig+0x312>
 8007258:	4b6f      	ldr	r3, [pc, #444]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	4a6e      	ldr	r2, [pc, #440]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	6213      	str	r3, [r2, #32]
 8007264:	e02d      	b.n	80072c2 <HAL_RCC_OscConfig+0x36e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10c      	bne.n	8007288 <HAL_RCC_OscConfig+0x334>
 800726e:	4b6a      	ldr	r3, [pc, #424]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	4a69      	ldr	r2, [pc, #420]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6213      	str	r3, [r2, #32]
 800727a:	4b67      	ldr	r3, [pc, #412]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	4a66      	ldr	r2, [pc, #408]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	6213      	str	r3, [r2, #32]
 8007286:	e01c      	b.n	80072c2 <HAL_RCC_OscConfig+0x36e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b05      	cmp	r3, #5
 800728e:	d10c      	bne.n	80072aa <HAL_RCC_OscConfig+0x356>
 8007290:	4b61      	ldr	r3, [pc, #388]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	4a60      	ldr	r2, [pc, #384]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007296:	f043 0304 	orr.w	r3, r3, #4
 800729a:	6213      	str	r3, [r2, #32]
 800729c:	4b5e      	ldr	r3, [pc, #376]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	4a5d      	ldr	r2, [pc, #372]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	6213      	str	r3, [r2, #32]
 80072a8:	e00b      	b.n	80072c2 <HAL_RCC_OscConfig+0x36e>
 80072aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	4a5a      	ldr	r2, [pc, #360]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	6213      	str	r3, [r2, #32]
 80072b6:	4b58      	ldr	r3, [pc, #352]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	4a57      	ldr	r2, [pc, #348]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072bc:	f023 0304 	bic.w	r3, r3, #4
 80072c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d015      	beq.n	80072f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ca:	f7ff f987 	bl	80065dc <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7ff f983 	bl	80065dc <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e0b1      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ee      	beq.n	80072d2 <HAL_RCC_OscConfig+0x37e>
 80072f4:	e014      	b.n	8007320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f6:	f7ff f971 	bl	80065dc <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072fc:	e00a      	b.n	8007314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fe:	f7ff f96d 	bl	80065dc <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e09b      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007314:	4b40      	ldr	r3, [pc, #256]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1ee      	bne.n	80072fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d105      	bne.n	8007332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007326:	4b3c      	ldr	r3, [pc, #240]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	4a3b      	ldr	r2, [pc, #236]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800732c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8087 	beq.w	800744a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800733c:	4b36      	ldr	r3, [pc, #216]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f003 030c 	and.w	r3, r3, #12
 8007344:	2b08      	cmp	r3, #8
 8007346:	d061      	beq.n	800740c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d146      	bne.n	80073de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007350:	4b33      	ldr	r3, [pc, #204]	@ (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007356:	f7ff f941 	bl	80065dc <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735e:	f7ff f93d 	bl	80065dc <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e06d      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007370:	4b29      	ldr	r3, [pc, #164]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f0      	bne.n	800735e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007384:	d108      	bne.n	8007398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007386:	4b24      	ldr	r3, [pc, #144]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	4921      	ldr	r1, [pc, #132]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007394:	4313      	orrs	r3, r2
 8007396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007398:	4b1f      	ldr	r3, [pc, #124]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a19      	ldr	r1, [r3, #32]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	430b      	orrs	r3, r1
 80073aa:	491b      	ldr	r1, [pc, #108]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b6:	f7ff f911 	bl	80065dc <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073be:	f7ff f90d 	bl	80065dc <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e03d      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073d0:	4b11      	ldr	r3, [pc, #68]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x46a>
 80073dc:	e035      	b.n	800744a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e4:	f7ff f8fa 	bl	80065dc <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ec:	f7ff f8f6 	bl	80065dc <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e026      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073fe:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <HAL_RCC_OscConfig+0x4c4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x498>
 800740a:	e01e      	b.n	800744a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e019      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
 8007418:	40021000 	.word	0x40021000
 800741c:	40007000 	.word	0x40007000
 8007420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007424:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <HAL_RCC_OscConfig+0x500>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	429a      	cmp	r2, r3
 8007436:	d106      	bne.n	8007446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007442:	429a      	cmp	r2, r3
 8007444:	d001      	beq.n	800744a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40021000 	.word	0x40021000

08007458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0d0      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800746c:	4b6a      	ldr	r3, [pc, #424]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d910      	bls.n	800749c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747a:	4b67      	ldr	r3, [pc, #412]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f023 0207 	bic.w	r2, r3, #7
 8007482:	4965      	ldr	r1, [pc, #404]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	4313      	orrs	r3, r2
 8007488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800748a:	4b63      	ldr	r3, [pc, #396]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0b8      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d020      	beq.n	80074ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074b4:	4b59      	ldr	r3, [pc, #356]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a58      	ldr	r2, [pc, #352]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074cc:	4b53      	ldr	r3, [pc, #332]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4a52      	ldr	r2, [pc, #328]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80074d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d8:	4b50      	ldr	r3, [pc, #320]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	494d      	ldr	r1, [pc, #308]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d040      	beq.n	8007578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d107      	bne.n	800750e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fe:	4b47      	ldr	r3, [pc, #284]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d115      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e07f      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d107      	bne.n	8007526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007516:	4b41      	ldr	r3, [pc, #260]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e073      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007526:	4b3d      	ldr	r3, [pc, #244]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e06b      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007536:	4b39      	ldr	r3, [pc, #228]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f023 0203 	bic.w	r2, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4936      	ldr	r1, [pc, #216]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007544:	4313      	orrs	r3, r2
 8007546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007548:	f7ff f848 	bl	80065dc <HAL_GetTick>
 800754c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754e:	e00a      	b.n	8007566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007550:	f7ff f844 	bl	80065dc <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e053      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007566:	4b2d      	ldr	r3, [pc, #180]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 020c 	and.w	r2, r3, #12
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	429a      	cmp	r2, r3
 8007576:	d1eb      	bne.n	8007550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007578:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d210      	bcs.n	80075a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f023 0207 	bic.w	r2, r3, #7
 800758e:	4922      	ldr	r1, [pc, #136]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	4b20      	ldr	r3, [pc, #128]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e032      	b.n	800760e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075b4:	4b19      	ldr	r3, [pc, #100]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4916      	ldr	r1, [pc, #88]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075d2:	4b12      	ldr	r3, [pc, #72]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	490e      	ldr	r1, [pc, #56]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075e6:	f000 f821 	bl	800762c <HAL_RCC_GetSysClockFreq>
 80075ea:	4602      	mov	r2, r0
 80075ec:	4b0b      	ldr	r3, [pc, #44]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	490a      	ldr	r1, [pc, #40]	@ (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075f8:	5ccb      	ldrb	r3, [r1, r3]
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	4a09      	ldr	r2, [pc, #36]	@ (8007624 <HAL_RCC_ClockConfig+0x1cc>)
 8007600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007602:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <HAL_RCC_ClockConfig+0x1d0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe ffa6 	bl	8006558 <HAL_InitTick>

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40022000 	.word	0x40022000
 800761c:	40021000 	.word	0x40021000
 8007620:	0800e818 	.word	0x0800e818
 8007624:	20000148 	.word	0x20000148
 8007628:	2000014c 	.word	0x2000014c

0800762c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007646:	4b1e      	ldr	r3, [pc, #120]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b04      	cmp	r3, #4
 8007654:	d002      	beq.n	800765c <HAL_RCC_GetSysClockFreq+0x30>
 8007656:	2b08      	cmp	r3, #8
 8007658:	d003      	beq.n	8007662 <HAL_RCC_GetSysClockFreq+0x36>
 800765a:	e027      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800765c:	4b19      	ldr	r3, [pc, #100]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800765e:	613b      	str	r3, [r7, #16]
      break;
 8007660:	e027      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	0c9b      	lsrs	r3, r3, #18
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	4a17      	ldr	r2, [pc, #92]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800766c:	5cd3      	ldrb	r3, [r2, r3]
 800766e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d010      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	0c5b      	lsrs	r3, r3, #17
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	4a11      	ldr	r2, [pc, #68]	@ (80076cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007686:	5cd3      	ldrb	r3, [r2, r3]
 8007688:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a0d      	ldr	r2, [pc, #52]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800768e:	fb03 f202 	mul.w	r2, r3, r2
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e004      	b.n	80076a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a0c      	ldr	r2, [pc, #48]	@ (80076d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	613b      	str	r3, [r7, #16]
      break;
 80076aa:	e002      	b.n	80076b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076ac:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80076ae:	613b      	str	r3, [r7, #16]
      break;
 80076b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076b2:	693b      	ldr	r3, [r7, #16]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40021000 	.word	0x40021000
 80076c4:	00f42400 	.word	0x00f42400
 80076c8:	0800e830 	.word	0x0800e830
 80076cc:	0800e840 	.word	0x0800e840
 80076d0:	003d0900 	.word	0x003d0900
 80076d4:	007a1200 	.word	0x007a1200

080076d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076dc:	4b02      	ldr	r3, [pc, #8]	@ (80076e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr
 80076e8:	20000148 	.word	0x20000148

080076ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076f0:	f7ff fff2 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 80076f4:	4602      	mov	r2, r0
 80076f6:	4b05      	ldr	r3, [pc, #20]	@ (800770c <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	4903      	ldr	r1, [pc, #12]	@ (8007710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007702:	5ccb      	ldrb	r3, [r1, r3]
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007708:	4618      	mov	r0, r3
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40021000 	.word	0x40021000
 8007710:	0800e828 	.word	0x0800e828

08007714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007718:	f7ff ffde 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 800771c:	4602      	mov	r2, r0
 800771e:	4b05      	ldr	r3, [pc, #20]	@ (8007734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	0adb      	lsrs	r3, r3, #11
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	4903      	ldr	r1, [pc, #12]	@ (8007738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800772a:	5ccb      	ldrb	r3, [r1, r3]
 800772c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007730:	4618      	mov	r0, r3
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40021000 	.word	0x40021000
 8007738:	0800e828 	.word	0x0800e828

0800773c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007744:	4b0a      	ldr	r3, [pc, #40]	@ (8007770 <RCC_Delay+0x34>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a0a      	ldr	r2, [pc, #40]	@ (8007774 <RCC_Delay+0x38>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	0a5b      	lsrs	r3, r3, #9
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007758:	bf00      	nop
  }
  while (Delay --);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1e5a      	subs	r2, r3, #1
 800775e:	60fa      	str	r2, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f9      	bne.n	8007758 <RCC_Delay+0x1c>
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr
 8007770:	20000148 	.word	0x20000148
 8007774:	10624dd3 	.word	0x10624dd3

08007778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e076      	b.n	8007878 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d108      	bne.n	80077a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800779a:	d009      	beq.n	80077b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	61da      	str	r2, [r3, #28]
 80077a2:	e005      	b.n	80077b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fe fa7e 	bl	8005ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007834:	ea42 0103 	orr.w	r1, r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	0c1a      	lsrs	r2, r3, #16
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f002 0204 	and.w	r2, r2, #4
 8007856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69da      	ldr	r2, [r3, #28]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_SPI_Transmit+0x22>
 800789e:	2302      	movs	r3, #2
 80078a0:	e12d      	b.n	8007afe <HAL_SPI_Transmit+0x27e>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078aa:	f7fe fe97 	bl	80065dc <HAL_GetTick>
 80078ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
 80078c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078c4:	e116      	b.n	8007af4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_SPI_Transmit+0x52>
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078d6:	e10d      	b.n	8007af4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	88fa      	ldrh	r2, [r7, #6]
 80078f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800791e:	d10f      	bne.n	8007940 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800793e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d007      	beq.n	800795e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800795c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007966:	d14f      	bne.n	8007a08 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SPI_Transmit+0xf6>
 8007970:	8afb      	ldrh	r3, [r7, #22]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d142      	bne.n	80079fc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007986:	1c9a      	adds	r2, r3, #2
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800799a:	e02f      	b.n	80079fc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d112      	bne.n	80079d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	881a      	ldrh	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079ce:	e015      	b.n	80079fc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d0:	f7fe fe04 	bl	80065dc <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d803      	bhi.n	80079e8 <HAL_SPI_Transmit+0x168>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079e6:	d102      	bne.n	80079ee <HAL_SPI_Transmit+0x16e>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80079fa:	e07b      	b.n	8007af4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1ca      	bne.n	800799c <HAL_SPI_Transmit+0x11c>
 8007a06:	e050      	b.n	8007aaa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <HAL_SPI_Transmit+0x196>
 8007a10:	8afb      	ldrh	r3, [r7, #22]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d144      	bne.n	8007aa0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a3c:	e030      	b.n	8007aa0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d113      	bne.n	8007a74 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	7812      	ldrb	r2, [r2, #0]
 8007a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a72:	e015      	b.n	8007aa0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a74:	f7fe fdb2 	bl	80065dc <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d803      	bhi.n	8007a8c <HAL_SPI_Transmit+0x20c>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a8a:	d102      	bne.n	8007a92 <HAL_SPI_Transmit+0x212>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007a9e:	e029      	b.n	8007af4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1c9      	bne.n	8007a3e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fbcc 	bl	800824c <SPI_EndRxTxTransaction>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	77fb      	strb	r3, [r7, #31]
 8007aea:	e003      	b.n	8007af4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3720      	adds	r7, #32
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b088      	sub	sp, #32
 8007b0a:	af02      	add	r7, sp, #8
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007b26:	2302      	movs	r3, #2
 8007b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b2a:	e0fb      	b.n	8007d24 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b34:	d112      	bne.n	8007b5c <HAL_SPI_Receive+0x56>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10e      	bne.n	8007b5c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2204      	movs	r2, #4
 8007b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f8ef 	bl	8007d36 <HAL_SPI_TransmitReceive>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	e0e8      	b.n	8007d2e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_SPI_Receive+0x64>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e0e1      	b.n	8007d2e <HAL_SPI_Receive+0x228>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b72:	f7fe fd33 	bl	80065dc <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_SPI_Receive+0x7e>
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b88:	e0cc      	b.n	8007d24 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88fa      	ldrh	r2, [r7, #6]
 8007ba2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd0:	d10f      	bne.n	8007bf2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007bf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfc:	2b40      	cmp	r3, #64	@ 0x40
 8007bfe:	d007      	beq.n	8007c10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d16a      	bne.n	8007cee <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c18:	e032      	b.n	8007c80 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d115      	bne.n	8007c54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f103 020c 	add.w	r2, r3, #12
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c52:	e015      	b.n	8007c80 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c54:	f7fe fcc2 	bl	80065dc <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d803      	bhi.n	8007c6c <HAL_SPI_Receive+0x166>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6a:	d102      	bne.n	8007c72 <HAL_SPI_Receive+0x16c>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c7e:	e051      	b.n	8007d24 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1c7      	bne.n	8007c1a <HAL_SPI_Receive+0x114>
 8007c8a:	e035      	b.n	8007cf8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d113      	bne.n	8007cc2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cc0:	e015      	b.n	8007cee <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc2:	f7fe fc8b 	bl	80065dc <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d803      	bhi.n	8007cda <HAL_SPI_Receive+0x1d4>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_Receive+0x1da>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007cec:	e01a      	b.n	8007d24 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1c9      	bne.n	8007c8c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa53 	bl	80081a8 <SPI_EndRxTransaction>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
 8007d1a:	e003      	b.n	8007d24 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b08c      	sub	sp, #48	@ 0x30
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d44:	2301      	movs	r3, #1
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_SPI_TransmitReceive+0x26>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e198      	b.n	800808e <HAL_SPI_TransmitReceive+0x358>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d64:	f7fe fc3a 	bl	80065dc <HAL_GetTick>
 8007d68:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d7a:	887b      	ldrh	r3, [r7, #2]
 8007d7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d00f      	beq.n	8007da6 <HAL_SPI_TransmitReceive+0x70>
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d8c:	d107      	bne.n	8007d9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d103      	bne.n	8007d9e <HAL_SPI_TransmitReceive+0x68>
 8007d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d003      	beq.n	8007da6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007da4:	e16d      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_SPI_TransmitReceive+0x82>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <HAL_SPI_TransmitReceive+0x82>
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d103      	bne.n	8007dc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007dbe:	e160      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d003      	beq.n	8007dd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2205      	movs	r2, #5
 8007dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	887a      	ldrh	r2, [r7, #2]
 8007dea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	887a      	ldrh	r2, [r7, #2]
 8007df6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	887a      	ldrh	r2, [r7, #2]
 8007dfc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e14:	2b40      	cmp	r3, #64	@ 0x40
 8007e16:	d007      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e30:	d17c      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_SPI_TransmitReceive+0x10a>
 8007e3a:	8b7b      	ldrh	r3, [r7, #26]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d16a      	bne.n	8007f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e44:	881a      	ldrh	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e50:	1c9a      	adds	r2, r3, #2
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e64:	e057      	b.n	8007f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d11b      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x176>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <HAL_SPI_TransmitReceive+0x176>
 8007e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d113      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e88:	881a      	ldrh	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e94:	1c9a      	adds	r2, r3, #2
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d119      	bne.n	8007eee <HAL_SPI_TransmitReceive+0x1b8>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d014      	beq.n	8007eee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ece:	b292      	uxth	r2, r2
 8007ed0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed6:	1c9a      	adds	r2, r3, #2
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eea:	2301      	movs	r3, #1
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eee:	f7fe fb75 	bl	80065dc <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d80b      	bhi.n	8007f16 <HAL_SPI_TransmitReceive+0x1e0>
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f04:	d007      	beq.n	8007f16 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007f14:	e0b5      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1a2      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x130>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d19d      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x130>
 8007f2a:	e080      	b.n	800802e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x204>
 8007f34:	8b7b      	ldrh	r3, [r7, #26]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d16f      	bne.n	800801a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f60:	e05b      	b.n	800801a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d11c      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x274>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d017      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x274>
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d114      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	7812      	ldrb	r2, [r2, #0]
 8007f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d119      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x2b6>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d014      	beq.n	8007fec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fec:	f7fe faf6 	bl	80065dc <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d803      	bhi.n	8008004 <HAL_SPI_TransmitReceive+0x2ce>
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008002:	d102      	bne.n	800800a <HAL_SPI_TransmitReceive+0x2d4>
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008018:	e033      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800801e:	b29b      	uxth	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	d19e      	bne.n	8007f62 <HAL_SPI_TransmitReceive+0x22c>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d199      	bne.n	8007f62 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800802e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008030:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f90a 	bl	800824c <SPI_EndRxTxTransaction>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800804a:	e01a      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008078:	e003      	b.n	8008082 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800808a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800808e:	4618      	mov	r0, r3
 8008090:	3730      	adds	r7, #48	@ 0x30
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080a8:	f7fe fa98 	bl	80065dc <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080b8:	f7fe fa90 	bl	80065dc <HAL_GetTick>
 80080bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080be:	4b39      	ldr	r3, [pc, #228]	@ (80081a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	015b      	lsls	r3, r3, #5
 80080c4:	0d1b      	lsrs	r3, r3, #20
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	fb02 f303 	mul.w	r3, r2, r3
 80080cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ce:	e054      	b.n	800817a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080d6:	d050      	beq.n	800817a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080d8:	f7fe fa80 	bl	80065dc <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d902      	bls.n	80080ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d13d      	bne.n	800816a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008106:	d111      	bne.n	800812c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008110:	d004      	beq.n	800811c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800811a:	d107      	bne.n	800812c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800812a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008134:	d10f      	bne.n	8008156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e017      	b.n	800819a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3b01      	subs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4013      	ands	r3, r2
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	bf0c      	ite	eq
 800818a:	2301      	moveq	r3, #1
 800818c:	2300      	movne	r3, #0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	461a      	mov	r2, r3
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	429a      	cmp	r2, r3
 8008196:	d19b      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000148 	.word	0x20000148

080081a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081bc:	d111      	bne.n	80081e2 <SPI_EndRxTransaction+0x3a>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c6:	d004      	beq.n	80081d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d0:	d107      	bne.n	80081e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ea:	d117      	bne.n	800821c <SPI_EndRxTransaction+0x74>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f4:	d112      	bne.n	800821c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2200      	movs	r2, #0
 80081fe:	2101      	movs	r1, #1
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff ff49 	bl	8008098 <SPI_WaitFlagStateUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01a      	beq.n	8008242 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e013      	b.n	8008244 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	2180      	movs	r1, #128	@ 0x80
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff ff36 	bl	8008098 <SPI_WaitFlagStateUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e000      	b.n	8008244 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	2180      	movs	r1, #128	@ 0x80
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff ff18 	bl	8008098 <SPI_WaitFlagStateUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008272:	f043 0220 	orr.w	r2, r3, #32
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e000      	b.n	8008280 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e041      	b.n	800831e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fd fd92 	bl	8005dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f000 fa74 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d001      	beq.n	8008340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e03a      	b.n	80083b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <HAL_TIM_Base_Start_IT+0x98>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00e      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x58>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836a:	d009      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x58>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a14      	ldr	r2, [pc, #80]	@ (80083c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x58>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a13      	ldr	r2, [pc, #76]	@ (80083c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d111      	bne.n	80083a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b06      	cmp	r3, #6
 8008390:	d010      	beq.n	80083b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0201 	orr.w	r2, r2, #1
 80083a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a2:	e007      	b.n	80083b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr
 80083c0:	40012c00 	.word	0x40012c00
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800

080083cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d122      	bne.n	8008428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d11b      	bne.n	8008428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0202 	mvn.w	r2, #2
 80083f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9b4 	bl	800877c <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9a7 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9b6 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b04      	cmp	r3, #4
 8008434:	d122      	bne.n	800847c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b04      	cmp	r3, #4
 8008442:	d11b      	bne.n	800847c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0204 	mvn.w	r2, #4
 800844c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f98a 	bl	800877c <HAL_TIM_IC_CaptureCallback>
 8008468:	e005      	b.n	8008476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f97d 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f98c 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b08      	cmp	r3, #8
 8008488:	d122      	bne.n	80084d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b08      	cmp	r3, #8
 8008496:	d11b      	bne.n	80084d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0208 	mvn.w	r2, #8
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2204      	movs	r2, #4
 80084a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f960 	bl	800877c <HAL_TIM_IC_CaptureCallback>
 80084bc:	e005      	b.n	80084ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f953 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f962 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	f003 0310 	and.w	r3, r3, #16
 80084da:	2b10      	cmp	r3, #16
 80084dc:	d122      	bne.n	8008524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d11b      	bne.n	8008524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f06f 0210 	mvn.w	r2, #16
 80084f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2208      	movs	r2, #8
 80084fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f936 	bl	800877c <HAL_TIM_IC_CaptureCallback>
 8008510:	e005      	b.n	800851e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f929 	bl	800876a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f938 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10e      	bne.n	8008550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b01      	cmp	r3, #1
 800853e:	d107      	bne.n	8008550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0201 	mvn.w	r2, #1
 8008548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fd fd06 	bl	8005f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855a:	2b80      	cmp	r3, #128	@ 0x80
 800855c:	d10e      	bne.n	800857c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008568:	2b80      	cmp	r3, #128	@ 0x80
 800856a:	d107      	bne.n	800857c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa7b 	bl	8008a72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008586:	2b40      	cmp	r3, #64	@ 0x40
 8008588:	d10e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008594:	2b40      	cmp	r3, #64	@ 0x40
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f8fc 	bl	80087a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d10e      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d107      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0220 	mvn.w	r2, #32
 80085cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa46 	bl	8008a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_TIM_ConfigClockSource+0x1c>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e0b4      	b.n	8008762 <HAL_TIM_ConfigClockSource+0x186>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800861e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008630:	d03e      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0xd4>
 8008632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008636:	f200 8087 	bhi.w	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 800863a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863e:	f000 8086 	beq.w	800874e <HAL_TIM_ConfigClockSource+0x172>
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008646:	d87f      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008648:	2b70      	cmp	r3, #112	@ 0x70
 800864a:	d01a      	beq.n	8008682 <HAL_TIM_ConfigClockSource+0xa6>
 800864c:	2b70      	cmp	r3, #112	@ 0x70
 800864e:	d87b      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008650:	2b60      	cmp	r3, #96	@ 0x60
 8008652:	d050      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x11a>
 8008654:	2b60      	cmp	r3, #96	@ 0x60
 8008656:	d877      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008658:	2b50      	cmp	r3, #80	@ 0x50
 800865a:	d03c      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0xfa>
 800865c:	2b50      	cmp	r3, #80	@ 0x50
 800865e:	d873      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008660:	2b40      	cmp	r3, #64	@ 0x40
 8008662:	d058      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x13a>
 8008664:	2b40      	cmp	r3, #64	@ 0x40
 8008666:	d86f      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008668:	2b30      	cmp	r3, #48	@ 0x30
 800866a:	d064      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15a>
 800866c:	2b30      	cmp	r3, #48	@ 0x30
 800866e:	d86b      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008670:	2b20      	cmp	r3, #32
 8008672:	d060      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15a>
 8008674:	2b20      	cmp	r3, #32
 8008676:	d867      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d05c      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15a>
 800867c:	2b10      	cmp	r3, #16
 800867e:	d05a      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x15a>
 8008680:	e062      	b.n	8008748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008692:	f000 f968 	bl	8008966 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	609a      	str	r2, [r3, #8]
      break;
 80086ae:	e04f      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c0:	f000 f951 	bl	8008966 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086d2:	609a      	str	r2, [r3, #8]
      break;
 80086d4:	e03c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	461a      	mov	r2, r3
 80086e4:	f000 f8c8 	bl	8008878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2150      	movs	r1, #80	@ 0x50
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f91f 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80086f4:	e02c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008702:	461a      	mov	r2, r3
 8008704:	f000 f8e6 	bl	80088d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2160      	movs	r1, #96	@ 0x60
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f90f 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008714:	e01c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008722:	461a      	mov	r2, r3
 8008724:	f000 f8a8 	bl	8008878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2140      	movs	r1, #64	@ 0x40
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f8ff 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008734:	e00c      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f000 f8f6 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008746:	e003      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	e000      	b.n	8008750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800874e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
	...

080087b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a29      	ldr	r2, [pc, #164]	@ (800886c <TIM_Base_SetConfig+0xb8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00b      	beq.n	80087e4 <TIM_Base_SetConfig+0x30>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d2:	d007      	beq.n	80087e4 <TIM_Base_SetConfig+0x30>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <TIM_Base_SetConfig+0xbc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_Base_SetConfig+0x30>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a25      	ldr	r2, [pc, #148]	@ (8008874 <TIM_Base_SetConfig+0xc0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d108      	bne.n	80087f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1c      	ldr	r2, [pc, #112]	@ (800886c <TIM_Base_SetConfig+0xb8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00b      	beq.n	8008816 <TIM_Base_SetConfig+0x62>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008804:	d007      	beq.n	8008816 <TIM_Base_SetConfig+0x62>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a19      	ldr	r2, [pc, #100]	@ (8008870 <TIM_Base_SetConfig+0xbc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_Base_SetConfig+0x62>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a18      	ldr	r2, [pc, #96]	@ (8008874 <TIM_Base_SetConfig+0xc0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d108      	bne.n	8008828 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800881c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	4313      	orrs	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a07      	ldr	r2, [pc, #28]	@ (800886c <TIM_Base_SetConfig+0xb8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d103      	bne.n	800885c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	615a      	str	r2, [r3, #20]
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	40012c00 	.word	0x40012c00
 8008870:	40000400 	.word	0x40000400
 8008874:	40000800 	.word	0x40000800

08008878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f023 0201 	bic.w	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f023 030a 	bic.w	r3, r3, #10
 80088b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr

080088d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f023 0210 	bic.w	r2, r3, #16
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	031b      	lsls	r3, r3, #12
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4313      	orrs	r3, r2
 8008908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008910:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	621a      	str	r2, [r3, #32]
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	bc80      	pop	{r7}
 8008930:	4770      	bx	lr

08008932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	f043 0307 	orr.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008966:	b480      	push	{r7}
 8008968:	b087      	sub	sp, #28
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008980:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	021a      	lsls	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	431a      	orrs	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4313      	orrs	r3, r2
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	609a      	str	r2, [r3, #8]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e046      	b.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a16      	ldr	r2, [pc, #88]	@ (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a08:	d009      	beq.n	8008a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a12      	ldr	r2, [pc, #72]	@ (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a10      	ldr	r2, [pc, #64]	@ (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d10c      	bne.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800

08008a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr

08008a72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e042      	b.n	8008b1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fd f9ba 	bl	8005e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2224      	movs	r2, #36	@ 0x24
 8008ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fdc5 	bl	8009658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691a      	ldr	r2, [r3, #16]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695a      	ldr	r2, [r3, #20]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08a      	sub	sp, #40	@ 0x28
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d16d      	bne.n	8008c20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_UART_Transmit+0x2c>
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e066      	b.n	8008c22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2221      	movs	r2, #33	@ 0x21
 8008b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b62:	f7fd fd3b 	bl	80065dc <HAL_GetTick>
 8008b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	88fa      	ldrh	r2, [r7, #6]
 8008b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b7c:	d108      	bne.n	8008b90 <HAL_UART_Transmit+0x6c>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	e003      	b.n	8008b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b98:	e02a      	b.n	8008bf0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	@ 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fb14 	bl	80091d2 <UART_WaitOnFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e036      	b.n	8008c22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	3302      	adds	r3, #2
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e007      	b.n	8008be2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	3301      	adds	r3, #1
 8008be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1cf      	bne.n	8008b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2200      	movs	r2, #0
 8008c02:	2140      	movs	r1, #64	@ 0x40
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fae4 	bl	80091d2 <UART_WaitOnFlagUntilTimeout>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e006      	b.n	8008c22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	4613      	mov	r3, r2
 8008c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d112      	bne.n	8008c6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_UART_Receive_IT+0x26>
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e00b      	b.n	8008c6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c5a:	88fb      	ldrh	r3, [r7, #6]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fb24 	bl	80092ae <UART_Start_Receive_IT>
 8008c66:	4603      	mov	r3, r0
 8008c68:	e000      	b.n	8008c6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b0ba      	sub	sp, #232	@ 0xe8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
 8008cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc01 	bl	80094da <UART_Receive_IT>
      return;
 8008cd8:	e25b      	b.n	8009192 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80de 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
 8008ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80d1 	beq.w	8008ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
 8008d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d1a:	f043 0201 	orr.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
 8008d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d3e:	f043 0202 	orr.w	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
 8008d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d62:	f043 0204 	orr.w	r2, r3, #4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d011      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
 8008d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d92:	f043 0208 	orr.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 81f2 	beq.w	8009188 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb8c 	bl	80094da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bf14      	ite	ne
 8008dd0:	2301      	movne	r3, #1
 8008dd2:	2300      	moveq	r3, #0
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <HAL_UART_IRQHandler+0x17a>
 8008de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d04f      	beq.n	8008e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa96 	bl	8009320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d041      	beq.n	8008e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3314      	adds	r3, #20
 8008e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d9      	bne.n	8008e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d013      	beq.n	8008e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8009054 <HAL_UART_IRQHandler+0x3e0>)
 8008e5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fd fd0c 	bl	8006880 <HAL_DMA_Abort_IT>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00e      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f993 	bl	80091aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e00a      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f98f 	bl	80091aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	e006      	b.n	8008e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f98b 	bl	80091aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008e9a:	e175      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	bf00      	nop
    return;
 8008e9e:	e173      	b.n	8009188 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	f040 814f 	bne.w	8009148 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8148 	beq.w	8009148 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8141 	beq.w	8009148 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80b6 	beq.w	8009058 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8145 	beq.w	800918c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f080 813e 	bcs.w	800918c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	f000 8088 	beq.w	8009034 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f50:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1d9      	bne.n	8008f24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3314      	adds	r3, #20
 8008f76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f82:	f023 0301 	bic.w	r3, r3, #1
 8008f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3314      	adds	r3, #20
 8008f90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e1      	bne.n	8008f70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3314      	adds	r3, #20
 8008fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e3      	bne.n	8008fac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	330c      	adds	r3, #12
 8008ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009004:	f023 0310 	bic.w	r3, r3, #16
 8009008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	330c      	adds	r3, #12
 8009012:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009016:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009018:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800901c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e3      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	4618      	mov	r0, r3
 8009030:	f7fd fbeb 	bl	800680a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009042:	b29b      	uxth	r3, r3
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	b29b      	uxth	r3, r3
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8b6 	bl	80091bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009050:	e09c      	b.n	800918c <HAL_UART_IRQHandler+0x518>
 8009052:	bf00      	nop
 8009054:	080093e5 	.word	0x080093e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009060:	b29b      	uxth	r3, r3
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 808e 	beq.w	8009190 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8089 	beq.w	8009190 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800908e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	330c      	adds	r3, #12
 800909e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80090a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80090a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3314      	adds	r3, #20
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	623b      	str	r3, [r7, #32]
   return(result);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3314      	adds	r3, #20
 80090d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090da:	633a      	str	r2, [r7, #48]	@ 0x30
 80090dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e3      	bne.n	80090b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	330c      	adds	r3, #12
 8009102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	60fb      	str	r3, [r7, #12]
   return(result);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0310 	bic.w	r3, r3, #16
 8009112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	330c      	adds	r3, #12
 800911c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009120:	61fa      	str	r2, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	69b9      	ldr	r1, [r7, #24]
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	617b      	str	r3, [r7, #20]
   return(result);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e3      	bne.n	80090fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800913a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f83b 	bl	80091bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009146:	e023      	b.n	8009190 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800914c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <HAL_UART_IRQHandler+0x4f4>
 8009154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f953 	bl	800940c <UART_Transmit_IT>
    return;
 8009166:	e014      	b.n	8009192 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <HAL_UART_IRQHandler+0x51e>
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f992 	bl	80094aa <UART_EndTransmit_IT>
    return;
 8009186:	e004      	b.n	8009192 <HAL_UART_IRQHandler+0x51e>
    return;
 8009188:	bf00      	nop
 800918a:	e002      	b.n	8009192 <HAL_UART_IRQHandler+0x51e>
      return;
 800918c:	bf00      	nop
 800918e:	e000      	b.n	8009192 <HAL_UART_IRQHandler+0x51e>
      return;
 8009190:	bf00      	nop
  }
}
 8009192:	37e8      	adds	r7, #232	@ 0xe8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bc80      	pop	{r7}
 80091a8:	4770      	bx	lr

080091aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr

080091d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b090      	sub	sp, #64	@ 0x40
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e2:	e050      	b.n	8009286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091ea:	d04c      	beq.n	8009286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <UART_WaitOnFlagUntilTimeout+0x30>
 80091f2:	f7fd f9f3 	bl	80065dc <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091fe:	429a      	cmp	r2, r3
 8009200:	d241      	bcs.n	8009286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	330c      	adds	r3, #12
 8009208:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009214:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	330c      	adds	r3, #12
 8009220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009222:	637a      	str	r2, [r7, #52]	@ 0x34
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009228:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e5      	bne.n	8009202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3314      	adds	r3, #20
 800923c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	613b      	str	r3, [r7, #16]
   return(result);
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3314      	adds	r3, #20
 8009254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009256:	623a      	str	r2, [r7, #32]
 8009258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	69f9      	ldr	r1, [r7, #28]
 800925c:	6a3a      	ldr	r2, [r7, #32]
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	61bb      	str	r3, [r7, #24]
   return(result);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e5      	bne.n	8009236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2220      	movs	r2, #32
 800926e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2220      	movs	r2, #32
 8009276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e00f      	b.n	80092a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4013      	ands	r3, r2
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	429a      	cmp	r2, r3
 8009294:	bf0c      	ite	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	2300      	movne	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d09f      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3740      	adds	r7, #64	@ 0x40
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	4613      	mov	r3, r2
 80092ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	88fa      	ldrh	r2, [r7, #6]
 80092c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2222      	movs	r2, #34	@ 0x22
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d007      	beq.n	80092f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	695a      	ldr	r2, [r3, #20]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0201 	orr.w	r2, r2, #1
 8009302:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f042 0220 	orr.w	r2, r2, #32
 8009312:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	bc80      	pop	{r7}
 800931e:	4770      	bx	lr

08009320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b095      	sub	sp, #84	@ 0x54
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009348:	643a      	str	r2, [r7, #64]	@ 0x40
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800934e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009350:	e841 2300 	strex	r3, r2, [r1]
 8009354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e5      	bne.n	8009328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3314      	adds	r3, #20
 8009362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	61fb      	str	r3, [r7, #28]
   return(result);
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3314      	adds	r3, #20
 800937a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800937c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800937e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e5      	bne.n	800935c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009394:	2b01      	cmp	r3, #1
 8009396:	d119      	bne.n	80093cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	330c      	adds	r3, #12
 80093b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b8:	61ba      	str	r2, [r7, #24]
 80093ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80093da:	bf00      	nop
 80093dc:	3754      	adds	r7, #84	@ 0x54
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7ff fed3 	bl	80091aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b21      	cmp	r3, #33	@ 0x21
 800941e:	d13e      	bne.n	800949e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009428:	d114      	bne.n	8009454 <UART_Transmit_IT+0x48>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d110      	bne.n	8009454 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009446:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	1c9a      	adds	r2, r3, #2
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]
 8009452:	e008      	b.n	8009466 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	1c59      	adds	r1, r3, #1
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6211      	str	r1, [r2, #32]
 800945e:	781a      	ldrb	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b01      	subs	r3, #1
 800946e:	b29b      	uxth	r3, r3
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	4619      	mov	r1, r3
 8009474:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10f      	bne.n	800949a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009488:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009498:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e000      	b.n	80094a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800949e:	2302      	movs	r3, #2
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe64 	bl	8009198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b08c      	sub	sp, #48	@ 0x30
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b22      	cmp	r3, #34	@ 0x22
 80094ec:	f040 80ae 	bne.w	800964c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f8:	d117      	bne.n	800952a <UART_Receive_IT+0x50>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d113      	bne.n	800952a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009518:	b29a      	uxth	r2, r3
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009522:	1c9a      	adds	r2, r3, #2
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28
 8009528:	e026      	b.n	8009578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009530:	2300      	movs	r3, #0
 8009532:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800953c:	d007      	beq.n	800954e <UART_Receive_IT+0x74>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <UART_Receive_IT+0x82>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	b2da      	uxtb	r2, r3
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e008      	b.n	800956e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	4619      	mov	r1, r3
 8009586:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009588:	2b00      	cmp	r3, #0
 800958a:	d15d      	bne.n	8009648 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0220 	bic.w	r2, r2, #32
 800959a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695a      	ldr	r2, [r3, #20]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2220      	movs	r2, #32
 80095c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d135      	bne.n	800963e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	330c      	adds	r3, #12
 80095de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	613b      	str	r3, [r7, #16]
   return(result);
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f023 0310 	bic.w	r3, r3, #16
 80095ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	330c      	adds	r3, #12
 80095f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f8:	623a      	str	r2, [r7, #32]
 80095fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	69f9      	ldr	r1, [r7, #28]
 80095fe:	6a3a      	ldr	r2, [r7, #32]
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	61bb      	str	r3, [r7, #24]
   return(result);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e5      	bne.n	80095d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0310 	and.w	r3, r3, #16
 8009616:	2b10      	cmp	r3, #16
 8009618:	d10a      	bne.n	8009630 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fdc0 	bl	80091bc <HAL_UARTEx_RxEventCallback>
 800963c:	e002      	b.n	8009644 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fa fcc8 	bl	8003fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	e002      	b.n	800964e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e000      	b.n	800964e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800964c:	2302      	movs	r3, #2
  }
}
 800964e:	4618      	mov	r0, r3
 8009650:	3730      	adds	r7, #48	@ 0x30
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689a      	ldr	r2, [r3, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	431a      	orrs	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009692:	f023 030c 	bic.w	r3, r3, #12
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	430b      	orrs	r3, r1
 800969e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a2c      	ldr	r2, [pc, #176]	@ (800976c <UART_SetConfig+0x114>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d103      	bne.n	80096c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80096c0:	f7fe f828 	bl	8007714 <HAL_RCC_GetPCLK2Freq>
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	e002      	b.n	80096ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80096c8:	f7fe f810 	bl	80076ec <HAL_RCC_GetPCLK1Freq>
 80096cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009a      	lsls	r2, r3, #2
 80096d8:	441a      	add	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e4:	4a22      	ldr	r2, [pc, #136]	@ (8009770 <UART_SetConfig+0x118>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	0119      	lsls	r1, r3, #4
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009a      	lsls	r2, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	fbb2 f2f3 	udiv	r2, r2, r3
 8009704:	4b1a      	ldr	r3, [pc, #104]	@ (8009770 <UART_SetConfig+0x118>)
 8009706:	fba3 0302 	umull	r0, r3, r3, r2
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	2064      	movs	r0, #100	@ 0x64
 800970e:	fb00 f303 	mul.w	r3, r0, r3
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	3332      	adds	r3, #50	@ 0x32
 8009718:	4a15      	ldr	r2, [pc, #84]	@ (8009770 <UART_SetConfig+0x118>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009724:	4419      	add	r1, r3
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009a      	lsls	r2, r3, #2
 8009730:	441a      	add	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	fbb2 f2f3 	udiv	r2, r2, r3
 800973c:	4b0c      	ldr	r3, [pc, #48]	@ (8009770 <UART_SetConfig+0x118>)
 800973e:	fba3 0302 	umull	r0, r3, r3, r2
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	2064      	movs	r0, #100	@ 0x64
 8009746:	fb00 f303 	mul.w	r3, r0, r3
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	011b      	lsls	r3, r3, #4
 800974e:	3332      	adds	r3, #50	@ 0x32
 8009750:	4a07      	ldr	r2, [pc, #28]	@ (8009770 <UART_SetConfig+0x118>)
 8009752:	fba2 2303 	umull	r2, r3, r2, r3
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	f003 020f 	and.w	r2, r3, #15
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	440a      	add	r2, r1
 8009762:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	40013800 	.word	0x40013800
 8009770:	51eb851f 	.word	0x51eb851f

08009774 <__assert_func>:
 8009774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009776:	4614      	mov	r4, r2
 8009778:	461a      	mov	r2, r3
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <__assert_func+0x2c>)
 800977c:	4605      	mov	r5, r0
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68d8      	ldr	r0, [r3, #12]
 8009782:	b954      	cbnz	r4, 800979a <__assert_func+0x26>
 8009784:	4b07      	ldr	r3, [pc, #28]	@ (80097a4 <__assert_func+0x30>)
 8009786:	461c      	mov	r4, r3
 8009788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800978c:	9100      	str	r1, [sp, #0]
 800978e:	462b      	mov	r3, r5
 8009790:	4905      	ldr	r1, [pc, #20]	@ (80097a8 <__assert_func+0x34>)
 8009792:	f000 ff1d 	bl	800a5d0 <fiprintf>
 8009796:	f001 f851 	bl	800a83c <abort>
 800979a:	4b04      	ldr	r3, [pc, #16]	@ (80097ac <__assert_func+0x38>)
 800979c:	e7f4      	b.n	8009788 <__assert_func+0x14>
 800979e:	bf00      	nop
 80097a0:	20000160 	.word	0x20000160
 80097a4:	0800e87d 	.word	0x0800e87d
 80097a8:	0800e84f 	.word	0x0800e84f
 80097ac:	0800e842 	.word	0x0800e842

080097b0 <__cvt>:
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b6:	461d      	mov	r5, r3
 80097b8:	bfbb      	ittet	lt
 80097ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80097be:	461d      	movlt	r5, r3
 80097c0:	2300      	movge	r3, #0
 80097c2:	232d      	movlt	r3, #45	@ 0x2d
 80097c4:	b088      	sub	sp, #32
 80097c6:	4614      	mov	r4, r2
 80097c8:	bfb8      	it	lt
 80097ca:	4614      	movlt	r4, r2
 80097cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80097ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80097d0:	7013      	strb	r3, [r2, #0]
 80097d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80097d8:	f023 0820 	bic.w	r8, r3, #32
 80097dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097e0:	d005      	beq.n	80097ee <__cvt+0x3e>
 80097e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097e6:	d100      	bne.n	80097ea <__cvt+0x3a>
 80097e8:	3601      	adds	r6, #1
 80097ea:	2302      	movs	r3, #2
 80097ec:	e000      	b.n	80097f0 <__cvt+0x40>
 80097ee:	2303      	movs	r3, #3
 80097f0:	aa07      	add	r2, sp, #28
 80097f2:	9204      	str	r2, [sp, #16]
 80097f4:	aa06      	add	r2, sp, #24
 80097f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80097fa:	e9cd 3600 	strd	r3, r6, [sp]
 80097fe:	4622      	mov	r2, r4
 8009800:	462b      	mov	r3, r5
 8009802:	f001 f8ad 	bl	800a960 <_dtoa_r>
 8009806:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800980a:	4607      	mov	r7, r0
 800980c:	d119      	bne.n	8009842 <__cvt+0x92>
 800980e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009810:	07db      	lsls	r3, r3, #31
 8009812:	d50e      	bpl.n	8009832 <__cvt+0x82>
 8009814:	eb00 0906 	add.w	r9, r0, r6
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f7 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8009824:	b108      	cbz	r0, 800982a <__cvt+0x7a>
 8009826:	f8cd 901c 	str.w	r9, [sp, #28]
 800982a:	2230      	movs	r2, #48	@ 0x30
 800982c:	9b07      	ldr	r3, [sp, #28]
 800982e:	454b      	cmp	r3, r9
 8009830:	d31e      	bcc.n	8009870 <__cvt+0xc0>
 8009832:	4638      	mov	r0, r7
 8009834:	9b07      	ldr	r3, [sp, #28]
 8009836:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009838:	1bdb      	subs	r3, r3, r7
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	b008      	add	sp, #32
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009846:	eb00 0906 	add.w	r9, r0, r6
 800984a:	d1e5      	bne.n	8009818 <__cvt+0x68>
 800984c:	7803      	ldrb	r3, [r0, #0]
 800984e:	2b30      	cmp	r3, #48	@ 0x30
 8009850:	d10a      	bne.n	8009868 <__cvt+0xb8>
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f7 f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800985e:	b918      	cbnz	r0, 8009868 <__cvt+0xb8>
 8009860:	f1c6 0601 	rsb	r6, r6, #1
 8009864:	f8ca 6000 	str.w	r6, [sl]
 8009868:	f8da 3000 	ldr.w	r3, [sl]
 800986c:	4499      	add	r9, r3
 800986e:	e7d3      	b.n	8009818 <__cvt+0x68>
 8009870:	1c59      	adds	r1, r3, #1
 8009872:	9107      	str	r1, [sp, #28]
 8009874:	701a      	strb	r2, [r3, #0]
 8009876:	e7d9      	b.n	800982c <__cvt+0x7c>

08009878 <__exponent>:
 8009878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987a:	2900      	cmp	r1, #0
 800987c:	bfb6      	itet	lt
 800987e:	232d      	movlt	r3, #45	@ 0x2d
 8009880:	232b      	movge	r3, #43	@ 0x2b
 8009882:	4249      	neglt	r1, r1
 8009884:	2909      	cmp	r1, #9
 8009886:	7002      	strb	r2, [r0, #0]
 8009888:	7043      	strb	r3, [r0, #1]
 800988a:	dd29      	ble.n	80098e0 <__exponent+0x68>
 800988c:	f10d 0307 	add.w	r3, sp, #7
 8009890:	461d      	mov	r5, r3
 8009892:	270a      	movs	r7, #10
 8009894:	fbb1 f6f7 	udiv	r6, r1, r7
 8009898:	461a      	mov	r2, r3
 800989a:	fb07 1416 	mls	r4, r7, r6, r1
 800989e:	3430      	adds	r4, #48	@ 0x30
 80098a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098a4:	460c      	mov	r4, r1
 80098a6:	2c63      	cmp	r4, #99	@ 0x63
 80098a8:	4631      	mov	r1, r6
 80098aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80098ae:	dcf1      	bgt.n	8009894 <__exponent+0x1c>
 80098b0:	3130      	adds	r1, #48	@ 0x30
 80098b2:	1e94      	subs	r4, r2, #2
 80098b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098b8:	4623      	mov	r3, r4
 80098ba:	1c41      	adds	r1, r0, #1
 80098bc:	42ab      	cmp	r3, r5
 80098be:	d30a      	bcc.n	80098d6 <__exponent+0x5e>
 80098c0:	f10d 0309 	add.w	r3, sp, #9
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	42ac      	cmp	r4, r5
 80098c8:	bf88      	it	hi
 80098ca:	2300      	movhi	r3, #0
 80098cc:	3302      	adds	r3, #2
 80098ce:	4403      	add	r3, r0
 80098d0:	1a18      	subs	r0, r3, r0
 80098d2:	b003      	add	sp, #12
 80098d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80098da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80098de:	e7ed      	b.n	80098bc <__exponent+0x44>
 80098e0:	2330      	movs	r3, #48	@ 0x30
 80098e2:	3130      	adds	r1, #48	@ 0x30
 80098e4:	7083      	strb	r3, [r0, #2]
 80098e6:	70c1      	strb	r1, [r0, #3]
 80098e8:	1d03      	adds	r3, r0, #4
 80098ea:	e7f1      	b.n	80098d0 <__exponent+0x58>

080098ec <_printf_float>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b091      	sub	sp, #68	@ 0x44
 80098f2:	460c      	mov	r4, r1
 80098f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80098f8:	4616      	mov	r6, r2
 80098fa:	461f      	mov	r7, r3
 80098fc:	4605      	mov	r5, r0
 80098fe:	f000 ff13 	bl	800a728 <_localeconv_r>
 8009902:	6803      	ldr	r3, [r0, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	9308      	str	r3, [sp, #32]
 8009908:	f7f6 fc22 	bl	8000150 <strlen>
 800990c:	2300      	movs	r3, #0
 800990e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009910:	f8d8 3000 	ldr.w	r3, [r8]
 8009914:	9009      	str	r0, [sp, #36]	@ 0x24
 8009916:	3307      	adds	r3, #7
 8009918:	f023 0307 	bic.w	r3, r3, #7
 800991c:	f103 0208 	add.w	r2, r3, #8
 8009920:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009924:	f8d4 b000 	ldr.w	fp, [r4]
 8009928:	f8c8 2000 	str.w	r2, [r8]
 800992c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009934:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009936:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800993a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800993e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009946:	4b9c      	ldr	r3, [pc, #624]	@ (8009bb8 <_printf_float+0x2cc>)
 8009948:	f7f7 f860 	bl	8000a0c <__aeabi_dcmpun>
 800994c:	bb70      	cbnz	r0, 80099ac <_printf_float+0xc0>
 800994e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009952:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009956:	4b98      	ldr	r3, [pc, #608]	@ (8009bb8 <_printf_float+0x2cc>)
 8009958:	f7f7 f83a 	bl	80009d0 <__aeabi_dcmple>
 800995c:	bb30      	cbnz	r0, 80099ac <_printf_float+0xc0>
 800995e:	2200      	movs	r2, #0
 8009960:	2300      	movs	r3, #0
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f7 f829 	bl	80009bc <__aeabi_dcmplt>
 800996a:	b110      	cbz	r0, 8009972 <_printf_float+0x86>
 800996c:	232d      	movs	r3, #45	@ 0x2d
 800996e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009972:	4a92      	ldr	r2, [pc, #584]	@ (8009bbc <_printf_float+0x2d0>)
 8009974:	4b92      	ldr	r3, [pc, #584]	@ (8009bc0 <_printf_float+0x2d4>)
 8009976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800997a:	bf94      	ite	ls
 800997c:	4690      	movls	r8, r2
 800997e:	4698      	movhi	r8, r3
 8009980:	2303      	movs	r3, #3
 8009982:	f04f 0900 	mov.w	r9, #0
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	f02b 0304 	bic.w	r3, fp, #4
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	4633      	mov	r3, r6
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	9700      	str	r7, [sp, #0]
 8009996:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009998:	f000 f9d4 	bl	8009d44 <_printf_common>
 800999c:	3001      	adds	r0, #1
 800999e:	f040 8090 	bne.w	8009ac2 <_printf_float+0x1d6>
 80099a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099a6:	b011      	add	sp, #68	@ 0x44
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	4642      	mov	r2, r8
 80099ae:	464b      	mov	r3, r9
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f7 f82a 	bl	8000a0c <__aeabi_dcmpun>
 80099b8:	b148      	cbz	r0, 80099ce <_printf_float+0xe2>
 80099ba:	464b      	mov	r3, r9
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfb8      	it	lt
 80099c0:	232d      	movlt	r3, #45	@ 0x2d
 80099c2:	4a80      	ldr	r2, [pc, #512]	@ (8009bc4 <_printf_float+0x2d8>)
 80099c4:	bfb8      	it	lt
 80099c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099ca:	4b7f      	ldr	r3, [pc, #508]	@ (8009bc8 <_printf_float+0x2dc>)
 80099cc:	e7d3      	b.n	8009976 <_printf_float+0x8a>
 80099ce:	6863      	ldr	r3, [r4, #4]
 80099d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	d13f      	bne.n	8009a58 <_printf_float+0x16c>
 80099d8:	2306      	movs	r3, #6
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	9206      	str	r2, [sp, #24]
 80099e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80099e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80099ec:	aa0d      	add	r2, sp, #52	@ 0x34
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80099f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	4642      	mov	r2, r8
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4628      	mov	r0, r5
 8009a00:	464b      	mov	r3, r9
 8009a02:	910a      	str	r1, [sp, #40]	@ 0x28
 8009a04:	f7ff fed4 	bl	80097b0 <__cvt>
 8009a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	2947      	cmp	r1, #71	@ 0x47
 8009a0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009a10:	d128      	bne.n	8009a64 <_printf_float+0x178>
 8009a12:	1cc8      	adds	r0, r1, #3
 8009a14:	db02      	blt.n	8009a1c <_printf_float+0x130>
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	dd40      	ble.n	8009a9e <_printf_float+0x1b2>
 8009a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a20:	fa5f fa8a 	uxtb.w	sl, sl
 8009a24:	4652      	mov	r2, sl
 8009a26:	3901      	subs	r1, #1
 8009a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a2c:	910d      	str	r1, [sp, #52]	@ 0x34
 8009a2e:	f7ff ff23 	bl	8009878 <__exponent>
 8009a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a34:	4681      	mov	r9, r0
 8009a36:	1813      	adds	r3, r2, r0
 8009a38:	2a01      	cmp	r2, #1
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	dc02      	bgt.n	8009a44 <_printf_float+0x158>
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	07d2      	lsls	r2, r2, #31
 8009a42:	d501      	bpl.n	8009a48 <_printf_float+0x15c>
 8009a44:	3301      	adds	r3, #1
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d09e      	beq.n	800998e <_printf_float+0xa2>
 8009a50:	232d      	movs	r3, #45	@ 0x2d
 8009a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a56:	e79a      	b.n	800998e <_printf_float+0xa2>
 8009a58:	2947      	cmp	r1, #71	@ 0x47
 8009a5a:	d1bf      	bne.n	80099dc <_printf_float+0xf0>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1bd      	bne.n	80099dc <_printf_float+0xf0>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7ba      	b.n	80099da <_printf_float+0xee>
 8009a64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a68:	d9dc      	bls.n	8009a24 <_printf_float+0x138>
 8009a6a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a6e:	d118      	bne.n	8009aa2 <_printf_float+0x1b6>
 8009a70:	2900      	cmp	r1, #0
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	dd0b      	ble.n	8009a8e <_printf_float+0x1a2>
 8009a76:	6121      	str	r1, [r4, #16]
 8009a78:	b913      	cbnz	r3, 8009a80 <_printf_float+0x194>
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	07d0      	lsls	r0, r2, #31
 8009a7e:	d502      	bpl.n	8009a86 <_printf_float+0x19a>
 8009a80:	3301      	adds	r3, #1
 8009a82:	440b      	add	r3, r1
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	f04f 0900 	mov.w	r9, #0
 8009a8a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a8c:	e7dc      	b.n	8009a48 <_printf_float+0x15c>
 8009a8e:	b913      	cbnz	r3, 8009a96 <_printf_float+0x1aa>
 8009a90:	6822      	ldr	r2, [r4, #0]
 8009a92:	07d2      	lsls	r2, r2, #31
 8009a94:	d501      	bpl.n	8009a9a <_printf_float+0x1ae>
 8009a96:	3302      	adds	r3, #2
 8009a98:	e7f4      	b.n	8009a84 <_printf_float+0x198>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e7f2      	b.n	8009a84 <_printf_float+0x198>
 8009a9e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	db05      	blt.n	8009ab4 <_printf_float+0x1c8>
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	6121      	str	r1, [r4, #16]
 8009aac:	07d8      	lsls	r0, r3, #31
 8009aae:	d5ea      	bpl.n	8009a86 <_printf_float+0x19a>
 8009ab0:	1c4b      	adds	r3, r1, #1
 8009ab2:	e7e7      	b.n	8009a84 <_printf_float+0x198>
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	bfcc      	ite	gt
 8009ab8:	2201      	movgt	r2, #1
 8009aba:	f1c1 0202 	rsble	r2, r1, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	e7e0      	b.n	8009a84 <_printf_float+0x198>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	055a      	lsls	r2, r3, #21
 8009ac6:	d407      	bmi.n	8009ad8 <_printf_float+0x1ec>
 8009ac8:	6923      	ldr	r3, [r4, #16]
 8009aca:	4642      	mov	r2, r8
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d12b      	bne.n	8009b2e <_printf_float+0x242>
 8009ad6:	e764      	b.n	80099a2 <_printf_float+0xb6>
 8009ad8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009adc:	f240 80dc 	bls.w	8009c98 <_printf_float+0x3ac>
 8009ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f7f6 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d033      	beq.n	8009b58 <_printf_float+0x26c>
 8009af0:	2301      	movs	r3, #1
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	4a35      	ldr	r2, [pc, #212]	@ (8009bcc <_printf_float+0x2e0>)
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f af51 	beq.w	80099a2 <_printf_float+0xb6>
 8009b00:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009b04:	4543      	cmp	r3, r8
 8009b06:	db02      	blt.n	8009b0e <_printf_float+0x222>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	07d8      	lsls	r0, r3, #31
 8009b0c:	d50f      	bpl.n	8009b2e <_printf_float+0x242>
 8009b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f af42 	beq.w	80099a2 <_printf_float+0xb6>
 8009b1e:	f04f 0900 	mov.w	r9, #0
 8009b22:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009b26:	f104 0a1a 	add.w	sl, r4, #26
 8009b2a:	45c8      	cmp	r8, r9
 8009b2c:	dc09      	bgt.n	8009b42 <_printf_float+0x256>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	079b      	lsls	r3, r3, #30
 8009b32:	f100 8102 	bmi.w	8009d3a <_printf_float+0x44e>
 8009b36:	68e0      	ldr	r0, [r4, #12]
 8009b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3a:	4298      	cmp	r0, r3
 8009b3c:	bfb8      	it	lt
 8009b3e:	4618      	movlt	r0, r3
 8009b40:	e731      	b.n	80099a6 <_printf_float+0xba>
 8009b42:	2301      	movs	r3, #1
 8009b44:	4652      	mov	r2, sl
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	f43f af28 	beq.w	80099a2 <_printf_float+0xb6>
 8009b52:	f109 0901 	add.w	r9, r9, #1
 8009b56:	e7e8      	b.n	8009b2a <_printf_float+0x23e>
 8009b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dc38      	bgt.n	8009bd0 <_printf_float+0x2e4>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	4a19      	ldr	r2, [pc, #100]	@ (8009bcc <_printf_float+0x2e0>)
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f43f af1a 	beq.w	80099a2 <_printf_float+0xb6>
 8009b6e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009b72:	ea59 0303 	orrs.w	r3, r9, r3
 8009b76:	d102      	bne.n	8009b7e <_printf_float+0x292>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	d5d7      	bpl.n	8009b2e <_printf_float+0x242>
 8009b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f af0a 	beq.w	80099a2 <_printf_float+0xb6>
 8009b8e:	f04f 0a00 	mov.w	sl, #0
 8009b92:	f104 0b1a 	add.w	fp, r4, #26
 8009b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b98:	425b      	negs	r3, r3
 8009b9a:	4553      	cmp	r3, sl
 8009b9c:	dc01      	bgt.n	8009ba2 <_printf_float+0x2b6>
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	e793      	b.n	8009aca <_printf_float+0x1de>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	465a      	mov	r2, fp
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	f43f aef8 	beq.w	80099a2 <_printf_float+0xb6>
 8009bb2:	f10a 0a01 	add.w	sl, sl, #1
 8009bb6:	e7ee      	b.n	8009b96 <_printf_float+0x2aa>
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	0800e87e 	.word	0x0800e87e
 8009bc0:	0800e882 	.word	0x0800e882
 8009bc4:	0800e886 	.word	0x0800e886
 8009bc8:	0800e88a 	.word	0x0800e88a
 8009bcc:	0800e88e 	.word	0x0800e88e
 8009bd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bd2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009bd6:	4553      	cmp	r3, sl
 8009bd8:	bfa8      	it	ge
 8009bda:	4653      	movge	r3, sl
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	4699      	mov	r9, r3
 8009be0:	dc36      	bgt.n	8009c50 <_printf_float+0x364>
 8009be2:	f04f 0b00 	mov.w	fp, #0
 8009be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bea:	f104 021a 	add.w	r2, r4, #26
 8009bee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf2:	eba3 0309 	sub.w	r3, r3, r9
 8009bf6:	455b      	cmp	r3, fp
 8009bf8:	dc31      	bgt.n	8009c5e <_printf_float+0x372>
 8009bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bfc:	459a      	cmp	sl, r3
 8009bfe:	dc3a      	bgt.n	8009c76 <_printf_float+0x38a>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	07da      	lsls	r2, r3, #31
 8009c04:	d437      	bmi.n	8009c76 <_printf_float+0x38a>
 8009c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c08:	ebaa 0903 	sub.w	r9, sl, r3
 8009c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0e:	ebaa 0303 	sub.w	r3, sl, r3
 8009c12:	4599      	cmp	r9, r3
 8009c14:	bfa8      	it	ge
 8009c16:	4699      	movge	r9, r3
 8009c18:	f1b9 0f00 	cmp.w	r9, #0
 8009c1c:	dc33      	bgt.n	8009c86 <_printf_float+0x39a>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c26:	f104 0b1a 	add.w	fp, r4, #26
 8009c2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c30:	eba3 0309 	sub.w	r3, r3, r9
 8009c34:	4543      	cmp	r3, r8
 8009c36:	f77f af7a 	ble.w	8009b2e <_printf_float+0x242>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	465a      	mov	r2, fp
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	f43f aeac 	beq.w	80099a2 <_printf_float+0xb6>
 8009c4a:	f108 0801 	add.w	r8, r8, #1
 8009c4e:	e7ec      	b.n	8009c2a <_printf_float+0x33e>
 8009c50:	4642      	mov	r2, r8
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d1c2      	bne.n	8009be2 <_printf_float+0x2f6>
 8009c5c:	e6a1      	b.n	80099a2 <_printf_float+0xb6>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4631      	mov	r1, r6
 8009c62:	4628      	mov	r0, r5
 8009c64:	920a      	str	r2, [sp, #40]	@ 0x28
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae9a 	beq.w	80099a2 <_printf_float+0xb6>
 8009c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c70:	f10b 0b01 	add.w	fp, fp, #1
 8009c74:	e7bb      	b.n	8009bee <_printf_float+0x302>
 8009c76:	4631      	mov	r1, r6
 8009c78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	d1c0      	bne.n	8009c06 <_printf_float+0x31a>
 8009c84:	e68d      	b.n	80099a2 <_printf_float+0xb6>
 8009c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c88:	464b      	mov	r3, r9
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	4442      	add	r2, r8
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	d1c3      	bne.n	8009c1e <_printf_float+0x332>
 8009c96:	e684      	b.n	80099a2 <_printf_float+0xb6>
 8009c98:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009c9c:	f1ba 0f01 	cmp.w	sl, #1
 8009ca0:	dc01      	bgt.n	8009ca6 <_printf_float+0x3ba>
 8009ca2:	07db      	lsls	r3, r3, #31
 8009ca4:	d536      	bpl.n	8009d14 <_printf_float+0x428>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4642      	mov	r2, r8
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae76 	beq.w	80099a2 <_printf_float+0xb6>
 8009cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f ae6e 	beq.w	80099a2 <_printf_float+0xb6>
 8009cc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009cd2:	f7f6 fe69 	bl	80009a8 <__aeabi_dcmpeq>
 8009cd6:	b9c0      	cbnz	r0, 8009d0a <_printf_float+0x41e>
 8009cd8:	4653      	mov	r3, sl
 8009cda:	f108 0201 	add.w	r2, r8, #1
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d10c      	bne.n	8009d02 <_printf_float+0x416>
 8009ce8:	e65b      	b.n	80099a2 <_printf_float+0xb6>
 8009cea:	2301      	movs	r3, #1
 8009cec:	465a      	mov	r2, fp
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae54 	beq.w	80099a2 <_printf_float+0xb6>
 8009cfa:	f108 0801 	add.w	r8, r8, #1
 8009cfe:	45d0      	cmp	r8, sl
 8009d00:	dbf3      	blt.n	8009cea <_printf_float+0x3fe>
 8009d02:	464b      	mov	r3, r9
 8009d04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d08:	e6e0      	b.n	8009acc <_printf_float+0x1e0>
 8009d0a:	f04f 0800 	mov.w	r8, #0
 8009d0e:	f104 0b1a 	add.w	fp, r4, #26
 8009d12:	e7f4      	b.n	8009cfe <_printf_float+0x412>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4642      	mov	r2, r8
 8009d18:	e7e1      	b.n	8009cde <_printf_float+0x3f2>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	464a      	mov	r2, r9
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f ae3c 	beq.w	80099a2 <_printf_float+0xb6>
 8009d2a:	f108 0801 	add.w	r8, r8, #1
 8009d2e:	68e3      	ldr	r3, [r4, #12]
 8009d30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d32:	1a5b      	subs	r3, r3, r1
 8009d34:	4543      	cmp	r3, r8
 8009d36:	dcf0      	bgt.n	8009d1a <_printf_float+0x42e>
 8009d38:	e6fd      	b.n	8009b36 <_printf_float+0x24a>
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	f104 0919 	add.w	r9, r4, #25
 8009d42:	e7f4      	b.n	8009d2e <_printf_float+0x442>

08009d44 <_printf_common>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	4616      	mov	r6, r2
 8009d4a:	4698      	mov	r8, r3
 8009d4c:	688a      	ldr	r2, [r1, #8]
 8009d4e:	690b      	ldr	r3, [r1, #16]
 8009d50:	4607      	mov	r7, r0
 8009d52:	4293      	cmp	r3, r2
 8009d54:	bfb8      	it	lt
 8009d56:	4613      	movlt	r3, r2
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d5e:	460c      	mov	r4, r1
 8009d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d64:	b10a      	cbz	r2, 8009d6a <_printf_common+0x26>
 8009d66:	3301      	adds	r3, #1
 8009d68:	6033      	str	r3, [r6, #0]
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	0699      	lsls	r1, r3, #26
 8009d6e:	bf42      	ittt	mi
 8009d70:	6833      	ldrmi	r3, [r6, #0]
 8009d72:	3302      	addmi	r3, #2
 8009d74:	6033      	strmi	r3, [r6, #0]
 8009d76:	6825      	ldr	r5, [r4, #0]
 8009d78:	f015 0506 	ands.w	r5, r5, #6
 8009d7c:	d106      	bne.n	8009d8c <_printf_common+0x48>
 8009d7e:	f104 0a19 	add.w	sl, r4, #25
 8009d82:	68e3      	ldr	r3, [r4, #12]
 8009d84:	6832      	ldr	r2, [r6, #0]
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	dc2b      	bgt.n	8009de4 <_printf_common+0xa0>
 8009d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d90:	6822      	ldr	r2, [r4, #0]
 8009d92:	3b00      	subs	r3, #0
 8009d94:	bf18      	it	ne
 8009d96:	2301      	movne	r3, #1
 8009d98:	0692      	lsls	r2, r2, #26
 8009d9a:	d430      	bmi.n	8009dfe <_printf_common+0xba>
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009da4:	47c8      	blx	r9
 8009da6:	3001      	adds	r0, #1
 8009da8:	d023      	beq.n	8009df2 <_printf_common+0xae>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	6922      	ldr	r2, [r4, #16]
 8009dae:	f003 0306 	and.w	r3, r3, #6
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	bf14      	ite	ne
 8009db6:	2500      	movne	r5, #0
 8009db8:	6833      	ldreq	r3, [r6, #0]
 8009dba:	f04f 0600 	mov.w	r6, #0
 8009dbe:	bf08      	it	eq
 8009dc0:	68e5      	ldreq	r5, [r4, #12]
 8009dc2:	f104 041a 	add.w	r4, r4, #26
 8009dc6:	bf08      	it	eq
 8009dc8:	1aed      	subeq	r5, r5, r3
 8009dca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009dce:	bf08      	it	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	bfc4      	itt	gt
 8009dd8:	1a9b      	subgt	r3, r3, r2
 8009dda:	18ed      	addgt	r5, r5, r3
 8009ddc:	42b5      	cmp	r5, r6
 8009dde:	d11a      	bne.n	8009e16 <_printf_common+0xd2>
 8009de0:	2000      	movs	r0, #0
 8009de2:	e008      	b.n	8009df6 <_printf_common+0xb2>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4652      	mov	r2, sl
 8009de8:	4641      	mov	r1, r8
 8009dea:	4638      	mov	r0, r7
 8009dec:	47c8      	blx	r9
 8009dee:	3001      	adds	r0, #1
 8009df0:	d103      	bne.n	8009dfa <_printf_common+0xb6>
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dfa:	3501      	adds	r5, #1
 8009dfc:	e7c1      	b.n	8009d82 <_printf_common+0x3e>
 8009dfe:	2030      	movs	r0, #48	@ 0x30
 8009e00:	18e1      	adds	r1, r4, r3
 8009e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e0c:	4422      	add	r2, r4
 8009e0e:	3302      	adds	r3, #2
 8009e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e14:	e7c2      	b.n	8009d9c <_printf_common+0x58>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4641      	mov	r1, r8
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	47c8      	blx	r9
 8009e20:	3001      	adds	r0, #1
 8009e22:	d0e6      	beq.n	8009df2 <_printf_common+0xae>
 8009e24:	3601      	adds	r6, #1
 8009e26:	e7d9      	b.n	8009ddc <_printf_common+0x98>

08009e28 <_printf_i>:
 8009e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	7e0f      	ldrb	r7, [r1, #24]
 8009e2e:	4691      	mov	r9, r2
 8009e30:	2f78      	cmp	r7, #120	@ 0x78
 8009e32:	4680      	mov	r8, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	469a      	mov	sl, r3
 8009e38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e3e:	d807      	bhi.n	8009e50 <_printf_i+0x28>
 8009e40:	2f62      	cmp	r7, #98	@ 0x62
 8009e42:	d80a      	bhi.n	8009e5a <_printf_i+0x32>
 8009e44:	2f00      	cmp	r7, #0
 8009e46:	f000 80d3 	beq.w	8009ff0 <_printf_i+0x1c8>
 8009e4a:	2f58      	cmp	r7, #88	@ 0x58
 8009e4c:	f000 80ba 	beq.w	8009fc4 <_printf_i+0x19c>
 8009e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e58:	e03a      	b.n	8009ed0 <_printf_i+0xa8>
 8009e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e5e:	2b15      	cmp	r3, #21
 8009e60:	d8f6      	bhi.n	8009e50 <_printf_i+0x28>
 8009e62:	a101      	add	r1, pc, #4	@ (adr r1, 8009e68 <_printf_i+0x40>)
 8009e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e68:	08009ec1 	.word	0x08009ec1
 8009e6c:	08009ed5 	.word	0x08009ed5
 8009e70:	08009e51 	.word	0x08009e51
 8009e74:	08009e51 	.word	0x08009e51
 8009e78:	08009e51 	.word	0x08009e51
 8009e7c:	08009e51 	.word	0x08009e51
 8009e80:	08009ed5 	.word	0x08009ed5
 8009e84:	08009e51 	.word	0x08009e51
 8009e88:	08009e51 	.word	0x08009e51
 8009e8c:	08009e51 	.word	0x08009e51
 8009e90:	08009e51 	.word	0x08009e51
 8009e94:	08009fd7 	.word	0x08009fd7
 8009e98:	08009eff 	.word	0x08009eff
 8009e9c:	08009f91 	.word	0x08009f91
 8009ea0:	08009e51 	.word	0x08009e51
 8009ea4:	08009e51 	.word	0x08009e51
 8009ea8:	08009ff9 	.word	0x08009ff9
 8009eac:	08009e51 	.word	0x08009e51
 8009eb0:	08009eff 	.word	0x08009eff
 8009eb4:	08009e51 	.word	0x08009e51
 8009eb8:	08009e51 	.word	0x08009e51
 8009ebc:	08009f99 	.word	0x08009f99
 8009ec0:	6833      	ldr	r3, [r6, #0]
 8009ec2:	1d1a      	adds	r2, r3, #4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6032      	str	r2, [r6, #0]
 8009ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e09e      	b.n	800a012 <_printf_i+0x1ea>
 8009ed4:	6833      	ldr	r3, [r6, #0]
 8009ed6:	6820      	ldr	r0, [r4, #0]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	6031      	str	r1, [r6, #0]
 8009edc:	0606      	lsls	r6, r0, #24
 8009ede:	d501      	bpl.n	8009ee4 <_printf_i+0xbc>
 8009ee0:	681d      	ldr	r5, [r3, #0]
 8009ee2:	e003      	b.n	8009eec <_printf_i+0xc4>
 8009ee4:	0645      	lsls	r5, r0, #25
 8009ee6:	d5fb      	bpl.n	8009ee0 <_printf_i+0xb8>
 8009ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	da03      	bge.n	8009ef8 <_printf_i+0xd0>
 8009ef0:	232d      	movs	r3, #45	@ 0x2d
 8009ef2:	426d      	negs	r5, r5
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ef8:	230a      	movs	r3, #10
 8009efa:	4859      	ldr	r0, [pc, #356]	@ (800a060 <_printf_i+0x238>)
 8009efc:	e011      	b.n	8009f22 <_printf_i+0xfa>
 8009efe:	6821      	ldr	r1, [r4, #0]
 8009f00:	6833      	ldr	r3, [r6, #0]
 8009f02:	0608      	lsls	r0, r1, #24
 8009f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f08:	d402      	bmi.n	8009f10 <_printf_i+0xe8>
 8009f0a:	0649      	lsls	r1, r1, #25
 8009f0c:	bf48      	it	mi
 8009f0e:	b2ad      	uxthmi	r5, r5
 8009f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f12:	6033      	str	r3, [r6, #0]
 8009f14:	bf14      	ite	ne
 8009f16:	230a      	movne	r3, #10
 8009f18:	2308      	moveq	r3, #8
 8009f1a:	4851      	ldr	r0, [pc, #324]	@ (800a060 <_printf_i+0x238>)
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f22:	6866      	ldr	r6, [r4, #4]
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	bfa8      	it	ge
 8009f28:	6821      	ldrge	r1, [r4, #0]
 8009f2a:	60a6      	str	r6, [r4, #8]
 8009f2c:	bfa4      	itt	ge
 8009f2e:	f021 0104 	bicge.w	r1, r1, #4
 8009f32:	6021      	strge	r1, [r4, #0]
 8009f34:	b90d      	cbnz	r5, 8009f3a <_printf_i+0x112>
 8009f36:	2e00      	cmp	r6, #0
 8009f38:	d04b      	beq.n	8009fd2 <_printf_i+0x1aa>
 8009f3a:	4616      	mov	r6, r2
 8009f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f40:	fb03 5711 	mls	r7, r3, r1, r5
 8009f44:	5dc7      	ldrb	r7, [r0, r7]
 8009f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f4a:	462f      	mov	r7, r5
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	460d      	mov	r5, r1
 8009f50:	d9f4      	bls.n	8009f3c <_printf_i+0x114>
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d10b      	bne.n	8009f6e <_printf_i+0x146>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	07df      	lsls	r7, r3, #31
 8009f5a:	d508      	bpl.n	8009f6e <_printf_i+0x146>
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	6861      	ldr	r1, [r4, #4]
 8009f60:	4299      	cmp	r1, r3
 8009f62:	bfde      	ittt	le
 8009f64:	2330      	movle	r3, #48	@ 0x30
 8009f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f6a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f6e:	1b92      	subs	r2, r2, r6
 8009f70:	6122      	str	r2, [r4, #16]
 8009f72:	464b      	mov	r3, r9
 8009f74:	4621      	mov	r1, r4
 8009f76:	4640      	mov	r0, r8
 8009f78:	f8cd a000 	str.w	sl, [sp]
 8009f7c:	aa03      	add	r2, sp, #12
 8009f7e:	f7ff fee1 	bl	8009d44 <_printf_common>
 8009f82:	3001      	adds	r0, #1
 8009f84:	d14a      	bne.n	800a01c <_printf_i+0x1f4>
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f8a:	b004      	add	sp, #16
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	f043 0320 	orr.w	r3, r3, #32
 8009f96:	6023      	str	r3, [r4, #0]
 8009f98:	2778      	movs	r7, #120	@ 0x78
 8009f9a:	4832      	ldr	r0, [pc, #200]	@ (800a064 <_printf_i+0x23c>)
 8009f9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	6831      	ldr	r1, [r6, #0]
 8009fa4:	061f      	lsls	r7, r3, #24
 8009fa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009faa:	d402      	bmi.n	8009fb2 <_printf_i+0x18a>
 8009fac:	065f      	lsls	r7, r3, #25
 8009fae:	bf48      	it	mi
 8009fb0:	b2ad      	uxthmi	r5, r5
 8009fb2:	6031      	str	r1, [r6, #0]
 8009fb4:	07d9      	lsls	r1, r3, #31
 8009fb6:	bf44      	itt	mi
 8009fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fbc:	6023      	strmi	r3, [r4, #0]
 8009fbe:	b11d      	cbz	r5, 8009fc8 <_printf_i+0x1a0>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	e7ab      	b.n	8009f1c <_printf_i+0xf4>
 8009fc4:	4826      	ldr	r0, [pc, #152]	@ (800a060 <_printf_i+0x238>)
 8009fc6:	e7e9      	b.n	8009f9c <_printf_i+0x174>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	f023 0320 	bic.w	r3, r3, #32
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	e7f6      	b.n	8009fc0 <_printf_i+0x198>
 8009fd2:	4616      	mov	r6, r2
 8009fd4:	e7bd      	b.n	8009f52 <_printf_i+0x12a>
 8009fd6:	6833      	ldr	r3, [r6, #0]
 8009fd8:	6825      	ldr	r5, [r4, #0]
 8009fda:	1d18      	adds	r0, r3, #4
 8009fdc:	6961      	ldr	r1, [r4, #20]
 8009fde:	6030      	str	r0, [r6, #0]
 8009fe0:	062e      	lsls	r6, r5, #24
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	d501      	bpl.n	8009fea <_printf_i+0x1c2>
 8009fe6:	6019      	str	r1, [r3, #0]
 8009fe8:	e002      	b.n	8009ff0 <_printf_i+0x1c8>
 8009fea:	0668      	lsls	r0, r5, #25
 8009fec:	d5fb      	bpl.n	8009fe6 <_printf_i+0x1be>
 8009fee:	8019      	strh	r1, [r3, #0]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4616      	mov	r6, r2
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	e7bc      	b.n	8009f72 <_printf_i+0x14a>
 8009ff8:	6833      	ldr	r3, [r6, #0]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	6032      	str	r2, [r6, #0]
 800a000:	681e      	ldr	r6, [r3, #0]
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	4630      	mov	r0, r6
 800a006:	f000 fc06 	bl	800a816 <memchr>
 800a00a:	b108      	cbz	r0, 800a010 <_printf_i+0x1e8>
 800a00c:	1b80      	subs	r0, r0, r6
 800a00e:	6060      	str	r0, [r4, #4]
 800a010:	6863      	ldr	r3, [r4, #4]
 800a012:	6123      	str	r3, [r4, #16]
 800a014:	2300      	movs	r3, #0
 800a016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a01a:	e7aa      	b.n	8009f72 <_printf_i+0x14a>
 800a01c:	4632      	mov	r2, r6
 800a01e:	4649      	mov	r1, r9
 800a020:	4640      	mov	r0, r8
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	47d0      	blx	sl
 800a026:	3001      	adds	r0, #1
 800a028:	d0ad      	beq.n	8009f86 <_printf_i+0x15e>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	079b      	lsls	r3, r3, #30
 800a02e:	d413      	bmi.n	800a058 <_printf_i+0x230>
 800a030:	68e0      	ldr	r0, [r4, #12]
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	4298      	cmp	r0, r3
 800a036:	bfb8      	it	lt
 800a038:	4618      	movlt	r0, r3
 800a03a:	e7a6      	b.n	8009f8a <_printf_i+0x162>
 800a03c:	2301      	movs	r3, #1
 800a03e:	4632      	mov	r2, r6
 800a040:	4649      	mov	r1, r9
 800a042:	4640      	mov	r0, r8
 800a044:	47d0      	blx	sl
 800a046:	3001      	adds	r0, #1
 800a048:	d09d      	beq.n	8009f86 <_printf_i+0x15e>
 800a04a:	3501      	adds	r5, #1
 800a04c:	68e3      	ldr	r3, [r4, #12]
 800a04e:	9903      	ldr	r1, [sp, #12]
 800a050:	1a5b      	subs	r3, r3, r1
 800a052:	42ab      	cmp	r3, r5
 800a054:	dcf2      	bgt.n	800a03c <_printf_i+0x214>
 800a056:	e7eb      	b.n	800a030 <_printf_i+0x208>
 800a058:	2500      	movs	r5, #0
 800a05a:	f104 0619 	add.w	r6, r4, #25
 800a05e:	e7f5      	b.n	800a04c <_printf_i+0x224>
 800a060:	0800e890 	.word	0x0800e890
 800a064:	0800e8a1 	.word	0x0800e8a1

0800a068 <_scanf_float>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	b087      	sub	sp, #28
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	688b      	ldr	r3, [r1, #8]
 800a072:	4617      	mov	r7, r2
 800a074:	1e5a      	subs	r2, r3, #1
 800a076:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a07a:	bf82      	ittt	hi
 800a07c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a080:	eb03 0b05 	addhi.w	fp, r3, r5
 800a084:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a088:	460a      	mov	r2, r1
 800a08a:	f04f 0500 	mov.w	r5, #0
 800a08e:	bf88      	it	hi
 800a090:	608b      	strhi	r3, [r1, #8]
 800a092:	680b      	ldr	r3, [r1, #0]
 800a094:	4680      	mov	r8, r0
 800a096:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a09a:	f842 3b1c 	str.w	r3, [r2], #28
 800a09e:	460c      	mov	r4, r1
 800a0a0:	bf98      	it	ls
 800a0a2:	f04f 0b00 	movls.w	fp, #0
 800a0a6:	4616      	mov	r6, r2
 800a0a8:	46aa      	mov	sl, r5
 800a0aa:	46a9      	mov	r9, r5
 800a0ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0b0:	9201      	str	r2, [sp, #4]
 800a0b2:	9502      	str	r5, [sp, #8]
 800a0b4:	68a2      	ldr	r2, [r4, #8]
 800a0b6:	b152      	cbz	r2, 800a0ce <_scanf_float+0x66>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0be:	d865      	bhi.n	800a18c <_scanf_float+0x124>
 800a0c0:	2b40      	cmp	r3, #64	@ 0x40
 800a0c2:	d83d      	bhi.n	800a140 <_scanf_float+0xd8>
 800a0c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a0c8:	b2c8      	uxtb	r0, r1
 800a0ca:	280e      	cmp	r0, #14
 800a0cc:	d93b      	bls.n	800a146 <_scanf_float+0xde>
 800a0ce:	f1b9 0f00 	cmp.w	r9, #0
 800a0d2:	d003      	beq.n	800a0dc <_scanf_float+0x74>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a0e0:	f1ba 0f01 	cmp.w	sl, #1
 800a0e4:	f200 8118 	bhi.w	800a318 <_scanf_float+0x2b0>
 800a0e8:	9b01      	ldr	r3, [sp, #4]
 800a0ea:	429e      	cmp	r6, r3
 800a0ec:	f200 8109 	bhi.w	800a302 <_scanf_float+0x29a>
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	b007      	add	sp, #28
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a0fc:	2a0d      	cmp	r2, #13
 800a0fe:	d8e6      	bhi.n	800a0ce <_scanf_float+0x66>
 800a100:	a101      	add	r1, pc, #4	@ (adr r1, 800a108 <_scanf_float+0xa0>)
 800a102:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a24f 	.word	0x0800a24f
 800a10c:	0800a0cf 	.word	0x0800a0cf
 800a110:	0800a0cf 	.word	0x0800a0cf
 800a114:	0800a0cf 	.word	0x0800a0cf
 800a118:	0800a2af 	.word	0x0800a2af
 800a11c:	0800a287 	.word	0x0800a287
 800a120:	0800a0cf 	.word	0x0800a0cf
 800a124:	0800a0cf 	.word	0x0800a0cf
 800a128:	0800a25d 	.word	0x0800a25d
 800a12c:	0800a0cf 	.word	0x0800a0cf
 800a130:	0800a0cf 	.word	0x0800a0cf
 800a134:	0800a0cf 	.word	0x0800a0cf
 800a138:	0800a0cf 	.word	0x0800a0cf
 800a13c:	0800a215 	.word	0x0800a215
 800a140:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a144:	e7da      	b.n	800a0fc <_scanf_float+0x94>
 800a146:	290e      	cmp	r1, #14
 800a148:	d8c1      	bhi.n	800a0ce <_scanf_float+0x66>
 800a14a:	a001      	add	r0, pc, #4	@ (adr r0, 800a150 <_scanf_float+0xe8>)
 800a14c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a150:	0800a205 	.word	0x0800a205
 800a154:	0800a0cf 	.word	0x0800a0cf
 800a158:	0800a205 	.word	0x0800a205
 800a15c:	0800a29b 	.word	0x0800a29b
 800a160:	0800a0cf 	.word	0x0800a0cf
 800a164:	0800a1ad 	.word	0x0800a1ad
 800a168:	0800a1eb 	.word	0x0800a1eb
 800a16c:	0800a1eb 	.word	0x0800a1eb
 800a170:	0800a1eb 	.word	0x0800a1eb
 800a174:	0800a1eb 	.word	0x0800a1eb
 800a178:	0800a1eb 	.word	0x0800a1eb
 800a17c:	0800a1eb 	.word	0x0800a1eb
 800a180:	0800a1eb 	.word	0x0800a1eb
 800a184:	0800a1eb 	.word	0x0800a1eb
 800a188:	0800a1eb 	.word	0x0800a1eb
 800a18c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a18e:	d809      	bhi.n	800a1a4 <_scanf_float+0x13c>
 800a190:	2b60      	cmp	r3, #96	@ 0x60
 800a192:	d8b1      	bhi.n	800a0f8 <_scanf_float+0x90>
 800a194:	2b54      	cmp	r3, #84	@ 0x54
 800a196:	d07b      	beq.n	800a290 <_scanf_float+0x228>
 800a198:	2b59      	cmp	r3, #89	@ 0x59
 800a19a:	d198      	bne.n	800a0ce <_scanf_float+0x66>
 800a19c:	2d07      	cmp	r5, #7
 800a19e:	d196      	bne.n	800a0ce <_scanf_float+0x66>
 800a1a0:	2508      	movs	r5, #8
 800a1a2:	e02c      	b.n	800a1fe <_scanf_float+0x196>
 800a1a4:	2b74      	cmp	r3, #116	@ 0x74
 800a1a6:	d073      	beq.n	800a290 <_scanf_float+0x228>
 800a1a8:	2b79      	cmp	r3, #121	@ 0x79
 800a1aa:	e7f6      	b.n	800a19a <_scanf_float+0x132>
 800a1ac:	6821      	ldr	r1, [r4, #0]
 800a1ae:	05c8      	lsls	r0, r1, #23
 800a1b0:	d51b      	bpl.n	800a1ea <_scanf_float+0x182>
 800a1b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a1b6:	6021      	str	r1, [r4, #0]
 800a1b8:	f109 0901 	add.w	r9, r9, #1
 800a1bc:	f1bb 0f00 	cmp.w	fp, #0
 800a1c0:	d003      	beq.n	800a1ca <_scanf_float+0x162>
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800a1c8:	60a2      	str	r2, [r4, #8]
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	60a3      	str	r3, [r4, #8]
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	f340 8087 	ble.w	800a2f0 <_scanf_float+0x288>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	e764      	b.n	800a0b4 <_scanf_float+0x4c>
 800a1ea:	eb1a 0105 	adds.w	r1, sl, r5
 800a1ee:	f47f af6e 	bne.w	800a0ce <_scanf_float+0x66>
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	468a      	mov	sl, r1
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	f806 3b01 	strb.w	r3, [r6], #1
 800a202:	e7e2      	b.n	800a1ca <_scanf_float+0x162>
 800a204:	6822      	ldr	r2, [r4, #0]
 800a206:	0610      	lsls	r0, r2, #24
 800a208:	f57f af61 	bpl.w	800a0ce <_scanf_float+0x66>
 800a20c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a210:	6022      	str	r2, [r4, #0]
 800a212:	e7f4      	b.n	800a1fe <_scanf_float+0x196>
 800a214:	f1ba 0f00 	cmp.w	sl, #0
 800a218:	d10e      	bne.n	800a238 <_scanf_float+0x1d0>
 800a21a:	f1b9 0f00 	cmp.w	r9, #0
 800a21e:	d10e      	bne.n	800a23e <_scanf_float+0x1d6>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a226:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a22a:	d108      	bne.n	800a23e <_scanf_float+0x1d6>
 800a22c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a230:	f04f 0a01 	mov.w	sl, #1
 800a234:	6022      	str	r2, [r4, #0]
 800a236:	e7e2      	b.n	800a1fe <_scanf_float+0x196>
 800a238:	f1ba 0f02 	cmp.w	sl, #2
 800a23c:	d055      	beq.n	800a2ea <_scanf_float+0x282>
 800a23e:	2d01      	cmp	r5, #1
 800a240:	d002      	beq.n	800a248 <_scanf_float+0x1e0>
 800a242:	2d04      	cmp	r5, #4
 800a244:	f47f af43 	bne.w	800a0ce <_scanf_float+0x66>
 800a248:	3501      	adds	r5, #1
 800a24a:	b2ed      	uxtb	r5, r5
 800a24c:	e7d7      	b.n	800a1fe <_scanf_float+0x196>
 800a24e:	f1ba 0f01 	cmp.w	sl, #1
 800a252:	f47f af3c 	bne.w	800a0ce <_scanf_float+0x66>
 800a256:	f04f 0a02 	mov.w	sl, #2
 800a25a:	e7d0      	b.n	800a1fe <_scanf_float+0x196>
 800a25c:	b97d      	cbnz	r5, 800a27e <_scanf_float+0x216>
 800a25e:	f1b9 0f00 	cmp.w	r9, #0
 800a262:	f47f af37 	bne.w	800a0d4 <_scanf_float+0x6c>
 800a266:	6822      	ldr	r2, [r4, #0]
 800a268:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a26c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a270:	f040 8103 	bne.w	800a47a <_scanf_float+0x412>
 800a274:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a278:	2501      	movs	r5, #1
 800a27a:	6022      	str	r2, [r4, #0]
 800a27c:	e7bf      	b.n	800a1fe <_scanf_float+0x196>
 800a27e:	2d03      	cmp	r5, #3
 800a280:	d0e2      	beq.n	800a248 <_scanf_float+0x1e0>
 800a282:	2d05      	cmp	r5, #5
 800a284:	e7de      	b.n	800a244 <_scanf_float+0x1dc>
 800a286:	2d02      	cmp	r5, #2
 800a288:	f47f af21 	bne.w	800a0ce <_scanf_float+0x66>
 800a28c:	2503      	movs	r5, #3
 800a28e:	e7b6      	b.n	800a1fe <_scanf_float+0x196>
 800a290:	2d06      	cmp	r5, #6
 800a292:	f47f af1c 	bne.w	800a0ce <_scanf_float+0x66>
 800a296:	2507      	movs	r5, #7
 800a298:	e7b1      	b.n	800a1fe <_scanf_float+0x196>
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	0591      	lsls	r1, r2, #22
 800a29e:	f57f af16 	bpl.w	800a0ce <_scanf_float+0x66>
 800a2a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2ac:	e7a7      	b.n	800a1fe <_scanf_float+0x196>
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a2b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a2b8:	d006      	beq.n	800a2c8 <_scanf_float+0x260>
 800a2ba:	0550      	lsls	r0, r2, #21
 800a2bc:	f57f af07 	bpl.w	800a0ce <_scanf_float+0x66>
 800a2c0:	f1b9 0f00 	cmp.w	r9, #0
 800a2c4:	f000 80d9 	beq.w	800a47a <_scanf_float+0x412>
 800a2c8:	0591      	lsls	r1, r2, #22
 800a2ca:	bf58      	it	pl
 800a2cc:	9902      	ldrpl	r1, [sp, #8]
 800a2ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2d2:	bf58      	it	pl
 800a2d4:	eba9 0101 	subpl.w	r1, r9, r1
 800a2d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a2dc:	f04f 0900 	mov.w	r9, #0
 800a2e0:	bf58      	it	pl
 800a2e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	e789      	b.n	800a1fe <_scanf_float+0x196>
 800a2ea:	f04f 0a03 	mov.w	sl, #3
 800a2ee:	e786      	b.n	800a1fe <_scanf_float+0x196>
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a2f8:	4798      	blx	r3
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aeda 	beq.w	800a0b4 <_scanf_float+0x4c>
 800a300:	e6e5      	b.n	800a0ce <_scanf_float+0x66>
 800a302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a306:	463a      	mov	r2, r7
 800a308:	4640      	mov	r0, r8
 800a30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a30e:	4798      	blx	r3
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	e6e7      	b.n	800a0e8 <_scanf_float+0x80>
 800a318:	1e6b      	subs	r3, r5, #1
 800a31a:	2b06      	cmp	r3, #6
 800a31c:	d824      	bhi.n	800a368 <_scanf_float+0x300>
 800a31e:	2d02      	cmp	r5, #2
 800a320:	d836      	bhi.n	800a390 <_scanf_float+0x328>
 800a322:	9b01      	ldr	r3, [sp, #4]
 800a324:	429e      	cmp	r6, r3
 800a326:	f67f aee3 	bls.w	800a0f0 <_scanf_float+0x88>
 800a32a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a32e:	463a      	mov	r2, r7
 800a330:	4640      	mov	r0, r8
 800a332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a336:	4798      	blx	r3
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	e7f0      	b.n	800a322 <_scanf_float+0x2ba>
 800a340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a344:	463a      	mov	r2, r7
 800a346:	4640      	mov	r0, r8
 800a348:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a34c:	4798      	blx	r3
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	3b01      	subs	r3, #1
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a358:	fa5f fa8a 	uxtb.w	sl, sl
 800a35c:	f1ba 0f02 	cmp.w	sl, #2
 800a360:	d1ee      	bne.n	800a340 <_scanf_float+0x2d8>
 800a362:	3d03      	subs	r5, #3
 800a364:	b2ed      	uxtb	r5, r5
 800a366:	1b76      	subs	r6, r6, r5
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	05da      	lsls	r2, r3, #23
 800a36c:	d530      	bpl.n	800a3d0 <_scanf_float+0x368>
 800a36e:	055b      	lsls	r3, r3, #21
 800a370:	d511      	bpl.n	800a396 <_scanf_float+0x32e>
 800a372:	9b01      	ldr	r3, [sp, #4]
 800a374:	429e      	cmp	r6, r3
 800a376:	f67f aebb 	bls.w	800a0f0 <_scanf_float+0x88>
 800a37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a37e:	463a      	mov	r2, r7
 800a380:	4640      	mov	r0, r8
 800a382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a386:	4798      	blx	r3
 800a388:	6923      	ldr	r3, [r4, #16]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	e7f0      	b.n	800a372 <_scanf_float+0x30a>
 800a390:	46aa      	mov	sl, r5
 800a392:	46b3      	mov	fp, r6
 800a394:	e7de      	b.n	800a354 <_scanf_float+0x2ec>
 800a396:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	2965      	cmp	r1, #101	@ 0x65
 800a39e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a3a2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	d00c      	beq.n	800a3c4 <_scanf_float+0x35c>
 800a3aa:	2945      	cmp	r1, #69	@ 0x45
 800a3ac:	d00a      	beq.n	800a3c4 <_scanf_float+0x35c>
 800a3ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3b2:	463a      	mov	r2, r7
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4798      	blx	r3
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	1eb5      	subs	r5, r6, #2
 800a3c2:	6123      	str	r3, [r4, #16]
 800a3c4:	463a      	mov	r2, r7
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3cc:	4798      	blx	r3
 800a3ce:	462e      	mov	r6, r5
 800a3d0:	6822      	ldr	r2, [r4, #0]
 800a3d2:	f012 0210 	ands.w	r2, r2, #16
 800a3d6:	d001      	beq.n	800a3dc <_scanf_float+0x374>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e68a      	b.n	800a0f2 <_scanf_float+0x8a>
 800a3dc:	7032      	strb	r2, [r6, #0]
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e8:	d11c      	bne.n	800a424 <_scanf_float+0x3bc>
 800a3ea:	9b02      	ldr	r3, [sp, #8]
 800a3ec:	454b      	cmp	r3, r9
 800a3ee:	eba3 0209 	sub.w	r2, r3, r9
 800a3f2:	d123      	bne.n	800a43c <_scanf_float+0x3d4>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	9901      	ldr	r1, [sp, #4]
 800a3fa:	f002 fc19 	bl	800cc30 <_strtod_r>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	6825      	ldr	r5, [r4, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f015 0f02 	tst.w	r5, #2
 800a408:	4606      	mov	r6, r0
 800a40a:	460f      	mov	r7, r1
 800a40c:	f103 0204 	add.w	r2, r3, #4
 800a410:	d01f      	beq.n	800a452 <_scanf_float+0x3ea>
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	600a      	str	r2, [r1, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	e9c3 6700 	strd	r6, r7, [r3]
 800a41c:	68e3      	ldr	r3, [r4, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60e3      	str	r3, [r4, #12]
 800a422:	e7d9      	b.n	800a3d8 <_scanf_float+0x370>
 800a424:	9b04      	ldr	r3, [sp, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0e4      	beq.n	800a3f4 <_scanf_float+0x38c>
 800a42a:	9905      	ldr	r1, [sp, #20]
 800a42c:	230a      	movs	r3, #10
 800a42e:	4640      	mov	r0, r8
 800a430:	3101      	adds	r1, #1
 800a432:	f002 fc7d 	bl	800cd30 <_strtol_r>
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	9e05      	ldr	r6, [sp, #20]
 800a43a:	1ac2      	subs	r2, r0, r3
 800a43c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a440:	429e      	cmp	r6, r3
 800a442:	bf28      	it	cs
 800a444:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a448:	4630      	mov	r0, r6
 800a44a:	490d      	ldr	r1, [pc, #52]	@ (800a480 <_scanf_float+0x418>)
 800a44c:	f000 f8f0 	bl	800a630 <siprintf>
 800a450:	e7d0      	b.n	800a3f4 <_scanf_float+0x38c>
 800a452:	076d      	lsls	r5, r5, #29
 800a454:	d4dd      	bmi.n	800a412 <_scanf_float+0x3aa>
 800a456:	9d03      	ldr	r5, [sp, #12]
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	681d      	ldr	r5, [r3, #0]
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	f7f6 fad4 	bl	8000a0c <__aeabi_dcmpun>
 800a464:	b120      	cbz	r0, 800a470 <_scanf_float+0x408>
 800a466:	4807      	ldr	r0, [pc, #28]	@ (800a484 <_scanf_float+0x41c>)
 800a468:	f000 f9e4 	bl	800a834 <nanf>
 800a46c:	6028      	str	r0, [r5, #0]
 800a46e:	e7d5      	b.n	800a41c <_scanf_float+0x3b4>
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f6 fb28 	bl	8000ac8 <__aeabi_d2f>
 800a478:	e7f8      	b.n	800a46c <_scanf_float+0x404>
 800a47a:	f04f 0900 	mov.w	r9, #0
 800a47e:	e62d      	b.n	800a0dc <_scanf_float+0x74>
 800a480:	0800e8b2 	.word	0x0800e8b2
 800a484:	0800e87d 	.word	0x0800e87d

0800a488 <std>:
 800a488:	2300      	movs	r3, #0
 800a48a:	b510      	push	{r4, lr}
 800a48c:	4604      	mov	r4, r0
 800a48e:	e9c0 3300 	strd	r3, r3, [r0]
 800a492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a496:	6083      	str	r3, [r0, #8]
 800a498:	8181      	strh	r1, [r0, #12]
 800a49a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a49c:	81c2      	strh	r2, [r0, #14]
 800a49e:	6183      	str	r3, [r0, #24]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	305c      	adds	r0, #92	@ 0x5c
 800a4a6:	f000 f936 	bl	800a716 <memset>
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e0 <std+0x58>)
 800a4ac:	6224      	str	r4, [r4, #32]
 800a4ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <std+0x5c>)
 800a4b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e8 <std+0x60>)
 800a4b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4ec <std+0x64>)
 800a4ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f0 <std+0x68>)
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	d006      	beq.n	800a4d0 <std+0x48>
 800a4c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4c6:	4294      	cmp	r4, r2
 800a4c8:	d002      	beq.n	800a4d0 <std+0x48>
 800a4ca:	33d0      	adds	r3, #208	@ 0xd0
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d105      	bne.n	800a4dc <std+0x54>
 800a4d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d8:	f000 b99a 	b.w	800a810 <__retarget_lock_init_recursive>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800a671 	.word	0x0800a671
 800a4e4:	0800a693 	.word	0x0800a693
 800a4e8:	0800a6cb 	.word	0x0800a6cb
 800a4ec:	0800a6ef 	.word	0x0800a6ef
 800a4f0:	200009fc 	.word	0x200009fc

0800a4f4 <stdio_exit_handler>:
 800a4f4:	4a02      	ldr	r2, [pc, #8]	@ (800a500 <stdio_exit_handler+0xc>)
 800a4f6:	4903      	ldr	r1, [pc, #12]	@ (800a504 <stdio_exit_handler+0x10>)
 800a4f8:	4803      	ldr	r0, [pc, #12]	@ (800a508 <stdio_exit_handler+0x14>)
 800a4fa:	f000 b87b 	b.w	800a5f4 <_fwalk_sglue>
 800a4fe:	bf00      	nop
 800a500:	20000154 	.word	0x20000154
 800a504:	0800d365 	.word	0x0800d365
 800a508:	20000164 	.word	0x20000164

0800a50c <cleanup_stdio>:
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	4b0c      	ldr	r3, [pc, #48]	@ (800a540 <cleanup_stdio+0x34>)
 800a510:	b510      	push	{r4, lr}
 800a512:	4299      	cmp	r1, r3
 800a514:	4604      	mov	r4, r0
 800a516:	d001      	beq.n	800a51c <cleanup_stdio+0x10>
 800a518:	f002 ff24 	bl	800d364 <_fflush_r>
 800a51c:	68a1      	ldr	r1, [r4, #8]
 800a51e:	4b09      	ldr	r3, [pc, #36]	@ (800a544 <cleanup_stdio+0x38>)
 800a520:	4299      	cmp	r1, r3
 800a522:	d002      	beq.n	800a52a <cleanup_stdio+0x1e>
 800a524:	4620      	mov	r0, r4
 800a526:	f002 ff1d 	bl	800d364 <_fflush_r>
 800a52a:	68e1      	ldr	r1, [r4, #12]
 800a52c:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <cleanup_stdio+0x3c>)
 800a52e:	4299      	cmp	r1, r3
 800a530:	d004      	beq.n	800a53c <cleanup_stdio+0x30>
 800a532:	4620      	mov	r0, r4
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f002 bf14 	b.w	800d364 <_fflush_r>
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	bf00      	nop
 800a540:	200009fc 	.word	0x200009fc
 800a544:	20000a64 	.word	0x20000a64
 800a548:	20000acc 	.word	0x20000acc

0800a54c <global_stdio_init.part.0>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	4b0b      	ldr	r3, [pc, #44]	@ (800a57c <global_stdio_init.part.0+0x30>)
 800a550:	4c0b      	ldr	r4, [pc, #44]	@ (800a580 <global_stdio_init.part.0+0x34>)
 800a552:	4a0c      	ldr	r2, [pc, #48]	@ (800a584 <global_stdio_init.part.0+0x38>)
 800a554:	4620      	mov	r0, r4
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	2104      	movs	r1, #4
 800a55a:	2200      	movs	r2, #0
 800a55c:	f7ff ff94 	bl	800a488 <std>
 800a560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a564:	2201      	movs	r2, #1
 800a566:	2109      	movs	r1, #9
 800a568:	f7ff ff8e 	bl	800a488 <std>
 800a56c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a570:	2202      	movs	r2, #2
 800a572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a576:	2112      	movs	r1, #18
 800a578:	f7ff bf86 	b.w	800a488 <std>
 800a57c:	20000b34 	.word	0x20000b34
 800a580:	200009fc 	.word	0x200009fc
 800a584:	0800a4f5 	.word	0x0800a4f5

0800a588 <__sfp_lock_acquire>:
 800a588:	4801      	ldr	r0, [pc, #4]	@ (800a590 <__sfp_lock_acquire+0x8>)
 800a58a:	f000 b942 	b.w	800a812 <__retarget_lock_acquire_recursive>
 800a58e:	bf00      	nop
 800a590:	20000b3d 	.word	0x20000b3d

0800a594 <__sfp_lock_release>:
 800a594:	4801      	ldr	r0, [pc, #4]	@ (800a59c <__sfp_lock_release+0x8>)
 800a596:	f000 b93d 	b.w	800a814 <__retarget_lock_release_recursive>
 800a59a:	bf00      	nop
 800a59c:	20000b3d 	.word	0x20000b3d

0800a5a0 <__sinit>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f7ff fff0 	bl	800a588 <__sfp_lock_acquire>
 800a5a8:	6a23      	ldr	r3, [r4, #32]
 800a5aa:	b11b      	cbz	r3, 800a5b4 <__sinit+0x14>
 800a5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b0:	f7ff bff0 	b.w	800a594 <__sfp_lock_release>
 800a5b4:	4b04      	ldr	r3, [pc, #16]	@ (800a5c8 <__sinit+0x28>)
 800a5b6:	6223      	str	r3, [r4, #32]
 800a5b8:	4b04      	ldr	r3, [pc, #16]	@ (800a5cc <__sinit+0x2c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1f5      	bne.n	800a5ac <__sinit+0xc>
 800a5c0:	f7ff ffc4 	bl	800a54c <global_stdio_init.part.0>
 800a5c4:	e7f2      	b.n	800a5ac <__sinit+0xc>
 800a5c6:	bf00      	nop
 800a5c8:	0800a50d 	.word	0x0800a50d
 800a5cc:	20000b34 	.word	0x20000b34

0800a5d0 <fiprintf>:
 800a5d0:	b40e      	push	{r1, r2, r3}
 800a5d2:	b503      	push	{r0, r1, lr}
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	4805      	ldr	r0, [pc, #20]	@ (800a5f0 <fiprintf+0x20>)
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f002 fd27 	bl	800d034 <_vfiprintf_r>
 800a5e6:	b002      	add	sp, #8
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	20000160 	.word	0x20000160

0800a5f4 <_fwalk_sglue>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	2600      	movs	r6, #0
 800a600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a604:	f1b9 0901 	subs.w	r9, r9, #1
 800a608:	d505      	bpl.n	800a616 <_fwalk_sglue+0x22>
 800a60a:	6824      	ldr	r4, [r4, #0]
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	d1f7      	bne.n	800a600 <_fwalk_sglue+0xc>
 800a610:	4630      	mov	r0, r6
 800a612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d907      	bls.n	800a62c <_fwalk_sglue+0x38>
 800a61c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a620:	3301      	adds	r3, #1
 800a622:	d003      	beq.n	800a62c <_fwalk_sglue+0x38>
 800a624:	4629      	mov	r1, r5
 800a626:	4638      	mov	r0, r7
 800a628:	47c0      	blx	r8
 800a62a:	4306      	orrs	r6, r0
 800a62c:	3568      	adds	r5, #104	@ 0x68
 800a62e:	e7e9      	b.n	800a604 <_fwalk_sglue+0x10>

0800a630 <siprintf>:
 800a630:	b40e      	push	{r1, r2, r3}
 800a632:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a636:	b500      	push	{lr}
 800a638:	b09c      	sub	sp, #112	@ 0x70
 800a63a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a63c:	9002      	str	r0, [sp, #8]
 800a63e:	9006      	str	r0, [sp, #24]
 800a640:	9107      	str	r1, [sp, #28]
 800a642:	9104      	str	r1, [sp, #16]
 800a644:	4808      	ldr	r0, [pc, #32]	@ (800a668 <siprintf+0x38>)
 800a646:	4909      	ldr	r1, [pc, #36]	@ (800a66c <siprintf+0x3c>)
 800a648:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64c:	9105      	str	r1, [sp, #20]
 800a64e:	6800      	ldr	r0, [r0, #0]
 800a650:	a902      	add	r1, sp, #8
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	f002 fbca 	bl	800cdec <_svfiprintf_r>
 800a658:	2200      	movs	r2, #0
 800a65a:	9b02      	ldr	r3, [sp, #8]
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	b01c      	add	sp, #112	@ 0x70
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	b003      	add	sp, #12
 800a666:	4770      	bx	lr
 800a668:	20000160 	.word	0x20000160
 800a66c:	ffff0208 	.word	0xffff0208

0800a670 <__sread>:
 800a670:	b510      	push	{r4, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a678:	f000 f87c 	bl	800a774 <_read_r>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	bfab      	itete	ge
 800a680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a682:	89a3      	ldrhlt	r3, [r4, #12]
 800a684:	181b      	addge	r3, r3, r0
 800a686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a68a:	bfac      	ite	ge
 800a68c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a68e:	81a3      	strhlt	r3, [r4, #12]
 800a690:	bd10      	pop	{r4, pc}

0800a692 <__swrite>:
 800a692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a696:	461f      	mov	r7, r3
 800a698:	898b      	ldrh	r3, [r1, #12]
 800a69a:	4605      	mov	r5, r0
 800a69c:	05db      	lsls	r3, r3, #23
 800a69e:	460c      	mov	r4, r1
 800a6a0:	4616      	mov	r6, r2
 800a6a2:	d505      	bpl.n	800a6b0 <__swrite+0x1e>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ac:	f000 f850 	bl	800a750 <_lseek_r>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	463b      	mov	r3, r7
 800a6be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	f000 b867 	b.w	800a798 <_write_r>

0800a6ca <__sseek>:
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d2:	f000 f83d 	bl	800a750 <_lseek_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	bf15      	itete	ne
 800a6dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6e6:	81a3      	strheq	r3, [r4, #12]
 800a6e8:	bf18      	it	ne
 800a6ea:	81a3      	strhne	r3, [r4, #12]
 800a6ec:	bd10      	pop	{r4, pc}

0800a6ee <__sclose>:
 800a6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f2:	f000 b81d 	b.w	800a730 <_close_r>

0800a6f6 <memcmp>:
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	3901      	subs	r1, #1
 800a6fa:	4402      	add	r2, r0
 800a6fc:	4290      	cmp	r0, r2
 800a6fe:	d101      	bne.n	800a704 <memcmp+0xe>
 800a700:	2000      	movs	r0, #0
 800a702:	e005      	b.n	800a710 <memcmp+0x1a>
 800a704:	7803      	ldrb	r3, [r0, #0]
 800a706:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	d001      	beq.n	800a712 <memcmp+0x1c>
 800a70e:	1b18      	subs	r0, r3, r4
 800a710:	bd10      	pop	{r4, pc}
 800a712:	3001      	adds	r0, #1
 800a714:	e7f2      	b.n	800a6fc <memcmp+0x6>

0800a716 <memset>:
 800a716:	4603      	mov	r3, r0
 800a718:	4402      	add	r2, r0
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d100      	bne.n	800a720 <memset+0xa>
 800a71e:	4770      	bx	lr
 800a720:	f803 1b01 	strb.w	r1, [r3], #1
 800a724:	e7f9      	b.n	800a71a <memset+0x4>
	...

0800a728 <_localeconv_r>:
 800a728:	4800      	ldr	r0, [pc, #0]	@ (800a72c <_localeconv_r+0x4>)
 800a72a:	4770      	bx	lr
 800a72c:	200002a0 	.word	0x200002a0

0800a730 <_close_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	2300      	movs	r3, #0
 800a734:	4d05      	ldr	r5, [pc, #20]	@ (800a74c <_close_r+0x1c>)
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	f7fb fccf 	bl	80060de <_close>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_close_r+0x1a>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_close_r+0x1a>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20000b38 	.word	0x20000b38

0800a750 <_lseek_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	4611      	mov	r1, r2
 800a758:	2200      	movs	r2, #0
 800a75a:	4d05      	ldr	r5, [pc, #20]	@ (800a770 <_lseek_r+0x20>)
 800a75c:	602a      	str	r2, [r5, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	f7fb fce1 	bl	8006126 <_lseek>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_lseek_r+0x1e>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_lseek_r+0x1e>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	20000b38 	.word	0x20000b38

0800a774 <_read_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	4611      	mov	r1, r2
 800a77c:	2200      	movs	r2, #0
 800a77e:	4d05      	ldr	r5, [pc, #20]	@ (800a794 <_read_r+0x20>)
 800a780:	602a      	str	r2, [r5, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	f7fb fc72 	bl	800606c <_read>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_read_r+0x1e>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_read_r+0x1e>
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20000b38 	.word	0x20000b38

0800a798 <_write_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4d05      	ldr	r5, [pc, #20]	@ (800a7b8 <_write_r+0x20>)
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7fb fc7d 	bl	80060a6 <_write>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_write_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_write_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000b38 	.word	0x20000b38

0800a7bc <__errno>:
 800a7bc:	4b01      	ldr	r3, [pc, #4]	@ (800a7c4 <__errno+0x8>)
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000160 	.word	0x20000160

0800a7c8 <__libc_init_array>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	2600      	movs	r6, #0
 800a7cc:	4d0c      	ldr	r5, [pc, #48]	@ (800a800 <__libc_init_array+0x38>)
 800a7ce:	4c0d      	ldr	r4, [pc, #52]	@ (800a804 <__libc_init_array+0x3c>)
 800a7d0:	1b64      	subs	r4, r4, r5
 800a7d2:	10a4      	asrs	r4, r4, #2
 800a7d4:	42a6      	cmp	r6, r4
 800a7d6:	d109      	bne.n	800a7ec <__libc_init_array+0x24>
 800a7d8:	f003 fb3a 	bl	800de50 <_init>
 800a7dc:	2600      	movs	r6, #0
 800a7de:	4d0a      	ldr	r5, [pc, #40]	@ (800a808 <__libc_init_array+0x40>)
 800a7e0:	4c0a      	ldr	r4, [pc, #40]	@ (800a80c <__libc_init_array+0x44>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	42a6      	cmp	r6, r4
 800a7e8:	d105      	bne.n	800a7f6 <__libc_init_array+0x2e>
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f0:	4798      	blx	r3
 800a7f2:	3601      	adds	r6, #1
 800a7f4:	e7ee      	b.n	800a7d4 <__libc_init_array+0xc>
 800a7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7fa:	4798      	blx	r3
 800a7fc:	3601      	adds	r6, #1
 800a7fe:	e7f2      	b.n	800a7e6 <__libc_init_array+0x1e>
 800a800:	0800ec7c 	.word	0x0800ec7c
 800a804:	0800ec7c 	.word	0x0800ec7c
 800a808:	0800ec7c 	.word	0x0800ec7c
 800a80c:	0800ec80 	.word	0x0800ec80

0800a810 <__retarget_lock_init_recursive>:
 800a810:	4770      	bx	lr

0800a812 <__retarget_lock_acquire_recursive>:
 800a812:	4770      	bx	lr

0800a814 <__retarget_lock_release_recursive>:
 800a814:	4770      	bx	lr

0800a816 <memchr>:
 800a816:	4603      	mov	r3, r0
 800a818:	b510      	push	{r4, lr}
 800a81a:	b2c9      	uxtb	r1, r1
 800a81c:	4402      	add	r2, r0
 800a81e:	4293      	cmp	r3, r2
 800a820:	4618      	mov	r0, r3
 800a822:	d101      	bne.n	800a828 <memchr+0x12>
 800a824:	2000      	movs	r0, #0
 800a826:	e003      	b.n	800a830 <memchr+0x1a>
 800a828:	7804      	ldrb	r4, [r0, #0]
 800a82a:	3301      	adds	r3, #1
 800a82c:	428c      	cmp	r4, r1
 800a82e:	d1f6      	bne.n	800a81e <memchr+0x8>
 800a830:	bd10      	pop	{r4, pc}
	...

0800a834 <nanf>:
 800a834:	4800      	ldr	r0, [pc, #0]	@ (800a838 <nanf+0x4>)
 800a836:	4770      	bx	lr
 800a838:	7fc00000 	.word	0x7fc00000

0800a83c <abort>:
 800a83c:	2006      	movs	r0, #6
 800a83e:	b508      	push	{r3, lr}
 800a840:	f002 fea0 	bl	800d584 <raise>
 800a844:	2001      	movs	r0, #1
 800a846:	f7fb fc06 	bl	8006056 <_exit>

0800a84a <quorem>:
 800a84a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84e:	6903      	ldr	r3, [r0, #16]
 800a850:	690c      	ldr	r4, [r1, #16]
 800a852:	4607      	mov	r7, r0
 800a854:	42a3      	cmp	r3, r4
 800a856:	db7e      	blt.n	800a956 <quorem+0x10c>
 800a858:	3c01      	subs	r4, #1
 800a85a:	00a3      	lsls	r3, r4, #2
 800a85c:	f100 0514 	add.w	r5, r0, #20
 800a860:	f101 0814 	add.w	r8, r1, #20
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a874:	3301      	adds	r3, #1
 800a876:	429a      	cmp	r2, r3
 800a878:	fbb2 f6f3 	udiv	r6, r2, r3
 800a87c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a880:	d32e      	bcc.n	800a8e0 <quorem+0x96>
 800a882:	f04f 0a00 	mov.w	sl, #0
 800a886:	46c4      	mov	ip, r8
 800a888:	46ae      	mov	lr, r5
 800a88a:	46d3      	mov	fp, sl
 800a88c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a890:	b298      	uxth	r0, r3
 800a892:	fb06 a000 	mla	r0, r6, r0, sl
 800a896:	0c1b      	lsrs	r3, r3, #16
 800a898:	0c02      	lsrs	r2, r0, #16
 800a89a:	fb06 2303 	mla	r3, r6, r3, r2
 800a89e:	f8de 2000 	ldr.w	r2, [lr]
 800a8a2:	b280      	uxth	r0, r0
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	1a12      	subs	r2, r2, r0
 800a8a8:	445a      	add	r2, fp
 800a8aa:	f8de 0000 	ldr.w	r0, [lr]
 800a8ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a8b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a8c2:	45e1      	cmp	r9, ip
 800a8c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a8cc:	d2de      	bcs.n	800a88c <quorem+0x42>
 800a8ce:	9b00      	ldr	r3, [sp, #0]
 800a8d0:	58eb      	ldr	r3, [r5, r3]
 800a8d2:	b92b      	cbnz	r3, 800a8e0 <quorem+0x96>
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	461a      	mov	r2, r3
 800a8dc:	d32f      	bcc.n	800a93e <quorem+0xf4>
 800a8de:	613c      	str	r4, [r7, #16]
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f001 f9c5 	bl	800bc70 <__mcmp>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	db25      	blt.n	800a936 <quorem+0xec>
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8f2:	f8d1 c000 	ldr.w	ip, [r1]
 800a8f6:	fa1f fe82 	uxth.w	lr, r2
 800a8fa:	fa1f f38c 	uxth.w	r3, ip
 800a8fe:	eba3 030e 	sub.w	r3, r3, lr
 800a902:	4403      	add	r3, r0
 800a904:	0c12      	lsrs	r2, r2, #16
 800a906:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a90a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a914:	45c1      	cmp	r9, r8
 800a916:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a91a:	f841 3b04 	str.w	r3, [r1], #4
 800a91e:	d2e6      	bcs.n	800a8ee <quorem+0xa4>
 800a920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a924:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a928:	b922      	cbnz	r2, 800a934 <quorem+0xea>
 800a92a:	3b04      	subs	r3, #4
 800a92c:	429d      	cmp	r5, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	d30b      	bcc.n	800a94a <quorem+0x100>
 800a932:	613c      	str	r4, [r7, #16]
 800a934:	3601      	adds	r6, #1
 800a936:	4630      	mov	r0, r6
 800a938:	b003      	add	sp, #12
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	6812      	ldr	r2, [r2, #0]
 800a940:	3b04      	subs	r3, #4
 800a942:	2a00      	cmp	r2, #0
 800a944:	d1cb      	bne.n	800a8de <quorem+0x94>
 800a946:	3c01      	subs	r4, #1
 800a948:	e7c6      	b.n	800a8d8 <quorem+0x8e>
 800a94a:	6812      	ldr	r2, [r2, #0]
 800a94c:	3b04      	subs	r3, #4
 800a94e:	2a00      	cmp	r2, #0
 800a950:	d1ef      	bne.n	800a932 <quorem+0xe8>
 800a952:	3c01      	subs	r4, #1
 800a954:	e7ea      	b.n	800a92c <quorem+0xe2>
 800a956:	2000      	movs	r0, #0
 800a958:	e7ee      	b.n	800a938 <quorem+0xee>
 800a95a:	0000      	movs	r0, r0
 800a95c:	0000      	movs	r0, r0
	...

0800a960 <_dtoa_r>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	4614      	mov	r4, r2
 800a966:	461d      	mov	r5, r3
 800a968:	69c7      	ldr	r7, [r0, #28]
 800a96a:	b097      	sub	sp, #92	@ 0x5c
 800a96c:	4683      	mov	fp, r0
 800a96e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a972:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a974:	b97f      	cbnz	r7, 800a996 <_dtoa_r+0x36>
 800a976:	2010      	movs	r0, #16
 800a978:	f000 fe02 	bl	800b580 <malloc>
 800a97c:	4602      	mov	r2, r0
 800a97e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a982:	b920      	cbnz	r0, 800a98e <_dtoa_r+0x2e>
 800a984:	21ef      	movs	r1, #239	@ 0xef
 800a986:	4ba8      	ldr	r3, [pc, #672]	@ (800ac28 <_dtoa_r+0x2c8>)
 800a988:	48a8      	ldr	r0, [pc, #672]	@ (800ac2c <_dtoa_r+0x2cc>)
 800a98a:	f7fe fef3 	bl	8009774 <__assert_func>
 800a98e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a992:	6007      	str	r7, [r0, #0]
 800a994:	60c7      	str	r7, [r0, #12]
 800a996:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a99a:	6819      	ldr	r1, [r3, #0]
 800a99c:	b159      	cbz	r1, 800a9b6 <_dtoa_r+0x56>
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4093      	lsls	r3, r2
 800a9a4:	604a      	str	r2, [r1, #4]
 800a9a6:	608b      	str	r3, [r1, #8]
 800a9a8:	4658      	mov	r0, fp
 800a9aa:	f000 fedf 	bl	800b76c <_Bfree>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	1e2b      	subs	r3, r5, #0
 800a9b8:	bfaf      	iteee	ge
 800a9ba:	2300      	movge	r3, #0
 800a9bc:	2201      	movlt	r2, #1
 800a9be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a9c2:	9303      	strlt	r3, [sp, #12]
 800a9c4:	bfa8      	it	ge
 800a9c6:	6033      	strge	r3, [r6, #0]
 800a9c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a9cc:	4b98      	ldr	r3, [pc, #608]	@ (800ac30 <_dtoa_r+0x2d0>)
 800a9ce:	bfb8      	it	lt
 800a9d0:	6032      	strlt	r2, [r6, #0]
 800a9d2:	ea33 0308 	bics.w	r3, r3, r8
 800a9d6:	d112      	bne.n	800a9fe <_dtoa_r+0x9e>
 800a9d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a9e4:	4323      	orrs	r3, r4
 800a9e6:	f000 8550 	beq.w	800b48a <_dtoa_r+0xb2a>
 800a9ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a9ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ac34 <_dtoa_r+0x2d4>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 8552 	beq.w	800b49a <_dtoa_r+0xb3a>
 800a9f6:	f10a 0303 	add.w	r3, sl, #3
 800a9fa:	f000 bd4c 	b.w	800b496 <_dtoa_r+0xb36>
 800a9fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f7f5 ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 800aa12:	4607      	mov	r7, r0
 800aa14:	b158      	cbz	r0, 800aa2e <_dtoa_r+0xce>
 800aa16:	2301      	movs	r3, #1
 800aa18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aa1e:	b113      	cbz	r3, 800aa26 <_dtoa_r+0xc6>
 800aa20:	4b85      	ldr	r3, [pc, #532]	@ (800ac38 <_dtoa_r+0x2d8>)
 800aa22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ac3c <_dtoa_r+0x2dc>
 800aa2a:	f000 bd36 	b.w	800b49a <_dtoa_r+0xb3a>
 800aa2e:	ab14      	add	r3, sp, #80	@ 0x50
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	ab15      	add	r3, sp, #84	@ 0x54
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	4658      	mov	r0, fp
 800aa38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa3c:	f001 fa30 	bl	800bea0 <__d2b>
 800aa40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800aa44:	4681      	mov	r9, r0
 800aa46:	2e00      	cmp	r6, #0
 800aa48:	d077      	beq.n	800ab3a <_dtoa_r+0x1da>
 800aa4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa60:	9712      	str	r7, [sp, #72]	@ 0x48
 800aa62:	4619      	mov	r1, r3
 800aa64:	2200      	movs	r2, #0
 800aa66:	4b76      	ldr	r3, [pc, #472]	@ (800ac40 <_dtoa_r+0x2e0>)
 800aa68:	f7f5 fb7e 	bl	8000168 <__aeabi_dsub>
 800aa6c:	a368      	add	r3, pc, #416	@ (adr r3, 800ac10 <_dtoa_r+0x2b0>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	f7f5 fd31 	bl	80004d8 <__aeabi_dmul>
 800aa76:	a368      	add	r3, pc, #416	@ (adr r3, 800ac18 <_dtoa_r+0x2b8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f7f5 fb76 	bl	800016c <__adddf3>
 800aa80:	4604      	mov	r4, r0
 800aa82:	4630      	mov	r0, r6
 800aa84:	460d      	mov	r5, r1
 800aa86:	f7f5 fcbd 	bl	8000404 <__aeabi_i2d>
 800aa8a:	a365      	add	r3, pc, #404	@ (adr r3, 800ac20 <_dtoa_r+0x2c0>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fd22 	bl	80004d8 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f7f5 fb66 	bl	800016c <__adddf3>
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	f7f5 ffc8 	bl	8000a38 <__aeabi_d2iz>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	4607      	mov	r7, r0
 800aaac:	2300      	movs	r3, #0
 800aaae:	4620      	mov	r0, r4
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7f5 ff83 	bl	80009bc <__aeabi_dcmplt>
 800aab6:	b140      	cbz	r0, 800aaca <_dtoa_r+0x16a>
 800aab8:	4638      	mov	r0, r7
 800aaba:	f7f5 fca3 	bl	8000404 <__aeabi_i2d>
 800aabe:	4622      	mov	r2, r4
 800aac0:	462b      	mov	r3, r5
 800aac2:	f7f5 ff71 	bl	80009a8 <__aeabi_dcmpeq>
 800aac6:	b900      	cbnz	r0, 800aaca <_dtoa_r+0x16a>
 800aac8:	3f01      	subs	r7, #1
 800aaca:	2f16      	cmp	r7, #22
 800aacc:	d853      	bhi.n	800ab76 <_dtoa_r+0x216>
 800aace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aad2:	4b5c      	ldr	r3, [pc, #368]	@ (800ac44 <_dtoa_r+0x2e4>)
 800aad4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 ff6e 	bl	80009bc <__aeabi_dcmplt>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d04a      	beq.n	800ab7a <_dtoa_r+0x21a>
 800aae4:	2300      	movs	r3, #0
 800aae6:	3f01      	subs	r7, #1
 800aae8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aaec:	1b9b      	subs	r3, r3, r6
 800aaee:	1e5a      	subs	r2, r3, #1
 800aaf0:	bf46      	itte	mi
 800aaf2:	f1c3 0801 	rsbmi	r8, r3, #1
 800aaf6:	2300      	movmi	r3, #0
 800aaf8:	f04f 0800 	movpl.w	r8, #0
 800aafc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aafe:	bf48      	it	mi
 800ab00:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	db3b      	blt.n	800ab7e <_dtoa_r+0x21e>
 800ab06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab08:	970e      	str	r7, [sp, #56]	@ 0x38
 800ab0a:	443b      	add	r3, r7
 800ab0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0e:	2300      	movs	r3, #0
 800ab10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab14:	2b09      	cmp	r3, #9
 800ab16:	d866      	bhi.n	800abe6 <_dtoa_r+0x286>
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	bfc4      	itt	gt
 800ab1c:	3b04      	subgt	r3, #4
 800ab1e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ab20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab22:	bfc8      	it	gt
 800ab24:	2400      	movgt	r4, #0
 800ab26:	f1a3 0302 	sub.w	r3, r3, #2
 800ab2a:	bfd8      	it	le
 800ab2c:	2401      	movle	r4, #1
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d864      	bhi.n	800abfc <_dtoa_r+0x29c>
 800ab32:	e8df f003 	tbb	[pc, r3]
 800ab36:	382b      	.short	0x382b
 800ab38:	5636      	.short	0x5636
 800ab3a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ab3e:	441e      	add	r6, r3
 800ab40:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	bfc1      	itttt	gt
 800ab48:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ab50:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab54:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab58:	bfd6      	itet	le
 800ab5a:	f1c3 0320 	rsble	r3, r3, #32
 800ab5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ab62:	fa04 f003 	lslle.w	r0, r4, r3
 800ab66:	f7f5 fc3d 	bl	80003e4 <__aeabi_ui2d>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab70:	3e01      	subs	r6, #1
 800ab72:	9212      	str	r2, [sp, #72]	@ 0x48
 800ab74:	e775      	b.n	800aa62 <_dtoa_r+0x102>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7b6      	b.n	800aae8 <_dtoa_r+0x188>
 800ab7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab7c:	e7b5      	b.n	800aaea <_dtoa_r+0x18a>
 800ab7e:	427b      	negs	r3, r7
 800ab80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab82:	2300      	movs	r3, #0
 800ab84:	eba8 0807 	sub.w	r8, r8, r7
 800ab88:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab8a:	e7c2      	b.n	800ab12 <_dtoa_r+0x1b2>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dc35      	bgt.n	800ac02 <_dtoa_r+0x2a2>
 800ab96:	2301      	movs	r3, #1
 800ab98:	461a      	mov	r2, r3
 800ab9a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab9e:	9221      	str	r2, [sp, #132]	@ 0x84
 800aba0:	e00b      	b.n	800abba <_dtoa_r+0x25a>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e7f3      	b.n	800ab8e <_dtoa_r+0x22e>
 800aba6:	2300      	movs	r3, #0
 800aba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abac:	18fb      	adds	r3, r7, r3
 800abae:	9308      	str	r3, [sp, #32]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	9307      	str	r3, [sp, #28]
 800abb6:	bfb8      	it	lt
 800abb8:	2301      	movlt	r3, #1
 800abba:	2100      	movs	r1, #0
 800abbc:	2204      	movs	r2, #4
 800abbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 800abc2:	f102 0514 	add.w	r5, r2, #20
 800abc6:	429d      	cmp	r5, r3
 800abc8:	d91f      	bls.n	800ac0a <_dtoa_r+0x2aa>
 800abca:	6041      	str	r1, [r0, #4]
 800abcc:	4658      	mov	r0, fp
 800abce:	f000 fd8d 	bl	800b6ec <_Balloc>
 800abd2:	4682      	mov	sl, r0
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d139      	bne.n	800ac4c <_dtoa_r+0x2ec>
 800abd8:	4602      	mov	r2, r0
 800abda:	f240 11af 	movw	r1, #431	@ 0x1af
 800abde:	4b1a      	ldr	r3, [pc, #104]	@ (800ac48 <_dtoa_r+0x2e8>)
 800abe0:	e6d2      	b.n	800a988 <_dtoa_r+0x28>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e7e0      	b.n	800aba8 <_dtoa_r+0x248>
 800abe6:	2401      	movs	r4, #1
 800abe8:	2300      	movs	r3, #0
 800abea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abec:	9320      	str	r3, [sp, #128]	@ 0x80
 800abee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abf2:	2200      	movs	r2, #0
 800abf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800abf8:	2312      	movs	r3, #18
 800abfa:	e7d0      	b.n	800ab9e <_dtoa_r+0x23e>
 800abfc:	2301      	movs	r3, #1
 800abfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac00:	e7f5      	b.n	800abee <_dtoa_r+0x28e>
 800ac02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ac08:	e7d7      	b.n	800abba <_dtoa_r+0x25a>
 800ac0a:	3101      	adds	r1, #1
 800ac0c:	0052      	lsls	r2, r2, #1
 800ac0e:	e7d8      	b.n	800abc2 <_dtoa_r+0x262>
 800ac10:	636f4361 	.word	0x636f4361
 800ac14:	3fd287a7 	.word	0x3fd287a7
 800ac18:	8b60c8b3 	.word	0x8b60c8b3
 800ac1c:	3fc68a28 	.word	0x3fc68a28
 800ac20:	509f79fb 	.word	0x509f79fb
 800ac24:	3fd34413 	.word	0x3fd34413
 800ac28:	0800e8c4 	.word	0x0800e8c4
 800ac2c:	0800e8db 	.word	0x0800e8db
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	0800e8c0 	.word	0x0800e8c0
 800ac38:	0800e88f 	.word	0x0800e88f
 800ac3c:	0800e88e 	.word	0x0800e88e
 800ac40:	3ff80000 	.word	0x3ff80000
 800ac44:	0800e9d8 	.word	0x0800e9d8
 800ac48:	0800e933 	.word	0x0800e933
 800ac4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac50:	6018      	str	r0, [r3, #0]
 800ac52:	9b07      	ldr	r3, [sp, #28]
 800ac54:	2b0e      	cmp	r3, #14
 800ac56:	f200 80a4 	bhi.w	800ada2 <_dtoa_r+0x442>
 800ac5a:	2c00      	cmp	r4, #0
 800ac5c:	f000 80a1 	beq.w	800ada2 <_dtoa_r+0x442>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	dd33      	ble.n	800accc <_dtoa_r+0x36c>
 800ac64:	4b86      	ldr	r3, [pc, #536]	@ (800ae80 <_dtoa_r+0x520>)
 800ac66:	f007 020f 	and.w	r2, r7, #15
 800ac6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac6e:	05f8      	lsls	r0, r7, #23
 800ac70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac7c:	d516      	bpl.n	800acac <_dtoa_r+0x34c>
 800ac7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac82:	4b80      	ldr	r3, [pc, #512]	@ (800ae84 <_dtoa_r+0x524>)
 800ac84:	2603      	movs	r6, #3
 800ac86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac8a:	f7f5 fd4f 	bl	800072c <__aeabi_ddiv>
 800ac8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac92:	f004 040f 	and.w	r4, r4, #15
 800ac96:	4d7b      	ldr	r5, [pc, #492]	@ (800ae84 <_dtoa_r+0x524>)
 800ac98:	b954      	cbnz	r4, 800acb0 <_dtoa_r+0x350>
 800ac9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca2:	f7f5 fd43 	bl	800072c <__aeabi_ddiv>
 800aca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acaa:	e028      	b.n	800acfe <_dtoa_r+0x39e>
 800acac:	2602      	movs	r6, #2
 800acae:	e7f2      	b.n	800ac96 <_dtoa_r+0x336>
 800acb0:	07e1      	lsls	r1, r4, #31
 800acb2:	d508      	bpl.n	800acc6 <_dtoa_r+0x366>
 800acb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acbc:	f7f5 fc0c 	bl	80004d8 <__aeabi_dmul>
 800acc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc4:	3601      	adds	r6, #1
 800acc6:	1064      	asrs	r4, r4, #1
 800acc8:	3508      	adds	r5, #8
 800acca:	e7e5      	b.n	800ac98 <_dtoa_r+0x338>
 800accc:	f000 80d2 	beq.w	800ae74 <_dtoa_r+0x514>
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acd4:	427c      	negs	r4, r7
 800acd6:	4b6a      	ldr	r3, [pc, #424]	@ (800ae80 <_dtoa_r+0x520>)
 800acd8:	f004 020f 	and.w	r2, r4, #15
 800acdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f7f5 fbf8 	bl	80004d8 <__aeabi_dmul>
 800ace8:	2602      	movs	r6, #2
 800acea:	2300      	movs	r3, #0
 800acec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf0:	4d64      	ldr	r5, [pc, #400]	@ (800ae84 <_dtoa_r+0x524>)
 800acf2:	1124      	asrs	r4, r4, #4
 800acf4:	2c00      	cmp	r4, #0
 800acf6:	f040 80b2 	bne.w	800ae5e <_dtoa_r+0x4fe>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1d3      	bne.n	800aca6 <_dtoa_r+0x346>
 800acfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80b7 	beq.w	800ae78 <_dtoa_r+0x518>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4b5d      	ldr	r3, [pc, #372]	@ (800ae88 <_dtoa_r+0x528>)
 800ad12:	f7f5 fe53 	bl	80009bc <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f000 80ae 	beq.w	800ae78 <_dtoa_r+0x518>
 800ad1c:	9b07      	ldr	r3, [sp, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 80aa 	beq.w	800ae78 <_dtoa_r+0x518>
 800ad24:	9b08      	ldr	r3, [sp, #32]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dd37      	ble.n	800ad9a <_dtoa_r+0x43a>
 800ad2a:	1e7b      	subs	r3, r7, #1
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	2200      	movs	r2, #0
 800ad32:	4629      	mov	r1, r5
 800ad34:	4b55      	ldr	r3, [pc, #340]	@ (800ae8c <_dtoa_r+0x52c>)
 800ad36:	f7f5 fbcf 	bl	80004d8 <__aeabi_dmul>
 800ad3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3e:	9c08      	ldr	r4, [sp, #32]
 800ad40:	3601      	adds	r6, #1
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7f5 fb5e 	bl	8000404 <__aeabi_i2d>
 800ad48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad4c:	f7f5 fbc4 	bl	80004d8 <__aeabi_dmul>
 800ad50:	2200      	movs	r2, #0
 800ad52:	4b4f      	ldr	r3, [pc, #316]	@ (800ae90 <_dtoa_r+0x530>)
 800ad54:	f7f5 fa0a 	bl	800016c <__adddf3>
 800ad58:	4605      	mov	r5, r0
 800ad5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad5e:	2c00      	cmp	r4, #0
 800ad60:	f040 809a 	bne.w	800ae98 <_dtoa_r+0x538>
 800ad64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4b4a      	ldr	r3, [pc, #296]	@ (800ae94 <_dtoa_r+0x534>)
 800ad6c:	f7f5 f9fc 	bl	8000168 <__aeabi_dsub>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad78:	462a      	mov	r2, r5
 800ad7a:	4633      	mov	r3, r6
 800ad7c:	f7f5 fe3c 	bl	80009f8 <__aeabi_dcmpgt>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f040 828e 	bne.w	800b2a2 <_dtoa_r+0x942>
 800ad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad90:	f7f5 fe14 	bl	80009bc <__aeabi_dcmplt>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	f040 8127 	bne.w	800afe8 <_dtoa_r+0x688>
 800ad9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ada2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f2c0 8163 	blt.w	800b070 <_dtoa_r+0x710>
 800adaa:	2f0e      	cmp	r7, #14
 800adac:	f300 8160 	bgt.w	800b070 <_dtoa_r+0x710>
 800adb0:	4b33      	ldr	r3, [pc, #204]	@ (800ae80 <_dtoa_r+0x520>)
 800adb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800adbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da03      	bge.n	800adcc <_dtoa_r+0x46c>
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f340 8100 	ble.w	800afcc <_dtoa_r+0x66c>
 800adcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800add0:	4656      	mov	r6, sl
 800add2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fca7 	bl	800072c <__aeabi_ddiv>
 800adde:	f7f5 fe2b 	bl	8000a38 <__aeabi_d2iz>
 800ade2:	4680      	mov	r8, r0
 800ade4:	f7f5 fb0e 	bl	8000404 <__aeabi_i2d>
 800ade8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 f9b6 	bl	8000168 <__aeabi_dsub>
 800adfc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae00:	9d07      	ldr	r5, [sp, #28]
 800ae02:	f806 4b01 	strb.w	r4, [r6], #1
 800ae06:	eba6 040a 	sub.w	r4, r6, sl
 800ae0a:	42a5      	cmp	r5, r4
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	f040 8116 	bne.w	800b040 <_dtoa_r+0x6e0>
 800ae14:	f7f5 f9aa 	bl	800016c <__adddf3>
 800ae18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	f7f5 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f040 80f8 	bne.w	800b01a <_dtoa_r+0x6ba>
 800ae2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 800ae36:	b118      	cbz	r0, 800ae40 <_dtoa_r+0x4e0>
 800ae38:	f018 0f01 	tst.w	r8, #1
 800ae3c:	f040 80ed 	bne.w	800b01a <_dtoa_r+0x6ba>
 800ae40:	4649      	mov	r1, r9
 800ae42:	4658      	mov	r0, fp
 800ae44:	f000 fc92 	bl	800b76c <_Bfree>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	7033      	strb	r3, [r6, #0]
 800ae4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae4e:	3701      	adds	r7, #1
 800ae50:	601f      	str	r7, [r3, #0]
 800ae52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8320 	beq.w	800b49a <_dtoa_r+0xb3a>
 800ae5a:	601e      	str	r6, [r3, #0]
 800ae5c:	e31d      	b.n	800b49a <_dtoa_r+0xb3a>
 800ae5e:	07e2      	lsls	r2, r4, #31
 800ae60:	d505      	bpl.n	800ae6e <_dtoa_r+0x50e>
 800ae62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae66:	f7f5 fb37 	bl	80004d8 <__aeabi_dmul>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	1064      	asrs	r4, r4, #1
 800ae70:	3508      	adds	r5, #8
 800ae72:	e73f      	b.n	800acf4 <_dtoa_r+0x394>
 800ae74:	2602      	movs	r6, #2
 800ae76:	e742      	b.n	800acfe <_dtoa_r+0x39e>
 800ae78:	9c07      	ldr	r4, [sp, #28]
 800ae7a:	9704      	str	r7, [sp, #16]
 800ae7c:	e761      	b.n	800ad42 <_dtoa_r+0x3e2>
 800ae7e:	bf00      	nop
 800ae80:	0800e9d8 	.word	0x0800e9d8
 800ae84:	0800e9b0 	.word	0x0800e9b0
 800ae88:	3ff00000 	.word	0x3ff00000
 800ae8c:	40240000 	.word	0x40240000
 800ae90:	401c0000 	.word	0x401c0000
 800ae94:	40140000 	.word	0x40140000
 800ae98:	4b70      	ldr	r3, [pc, #448]	@ (800b05c <_dtoa_r+0x6fc>)
 800ae9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aea4:	4454      	add	r4, sl
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d045      	beq.n	800af36 <_dtoa_r+0x5d6>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	496c      	ldr	r1, [pc, #432]	@ (800b060 <_dtoa_r+0x700>)
 800aeae:	f7f5 fc3d 	bl	800072c <__aeabi_ddiv>
 800aeb2:	4633      	mov	r3, r6
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	f7f5 f957 	bl	8000168 <__aeabi_dsub>
 800aeba:	4656      	mov	r6, sl
 800aebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aec4:	f7f5 fdb8 	bl	8000a38 <__aeabi_d2iz>
 800aec8:	4605      	mov	r5, r0
 800aeca:	f7f5 fa9b 	bl	8000404 <__aeabi_i2d>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed6:	f7f5 f947 	bl	8000168 <__aeabi_dsub>
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	3530      	adds	r5, #48	@ 0x30
 800aee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aee8:	f806 5b01 	strb.w	r5, [r6], #1
 800aeec:	f7f5 fd66 	bl	80009bc <__aeabi_dcmplt>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d163      	bne.n	800afbc <_dtoa_r+0x65c>
 800aef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aef8:	2000      	movs	r0, #0
 800aefa:	495a      	ldr	r1, [pc, #360]	@ (800b064 <_dtoa_r+0x704>)
 800aefc:	f7f5 f934 	bl	8000168 <__aeabi_dsub>
 800af00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af04:	f7f5 fd5a 	bl	80009bc <__aeabi_dcmplt>
 800af08:	2800      	cmp	r0, #0
 800af0a:	f040 8087 	bne.w	800b01c <_dtoa_r+0x6bc>
 800af0e:	42a6      	cmp	r6, r4
 800af10:	f43f af43 	beq.w	800ad9a <_dtoa_r+0x43a>
 800af14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af18:	2200      	movs	r2, #0
 800af1a:	4b53      	ldr	r3, [pc, #332]	@ (800b068 <_dtoa_r+0x708>)
 800af1c:	f7f5 fadc 	bl	80004d8 <__aeabi_dmul>
 800af20:	2200      	movs	r2, #0
 800af22:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2a:	4b4f      	ldr	r3, [pc, #316]	@ (800b068 <_dtoa_r+0x708>)
 800af2c:	f7f5 fad4 	bl	80004d8 <__aeabi_dmul>
 800af30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af34:	e7c4      	b.n	800aec0 <_dtoa_r+0x560>
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	f7f5 facd 	bl	80004d8 <__aeabi_dmul>
 800af3e:	4656      	mov	r6, sl
 800af40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af44:	9413      	str	r4, [sp, #76]	@ 0x4c
 800af46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4a:	f7f5 fd75 	bl	8000a38 <__aeabi_d2iz>
 800af4e:	4605      	mov	r5, r0
 800af50:	f7f5 fa58 	bl	8000404 <__aeabi_i2d>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5c:	f7f5 f904 	bl	8000168 <__aeabi_dsub>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	3530      	adds	r5, #48	@ 0x30
 800af66:	f806 5b01 	strb.w	r5, [r6], #1
 800af6a:	42a6      	cmp	r6, r4
 800af6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af70:	f04f 0200 	mov.w	r2, #0
 800af74:	d124      	bne.n	800afc0 <_dtoa_r+0x660>
 800af76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af7a:	4b39      	ldr	r3, [pc, #228]	@ (800b060 <_dtoa_r+0x700>)
 800af7c:	f7f5 f8f6 	bl	800016c <__adddf3>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af88:	f7f5 fd36 	bl	80009f8 <__aeabi_dcmpgt>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d145      	bne.n	800b01c <_dtoa_r+0x6bc>
 800af90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af94:	2000      	movs	r0, #0
 800af96:	4932      	ldr	r1, [pc, #200]	@ (800b060 <_dtoa_r+0x700>)
 800af98:	f7f5 f8e6 	bl	8000168 <__aeabi_dsub>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afa4:	f7f5 fd0a 	bl	80009bc <__aeabi_dcmplt>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f43f aef6 	beq.w	800ad9a <_dtoa_r+0x43a>
 800afae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800afb0:	1e73      	subs	r3, r6, #1
 800afb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afb8:	2b30      	cmp	r3, #48	@ 0x30
 800afba:	d0f8      	beq.n	800afae <_dtoa_r+0x64e>
 800afbc:	9f04      	ldr	r7, [sp, #16]
 800afbe:	e73f      	b.n	800ae40 <_dtoa_r+0x4e0>
 800afc0:	4b29      	ldr	r3, [pc, #164]	@ (800b068 <_dtoa_r+0x708>)
 800afc2:	f7f5 fa89 	bl	80004d8 <__aeabi_dmul>
 800afc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afca:	e7bc      	b.n	800af46 <_dtoa_r+0x5e6>
 800afcc:	d10c      	bne.n	800afe8 <_dtoa_r+0x688>
 800afce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd2:	2200      	movs	r2, #0
 800afd4:	4b25      	ldr	r3, [pc, #148]	@ (800b06c <_dtoa_r+0x70c>)
 800afd6:	f7f5 fa7f 	bl	80004d8 <__aeabi_dmul>
 800afda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afde:	f7f5 fd01 	bl	80009e4 <__aeabi_dcmpge>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f000 815b 	beq.w	800b29e <_dtoa_r+0x93e>
 800afe8:	2400      	movs	r4, #0
 800afea:	4625      	mov	r5, r4
 800afec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afee:	4656      	mov	r6, sl
 800aff0:	43db      	mvns	r3, r3
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	2700      	movs	r7, #0
 800aff6:	4621      	mov	r1, r4
 800aff8:	4658      	mov	r0, fp
 800affa:	f000 fbb7 	bl	800b76c <_Bfree>
 800affe:	2d00      	cmp	r5, #0
 800b000:	d0dc      	beq.n	800afbc <_dtoa_r+0x65c>
 800b002:	b12f      	cbz	r7, 800b010 <_dtoa_r+0x6b0>
 800b004:	42af      	cmp	r7, r5
 800b006:	d003      	beq.n	800b010 <_dtoa_r+0x6b0>
 800b008:	4639      	mov	r1, r7
 800b00a:	4658      	mov	r0, fp
 800b00c:	f000 fbae 	bl	800b76c <_Bfree>
 800b010:	4629      	mov	r1, r5
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fbaa 	bl	800b76c <_Bfree>
 800b018:	e7d0      	b.n	800afbc <_dtoa_r+0x65c>
 800b01a:	9704      	str	r7, [sp, #16]
 800b01c:	4633      	mov	r3, r6
 800b01e:	461e      	mov	r6, r3
 800b020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b024:	2a39      	cmp	r2, #57	@ 0x39
 800b026:	d107      	bne.n	800b038 <_dtoa_r+0x6d8>
 800b028:	459a      	cmp	sl, r3
 800b02a:	d1f8      	bne.n	800b01e <_dtoa_r+0x6be>
 800b02c:	9a04      	ldr	r2, [sp, #16]
 800b02e:	3201      	adds	r2, #1
 800b030:	9204      	str	r2, [sp, #16]
 800b032:	2230      	movs	r2, #48	@ 0x30
 800b034:	f88a 2000 	strb.w	r2, [sl]
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	3201      	adds	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e7bd      	b.n	800afbc <_dtoa_r+0x65c>
 800b040:	2200      	movs	r2, #0
 800b042:	4b09      	ldr	r3, [pc, #36]	@ (800b068 <_dtoa_r+0x708>)
 800b044:	f7f5 fa48 	bl	80004d8 <__aeabi_dmul>
 800b048:	2200      	movs	r2, #0
 800b04a:	2300      	movs	r3, #0
 800b04c:	4604      	mov	r4, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	f7f5 fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 800b054:	2800      	cmp	r0, #0
 800b056:	f43f aebc 	beq.w	800add2 <_dtoa_r+0x472>
 800b05a:	e6f1      	b.n	800ae40 <_dtoa_r+0x4e0>
 800b05c:	0800e9d8 	.word	0x0800e9d8
 800b060:	3fe00000 	.word	0x3fe00000
 800b064:	3ff00000 	.word	0x3ff00000
 800b068:	40240000 	.word	0x40240000
 800b06c:	40140000 	.word	0x40140000
 800b070:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b072:	2a00      	cmp	r2, #0
 800b074:	f000 80db 	beq.w	800b22e <_dtoa_r+0x8ce>
 800b078:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b07a:	2a01      	cmp	r2, #1
 800b07c:	f300 80bf 	bgt.w	800b1fe <_dtoa_r+0x89e>
 800b080:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b082:	2a00      	cmp	r2, #0
 800b084:	f000 80b7 	beq.w	800b1f6 <_dtoa_r+0x896>
 800b088:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b08c:	4646      	mov	r6, r8
 800b08e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b092:	2101      	movs	r1, #1
 800b094:	441a      	add	r2, r3
 800b096:	4658      	mov	r0, fp
 800b098:	4498      	add	r8, r3
 800b09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b09c:	f000 fc64 	bl	800b968 <__i2b>
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	b15e      	cbz	r6, 800b0bc <_dtoa_r+0x75c>
 800b0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd08      	ble.n	800b0bc <_dtoa_r+0x75c>
 800b0aa:	42b3      	cmp	r3, r6
 800b0ac:	bfa8      	it	ge
 800b0ae:	4633      	movge	r3, r6
 800b0b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b2:	eba8 0803 	sub.w	r8, r8, r3
 800b0b6:	1af6      	subs	r6, r6, r3
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0be:	b1f3      	cbz	r3, 800b0fe <_dtoa_r+0x79e>
 800b0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 80b7 	beq.w	800b236 <_dtoa_r+0x8d6>
 800b0c8:	b18c      	cbz	r4, 800b0ee <_dtoa_r+0x78e>
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f000 fd08 	bl	800bae4 <__pow5mult>
 800b0d4:	464a      	mov	r2, r9
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	4605      	mov	r5, r0
 800b0da:	4658      	mov	r0, fp
 800b0dc:	f000 fc5a 	bl	800b994 <__multiply>
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	9004      	str	r0, [sp, #16]
 800b0e4:	4658      	mov	r0, fp
 800b0e6:	f000 fb41 	bl	800b76c <_Bfree>
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	4699      	mov	r9, r3
 800b0ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f0:	1b1a      	subs	r2, r3, r4
 800b0f2:	d004      	beq.n	800b0fe <_dtoa_r+0x79e>
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	f000 fcf4 	bl	800bae4 <__pow5mult>
 800b0fc:	4681      	mov	r9, r0
 800b0fe:	2101      	movs	r1, #1
 800b100:	4658      	mov	r0, fp
 800b102:	f000 fc31 	bl	800b968 <__i2b>
 800b106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b108:	4604      	mov	r4, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 81c9 	beq.w	800b4a2 <_dtoa_r+0xb42>
 800b110:	461a      	mov	r2, r3
 800b112:	4601      	mov	r1, r0
 800b114:	4658      	mov	r0, fp
 800b116:	f000 fce5 	bl	800bae4 <__pow5mult>
 800b11a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b11c:	4604      	mov	r4, r0
 800b11e:	2b01      	cmp	r3, #1
 800b120:	f300 808f 	bgt.w	800b242 <_dtoa_r+0x8e2>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f040 8087 	bne.w	800b23a <_dtoa_r+0x8da>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b132:	2b00      	cmp	r3, #0
 800b134:	f040 8083 	bne.w	800b23e <_dtoa_r+0x8de>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b13e:	0d1b      	lsrs	r3, r3, #20
 800b140:	051b      	lsls	r3, r3, #20
 800b142:	b12b      	cbz	r3, 800b150 <_dtoa_r+0x7f0>
 800b144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b146:	f108 0801 	add.w	r8, r8, #1
 800b14a:	3301      	adds	r3, #1
 800b14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14e:	2301      	movs	r3, #1
 800b150:	930a      	str	r3, [sp, #40]	@ 0x28
 800b152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 81aa 	beq.w	800b4ae <_dtoa_r+0xb4e>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b160:	6918      	ldr	r0, [r3, #16]
 800b162:	f000 fbb5 	bl	800b8d0 <__hi0bits>
 800b166:	f1c0 0020 	rsb	r0, r0, #32
 800b16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16c:	4418      	add	r0, r3
 800b16e:	f010 001f 	ands.w	r0, r0, #31
 800b172:	d071      	beq.n	800b258 <_dtoa_r+0x8f8>
 800b174:	f1c0 0320 	rsb	r3, r0, #32
 800b178:	2b04      	cmp	r3, #4
 800b17a:	dd65      	ble.n	800b248 <_dtoa_r+0x8e8>
 800b17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17e:	f1c0 001c 	rsb	r0, r0, #28
 800b182:	4403      	add	r3, r0
 800b184:	4480      	add	r8, r0
 800b186:	4406      	add	r6, r0
 800b188:	9309      	str	r3, [sp, #36]	@ 0x24
 800b18a:	f1b8 0f00 	cmp.w	r8, #0
 800b18e:	dd05      	ble.n	800b19c <_dtoa_r+0x83c>
 800b190:	4649      	mov	r1, r9
 800b192:	4642      	mov	r2, r8
 800b194:	4658      	mov	r0, fp
 800b196:	f000 fcff 	bl	800bb98 <__lshift>
 800b19a:	4681      	mov	r9, r0
 800b19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	dd05      	ble.n	800b1ae <_dtoa_r+0x84e>
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 fcf6 	bl	800bb98 <__lshift>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d053      	beq.n	800b25c <_dtoa_r+0x8fc>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4648      	mov	r0, r9
 800b1b8:	f000 fd5a 	bl	800bc70 <__mcmp>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	da4d      	bge.n	800b25c <_dtoa_r+0x8fc>
 800b1c0:	1e7b      	subs	r3, r7, #1
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	220a      	movs	r2, #10
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4658      	mov	r0, fp
 800b1cc:	f000 faf0 	bl	800b7b0 <__multadd>
 800b1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d2:	4681      	mov	r9, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 816c 	beq.w	800b4b2 <_dtoa_r+0xb52>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4629      	mov	r1, r5
 800b1de:	220a      	movs	r2, #10
 800b1e0:	4658      	mov	r0, fp
 800b1e2:	f000 fae5 	bl	800b7b0 <__multadd>
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dc61      	bgt.n	800b2b2 <_dtoa_r+0x952>
 800b1ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	dc3b      	bgt.n	800b26c <_dtoa_r+0x90c>
 800b1f4:	e05d      	b.n	800b2b2 <_dtoa_r+0x952>
 800b1f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1f8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1fc:	e746      	b.n	800b08c <_dtoa_r+0x72c>
 800b1fe:	9b07      	ldr	r3, [sp, #28]
 800b200:	1e5c      	subs	r4, r3, #1
 800b202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b204:	42a3      	cmp	r3, r4
 800b206:	bfbf      	itttt	lt
 800b208:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b20a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b20c:	1ae3      	sublt	r3, r4, r3
 800b20e:	18d2      	addlt	r2, r2, r3
 800b210:	bfa8      	it	ge
 800b212:	1b1c      	subge	r4, r3, r4
 800b214:	9b07      	ldr	r3, [sp, #28]
 800b216:	bfbe      	ittt	lt
 800b218:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b21a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b21c:	2400      	movlt	r4, #0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb5      	itete	lt
 800b222:	eba8 0603 	sublt.w	r6, r8, r3
 800b226:	4646      	movge	r6, r8
 800b228:	2300      	movlt	r3, #0
 800b22a:	9b07      	ldrge	r3, [sp, #28]
 800b22c:	e730      	b.n	800b090 <_dtoa_r+0x730>
 800b22e:	4646      	mov	r6, r8
 800b230:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b232:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b234:	e735      	b.n	800b0a2 <_dtoa_r+0x742>
 800b236:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b238:	e75c      	b.n	800b0f4 <_dtoa_r+0x794>
 800b23a:	2300      	movs	r3, #0
 800b23c:	e788      	b.n	800b150 <_dtoa_r+0x7f0>
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	e786      	b.n	800b150 <_dtoa_r+0x7f0>
 800b242:	2300      	movs	r3, #0
 800b244:	930a      	str	r3, [sp, #40]	@ 0x28
 800b246:	e788      	b.n	800b15a <_dtoa_r+0x7fa>
 800b248:	d09f      	beq.n	800b18a <_dtoa_r+0x82a>
 800b24a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b24c:	331c      	adds	r3, #28
 800b24e:	441a      	add	r2, r3
 800b250:	4498      	add	r8, r3
 800b252:	441e      	add	r6, r3
 800b254:	9209      	str	r2, [sp, #36]	@ 0x24
 800b256:	e798      	b.n	800b18a <_dtoa_r+0x82a>
 800b258:	4603      	mov	r3, r0
 800b25a:	e7f6      	b.n	800b24a <_dtoa_r+0x8ea>
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	9704      	str	r7, [sp, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc20      	bgt.n	800b2a6 <_dtoa_r+0x946>
 800b264:	9308      	str	r3, [sp, #32]
 800b266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b268:	2b02      	cmp	r3, #2
 800b26a:	dd1e      	ble.n	800b2aa <_dtoa_r+0x94a>
 800b26c:	9b08      	ldr	r3, [sp, #32]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f47f aebc 	bne.w	800afec <_dtoa_r+0x68c>
 800b274:	4621      	mov	r1, r4
 800b276:	2205      	movs	r2, #5
 800b278:	4658      	mov	r0, fp
 800b27a:	f000 fa99 	bl	800b7b0 <__multadd>
 800b27e:	4601      	mov	r1, r0
 800b280:	4604      	mov	r4, r0
 800b282:	4648      	mov	r0, r9
 800b284:	f000 fcf4 	bl	800bc70 <__mcmp>
 800b288:	2800      	cmp	r0, #0
 800b28a:	f77f aeaf 	ble.w	800afec <_dtoa_r+0x68c>
 800b28e:	2331      	movs	r3, #49	@ 0x31
 800b290:	4656      	mov	r6, sl
 800b292:	f806 3b01 	strb.w	r3, [r6], #1
 800b296:	9b04      	ldr	r3, [sp, #16]
 800b298:	3301      	adds	r3, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	e6aa      	b.n	800aff4 <_dtoa_r+0x694>
 800b29e:	9c07      	ldr	r4, [sp, #28]
 800b2a0:	9704      	str	r7, [sp, #16]
 800b2a2:	4625      	mov	r5, r4
 800b2a4:	e7f3      	b.n	800b28e <_dtoa_r+0x92e>
 800b2a6:	9b07      	ldr	r3, [sp, #28]
 800b2a8:	9308      	str	r3, [sp, #32]
 800b2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8104 	beq.w	800b4ba <_dtoa_r+0xb5a>
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	dd05      	ble.n	800b2c2 <_dtoa_r+0x962>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	4658      	mov	r0, fp
 800b2bc:	f000 fc6c 	bl	800bb98 <__lshift>
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d05a      	beq.n	800b37e <_dtoa_r+0xa1e>
 800b2c8:	4658      	mov	r0, fp
 800b2ca:	6869      	ldr	r1, [r5, #4]
 800b2cc:	f000 fa0e 	bl	800b6ec <_Balloc>
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	b928      	cbnz	r0, 800b2e0 <_dtoa_r+0x980>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2da:	4b83      	ldr	r3, [pc, #524]	@ (800b4e8 <_dtoa_r+0xb88>)
 800b2dc:	f7ff bb54 	b.w	800a988 <_dtoa_r+0x28>
 800b2e0:	692a      	ldr	r2, [r5, #16]
 800b2e2:	f105 010c 	add.w	r1, r5, #12
 800b2e6:	3202      	adds	r2, #2
 800b2e8:	0092      	lsls	r2, r2, #2
 800b2ea:	300c      	adds	r0, #12
 800b2ec:	f002 f976 	bl	800d5dc <memcpy>
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4658      	mov	r0, fp
 800b2f6:	f000 fc4f 	bl	800bb98 <__lshift>
 800b2fa:	462f      	mov	r7, r5
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	f10a 0301 	add.w	r3, sl, #1
 800b302:	9307      	str	r3, [sp, #28]
 800b304:	9b08      	ldr	r3, [sp, #32]
 800b306:	4453      	add	r3, sl
 800b308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	930a      	str	r3, [sp, #40]	@ 0x28
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	4621      	mov	r1, r4
 800b316:	3b01      	subs	r3, #1
 800b318:	4648      	mov	r0, r9
 800b31a:	9302      	str	r3, [sp, #8]
 800b31c:	f7ff fa95 	bl	800a84a <quorem>
 800b320:	4639      	mov	r1, r7
 800b322:	9008      	str	r0, [sp, #32]
 800b324:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b328:	4648      	mov	r0, r9
 800b32a:	f000 fca1 	bl	800bc70 <__mcmp>
 800b32e:	462a      	mov	r2, r5
 800b330:	9009      	str	r0, [sp, #36]	@ 0x24
 800b332:	4621      	mov	r1, r4
 800b334:	4658      	mov	r0, fp
 800b336:	f000 fcb7 	bl	800bca8 <__mdiff>
 800b33a:	68c2      	ldr	r2, [r0, #12]
 800b33c:	4606      	mov	r6, r0
 800b33e:	bb02      	cbnz	r2, 800b382 <_dtoa_r+0xa22>
 800b340:	4601      	mov	r1, r0
 800b342:	4648      	mov	r0, r9
 800b344:	f000 fc94 	bl	800bc70 <__mcmp>
 800b348:	4602      	mov	r2, r0
 800b34a:	4631      	mov	r1, r6
 800b34c:	4658      	mov	r0, fp
 800b34e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b350:	f000 fa0c 	bl	800b76c <_Bfree>
 800b354:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b356:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b358:	9e07      	ldr	r6, [sp, #28]
 800b35a:	ea43 0102 	orr.w	r1, r3, r2
 800b35e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b360:	4319      	orrs	r1, r3
 800b362:	d110      	bne.n	800b386 <_dtoa_r+0xa26>
 800b364:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b368:	d029      	beq.n	800b3be <_dtoa_r+0xa5e>
 800b36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd02      	ble.n	800b376 <_dtoa_r+0xa16>
 800b370:	9b08      	ldr	r3, [sp, #32]
 800b372:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	f883 8000 	strb.w	r8, [r3]
 800b37c:	e63b      	b.n	800aff6 <_dtoa_r+0x696>
 800b37e:	4628      	mov	r0, r5
 800b380:	e7bb      	b.n	800b2fa <_dtoa_r+0x99a>
 800b382:	2201      	movs	r2, #1
 800b384:	e7e1      	b.n	800b34a <_dtoa_r+0x9ea>
 800b386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b388:	2b00      	cmp	r3, #0
 800b38a:	db04      	blt.n	800b396 <_dtoa_r+0xa36>
 800b38c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b38e:	430b      	orrs	r3, r1
 800b390:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b392:	430b      	orrs	r3, r1
 800b394:	d120      	bne.n	800b3d8 <_dtoa_r+0xa78>
 800b396:	2a00      	cmp	r2, #0
 800b398:	dded      	ble.n	800b376 <_dtoa_r+0xa16>
 800b39a:	4649      	mov	r1, r9
 800b39c:	2201      	movs	r2, #1
 800b39e:	4658      	mov	r0, fp
 800b3a0:	f000 fbfa 	bl	800bb98 <__lshift>
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4681      	mov	r9, r0
 800b3a8:	f000 fc62 	bl	800bc70 <__mcmp>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	dc03      	bgt.n	800b3b8 <_dtoa_r+0xa58>
 800b3b0:	d1e1      	bne.n	800b376 <_dtoa_r+0xa16>
 800b3b2:	f018 0f01 	tst.w	r8, #1
 800b3b6:	d0de      	beq.n	800b376 <_dtoa_r+0xa16>
 800b3b8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3bc:	d1d8      	bne.n	800b370 <_dtoa_r+0xa10>
 800b3be:	2339      	movs	r3, #57	@ 0x39
 800b3c0:	9a02      	ldr	r2, [sp, #8]
 800b3c2:	7013      	strb	r3, [r2, #0]
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	461e      	mov	r6, r3
 800b3c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	2a39      	cmp	r2, #57	@ 0x39
 800b3d0:	d052      	beq.n	800b478 <_dtoa_r+0xb18>
 800b3d2:	3201      	adds	r2, #1
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	e60e      	b.n	800aff6 <_dtoa_r+0x696>
 800b3d8:	2a00      	cmp	r2, #0
 800b3da:	dd07      	ble.n	800b3ec <_dtoa_r+0xa8c>
 800b3dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3e0:	d0ed      	beq.n	800b3be <_dtoa_r+0xa5e>
 800b3e2:	9a02      	ldr	r2, [sp, #8]
 800b3e4:	f108 0301 	add.w	r3, r8, #1
 800b3e8:	7013      	strb	r3, [r2, #0]
 800b3ea:	e604      	b.n	800aff6 <_dtoa_r+0x696>
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	9a07      	ldr	r2, [sp, #28]
 800b3f0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d028      	beq.n	800b44c <_dtoa_r+0xaec>
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	220a      	movs	r2, #10
 800b400:	4658      	mov	r0, fp
 800b402:	f000 f9d5 	bl	800b7b0 <__multadd>
 800b406:	42af      	cmp	r7, r5
 800b408:	4681      	mov	r9, r0
 800b40a:	f04f 0300 	mov.w	r3, #0
 800b40e:	f04f 020a 	mov.w	r2, #10
 800b412:	4639      	mov	r1, r7
 800b414:	4658      	mov	r0, fp
 800b416:	d107      	bne.n	800b428 <_dtoa_r+0xac8>
 800b418:	f000 f9ca 	bl	800b7b0 <__multadd>
 800b41c:	4607      	mov	r7, r0
 800b41e:	4605      	mov	r5, r0
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	3301      	adds	r3, #1
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	e774      	b.n	800b312 <_dtoa_r+0x9b2>
 800b428:	f000 f9c2 	bl	800b7b0 <__multadd>
 800b42c:	4629      	mov	r1, r5
 800b42e:	4607      	mov	r7, r0
 800b430:	2300      	movs	r3, #0
 800b432:	220a      	movs	r2, #10
 800b434:	4658      	mov	r0, fp
 800b436:	f000 f9bb 	bl	800b7b0 <__multadd>
 800b43a:	4605      	mov	r5, r0
 800b43c:	e7f0      	b.n	800b420 <_dtoa_r+0xac0>
 800b43e:	9b08      	ldr	r3, [sp, #32]
 800b440:	2700      	movs	r7, #0
 800b442:	2b00      	cmp	r3, #0
 800b444:	bfcc      	ite	gt
 800b446:	461e      	movgt	r6, r3
 800b448:	2601      	movle	r6, #1
 800b44a:	4456      	add	r6, sl
 800b44c:	4649      	mov	r1, r9
 800b44e:	2201      	movs	r2, #1
 800b450:	4658      	mov	r0, fp
 800b452:	f000 fba1 	bl	800bb98 <__lshift>
 800b456:	4621      	mov	r1, r4
 800b458:	4681      	mov	r9, r0
 800b45a:	f000 fc09 	bl	800bc70 <__mcmp>
 800b45e:	2800      	cmp	r0, #0
 800b460:	dcb0      	bgt.n	800b3c4 <_dtoa_r+0xa64>
 800b462:	d102      	bne.n	800b46a <_dtoa_r+0xb0a>
 800b464:	f018 0f01 	tst.w	r8, #1
 800b468:	d1ac      	bne.n	800b3c4 <_dtoa_r+0xa64>
 800b46a:	4633      	mov	r3, r6
 800b46c:	461e      	mov	r6, r3
 800b46e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b472:	2a30      	cmp	r2, #48	@ 0x30
 800b474:	d0fa      	beq.n	800b46c <_dtoa_r+0xb0c>
 800b476:	e5be      	b.n	800aff6 <_dtoa_r+0x696>
 800b478:	459a      	cmp	sl, r3
 800b47a:	d1a4      	bne.n	800b3c6 <_dtoa_r+0xa66>
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	3301      	adds	r3, #1
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	2331      	movs	r3, #49	@ 0x31
 800b484:	f88a 3000 	strb.w	r3, [sl]
 800b488:	e5b5      	b.n	800aff6 <_dtoa_r+0x696>
 800b48a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b48c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4ec <_dtoa_r+0xb8c>
 800b490:	b11b      	cbz	r3, 800b49a <_dtoa_r+0xb3a>
 800b492:	f10a 0308 	add.w	r3, sl, #8
 800b496:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	4650      	mov	r0, sl
 800b49c:	b017      	add	sp, #92	@ 0x5c
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	f77f ae3d 	ble.w	800b124 <_dtoa_r+0x7c4>
 800b4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	e65b      	b.n	800b16a <_dtoa_r+0x80a>
 800b4b2:	9b08      	ldr	r3, [sp, #32]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f77f aed6 	ble.w	800b266 <_dtoa_r+0x906>
 800b4ba:	4656      	mov	r6, sl
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4648      	mov	r0, r9
 800b4c0:	f7ff f9c3 	bl	800a84a <quorem>
 800b4c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b4c8:	9b08      	ldr	r3, [sp, #32]
 800b4ca:	f806 8b01 	strb.w	r8, [r6], #1
 800b4ce:	eba6 020a 	sub.w	r2, r6, sl
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	ddb3      	ble.n	800b43e <_dtoa_r+0xade>
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	2300      	movs	r3, #0
 800b4da:	220a      	movs	r2, #10
 800b4dc:	4658      	mov	r0, fp
 800b4de:	f000 f967 	bl	800b7b0 <__multadd>
 800b4e2:	4681      	mov	r9, r0
 800b4e4:	e7ea      	b.n	800b4bc <_dtoa_r+0xb5c>
 800b4e6:	bf00      	nop
 800b4e8:	0800e933 	.word	0x0800e933
 800b4ec:	0800e8b7 	.word	0x0800e8b7

0800b4f0 <_free_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	d040      	beq.n	800b57a <_free_r+0x8a>
 800b4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4fc:	1f0c      	subs	r4, r1, #4
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	bfb8      	it	lt
 800b502:	18e4      	addlt	r4, r4, r3
 800b504:	f000 f8e6 	bl	800b6d4 <__malloc_lock>
 800b508:	4a1c      	ldr	r2, [pc, #112]	@ (800b57c <_free_r+0x8c>)
 800b50a:	6813      	ldr	r3, [r2, #0]
 800b50c:	b933      	cbnz	r3, 800b51c <_free_r+0x2c>
 800b50e:	6063      	str	r3, [r4, #4]
 800b510:	6014      	str	r4, [r2, #0]
 800b512:	4628      	mov	r0, r5
 800b514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b518:	f000 b8e2 	b.w	800b6e0 <__malloc_unlock>
 800b51c:	42a3      	cmp	r3, r4
 800b51e:	d908      	bls.n	800b532 <_free_r+0x42>
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	1821      	adds	r1, r4, r0
 800b524:	428b      	cmp	r3, r1
 800b526:	bf01      	itttt	eq
 800b528:	6819      	ldreq	r1, [r3, #0]
 800b52a:	685b      	ldreq	r3, [r3, #4]
 800b52c:	1809      	addeq	r1, r1, r0
 800b52e:	6021      	streq	r1, [r4, #0]
 800b530:	e7ed      	b.n	800b50e <_free_r+0x1e>
 800b532:	461a      	mov	r2, r3
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	b10b      	cbz	r3, 800b53c <_free_r+0x4c>
 800b538:	42a3      	cmp	r3, r4
 800b53a:	d9fa      	bls.n	800b532 <_free_r+0x42>
 800b53c:	6811      	ldr	r1, [r2, #0]
 800b53e:	1850      	adds	r0, r2, r1
 800b540:	42a0      	cmp	r0, r4
 800b542:	d10b      	bne.n	800b55c <_free_r+0x6c>
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	4401      	add	r1, r0
 800b548:	1850      	adds	r0, r2, r1
 800b54a:	4283      	cmp	r3, r0
 800b54c:	6011      	str	r1, [r2, #0]
 800b54e:	d1e0      	bne.n	800b512 <_free_r+0x22>
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	4408      	add	r0, r1
 800b556:	6010      	str	r0, [r2, #0]
 800b558:	6053      	str	r3, [r2, #4]
 800b55a:	e7da      	b.n	800b512 <_free_r+0x22>
 800b55c:	d902      	bls.n	800b564 <_free_r+0x74>
 800b55e:	230c      	movs	r3, #12
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	e7d6      	b.n	800b512 <_free_r+0x22>
 800b564:	6820      	ldr	r0, [r4, #0]
 800b566:	1821      	adds	r1, r4, r0
 800b568:	428b      	cmp	r3, r1
 800b56a:	bf01      	itttt	eq
 800b56c:	6819      	ldreq	r1, [r3, #0]
 800b56e:	685b      	ldreq	r3, [r3, #4]
 800b570:	1809      	addeq	r1, r1, r0
 800b572:	6021      	streq	r1, [r4, #0]
 800b574:	6063      	str	r3, [r4, #4]
 800b576:	6054      	str	r4, [r2, #4]
 800b578:	e7cb      	b.n	800b512 <_free_r+0x22>
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	20000b44 	.word	0x20000b44

0800b580 <malloc>:
 800b580:	4b02      	ldr	r3, [pc, #8]	@ (800b58c <malloc+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f000 b825 	b.w	800b5d4 <_malloc_r>
 800b58a:	bf00      	nop
 800b58c:	20000160 	.word	0x20000160

0800b590 <sbrk_aligned>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4e0f      	ldr	r6, [pc, #60]	@ (800b5d0 <sbrk_aligned+0x40>)
 800b594:	460c      	mov	r4, r1
 800b596:	6831      	ldr	r1, [r6, #0]
 800b598:	4605      	mov	r5, r0
 800b59a:	b911      	cbnz	r1, 800b5a2 <sbrk_aligned+0x12>
 800b59c:	f002 f80e 	bl	800d5bc <_sbrk_r>
 800b5a0:	6030      	str	r0, [r6, #0]
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f002 f809 	bl	800d5bc <_sbrk_r>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	d103      	bne.n	800b5b6 <sbrk_aligned+0x26>
 800b5ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	1cc4      	adds	r4, r0, #3
 800b5b8:	f024 0403 	bic.w	r4, r4, #3
 800b5bc:	42a0      	cmp	r0, r4
 800b5be:	d0f8      	beq.n	800b5b2 <sbrk_aligned+0x22>
 800b5c0:	1a21      	subs	r1, r4, r0
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f001 fffa 	bl	800d5bc <_sbrk_r>
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d1f2      	bne.n	800b5b2 <sbrk_aligned+0x22>
 800b5cc:	e7ef      	b.n	800b5ae <sbrk_aligned+0x1e>
 800b5ce:	bf00      	nop
 800b5d0:	20000b40 	.word	0x20000b40

0800b5d4 <_malloc_r>:
 800b5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	1ccd      	adds	r5, r1, #3
 800b5da:	f025 0503 	bic.w	r5, r5, #3
 800b5de:	3508      	adds	r5, #8
 800b5e0:	2d0c      	cmp	r5, #12
 800b5e2:	bf38      	it	cc
 800b5e4:	250c      	movcc	r5, #12
 800b5e6:	2d00      	cmp	r5, #0
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	db01      	blt.n	800b5f0 <_malloc_r+0x1c>
 800b5ec:	42a9      	cmp	r1, r5
 800b5ee:	d904      	bls.n	800b5fa <_malloc_r+0x26>
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	6033      	str	r3, [r6, #0]
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6d0 <_malloc_r+0xfc>
 800b5fe:	f000 f869 	bl	800b6d4 <__malloc_lock>
 800b602:	f8d8 3000 	ldr.w	r3, [r8]
 800b606:	461c      	mov	r4, r3
 800b608:	bb44      	cbnz	r4, 800b65c <_malloc_r+0x88>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff ffbf 	bl	800b590 <sbrk_aligned>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	4604      	mov	r4, r0
 800b616:	d158      	bne.n	800b6ca <_malloc_r+0xf6>
 800b618:	f8d8 4000 	ldr.w	r4, [r8]
 800b61c:	4627      	mov	r7, r4
 800b61e:	2f00      	cmp	r7, #0
 800b620:	d143      	bne.n	800b6aa <_malloc_r+0xd6>
 800b622:	2c00      	cmp	r4, #0
 800b624:	d04b      	beq.n	800b6be <_malloc_r+0xea>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	4639      	mov	r1, r7
 800b62a:	4630      	mov	r0, r6
 800b62c:	eb04 0903 	add.w	r9, r4, r3
 800b630:	f001 ffc4 	bl	800d5bc <_sbrk_r>
 800b634:	4581      	cmp	r9, r0
 800b636:	d142      	bne.n	800b6be <_malloc_r+0xea>
 800b638:	6821      	ldr	r1, [r4, #0]
 800b63a:	4630      	mov	r0, r6
 800b63c:	1a6d      	subs	r5, r5, r1
 800b63e:	4629      	mov	r1, r5
 800b640:	f7ff ffa6 	bl	800b590 <sbrk_aligned>
 800b644:	3001      	adds	r0, #1
 800b646:	d03a      	beq.n	800b6be <_malloc_r+0xea>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	442b      	add	r3, r5
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	f8d8 3000 	ldr.w	r3, [r8]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	bb62      	cbnz	r2, 800b6b0 <_malloc_r+0xdc>
 800b656:	f8c8 7000 	str.w	r7, [r8]
 800b65a:	e00f      	b.n	800b67c <_malloc_r+0xa8>
 800b65c:	6822      	ldr	r2, [r4, #0]
 800b65e:	1b52      	subs	r2, r2, r5
 800b660:	d420      	bmi.n	800b6a4 <_malloc_r+0xd0>
 800b662:	2a0b      	cmp	r2, #11
 800b664:	d917      	bls.n	800b696 <_malloc_r+0xc2>
 800b666:	1961      	adds	r1, r4, r5
 800b668:	42a3      	cmp	r3, r4
 800b66a:	6025      	str	r5, [r4, #0]
 800b66c:	bf18      	it	ne
 800b66e:	6059      	strne	r1, [r3, #4]
 800b670:	6863      	ldr	r3, [r4, #4]
 800b672:	bf08      	it	eq
 800b674:	f8c8 1000 	streq.w	r1, [r8]
 800b678:	5162      	str	r2, [r4, r5]
 800b67a:	604b      	str	r3, [r1, #4]
 800b67c:	4630      	mov	r0, r6
 800b67e:	f000 f82f 	bl	800b6e0 <__malloc_unlock>
 800b682:	f104 000b 	add.w	r0, r4, #11
 800b686:	1d23      	adds	r3, r4, #4
 800b688:	f020 0007 	bic.w	r0, r0, #7
 800b68c:	1ac2      	subs	r2, r0, r3
 800b68e:	bf1c      	itt	ne
 800b690:	1a1b      	subne	r3, r3, r0
 800b692:	50a3      	strne	r3, [r4, r2]
 800b694:	e7af      	b.n	800b5f6 <_malloc_r+0x22>
 800b696:	6862      	ldr	r2, [r4, #4]
 800b698:	42a3      	cmp	r3, r4
 800b69a:	bf0c      	ite	eq
 800b69c:	f8c8 2000 	streq.w	r2, [r8]
 800b6a0:	605a      	strne	r2, [r3, #4]
 800b6a2:	e7eb      	b.n	800b67c <_malloc_r+0xa8>
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	6864      	ldr	r4, [r4, #4]
 800b6a8:	e7ae      	b.n	800b608 <_malloc_r+0x34>
 800b6aa:	463c      	mov	r4, r7
 800b6ac:	687f      	ldr	r7, [r7, #4]
 800b6ae:	e7b6      	b.n	800b61e <_malloc_r+0x4a>
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	d1fb      	bne.n	800b6b0 <_malloc_r+0xdc>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6053      	str	r3, [r2, #4]
 800b6bc:	e7de      	b.n	800b67c <_malloc_r+0xa8>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	6033      	str	r3, [r6, #0]
 800b6c4:	f000 f80c 	bl	800b6e0 <__malloc_unlock>
 800b6c8:	e794      	b.n	800b5f4 <_malloc_r+0x20>
 800b6ca:	6005      	str	r5, [r0, #0]
 800b6cc:	e7d6      	b.n	800b67c <_malloc_r+0xa8>
 800b6ce:	bf00      	nop
 800b6d0:	20000b44 	.word	0x20000b44

0800b6d4 <__malloc_lock>:
 800b6d4:	4801      	ldr	r0, [pc, #4]	@ (800b6dc <__malloc_lock+0x8>)
 800b6d6:	f7ff b89c 	b.w	800a812 <__retarget_lock_acquire_recursive>
 800b6da:	bf00      	nop
 800b6dc:	20000b3c 	.word	0x20000b3c

0800b6e0 <__malloc_unlock>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	@ (800b6e8 <__malloc_unlock+0x8>)
 800b6e2:	f7ff b897 	b.w	800a814 <__retarget_lock_release_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	20000b3c 	.word	0x20000b3c

0800b6ec <_Balloc>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	69c6      	ldr	r6, [r0, #28]
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	b976      	cbnz	r6, 800b714 <_Balloc+0x28>
 800b6f6:	2010      	movs	r0, #16
 800b6f8:	f7ff ff42 	bl	800b580 <malloc>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	61e0      	str	r0, [r4, #28]
 800b700:	b920      	cbnz	r0, 800b70c <_Balloc+0x20>
 800b702:	216b      	movs	r1, #107	@ 0x6b
 800b704:	4b17      	ldr	r3, [pc, #92]	@ (800b764 <_Balloc+0x78>)
 800b706:	4818      	ldr	r0, [pc, #96]	@ (800b768 <_Balloc+0x7c>)
 800b708:	f7fe f834 	bl	8009774 <__assert_func>
 800b70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b710:	6006      	str	r6, [r0, #0]
 800b712:	60c6      	str	r6, [r0, #12]
 800b714:	69e6      	ldr	r6, [r4, #28]
 800b716:	68f3      	ldr	r3, [r6, #12]
 800b718:	b183      	cbz	r3, 800b73c <_Balloc+0x50>
 800b71a:	69e3      	ldr	r3, [r4, #28]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b722:	b9b8      	cbnz	r0, 800b754 <_Balloc+0x68>
 800b724:	2101      	movs	r1, #1
 800b726:	fa01 f605 	lsl.w	r6, r1, r5
 800b72a:	1d72      	adds	r2, r6, #5
 800b72c:	4620      	mov	r0, r4
 800b72e:	0092      	lsls	r2, r2, #2
 800b730:	f001 ff68 	bl	800d604 <_calloc_r>
 800b734:	b160      	cbz	r0, 800b750 <_Balloc+0x64>
 800b736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b73a:	e00e      	b.n	800b75a <_Balloc+0x6e>
 800b73c:	2221      	movs	r2, #33	@ 0x21
 800b73e:	2104      	movs	r1, #4
 800b740:	4620      	mov	r0, r4
 800b742:	f001 ff5f 	bl	800d604 <_calloc_r>
 800b746:	69e3      	ldr	r3, [r4, #28]
 800b748:	60f0      	str	r0, [r6, #12]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e4      	bne.n	800b71a <_Balloc+0x2e>
 800b750:	2000      	movs	r0, #0
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	6802      	ldr	r2, [r0, #0]
 800b756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b75a:	2300      	movs	r3, #0
 800b75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b760:	e7f7      	b.n	800b752 <_Balloc+0x66>
 800b762:	bf00      	nop
 800b764:	0800e8c4 	.word	0x0800e8c4
 800b768:	0800e944 	.word	0x0800e944

0800b76c <_Bfree>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	69c6      	ldr	r6, [r0, #28]
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b976      	cbnz	r6, 800b794 <_Bfree+0x28>
 800b776:	2010      	movs	r0, #16
 800b778:	f7ff ff02 	bl	800b580 <malloc>
 800b77c:	4602      	mov	r2, r0
 800b77e:	61e8      	str	r0, [r5, #28]
 800b780:	b920      	cbnz	r0, 800b78c <_Bfree+0x20>
 800b782:	218f      	movs	r1, #143	@ 0x8f
 800b784:	4b08      	ldr	r3, [pc, #32]	@ (800b7a8 <_Bfree+0x3c>)
 800b786:	4809      	ldr	r0, [pc, #36]	@ (800b7ac <_Bfree+0x40>)
 800b788:	f7fd fff4 	bl	8009774 <__assert_func>
 800b78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b790:	6006      	str	r6, [r0, #0]
 800b792:	60c6      	str	r6, [r0, #12]
 800b794:	b13c      	cbz	r4, 800b7a6 <_Bfree+0x3a>
 800b796:	69eb      	ldr	r3, [r5, #28]
 800b798:	6862      	ldr	r2, [r4, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7a0:	6021      	str	r1, [r4, #0]
 800b7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	0800e8c4 	.word	0x0800e8c4
 800b7ac:	0800e944 	.word	0x0800e944

0800b7b0 <__multadd>:
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	461e      	mov	r6, r3
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	690d      	ldr	r5, [r1, #16]
 800b7be:	f101 0c14 	add.w	ip, r1, #20
 800b7c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	b299      	uxth	r1, r3
 800b7ca:	fb02 6101 	mla	r1, r2, r1, r6
 800b7ce:	0c1e      	lsrs	r6, r3, #16
 800b7d0:	0c0b      	lsrs	r3, r1, #16
 800b7d2:	fb02 3306 	mla	r3, r2, r6, r3
 800b7d6:	b289      	uxth	r1, r1
 800b7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7dc:	4285      	cmp	r5, r0
 800b7de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b7e6:	dcec      	bgt.n	800b7c2 <__multadd+0x12>
 800b7e8:	b30e      	cbz	r6, 800b82e <__multadd+0x7e>
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	42ab      	cmp	r3, r5
 800b7ee:	dc19      	bgt.n	800b824 <__multadd+0x74>
 800b7f0:	6861      	ldr	r1, [r4, #4]
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	3101      	adds	r1, #1
 800b7f6:	f7ff ff79 	bl	800b6ec <_Balloc>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	b928      	cbnz	r0, 800b80a <__multadd+0x5a>
 800b7fe:	4602      	mov	r2, r0
 800b800:	21ba      	movs	r1, #186	@ 0xba
 800b802:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <__multadd+0x84>)
 800b804:	480c      	ldr	r0, [pc, #48]	@ (800b838 <__multadd+0x88>)
 800b806:	f7fd ffb5 	bl	8009774 <__assert_func>
 800b80a:	6922      	ldr	r2, [r4, #16]
 800b80c:	f104 010c 	add.w	r1, r4, #12
 800b810:	3202      	adds	r2, #2
 800b812:	0092      	lsls	r2, r2, #2
 800b814:	300c      	adds	r0, #12
 800b816:	f001 fee1 	bl	800d5dc <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff ffa5 	bl	800b76c <_Bfree>
 800b822:	4644      	mov	r4, r8
 800b824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b828:	3501      	adds	r5, #1
 800b82a:	615e      	str	r6, [r3, #20]
 800b82c:	6125      	str	r5, [r4, #16]
 800b82e:	4620      	mov	r0, r4
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	0800e933 	.word	0x0800e933
 800b838:	0800e944 	.word	0x0800e944

0800b83c <__s2b>:
 800b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b840:	4615      	mov	r5, r2
 800b842:	2209      	movs	r2, #9
 800b844:	461f      	mov	r7, r3
 800b846:	3308      	adds	r3, #8
 800b848:	460c      	mov	r4, r1
 800b84a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b84e:	4606      	mov	r6, r0
 800b850:	2201      	movs	r2, #1
 800b852:	2100      	movs	r1, #0
 800b854:	429a      	cmp	r2, r3
 800b856:	db09      	blt.n	800b86c <__s2b+0x30>
 800b858:	4630      	mov	r0, r6
 800b85a:	f7ff ff47 	bl	800b6ec <_Balloc>
 800b85e:	b940      	cbnz	r0, 800b872 <__s2b+0x36>
 800b860:	4602      	mov	r2, r0
 800b862:	21d3      	movs	r1, #211	@ 0xd3
 800b864:	4b18      	ldr	r3, [pc, #96]	@ (800b8c8 <__s2b+0x8c>)
 800b866:	4819      	ldr	r0, [pc, #100]	@ (800b8cc <__s2b+0x90>)
 800b868:	f7fd ff84 	bl	8009774 <__assert_func>
 800b86c:	0052      	lsls	r2, r2, #1
 800b86e:	3101      	adds	r1, #1
 800b870:	e7f0      	b.n	800b854 <__s2b+0x18>
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	2d09      	cmp	r5, #9
 800b876:	6143      	str	r3, [r0, #20]
 800b878:	f04f 0301 	mov.w	r3, #1
 800b87c:	6103      	str	r3, [r0, #16]
 800b87e:	dd16      	ble.n	800b8ae <__s2b+0x72>
 800b880:	f104 0909 	add.w	r9, r4, #9
 800b884:	46c8      	mov	r8, r9
 800b886:	442c      	add	r4, r5
 800b888:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b88c:	4601      	mov	r1, r0
 800b88e:	220a      	movs	r2, #10
 800b890:	4630      	mov	r0, r6
 800b892:	3b30      	subs	r3, #48	@ 0x30
 800b894:	f7ff ff8c 	bl	800b7b0 <__multadd>
 800b898:	45a0      	cmp	r8, r4
 800b89a:	d1f5      	bne.n	800b888 <__s2b+0x4c>
 800b89c:	f1a5 0408 	sub.w	r4, r5, #8
 800b8a0:	444c      	add	r4, r9
 800b8a2:	1b2d      	subs	r5, r5, r4
 800b8a4:	1963      	adds	r3, r4, r5
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	db04      	blt.n	800b8b4 <__s2b+0x78>
 800b8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ae:	2509      	movs	r5, #9
 800b8b0:	340a      	adds	r4, #10
 800b8b2:	e7f6      	b.n	800b8a2 <__s2b+0x66>
 800b8b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8b8:	4601      	mov	r1, r0
 800b8ba:	220a      	movs	r2, #10
 800b8bc:	4630      	mov	r0, r6
 800b8be:	3b30      	subs	r3, #48	@ 0x30
 800b8c0:	f7ff ff76 	bl	800b7b0 <__multadd>
 800b8c4:	e7ee      	b.n	800b8a4 <__s2b+0x68>
 800b8c6:	bf00      	nop
 800b8c8:	0800e933 	.word	0x0800e933
 800b8cc:	0800e944 	.word	0x0800e944

0800b8d0 <__hi0bits>:
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8d6:	bf3a      	itte	cc
 800b8d8:	0403      	lslcc	r3, r0, #16
 800b8da:	2010      	movcc	r0, #16
 800b8dc:	2000      	movcs	r0, #0
 800b8de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8e2:	bf3c      	itt	cc
 800b8e4:	021b      	lslcc	r3, r3, #8
 800b8e6:	3008      	addcc	r0, #8
 800b8e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8ec:	bf3c      	itt	cc
 800b8ee:	011b      	lslcc	r3, r3, #4
 800b8f0:	3004      	addcc	r0, #4
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8f6:	bf3c      	itt	cc
 800b8f8:	009b      	lslcc	r3, r3, #2
 800b8fa:	3002      	addcc	r0, #2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	db05      	blt.n	800b90c <__hi0bits+0x3c>
 800b900:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b904:	f100 0001 	add.w	r0, r0, #1
 800b908:	bf08      	it	eq
 800b90a:	2020      	moveq	r0, #32
 800b90c:	4770      	bx	lr

0800b90e <__lo0bits>:
 800b90e:	6803      	ldr	r3, [r0, #0]
 800b910:	4602      	mov	r2, r0
 800b912:	f013 0007 	ands.w	r0, r3, #7
 800b916:	d00b      	beq.n	800b930 <__lo0bits+0x22>
 800b918:	07d9      	lsls	r1, r3, #31
 800b91a:	d421      	bmi.n	800b960 <__lo0bits+0x52>
 800b91c:	0798      	lsls	r0, r3, #30
 800b91e:	bf49      	itett	mi
 800b920:	085b      	lsrmi	r3, r3, #1
 800b922:	089b      	lsrpl	r3, r3, #2
 800b924:	2001      	movmi	r0, #1
 800b926:	6013      	strmi	r3, [r2, #0]
 800b928:	bf5c      	itt	pl
 800b92a:	2002      	movpl	r0, #2
 800b92c:	6013      	strpl	r3, [r2, #0]
 800b92e:	4770      	bx	lr
 800b930:	b299      	uxth	r1, r3
 800b932:	b909      	cbnz	r1, 800b938 <__lo0bits+0x2a>
 800b934:	2010      	movs	r0, #16
 800b936:	0c1b      	lsrs	r3, r3, #16
 800b938:	b2d9      	uxtb	r1, r3
 800b93a:	b909      	cbnz	r1, 800b940 <__lo0bits+0x32>
 800b93c:	3008      	adds	r0, #8
 800b93e:	0a1b      	lsrs	r3, r3, #8
 800b940:	0719      	lsls	r1, r3, #28
 800b942:	bf04      	itt	eq
 800b944:	091b      	lsreq	r3, r3, #4
 800b946:	3004      	addeq	r0, #4
 800b948:	0799      	lsls	r1, r3, #30
 800b94a:	bf04      	itt	eq
 800b94c:	089b      	lsreq	r3, r3, #2
 800b94e:	3002      	addeq	r0, #2
 800b950:	07d9      	lsls	r1, r3, #31
 800b952:	d403      	bmi.n	800b95c <__lo0bits+0x4e>
 800b954:	085b      	lsrs	r3, r3, #1
 800b956:	f100 0001 	add.w	r0, r0, #1
 800b95a:	d003      	beq.n	800b964 <__lo0bits+0x56>
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	4770      	bx	lr
 800b960:	2000      	movs	r0, #0
 800b962:	4770      	bx	lr
 800b964:	2020      	movs	r0, #32
 800b966:	4770      	bx	lr

0800b968 <__i2b>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	2101      	movs	r1, #1
 800b96e:	f7ff febd 	bl	800b6ec <_Balloc>
 800b972:	4602      	mov	r2, r0
 800b974:	b928      	cbnz	r0, 800b982 <__i2b+0x1a>
 800b976:	f240 1145 	movw	r1, #325	@ 0x145
 800b97a:	4b04      	ldr	r3, [pc, #16]	@ (800b98c <__i2b+0x24>)
 800b97c:	4804      	ldr	r0, [pc, #16]	@ (800b990 <__i2b+0x28>)
 800b97e:	f7fd fef9 	bl	8009774 <__assert_func>
 800b982:	2301      	movs	r3, #1
 800b984:	6144      	str	r4, [r0, #20]
 800b986:	6103      	str	r3, [r0, #16]
 800b988:	bd10      	pop	{r4, pc}
 800b98a:	bf00      	nop
 800b98c:	0800e933 	.word	0x0800e933
 800b990:	0800e944 	.word	0x0800e944

0800b994 <__multiply>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4614      	mov	r4, r2
 800b99a:	690a      	ldr	r2, [r1, #16]
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	460f      	mov	r7, r1
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	bfa2      	ittt	ge
 800b9a4:	4623      	movge	r3, r4
 800b9a6:	460c      	movge	r4, r1
 800b9a8:	461f      	movge	r7, r3
 800b9aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9ae:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	eb0a 0609 	add.w	r6, sl, r9
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	b085      	sub	sp, #20
 800b9be:	bfb8      	it	lt
 800b9c0:	3101      	addlt	r1, #1
 800b9c2:	f7ff fe93 	bl	800b6ec <_Balloc>
 800b9c6:	b930      	cbnz	r0, 800b9d6 <__multiply+0x42>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9ce:	4b43      	ldr	r3, [pc, #268]	@ (800badc <__multiply+0x148>)
 800b9d0:	4843      	ldr	r0, [pc, #268]	@ (800bae0 <__multiply+0x14c>)
 800b9d2:	f7fd fecf 	bl	8009774 <__assert_func>
 800b9d6:	f100 0514 	add.w	r5, r0, #20
 800b9da:	462b      	mov	r3, r5
 800b9dc:	2200      	movs	r2, #0
 800b9de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9e2:	4543      	cmp	r3, r8
 800b9e4:	d321      	bcc.n	800ba2a <__multiply+0x96>
 800b9e6:	f107 0114 	add.w	r1, r7, #20
 800b9ea:	f104 0214 	add.w	r2, r4, #20
 800b9ee:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b9f2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	1b13      	subs	r3, r2, r4
 800b9fa:	3b15      	subs	r3, #21
 800b9fc:	f023 0303 	bic.w	r3, r3, #3
 800ba00:	3304      	adds	r3, #4
 800ba02:	f104 0715 	add.w	r7, r4, #21
 800ba06:	42ba      	cmp	r2, r7
 800ba08:	bf38      	it	cc
 800ba0a:	2304      	movcc	r3, #4
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	9b02      	ldr	r3, [sp, #8]
 800ba10:	9103      	str	r1, [sp, #12]
 800ba12:	428b      	cmp	r3, r1
 800ba14:	d80c      	bhi.n	800ba30 <__multiply+0x9c>
 800ba16:	2e00      	cmp	r6, #0
 800ba18:	dd03      	ble.n	800ba22 <__multiply+0x8e>
 800ba1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d05a      	beq.n	800bad8 <__multiply+0x144>
 800ba22:	6106      	str	r6, [r0, #16]
 800ba24:	b005      	add	sp, #20
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	f843 2b04 	str.w	r2, [r3], #4
 800ba2e:	e7d8      	b.n	800b9e2 <__multiply+0x4e>
 800ba30:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba34:	f1ba 0f00 	cmp.w	sl, #0
 800ba38:	d023      	beq.n	800ba82 <__multiply+0xee>
 800ba3a:	46a9      	mov	r9, r5
 800ba3c:	f04f 0c00 	mov.w	ip, #0
 800ba40:	f104 0e14 	add.w	lr, r4, #20
 800ba44:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba48:	f8d9 3000 	ldr.w	r3, [r9]
 800ba4c:	fa1f fb87 	uxth.w	fp, r7
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba56:	4463      	add	r3, ip
 800ba58:	f8d9 c000 	ldr.w	ip, [r9]
 800ba5c:	0c3f      	lsrs	r7, r7, #16
 800ba5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ba62:	fb0a c707 	mla	r7, sl, r7, ip
 800ba66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba70:	4572      	cmp	r2, lr
 800ba72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba76:	f849 3b04 	str.w	r3, [r9], #4
 800ba7a:	d8e3      	bhi.n	800ba44 <__multiply+0xb0>
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	f845 c003 	str.w	ip, [r5, r3]
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	3104      	adds	r1, #4
 800ba86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	d021      	beq.n	800bad4 <__multiply+0x140>
 800ba90:	46ae      	mov	lr, r5
 800ba92:	f04f 0a00 	mov.w	sl, #0
 800ba96:	682b      	ldr	r3, [r5, #0]
 800ba98:	f104 0c14 	add.w	ip, r4, #20
 800ba9c:	f8bc b000 	ldrh.w	fp, [ip]
 800baa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	fb09 770b 	mla	r7, r9, fp, r7
 800baaa:	4457      	add	r7, sl
 800baac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bab0:	f84e 3b04 	str.w	r3, [lr], #4
 800bab4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800babc:	f8be 3000 	ldrh.w	r3, [lr]
 800bac0:	4562      	cmp	r2, ip
 800bac2:	fb09 330a 	mla	r3, r9, sl, r3
 800bac6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800baca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bace:	d8e5      	bhi.n	800ba9c <__multiply+0x108>
 800bad0:	9f01      	ldr	r7, [sp, #4]
 800bad2:	51eb      	str	r3, [r5, r7]
 800bad4:	3504      	adds	r5, #4
 800bad6:	e79a      	b.n	800ba0e <__multiply+0x7a>
 800bad8:	3e01      	subs	r6, #1
 800bada:	e79c      	b.n	800ba16 <__multiply+0x82>
 800badc:	0800e933 	.word	0x0800e933
 800bae0:	0800e944 	.word	0x0800e944

0800bae4 <__pow5mult>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	4615      	mov	r5, r2
 800baea:	f012 0203 	ands.w	r2, r2, #3
 800baee:	4607      	mov	r7, r0
 800baf0:	460e      	mov	r6, r1
 800baf2:	d007      	beq.n	800bb04 <__pow5mult+0x20>
 800baf4:	4c25      	ldr	r4, [pc, #148]	@ (800bb8c <__pow5mult+0xa8>)
 800baf6:	3a01      	subs	r2, #1
 800baf8:	2300      	movs	r3, #0
 800bafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bafe:	f7ff fe57 	bl	800b7b0 <__multadd>
 800bb02:	4606      	mov	r6, r0
 800bb04:	10ad      	asrs	r5, r5, #2
 800bb06:	d03d      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb08:	69fc      	ldr	r4, [r7, #28]
 800bb0a:	b97c      	cbnz	r4, 800bb2c <__pow5mult+0x48>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f7ff fd37 	bl	800b580 <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	61f8      	str	r0, [r7, #28]
 800bb16:	b928      	cbnz	r0, 800bb24 <__pow5mult+0x40>
 800bb18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb1c:	4b1c      	ldr	r3, [pc, #112]	@ (800bb90 <__pow5mult+0xac>)
 800bb1e:	481d      	ldr	r0, [pc, #116]	@ (800bb94 <__pow5mult+0xb0>)
 800bb20:	f7fd fe28 	bl	8009774 <__assert_func>
 800bb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb28:	6004      	str	r4, [r0, #0]
 800bb2a:	60c4      	str	r4, [r0, #12]
 800bb2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb34:	b94c      	cbnz	r4, 800bb4a <__pow5mult+0x66>
 800bb36:	f240 2171 	movw	r1, #625	@ 0x271
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7ff ff14 	bl	800b968 <__i2b>
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	f04f 0900 	mov.w	r9, #0
 800bb4e:	07eb      	lsls	r3, r5, #31
 800bb50:	d50a      	bpl.n	800bb68 <__pow5mult+0x84>
 800bb52:	4631      	mov	r1, r6
 800bb54:	4622      	mov	r2, r4
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ff1c 	bl	800b994 <__multiply>
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4638      	mov	r0, r7
 800bb62:	f7ff fe03 	bl	800b76c <_Bfree>
 800bb66:	4646      	mov	r6, r8
 800bb68:	106d      	asrs	r5, r5, #1
 800bb6a:	d00b      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	b938      	cbnz	r0, 800bb80 <__pow5mult+0x9c>
 800bb70:	4622      	mov	r2, r4
 800bb72:	4621      	mov	r1, r4
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ff0d 	bl	800b994 <__multiply>
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f8c0 9000 	str.w	r9, [r0]
 800bb80:	4604      	mov	r4, r0
 800bb82:	e7e4      	b.n	800bb4e <__pow5mult+0x6a>
 800bb84:	4630      	mov	r0, r6
 800bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800e9a0 	.word	0x0800e9a0
 800bb90:	0800e8c4 	.word	0x0800e8c4
 800bb94:	0800e944 	.word	0x0800e944

0800bb98 <__lshift>:
 800bb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	4607      	mov	r7, r0
 800bba0:	4691      	mov	r9, r2
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	6849      	ldr	r1, [r1, #4]
 800bba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbb0:	f108 0601 	add.w	r6, r8, #1
 800bbb4:	42b3      	cmp	r3, r6
 800bbb6:	db0b      	blt.n	800bbd0 <__lshift+0x38>
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff fd97 	bl	800b6ec <_Balloc>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	b948      	cbnz	r0, 800bbd6 <__lshift+0x3e>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbc8:	4b27      	ldr	r3, [pc, #156]	@ (800bc68 <__lshift+0xd0>)
 800bbca:	4828      	ldr	r0, [pc, #160]	@ (800bc6c <__lshift+0xd4>)
 800bbcc:	f7fd fdd2 	bl	8009774 <__assert_func>
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__lshift+0x1c>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f100 0114 	add.w	r1, r0, #20
 800bbdc:	f100 0210 	add.w	r2, r0, #16
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	4553      	cmp	r3, sl
 800bbe4:	db33      	blt.n	800bc4e <__lshift+0xb6>
 800bbe6:	6920      	ldr	r0, [r4, #16]
 800bbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbec:	f104 0314 	add.w	r3, r4, #20
 800bbf0:	f019 091f 	ands.w	r9, r9, #31
 800bbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbfc:	d02b      	beq.n	800bc56 <__lshift+0xbe>
 800bbfe:	468a      	mov	sl, r1
 800bc00:	2200      	movs	r2, #0
 800bc02:	f1c9 0e20 	rsb	lr, r9, #32
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	fa00 f009 	lsl.w	r0, r0, r9
 800bc0c:	4310      	orrs	r0, r2
 800bc0e:	f84a 0b04 	str.w	r0, [sl], #4
 800bc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc16:	459c      	cmp	ip, r3
 800bc18:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc1c:	d8f3      	bhi.n	800bc06 <__lshift+0x6e>
 800bc1e:	ebac 0304 	sub.w	r3, ip, r4
 800bc22:	3b15      	subs	r3, #21
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	3304      	adds	r3, #4
 800bc2a:	f104 0015 	add.w	r0, r4, #21
 800bc2e:	4584      	cmp	ip, r0
 800bc30:	bf38      	it	cc
 800bc32:	2304      	movcc	r3, #4
 800bc34:	50ca      	str	r2, [r1, r3]
 800bc36:	b10a      	cbz	r2, 800bc3c <__lshift+0xa4>
 800bc38:	f108 0602 	add.w	r6, r8, #2
 800bc3c:	3e01      	subs	r6, #1
 800bc3e:	4638      	mov	r0, r7
 800bc40:	4621      	mov	r1, r4
 800bc42:	612e      	str	r6, [r5, #16]
 800bc44:	f7ff fd92 	bl	800b76c <_Bfree>
 800bc48:	4628      	mov	r0, r5
 800bc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc52:	3301      	adds	r3, #1
 800bc54:	e7c5      	b.n	800bbe2 <__lshift+0x4a>
 800bc56:	3904      	subs	r1, #4
 800bc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5c:	459c      	cmp	ip, r3
 800bc5e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc62:	d8f9      	bhi.n	800bc58 <__lshift+0xc0>
 800bc64:	e7ea      	b.n	800bc3c <__lshift+0xa4>
 800bc66:	bf00      	nop
 800bc68:	0800e933 	.word	0x0800e933
 800bc6c:	0800e944 	.word	0x0800e944

0800bc70 <__mcmp>:
 800bc70:	4603      	mov	r3, r0
 800bc72:	690a      	ldr	r2, [r1, #16]
 800bc74:	6900      	ldr	r0, [r0, #16]
 800bc76:	b530      	push	{r4, r5, lr}
 800bc78:	1a80      	subs	r0, r0, r2
 800bc7a:	d10e      	bne.n	800bc9a <__mcmp+0x2a>
 800bc7c:	3314      	adds	r3, #20
 800bc7e:	3114      	adds	r1, #20
 800bc80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc90:	4295      	cmp	r5, r2
 800bc92:	d003      	beq.n	800bc9c <__mcmp+0x2c>
 800bc94:	d205      	bcs.n	800bca2 <__mcmp+0x32>
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc9a:	bd30      	pop	{r4, r5, pc}
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d3f3      	bcc.n	800bc88 <__mcmp+0x18>
 800bca0:	e7fb      	b.n	800bc9a <__mcmp+0x2a>
 800bca2:	2001      	movs	r0, #1
 800bca4:	e7f9      	b.n	800bc9a <__mcmp+0x2a>
	...

0800bca8 <__mdiff>:
 800bca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	4689      	mov	r9, r1
 800bcae:	4606      	mov	r6, r0
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	4648      	mov	r0, r9
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	f7ff ffdb 	bl	800bc70 <__mcmp>
 800bcba:	1e05      	subs	r5, r0, #0
 800bcbc:	d112      	bne.n	800bce4 <__mdiff+0x3c>
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7ff fd13 	bl	800b6ec <_Balloc>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	b928      	cbnz	r0, 800bcd6 <__mdiff+0x2e>
 800bcca:	f240 2137 	movw	r1, #567	@ 0x237
 800bcce:	4b3e      	ldr	r3, [pc, #248]	@ (800bdc8 <__mdiff+0x120>)
 800bcd0:	483e      	ldr	r0, [pc, #248]	@ (800bdcc <__mdiff+0x124>)
 800bcd2:	f7fd fd4f 	bl	8009774 <__assert_func>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcdc:	4610      	mov	r0, r2
 800bcde:	b003      	add	sp, #12
 800bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce4:	bfbc      	itt	lt
 800bce6:	464b      	movlt	r3, r9
 800bce8:	46a1      	movlt	r9, r4
 800bcea:	4630      	mov	r0, r6
 800bcec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bcf0:	bfba      	itte	lt
 800bcf2:	461c      	movlt	r4, r3
 800bcf4:	2501      	movlt	r5, #1
 800bcf6:	2500      	movge	r5, #0
 800bcf8:	f7ff fcf8 	bl	800b6ec <_Balloc>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	b918      	cbnz	r0, 800bd08 <__mdiff+0x60>
 800bd00:	f240 2145 	movw	r1, #581	@ 0x245
 800bd04:	4b30      	ldr	r3, [pc, #192]	@ (800bdc8 <__mdiff+0x120>)
 800bd06:	e7e3      	b.n	800bcd0 <__mdiff+0x28>
 800bd08:	f100 0b14 	add.w	fp, r0, #20
 800bd0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd10:	f109 0310 	add.w	r3, r9, #16
 800bd14:	60c5      	str	r5, [r0, #12]
 800bd16:	f04f 0c00 	mov.w	ip, #0
 800bd1a:	f109 0514 	add.w	r5, r9, #20
 800bd1e:	46d9      	mov	r9, fp
 800bd20:	6926      	ldr	r6, [r4, #16]
 800bd22:	f104 0e14 	add.w	lr, r4, #20
 800bd26:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd2a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	9b01      	ldr	r3, [sp, #4]
 800bd32:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd36:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd3a:	b281      	uxth	r1, r0
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	fa1f f38a 	uxth.w	r3, sl
 800bd42:	1a5b      	subs	r3, r3, r1
 800bd44:	0c00      	lsrs	r0, r0, #16
 800bd46:	4463      	add	r3, ip
 800bd48:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd4c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd56:	4576      	cmp	r6, lr
 800bd58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd5c:	f849 3b04 	str.w	r3, [r9], #4
 800bd60:	d8e6      	bhi.n	800bd30 <__mdiff+0x88>
 800bd62:	1b33      	subs	r3, r6, r4
 800bd64:	3b15      	subs	r3, #21
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	3415      	adds	r4, #21
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	42a6      	cmp	r6, r4
 800bd70:	bf38      	it	cc
 800bd72:	2304      	movcc	r3, #4
 800bd74:	441d      	add	r5, r3
 800bd76:	445b      	add	r3, fp
 800bd78:	461e      	mov	r6, r3
 800bd7a:	462c      	mov	r4, r5
 800bd7c:	4544      	cmp	r4, r8
 800bd7e:	d30e      	bcc.n	800bd9e <__mdiff+0xf6>
 800bd80:	f108 0103 	add.w	r1, r8, #3
 800bd84:	1b49      	subs	r1, r1, r5
 800bd86:	f021 0103 	bic.w	r1, r1, #3
 800bd8a:	3d03      	subs	r5, #3
 800bd8c:	45a8      	cmp	r8, r5
 800bd8e:	bf38      	it	cc
 800bd90:	2100      	movcc	r1, #0
 800bd92:	440b      	add	r3, r1
 800bd94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd98:	b199      	cbz	r1, 800bdc2 <__mdiff+0x11a>
 800bd9a:	6117      	str	r7, [r2, #16]
 800bd9c:	e79e      	b.n	800bcdc <__mdiff+0x34>
 800bd9e:	46e6      	mov	lr, ip
 800bda0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bda4:	fa1f fc81 	uxth.w	ip, r1
 800bda8:	44f4      	add	ip, lr
 800bdaa:	0c08      	lsrs	r0, r1, #16
 800bdac:	4471      	add	r1, lr
 800bdae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdb2:	b289      	uxth	r1, r1
 800bdb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdbc:	f846 1b04 	str.w	r1, [r6], #4
 800bdc0:	e7dc      	b.n	800bd7c <__mdiff+0xd4>
 800bdc2:	3f01      	subs	r7, #1
 800bdc4:	e7e6      	b.n	800bd94 <__mdiff+0xec>
 800bdc6:	bf00      	nop
 800bdc8:	0800e933 	.word	0x0800e933
 800bdcc:	0800e944 	.word	0x0800e944

0800bdd0 <__ulp>:
 800bdd0:	4b0e      	ldr	r3, [pc, #56]	@ (800be0c <__ulp+0x3c>)
 800bdd2:	400b      	ands	r3, r1
 800bdd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dc08      	bgt.n	800bdee <__ulp+0x1e>
 800bddc:	425b      	negs	r3, r3
 800bdde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bde2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bde6:	da04      	bge.n	800bdf2 <__ulp+0x22>
 800bde8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bdec:	4113      	asrs	r3, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	e008      	b.n	800be04 <__ulp+0x34>
 800bdf2:	f1a2 0314 	sub.w	r3, r2, #20
 800bdf6:	2b1e      	cmp	r3, #30
 800bdf8:	bfd6      	itet	le
 800bdfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bdfe:	2201      	movgt	r2, #1
 800be00:	40da      	lsrle	r2, r3
 800be02:	2300      	movs	r3, #0
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	7ff00000 	.word	0x7ff00000

0800be10 <__b2d>:
 800be10:	6902      	ldr	r2, [r0, #16]
 800be12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be14:	f100 0614 	add.w	r6, r0, #20
 800be18:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800be1c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800be20:	4f1e      	ldr	r7, [pc, #120]	@ (800be9c <__b2d+0x8c>)
 800be22:	4620      	mov	r0, r4
 800be24:	f7ff fd54 	bl	800b8d0 <__hi0bits>
 800be28:	4603      	mov	r3, r0
 800be2a:	f1c0 0020 	rsb	r0, r0, #32
 800be2e:	2b0a      	cmp	r3, #10
 800be30:	f1a2 0504 	sub.w	r5, r2, #4
 800be34:	6008      	str	r0, [r1, #0]
 800be36:	dc12      	bgt.n	800be5e <__b2d+0x4e>
 800be38:	42ae      	cmp	r6, r5
 800be3a:	bf2c      	ite	cs
 800be3c:	2200      	movcs	r2, #0
 800be3e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800be42:	f1c3 0c0b 	rsb	ip, r3, #11
 800be46:	3315      	adds	r3, #21
 800be48:	fa24 fe0c 	lsr.w	lr, r4, ip
 800be4c:	fa04 f303 	lsl.w	r3, r4, r3
 800be50:	fa22 f20c 	lsr.w	r2, r2, ip
 800be54:	ea4e 0107 	orr.w	r1, lr, r7
 800be58:	431a      	orrs	r2, r3
 800be5a:	4610      	mov	r0, r2
 800be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5e:	42ae      	cmp	r6, r5
 800be60:	bf36      	itet	cc
 800be62:	f1a2 0508 	subcc.w	r5, r2, #8
 800be66:	2200      	movcs	r2, #0
 800be68:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800be6c:	3b0b      	subs	r3, #11
 800be6e:	d012      	beq.n	800be96 <__b2d+0x86>
 800be70:	f1c3 0720 	rsb	r7, r3, #32
 800be74:	fa22 f107 	lsr.w	r1, r2, r7
 800be78:	409c      	lsls	r4, r3
 800be7a:	430c      	orrs	r4, r1
 800be7c:	42b5      	cmp	r5, r6
 800be7e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800be82:	bf94      	ite	ls
 800be84:	2400      	movls	r4, #0
 800be86:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800be8a:	409a      	lsls	r2, r3
 800be8c:	40fc      	lsrs	r4, r7
 800be8e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800be92:	4322      	orrs	r2, r4
 800be94:	e7e1      	b.n	800be5a <__b2d+0x4a>
 800be96:	ea44 0107 	orr.w	r1, r4, r7
 800be9a:	e7de      	b.n	800be5a <__b2d+0x4a>
 800be9c:	3ff00000 	.word	0x3ff00000

0800bea0 <__d2b>:
 800bea0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bea4:	2101      	movs	r1, #1
 800bea6:	4690      	mov	r8, r2
 800bea8:	4699      	mov	r9, r3
 800beaa:	9e08      	ldr	r6, [sp, #32]
 800beac:	f7ff fc1e 	bl	800b6ec <_Balloc>
 800beb0:	4604      	mov	r4, r0
 800beb2:	b930      	cbnz	r0, 800bec2 <__d2b+0x22>
 800beb4:	4602      	mov	r2, r0
 800beb6:	f240 310f 	movw	r1, #783	@ 0x30f
 800beba:	4b23      	ldr	r3, [pc, #140]	@ (800bf48 <__d2b+0xa8>)
 800bebc:	4823      	ldr	r0, [pc, #140]	@ (800bf4c <__d2b+0xac>)
 800bebe:	f7fd fc59 	bl	8009774 <__assert_func>
 800bec2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bec6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800beca:	b10d      	cbz	r5, 800bed0 <__d2b+0x30>
 800becc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	f1b8 0300 	subs.w	r3, r8, #0
 800bed6:	d024      	beq.n	800bf22 <__d2b+0x82>
 800bed8:	4668      	mov	r0, sp
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	f7ff fd17 	bl	800b90e <__lo0bits>
 800bee0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bee4:	b1d8      	cbz	r0, 800bf1e <__d2b+0x7e>
 800bee6:	f1c0 0320 	rsb	r3, r0, #32
 800beea:	fa02 f303 	lsl.w	r3, r2, r3
 800beee:	430b      	orrs	r3, r1
 800bef0:	40c2      	lsrs	r2, r0
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	9201      	str	r2, [sp, #4]
 800bef6:	9b01      	ldr	r3, [sp, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bf0c      	ite	eq
 800befc:	2201      	moveq	r2, #1
 800befe:	2202      	movne	r2, #2
 800bf00:	61a3      	str	r3, [r4, #24]
 800bf02:	6122      	str	r2, [r4, #16]
 800bf04:	b1ad      	cbz	r5, 800bf32 <__d2b+0x92>
 800bf06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf0a:	4405      	add	r5, r0
 800bf0c:	6035      	str	r5, [r6, #0]
 800bf0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf14:	6018      	str	r0, [r3, #0]
 800bf16:	4620      	mov	r0, r4
 800bf18:	b002      	add	sp, #8
 800bf1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bf1e:	6161      	str	r1, [r4, #20]
 800bf20:	e7e9      	b.n	800bef6 <__d2b+0x56>
 800bf22:	a801      	add	r0, sp, #4
 800bf24:	f7ff fcf3 	bl	800b90e <__lo0bits>
 800bf28:	9b01      	ldr	r3, [sp, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	6163      	str	r3, [r4, #20]
 800bf2e:	3020      	adds	r0, #32
 800bf30:	e7e7      	b.n	800bf02 <__d2b+0x62>
 800bf32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf3a:	6030      	str	r0, [r6, #0]
 800bf3c:	6918      	ldr	r0, [r3, #16]
 800bf3e:	f7ff fcc7 	bl	800b8d0 <__hi0bits>
 800bf42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf46:	e7e4      	b.n	800bf12 <__d2b+0x72>
 800bf48:	0800e933 	.word	0x0800e933
 800bf4c:	0800e944 	.word	0x0800e944

0800bf50 <__ratio>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	b085      	sub	sp, #20
 800bf56:	e9cd 1000 	strd	r1, r0, [sp]
 800bf5a:	a902      	add	r1, sp, #8
 800bf5c:	f7ff ff58 	bl	800be10 <__b2d>
 800bf60:	468b      	mov	fp, r1
 800bf62:	4606      	mov	r6, r0
 800bf64:	460f      	mov	r7, r1
 800bf66:	9800      	ldr	r0, [sp, #0]
 800bf68:	a903      	add	r1, sp, #12
 800bf6a:	f7ff ff51 	bl	800be10 <__b2d>
 800bf6e:	460d      	mov	r5, r1
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	4689      	mov	r9, r1
 800bf74:	6919      	ldr	r1, [r3, #16]
 800bf76:	9b00      	ldr	r3, [sp, #0]
 800bf78:	4604      	mov	r4, r0
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	1ac9      	subs	r1, r1, r3
 800bf80:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfcd      	iteet	gt
 800bf8e:	463a      	movgt	r2, r7
 800bf90:	462a      	movle	r2, r5
 800bf92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf96:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf9a:	bfd8      	it	le
 800bf9c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	4659      	mov	r1, fp
 800bfa6:	f7f4 fbc1 	bl	800072c <__aeabi_ddiv>
 800bfaa:	b005      	add	sp, #20
 800bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfb0 <__copybits>:
 800bfb0:	3901      	subs	r1, #1
 800bfb2:	b570      	push	{r4, r5, r6, lr}
 800bfb4:	1149      	asrs	r1, r1, #5
 800bfb6:	6914      	ldr	r4, [r2, #16]
 800bfb8:	3101      	adds	r1, #1
 800bfba:	f102 0314 	add.w	r3, r2, #20
 800bfbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfc6:	1f05      	subs	r5, r0, #4
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	d30c      	bcc.n	800bfe6 <__copybits+0x36>
 800bfcc:	1aa3      	subs	r3, r4, r2
 800bfce:	3b11      	subs	r3, #17
 800bfd0:	f023 0303 	bic.w	r3, r3, #3
 800bfd4:	3211      	adds	r2, #17
 800bfd6:	42a2      	cmp	r2, r4
 800bfd8:	bf88      	it	hi
 800bfda:	2300      	movhi	r3, #0
 800bfdc:	4418      	add	r0, r3
 800bfde:	2300      	movs	r3, #0
 800bfe0:	4288      	cmp	r0, r1
 800bfe2:	d305      	bcc.n	800bff0 <__copybits+0x40>
 800bfe4:	bd70      	pop	{r4, r5, r6, pc}
 800bfe6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfea:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfee:	e7eb      	b.n	800bfc8 <__copybits+0x18>
 800bff0:	f840 3b04 	str.w	r3, [r0], #4
 800bff4:	e7f4      	b.n	800bfe0 <__copybits+0x30>

0800bff6 <__any_on>:
 800bff6:	f100 0214 	add.w	r2, r0, #20
 800bffa:	6900      	ldr	r0, [r0, #16]
 800bffc:	114b      	asrs	r3, r1, #5
 800bffe:	4298      	cmp	r0, r3
 800c000:	b510      	push	{r4, lr}
 800c002:	db11      	blt.n	800c028 <__any_on+0x32>
 800c004:	dd0a      	ble.n	800c01c <__any_on+0x26>
 800c006:	f011 011f 	ands.w	r1, r1, #31
 800c00a:	d007      	beq.n	800c01c <__any_on+0x26>
 800c00c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c010:	fa24 f001 	lsr.w	r0, r4, r1
 800c014:	fa00 f101 	lsl.w	r1, r0, r1
 800c018:	428c      	cmp	r4, r1
 800c01a:	d10b      	bne.n	800c034 <__any_on+0x3e>
 800c01c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c020:	4293      	cmp	r3, r2
 800c022:	d803      	bhi.n	800c02c <__any_on+0x36>
 800c024:	2000      	movs	r0, #0
 800c026:	bd10      	pop	{r4, pc}
 800c028:	4603      	mov	r3, r0
 800c02a:	e7f7      	b.n	800c01c <__any_on+0x26>
 800c02c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c030:	2900      	cmp	r1, #0
 800c032:	d0f5      	beq.n	800c020 <__any_on+0x2a>
 800c034:	2001      	movs	r0, #1
 800c036:	e7f6      	b.n	800c026 <__any_on+0x30>

0800c038 <sulp>:
 800c038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03c:	460f      	mov	r7, r1
 800c03e:	4690      	mov	r8, r2
 800c040:	f7ff fec6 	bl	800bdd0 <__ulp>
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	f1b8 0f00 	cmp.w	r8, #0
 800c04c:	d011      	beq.n	800c072 <sulp+0x3a>
 800c04e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c052:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd0b      	ble.n	800c072 <sulp+0x3a>
 800c05a:	2400      	movs	r4, #0
 800c05c:	051b      	lsls	r3, r3, #20
 800c05e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c062:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c066:	4622      	mov	r2, r4
 800c068:	462b      	mov	r3, r5
 800c06a:	f7f4 fa35 	bl	80004d8 <__aeabi_dmul>
 800c06e:	4604      	mov	r4, r0
 800c070:	460d      	mov	r5, r1
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07a:	0000      	movs	r0, r0
 800c07c:	0000      	movs	r0, r0
	...

0800c080 <_strtod_l>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	b09f      	sub	sp, #124	@ 0x7c
 800c086:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c088:	2200      	movs	r2, #0
 800c08a:	460c      	mov	r4, r1
 800c08c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c08e:	f04f 0a00 	mov.w	sl, #0
 800c092:	f04f 0b00 	mov.w	fp, #0
 800c096:	460a      	mov	r2, r1
 800c098:	9005      	str	r0, [sp, #20]
 800c09a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c09c:	7811      	ldrb	r1, [r2, #0]
 800c09e:	292b      	cmp	r1, #43	@ 0x2b
 800c0a0:	d048      	beq.n	800c134 <_strtod_l+0xb4>
 800c0a2:	d836      	bhi.n	800c112 <_strtod_l+0x92>
 800c0a4:	290d      	cmp	r1, #13
 800c0a6:	d830      	bhi.n	800c10a <_strtod_l+0x8a>
 800c0a8:	2908      	cmp	r1, #8
 800c0aa:	d830      	bhi.n	800c10e <_strtod_l+0x8e>
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	d039      	beq.n	800c124 <_strtod_l+0xa4>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c0b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c0b6:	782a      	ldrb	r2, [r5, #0]
 800c0b8:	2a30      	cmp	r2, #48	@ 0x30
 800c0ba:	f040 80b1 	bne.w	800c220 <_strtod_l+0x1a0>
 800c0be:	786a      	ldrb	r2, [r5, #1]
 800c0c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0c4:	2a58      	cmp	r2, #88	@ 0x58
 800c0c6:	d16c      	bne.n	800c1a2 <_strtod_l+0x122>
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0cc:	4a8e      	ldr	r2, [pc, #568]	@ (800c308 <_strtod_l+0x288>)
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	ab1a      	add	r3, sp, #104	@ 0x68
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	9805      	ldr	r0, [sp, #20]
 800c0d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c0d8:	a919      	add	r1, sp, #100	@ 0x64
 800c0da:	f001 fb0f 	bl	800d6fc <__gethex>
 800c0de:	f010 060f 	ands.w	r6, r0, #15
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	d005      	beq.n	800c0f2 <_strtod_l+0x72>
 800c0e6:	2e06      	cmp	r6, #6
 800c0e8:	d126      	bne.n	800c138 <_strtod_l+0xb8>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800c0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 8584 	bne.w	800cc02 <_strtod_l+0xb82>
 800c0fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0fc:	b1bb      	cbz	r3, 800c12e <_strtod_l+0xae>
 800c0fe:	4650      	mov	r0, sl
 800c100:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c104:	b01f      	add	sp, #124	@ 0x7c
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10a:	2920      	cmp	r1, #32
 800c10c:	d1d0      	bne.n	800c0b0 <_strtod_l+0x30>
 800c10e:	3201      	adds	r2, #1
 800c110:	e7c3      	b.n	800c09a <_strtod_l+0x1a>
 800c112:	292d      	cmp	r1, #45	@ 0x2d
 800c114:	d1cc      	bne.n	800c0b0 <_strtod_l+0x30>
 800c116:	2101      	movs	r1, #1
 800c118:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c11a:	1c51      	adds	r1, r2, #1
 800c11c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c11e:	7852      	ldrb	r2, [r2, #1]
 800c120:	2a00      	cmp	r2, #0
 800c122:	d1c7      	bne.n	800c0b4 <_strtod_l+0x34>
 800c124:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c126:	9419      	str	r4, [sp, #100]	@ 0x64
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 8568 	bne.w	800cbfe <_strtod_l+0xb7e>
 800c12e:	4650      	mov	r0, sl
 800c130:	4659      	mov	r1, fp
 800c132:	e7e7      	b.n	800c104 <_strtod_l+0x84>
 800c134:	2100      	movs	r1, #0
 800c136:	e7ef      	b.n	800c118 <_strtod_l+0x98>
 800c138:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c13a:	b13a      	cbz	r2, 800c14c <_strtod_l+0xcc>
 800c13c:	2135      	movs	r1, #53	@ 0x35
 800c13e:	a81c      	add	r0, sp, #112	@ 0x70
 800c140:	f7ff ff36 	bl	800bfb0 <__copybits>
 800c144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c146:	9805      	ldr	r0, [sp, #20]
 800c148:	f7ff fb10 	bl	800b76c <_Bfree>
 800c14c:	3e01      	subs	r6, #1
 800c14e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c150:	2e04      	cmp	r6, #4
 800c152:	d806      	bhi.n	800c162 <_strtod_l+0xe2>
 800c154:	e8df f006 	tbb	[pc, r6]
 800c158:	201d0314 	.word	0x201d0314
 800c15c:	14          	.byte	0x14
 800c15d:	00          	.byte	0x00
 800c15e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c162:	05e1      	lsls	r1, r4, #23
 800c164:	bf48      	it	mi
 800c166:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c16a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c16e:	0d1b      	lsrs	r3, r3, #20
 800c170:	051b      	lsls	r3, r3, #20
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1bd      	bne.n	800c0f2 <_strtod_l+0x72>
 800c176:	f7fe fb21 	bl	800a7bc <__errno>
 800c17a:	2322      	movs	r3, #34	@ 0x22
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	e7b8      	b.n	800c0f2 <_strtod_l+0x72>
 800c180:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c184:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c188:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c18c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c190:	e7e7      	b.n	800c162 <_strtod_l+0xe2>
 800c192:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800c30c <_strtod_l+0x28c>
 800c196:	e7e4      	b.n	800c162 <_strtod_l+0xe2>
 800c198:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c19c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c1a0:	e7df      	b.n	800c162 <_strtod_l+0xe2>
 800c1a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1a8:	785b      	ldrb	r3, [r3, #1]
 800c1aa:	2b30      	cmp	r3, #48	@ 0x30
 800c1ac:	d0f9      	beq.n	800c1a2 <_strtod_l+0x122>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d09f      	beq.n	800c0f2 <_strtod_l+0x72>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1b8:	220a      	movs	r2, #10
 800c1ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1bc:	2300      	movs	r3, #0
 800c1be:	461f      	mov	r7, r3
 800c1c0:	9308      	str	r3, [sp, #32]
 800c1c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c1c6:	7805      	ldrb	r5, [r0, #0]
 800c1c8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c1cc:	b2d9      	uxtb	r1, r3
 800c1ce:	2909      	cmp	r1, #9
 800c1d0:	d928      	bls.n	800c224 <_strtod_l+0x1a4>
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	494e      	ldr	r1, [pc, #312]	@ (800c310 <_strtod_l+0x290>)
 800c1d6:	f001 f99b 	bl	800d510 <strncmp>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d032      	beq.n	800c244 <_strtod_l+0x1c4>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	462a      	mov	r2, r5
 800c1e2:	4681      	mov	r9, r0
 800c1e4:	463d      	mov	r5, r7
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2a65      	cmp	r2, #101	@ 0x65
 800c1ea:	d001      	beq.n	800c1f0 <_strtod_l+0x170>
 800c1ec:	2a45      	cmp	r2, #69	@ 0x45
 800c1ee:	d114      	bne.n	800c21a <_strtod_l+0x19a>
 800c1f0:	b91d      	cbnz	r5, 800c1fa <_strtod_l+0x17a>
 800c1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1f4:	4302      	orrs	r2, r0
 800c1f6:	d095      	beq.n	800c124 <_strtod_l+0xa4>
 800c1f8:	2500      	movs	r5, #0
 800c1fa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c1fc:	1c62      	adds	r2, r4, #1
 800c1fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800c200:	7862      	ldrb	r2, [r4, #1]
 800c202:	2a2b      	cmp	r2, #43	@ 0x2b
 800c204:	d077      	beq.n	800c2f6 <_strtod_l+0x276>
 800c206:	2a2d      	cmp	r2, #45	@ 0x2d
 800c208:	d07b      	beq.n	800c302 <_strtod_l+0x282>
 800c20a:	f04f 0c00 	mov.w	ip, #0
 800c20e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c212:	2909      	cmp	r1, #9
 800c214:	f240 8082 	bls.w	800c31c <_strtod_l+0x29c>
 800c218:	9419      	str	r4, [sp, #100]	@ 0x64
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	e0a2      	b.n	800c366 <_strtod_l+0x2e6>
 800c220:	2300      	movs	r3, #0
 800c222:	e7c7      	b.n	800c1b4 <_strtod_l+0x134>
 800c224:	2f08      	cmp	r7, #8
 800c226:	bfd5      	itete	le
 800c228:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c22a:	9908      	ldrgt	r1, [sp, #32]
 800c22c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c230:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c234:	f100 0001 	add.w	r0, r0, #1
 800c238:	bfd4      	ite	le
 800c23a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c23c:	9308      	strgt	r3, [sp, #32]
 800c23e:	3701      	adds	r7, #1
 800c240:	9019      	str	r0, [sp, #100]	@ 0x64
 800c242:	e7bf      	b.n	800c1c4 <_strtod_l+0x144>
 800c244:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c246:	1c5a      	adds	r2, r3, #1
 800c248:	9219      	str	r2, [sp, #100]	@ 0x64
 800c24a:	785a      	ldrb	r2, [r3, #1]
 800c24c:	b37f      	cbz	r7, 800c2ae <_strtod_l+0x22e>
 800c24e:	4681      	mov	r9, r0
 800c250:	463d      	mov	r5, r7
 800c252:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c256:	2b09      	cmp	r3, #9
 800c258:	d912      	bls.n	800c280 <_strtod_l+0x200>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e7c4      	b.n	800c1e8 <_strtod_l+0x168>
 800c25e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c260:	3001      	adds	r0, #1
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	9219      	str	r2, [sp, #100]	@ 0x64
 800c266:	785a      	ldrb	r2, [r3, #1]
 800c268:	2a30      	cmp	r2, #48	@ 0x30
 800c26a:	d0f8      	beq.n	800c25e <_strtod_l+0x1de>
 800c26c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c270:	2b08      	cmp	r3, #8
 800c272:	f200 84cb 	bhi.w	800cc0c <_strtod_l+0xb8c>
 800c276:	4681      	mov	r9, r0
 800c278:	2000      	movs	r0, #0
 800c27a:	4605      	mov	r5, r0
 800c27c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c27e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c280:	3a30      	subs	r2, #48	@ 0x30
 800c282:	f100 0301 	add.w	r3, r0, #1
 800c286:	d02a      	beq.n	800c2de <_strtod_l+0x25e>
 800c288:	4499      	add	r9, r3
 800c28a:	210a      	movs	r1, #10
 800c28c:	462b      	mov	r3, r5
 800c28e:	eb00 0c05 	add.w	ip, r0, r5
 800c292:	4563      	cmp	r3, ip
 800c294:	d10d      	bne.n	800c2b2 <_strtod_l+0x232>
 800c296:	1c69      	adds	r1, r5, #1
 800c298:	4401      	add	r1, r0
 800c29a:	4428      	add	r0, r5
 800c29c:	2808      	cmp	r0, #8
 800c29e:	dc16      	bgt.n	800c2ce <_strtod_l+0x24e>
 800c2a0:	230a      	movs	r3, #10
 800c2a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2a4:	fb03 2300 	mla	r3, r3, r0, r2
 800c2a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e018      	b.n	800c2e0 <_strtod_l+0x260>
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	e7da      	b.n	800c268 <_strtod_l+0x1e8>
 800c2b2:	2b08      	cmp	r3, #8
 800c2b4:	f103 0301 	add.w	r3, r3, #1
 800c2b8:	dc03      	bgt.n	800c2c2 <_strtod_l+0x242>
 800c2ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c2bc:	434e      	muls	r6, r1
 800c2be:	960a      	str	r6, [sp, #40]	@ 0x28
 800c2c0:	e7e7      	b.n	800c292 <_strtod_l+0x212>
 800c2c2:	2b10      	cmp	r3, #16
 800c2c4:	bfde      	ittt	le
 800c2c6:	9e08      	ldrle	r6, [sp, #32]
 800c2c8:	434e      	mulle	r6, r1
 800c2ca:	9608      	strle	r6, [sp, #32]
 800c2cc:	e7e1      	b.n	800c292 <_strtod_l+0x212>
 800c2ce:	280f      	cmp	r0, #15
 800c2d0:	dceb      	bgt.n	800c2aa <_strtod_l+0x22a>
 800c2d2:	230a      	movs	r3, #10
 800c2d4:	9808      	ldr	r0, [sp, #32]
 800c2d6:	fb03 2300 	mla	r3, r3, r0, r2
 800c2da:	9308      	str	r3, [sp, #32]
 800c2dc:	e7e5      	b.n	800c2aa <_strtod_l+0x22a>
 800c2de:	4629      	mov	r1, r5
 800c2e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	1c50      	adds	r0, r2, #1
 800c2e6:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2e8:	7852      	ldrb	r2, [r2, #1]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	e7b1      	b.n	800c252 <_strtod_l+0x1d2>
 800c2ee:	f04f 0900 	mov.w	r9, #0
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e77d      	b.n	800c1f2 <_strtod_l+0x172>
 800c2f6:	f04f 0c00 	mov.w	ip, #0
 800c2fa:	1ca2      	adds	r2, r4, #2
 800c2fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2fe:	78a2      	ldrb	r2, [r4, #2]
 800c300:	e785      	b.n	800c20e <_strtod_l+0x18e>
 800c302:	f04f 0c01 	mov.w	ip, #1
 800c306:	e7f8      	b.n	800c2fa <_strtod_l+0x27a>
 800c308:	0800eab8 	.word	0x0800eab8
 800c30c:	7ff00000 	.word	0x7ff00000
 800c310:	0800eaa0 	.word	0x0800eaa0
 800c314:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c316:	1c51      	adds	r1, r2, #1
 800c318:	9119      	str	r1, [sp, #100]	@ 0x64
 800c31a:	7852      	ldrb	r2, [r2, #1]
 800c31c:	2a30      	cmp	r2, #48	@ 0x30
 800c31e:	d0f9      	beq.n	800c314 <_strtod_l+0x294>
 800c320:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c324:	2908      	cmp	r1, #8
 800c326:	f63f af78 	bhi.w	800c21a <_strtod_l+0x19a>
 800c32a:	f04f 080a 	mov.w	r8, #10
 800c32e:	3a30      	subs	r2, #48	@ 0x30
 800c330:	920e      	str	r2, [sp, #56]	@ 0x38
 800c332:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c334:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c336:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c338:	1c56      	adds	r6, r2, #1
 800c33a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c33c:	7852      	ldrb	r2, [r2, #1]
 800c33e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c342:	f1be 0f09 	cmp.w	lr, #9
 800c346:	d939      	bls.n	800c3bc <_strtod_l+0x33c>
 800c348:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c34a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c34e:	1a76      	subs	r6, r6, r1
 800c350:	2e08      	cmp	r6, #8
 800c352:	dc03      	bgt.n	800c35c <_strtod_l+0x2dc>
 800c354:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c356:	4588      	cmp	r8, r1
 800c358:	bfa8      	it	ge
 800c35a:	4688      	movge	r8, r1
 800c35c:	f1bc 0f00 	cmp.w	ip, #0
 800c360:	d001      	beq.n	800c366 <_strtod_l+0x2e6>
 800c362:	f1c8 0800 	rsb	r8, r8, #0
 800c366:	2d00      	cmp	r5, #0
 800c368:	d14e      	bne.n	800c408 <_strtod_l+0x388>
 800c36a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c36c:	4308      	orrs	r0, r1
 800c36e:	f47f aec0 	bne.w	800c0f2 <_strtod_l+0x72>
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f aed6 	bne.w	800c124 <_strtod_l+0xa4>
 800c378:	2a69      	cmp	r2, #105	@ 0x69
 800c37a:	d028      	beq.n	800c3ce <_strtod_l+0x34e>
 800c37c:	dc25      	bgt.n	800c3ca <_strtod_l+0x34a>
 800c37e:	2a49      	cmp	r2, #73	@ 0x49
 800c380:	d025      	beq.n	800c3ce <_strtod_l+0x34e>
 800c382:	2a4e      	cmp	r2, #78	@ 0x4e
 800c384:	f47f aece 	bne.w	800c124 <_strtod_l+0xa4>
 800c388:	499a      	ldr	r1, [pc, #616]	@ (800c5f4 <_strtod_l+0x574>)
 800c38a:	a819      	add	r0, sp, #100	@ 0x64
 800c38c:	f001 fbd8 	bl	800db40 <__match>
 800c390:	2800      	cmp	r0, #0
 800c392:	f43f aec7 	beq.w	800c124 <_strtod_l+0xa4>
 800c396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b28      	cmp	r3, #40	@ 0x28
 800c39c:	d12e      	bne.n	800c3fc <_strtod_l+0x37c>
 800c39e:	4996      	ldr	r1, [pc, #600]	@ (800c5f8 <_strtod_l+0x578>)
 800c3a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800c3a2:	a819      	add	r0, sp, #100	@ 0x64
 800c3a4:	f001 fbe0 	bl	800db68 <__hexnan>
 800c3a8:	2805      	cmp	r0, #5
 800c3aa:	d127      	bne.n	800c3fc <_strtod_l+0x37c>
 800c3ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c3b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c3b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c3ba:	e69a      	b.n	800c0f2 <_strtod_l+0x72>
 800c3bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3be:	fb08 2101 	mla	r1, r8, r1, r2
 800c3c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c3c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3c8:	e7b5      	b.n	800c336 <_strtod_l+0x2b6>
 800c3ca:	2a6e      	cmp	r2, #110	@ 0x6e
 800c3cc:	e7da      	b.n	800c384 <_strtod_l+0x304>
 800c3ce:	498b      	ldr	r1, [pc, #556]	@ (800c5fc <_strtod_l+0x57c>)
 800c3d0:	a819      	add	r0, sp, #100	@ 0x64
 800c3d2:	f001 fbb5 	bl	800db40 <__match>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f43f aea4 	beq.w	800c124 <_strtod_l+0xa4>
 800c3dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3de:	4988      	ldr	r1, [pc, #544]	@ (800c600 <_strtod_l+0x580>)
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	a819      	add	r0, sp, #100	@ 0x64
 800c3e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3e6:	f001 fbab 	bl	800db40 <__match>
 800c3ea:	b910      	cbnz	r0, 800c3f2 <_strtod_l+0x372>
 800c3ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c3f2:	f04f 0a00 	mov.w	sl, #0
 800c3f6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800c604 <_strtod_l+0x584>
 800c3fa:	e67a      	b.n	800c0f2 <_strtod_l+0x72>
 800c3fc:	4882      	ldr	r0, [pc, #520]	@ (800c608 <_strtod_l+0x588>)
 800c3fe:	f001 f8fb 	bl	800d5f8 <nan>
 800c402:	4682      	mov	sl, r0
 800c404:	468b      	mov	fp, r1
 800c406:	e674      	b.n	800c0f2 <_strtod_l+0x72>
 800c408:	eba8 0309 	sub.w	r3, r8, r9
 800c40c:	2f00      	cmp	r7, #0
 800c40e:	bf08      	it	eq
 800c410:	462f      	moveq	r7, r5
 800c412:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c414:	2d10      	cmp	r5, #16
 800c416:	462c      	mov	r4, r5
 800c418:	9309      	str	r3, [sp, #36]	@ 0x24
 800c41a:	bfa8      	it	ge
 800c41c:	2410      	movge	r4, #16
 800c41e:	f7f3 ffe1 	bl	80003e4 <__aeabi_ui2d>
 800c422:	2d09      	cmp	r5, #9
 800c424:	4682      	mov	sl, r0
 800c426:	468b      	mov	fp, r1
 800c428:	dc11      	bgt.n	800c44e <_strtod_l+0x3ce>
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f43f ae60 	beq.w	800c0f2 <_strtod_l+0x72>
 800c432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c434:	dd76      	ble.n	800c524 <_strtod_l+0x4a4>
 800c436:	2b16      	cmp	r3, #22
 800c438:	dc5d      	bgt.n	800c4f6 <_strtod_l+0x476>
 800c43a:	4974      	ldr	r1, [pc, #464]	@ (800c60c <_strtod_l+0x58c>)
 800c43c:	4652      	mov	r2, sl
 800c43e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c442:	465b      	mov	r3, fp
 800c444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c448:	f7f4 f846 	bl	80004d8 <__aeabi_dmul>
 800c44c:	e7d9      	b.n	800c402 <_strtod_l+0x382>
 800c44e:	4b6f      	ldr	r3, [pc, #444]	@ (800c60c <_strtod_l+0x58c>)
 800c450:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c454:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c458:	f7f4 f83e 	bl	80004d8 <__aeabi_dmul>
 800c45c:	4682      	mov	sl, r0
 800c45e:	9808      	ldr	r0, [sp, #32]
 800c460:	468b      	mov	fp, r1
 800c462:	f7f3 ffbf 	bl	80003e4 <__aeabi_ui2d>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	4650      	mov	r0, sl
 800c46c:	4659      	mov	r1, fp
 800c46e:	f7f3 fe7d 	bl	800016c <__adddf3>
 800c472:	2d0f      	cmp	r5, #15
 800c474:	4682      	mov	sl, r0
 800c476:	468b      	mov	fp, r1
 800c478:	ddd7      	ble.n	800c42a <_strtod_l+0x3aa>
 800c47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47c:	1b2c      	subs	r4, r5, r4
 800c47e:	441c      	add	r4, r3
 800c480:	2c00      	cmp	r4, #0
 800c482:	f340 8096 	ble.w	800c5b2 <_strtod_l+0x532>
 800c486:	f014 030f 	ands.w	r3, r4, #15
 800c48a:	d00a      	beq.n	800c4a2 <_strtod_l+0x422>
 800c48c:	495f      	ldr	r1, [pc, #380]	@ (800c60c <_strtod_l+0x58c>)
 800c48e:	4652      	mov	r2, sl
 800c490:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c498:	465b      	mov	r3, fp
 800c49a:	f7f4 f81d 	bl	80004d8 <__aeabi_dmul>
 800c49e:	4682      	mov	sl, r0
 800c4a0:	468b      	mov	fp, r1
 800c4a2:	f034 040f 	bics.w	r4, r4, #15
 800c4a6:	d073      	beq.n	800c590 <_strtod_l+0x510>
 800c4a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c4ac:	dd48      	ble.n	800c540 <_strtod_l+0x4c0>
 800c4ae:	2400      	movs	r4, #0
 800c4b0:	46a0      	mov	r8, r4
 800c4b2:	46a1      	mov	r9, r4
 800c4b4:	940a      	str	r4, [sp, #40]	@ 0x28
 800c4b6:	2322      	movs	r3, #34	@ 0x22
 800c4b8:	f04f 0a00 	mov.w	sl, #0
 800c4bc:	9a05      	ldr	r2, [sp, #20]
 800c4be:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800c604 <_strtod_l+0x584>
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f43f ae13 	beq.w	800c0f2 <_strtod_l+0x72>
 800c4cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4ce:	9805      	ldr	r0, [sp, #20]
 800c4d0:	f7ff f94c 	bl	800b76c <_Bfree>
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	9805      	ldr	r0, [sp, #20]
 800c4d8:	f7ff f948 	bl	800b76c <_Bfree>
 800c4dc:	4641      	mov	r1, r8
 800c4de:	9805      	ldr	r0, [sp, #20]
 800c4e0:	f7ff f944 	bl	800b76c <_Bfree>
 800c4e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4e6:	9805      	ldr	r0, [sp, #20]
 800c4e8:	f7ff f940 	bl	800b76c <_Bfree>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	9805      	ldr	r0, [sp, #20]
 800c4f0:	f7ff f93c 	bl	800b76c <_Bfree>
 800c4f4:	e5fd      	b.n	800c0f2 <_strtod_l+0x72>
 800c4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	dbbc      	blt.n	800c47a <_strtod_l+0x3fa>
 800c500:	4c42      	ldr	r4, [pc, #264]	@ (800c60c <_strtod_l+0x58c>)
 800c502:	f1c5 050f 	rsb	r5, r5, #15
 800c506:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c50a:	4652      	mov	r2, sl
 800c50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c510:	465b      	mov	r3, fp
 800c512:	f7f3 ffe1 	bl	80004d8 <__aeabi_dmul>
 800c516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c518:	1b5d      	subs	r5, r3, r5
 800c51a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c51e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c522:	e791      	b.n	800c448 <_strtod_l+0x3c8>
 800c524:	3316      	adds	r3, #22
 800c526:	dba8      	blt.n	800c47a <_strtod_l+0x3fa>
 800c528:	4b38      	ldr	r3, [pc, #224]	@ (800c60c <_strtod_l+0x58c>)
 800c52a:	eba9 0808 	sub.w	r8, r9, r8
 800c52e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c532:	4650      	mov	r0, sl
 800c534:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c538:	4659      	mov	r1, fp
 800c53a:	f7f4 f8f7 	bl	800072c <__aeabi_ddiv>
 800c53e:	e760      	b.n	800c402 <_strtod_l+0x382>
 800c540:	4b33      	ldr	r3, [pc, #204]	@ (800c610 <_strtod_l+0x590>)
 800c542:	4650      	mov	r0, sl
 800c544:	9308      	str	r3, [sp, #32]
 800c546:	2300      	movs	r3, #0
 800c548:	4659      	mov	r1, fp
 800c54a:	461e      	mov	r6, r3
 800c54c:	1124      	asrs	r4, r4, #4
 800c54e:	2c01      	cmp	r4, #1
 800c550:	dc21      	bgt.n	800c596 <_strtod_l+0x516>
 800c552:	b10b      	cbz	r3, 800c558 <_strtod_l+0x4d8>
 800c554:	4682      	mov	sl, r0
 800c556:	468b      	mov	fp, r1
 800c558:	492d      	ldr	r1, [pc, #180]	@ (800c610 <_strtod_l+0x590>)
 800c55a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c55e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c562:	4652      	mov	r2, sl
 800c564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c568:	465b      	mov	r3, fp
 800c56a:	f7f3 ffb5 	bl	80004d8 <__aeabi_dmul>
 800c56e:	4b25      	ldr	r3, [pc, #148]	@ (800c604 <_strtod_l+0x584>)
 800c570:	460a      	mov	r2, r1
 800c572:	400b      	ands	r3, r1
 800c574:	4927      	ldr	r1, [pc, #156]	@ (800c614 <_strtod_l+0x594>)
 800c576:	4682      	mov	sl, r0
 800c578:	428b      	cmp	r3, r1
 800c57a:	d898      	bhi.n	800c4ae <_strtod_l+0x42e>
 800c57c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c580:	428b      	cmp	r3, r1
 800c582:	bf86      	itte	hi
 800c584:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c588:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c618 <_strtod_l+0x598>
 800c58c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c590:	2300      	movs	r3, #0
 800c592:	9308      	str	r3, [sp, #32]
 800c594:	e07a      	b.n	800c68c <_strtod_l+0x60c>
 800c596:	07e2      	lsls	r2, r4, #31
 800c598:	d505      	bpl.n	800c5a6 <_strtod_l+0x526>
 800c59a:	9b08      	ldr	r3, [sp, #32]
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f7f3 ff9a 	bl	80004d8 <__aeabi_dmul>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	9a08      	ldr	r2, [sp, #32]
 800c5a8:	3601      	adds	r6, #1
 800c5aa:	3208      	adds	r2, #8
 800c5ac:	1064      	asrs	r4, r4, #1
 800c5ae:	9208      	str	r2, [sp, #32]
 800c5b0:	e7cd      	b.n	800c54e <_strtod_l+0x4ce>
 800c5b2:	d0ed      	beq.n	800c590 <_strtod_l+0x510>
 800c5b4:	4264      	negs	r4, r4
 800c5b6:	f014 020f 	ands.w	r2, r4, #15
 800c5ba:	d00a      	beq.n	800c5d2 <_strtod_l+0x552>
 800c5bc:	4b13      	ldr	r3, [pc, #76]	@ (800c60c <_strtod_l+0x58c>)
 800c5be:	4650      	mov	r0, sl
 800c5c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5c4:	4659      	mov	r1, fp
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f4 f8af 	bl	800072c <__aeabi_ddiv>
 800c5ce:	4682      	mov	sl, r0
 800c5d0:	468b      	mov	fp, r1
 800c5d2:	1124      	asrs	r4, r4, #4
 800c5d4:	d0dc      	beq.n	800c590 <_strtod_l+0x510>
 800c5d6:	2c1f      	cmp	r4, #31
 800c5d8:	dd20      	ble.n	800c61c <_strtod_l+0x59c>
 800c5da:	2400      	movs	r4, #0
 800c5dc:	46a0      	mov	r8, r4
 800c5de:	46a1      	mov	r9, r4
 800c5e0:	940a      	str	r4, [sp, #40]	@ 0x28
 800c5e2:	2322      	movs	r3, #34	@ 0x22
 800c5e4:	9a05      	ldr	r2, [sp, #20]
 800c5e6:	f04f 0a00 	mov.w	sl, #0
 800c5ea:	f04f 0b00 	mov.w	fp, #0
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	e768      	b.n	800c4c4 <_strtod_l+0x444>
 800c5f2:	bf00      	nop
 800c5f4:	0800e88b 	.word	0x0800e88b
 800c5f8:	0800eaa4 	.word	0x0800eaa4
 800c5fc:	0800e883 	.word	0x0800e883
 800c600:	0800e8ba 	.word	0x0800e8ba
 800c604:	7ff00000 	.word	0x7ff00000
 800c608:	0800e87d 	.word	0x0800e87d
 800c60c:	0800e9d8 	.word	0x0800e9d8
 800c610:	0800e9b0 	.word	0x0800e9b0
 800c614:	7ca00000 	.word	0x7ca00000
 800c618:	7fefffff 	.word	0x7fefffff
 800c61c:	f014 0310 	ands.w	r3, r4, #16
 800c620:	bf18      	it	ne
 800c622:	236a      	movne	r3, #106	@ 0x6a
 800c624:	4650      	mov	r0, sl
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	4659      	mov	r1, fp
 800c62a:	2300      	movs	r3, #0
 800c62c:	4ea9      	ldr	r6, [pc, #676]	@ (800c8d4 <_strtod_l+0x854>)
 800c62e:	07e2      	lsls	r2, r4, #31
 800c630:	d504      	bpl.n	800c63c <_strtod_l+0x5bc>
 800c632:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c636:	f7f3 ff4f 	bl	80004d8 <__aeabi_dmul>
 800c63a:	2301      	movs	r3, #1
 800c63c:	1064      	asrs	r4, r4, #1
 800c63e:	f106 0608 	add.w	r6, r6, #8
 800c642:	d1f4      	bne.n	800c62e <_strtod_l+0x5ae>
 800c644:	b10b      	cbz	r3, 800c64a <_strtod_l+0x5ca>
 800c646:	4682      	mov	sl, r0
 800c648:	468b      	mov	fp, r1
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	b1b3      	cbz	r3, 800c67c <_strtod_l+0x5fc>
 800c64e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c652:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c656:	2b00      	cmp	r3, #0
 800c658:	4659      	mov	r1, fp
 800c65a:	dd0f      	ble.n	800c67c <_strtod_l+0x5fc>
 800c65c:	2b1f      	cmp	r3, #31
 800c65e:	dd57      	ble.n	800c710 <_strtod_l+0x690>
 800c660:	2b34      	cmp	r3, #52	@ 0x34
 800c662:	bfd8      	it	le
 800c664:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c668:	f04f 0a00 	mov.w	sl, #0
 800c66c:	bfcf      	iteee	gt
 800c66e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c672:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c676:	4093      	lslle	r3, r2
 800c678:	ea03 0b01 	andle.w	fp, r3, r1
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	4650      	mov	r0, sl
 800c682:	4659      	mov	r1, fp
 800c684:	f7f4 f990 	bl	80009a8 <__aeabi_dcmpeq>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d1a6      	bne.n	800c5da <_strtod_l+0x55a>
 800c68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68e:	463a      	mov	r2, r7
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c694:	462b      	mov	r3, r5
 800c696:	9805      	ldr	r0, [sp, #20]
 800c698:	f7ff f8d0 	bl	800b83c <__s2b>
 800c69c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f af05 	beq.w	800c4ae <_strtod_l+0x42e>
 800c6a4:	2400      	movs	r4, #0
 800c6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a8:	eba9 0308 	sub.w	r3, r9, r8
 800c6ac:	2a00      	cmp	r2, #0
 800c6ae:	bfa8      	it	ge
 800c6b0:	2300      	movge	r3, #0
 800c6b2:	46a0      	mov	r8, r4
 800c6b4:	9312      	str	r3, [sp, #72]	@ 0x48
 800c6b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c6ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800c6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6be:	9805      	ldr	r0, [sp, #20]
 800c6c0:	6859      	ldr	r1, [r3, #4]
 800c6c2:	f7ff f813 	bl	800b6ec <_Balloc>
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	f43f aef4 	beq.w	800c4b6 <_strtod_l+0x436>
 800c6ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d0:	300c      	adds	r0, #12
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	f103 010c 	add.w	r1, r3, #12
 800c6d8:	3202      	adds	r2, #2
 800c6da:	0092      	lsls	r2, r2, #2
 800c6dc:	f000 ff7e 	bl	800d5dc <memcpy>
 800c6e0:	ab1c      	add	r3, sp, #112	@ 0x70
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	4652      	mov	r2, sl
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	9805      	ldr	r0, [sp, #20]
 800c6ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c6f2:	f7ff fbd5 	bl	800bea0 <__d2b>
 800c6f6:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f43f aedc 	beq.w	800c4b6 <_strtod_l+0x436>
 800c6fe:	2101      	movs	r1, #1
 800c700:	9805      	ldr	r0, [sp, #20]
 800c702:	f7ff f931 	bl	800b968 <__i2b>
 800c706:	4680      	mov	r8, r0
 800c708:	b948      	cbnz	r0, 800c71e <_strtod_l+0x69e>
 800c70a:	f04f 0800 	mov.w	r8, #0
 800c70e:	e6d2      	b.n	800c4b6 <_strtod_l+0x436>
 800c710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	ea03 0a0a 	and.w	sl, r3, sl
 800c71c:	e7ae      	b.n	800c67c <_strtod_l+0x5fc>
 800c71e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c720:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c722:	2d00      	cmp	r5, #0
 800c724:	bfab      	itete	ge
 800c726:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c728:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c72a:	18ef      	addge	r7, r5, r3
 800c72c:	1b5e      	sublt	r6, r3, r5
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	bfa8      	it	ge
 800c732:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c734:	eba5 0503 	sub.w	r5, r5, r3
 800c738:	4415      	add	r5, r2
 800c73a:	4b67      	ldr	r3, [pc, #412]	@ (800c8d8 <_strtod_l+0x858>)
 800c73c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800c740:	bfb8      	it	lt
 800c742:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c744:	429d      	cmp	r5, r3
 800c746:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c74a:	da50      	bge.n	800c7ee <_strtod_l+0x76e>
 800c74c:	1b5b      	subs	r3, r3, r5
 800c74e:	2b1f      	cmp	r3, #31
 800c750:	f04f 0101 	mov.w	r1, #1
 800c754:	eba2 0203 	sub.w	r2, r2, r3
 800c758:	dc3d      	bgt.n	800c7d6 <_strtod_l+0x756>
 800c75a:	fa01 f303 	lsl.w	r3, r1, r3
 800c75e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c760:	2300      	movs	r3, #0
 800c762:	9310      	str	r3, [sp, #64]	@ 0x40
 800c764:	18bd      	adds	r5, r7, r2
 800c766:	9b08      	ldr	r3, [sp, #32]
 800c768:	42af      	cmp	r7, r5
 800c76a:	4416      	add	r6, r2
 800c76c:	441e      	add	r6, r3
 800c76e:	463b      	mov	r3, r7
 800c770:	bfa8      	it	ge
 800c772:	462b      	movge	r3, r5
 800c774:	42b3      	cmp	r3, r6
 800c776:	bfa8      	it	ge
 800c778:	4633      	movge	r3, r6
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bfc2      	ittt	gt
 800c77e:	1aed      	subgt	r5, r5, r3
 800c780:	1af6      	subgt	r6, r6, r3
 800c782:	1aff      	subgt	r7, r7, r3
 800c784:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c786:	2b00      	cmp	r3, #0
 800c788:	dd16      	ble.n	800c7b8 <_strtod_l+0x738>
 800c78a:	4641      	mov	r1, r8
 800c78c:	461a      	mov	r2, r3
 800c78e:	9805      	ldr	r0, [sp, #20]
 800c790:	f7ff f9a8 	bl	800bae4 <__pow5mult>
 800c794:	4680      	mov	r8, r0
 800c796:	2800      	cmp	r0, #0
 800c798:	d0b7      	beq.n	800c70a <_strtod_l+0x68a>
 800c79a:	4601      	mov	r1, r0
 800c79c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c79e:	9805      	ldr	r0, [sp, #20]
 800c7a0:	f7ff f8f8 	bl	800b994 <__multiply>
 800c7a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f ae85 	beq.w	800c4b6 <_strtod_l+0x436>
 800c7ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7ae:	9805      	ldr	r0, [sp, #20]
 800c7b0:	f7fe ffdc 	bl	800b76c <_Bfree>
 800c7b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	dc1d      	bgt.n	800c7f8 <_strtod_l+0x778>
 800c7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dd23      	ble.n	800c80a <_strtod_l+0x78a>
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c7c6:	9805      	ldr	r0, [sp, #20]
 800c7c8:	f7ff f98c 	bl	800bae4 <__pow5mult>
 800c7cc:	4681      	mov	r9, r0
 800c7ce:	b9e0      	cbnz	r0, 800c80a <_strtod_l+0x78a>
 800c7d0:	f04f 0900 	mov.w	r9, #0
 800c7d4:	e66f      	b.n	800c4b6 <_strtod_l+0x436>
 800c7d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c7da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c7de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c7e2:	35e2      	adds	r5, #226	@ 0xe2
 800c7e4:	fa01 f305 	lsl.w	r3, r1, r5
 800c7e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c7ec:	e7ba      	b.n	800c764 <_strtod_l+0x6e4>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7f6:	e7b5      	b.n	800c764 <_strtod_l+0x6e4>
 800c7f8:	462a      	mov	r2, r5
 800c7fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7fc:	9805      	ldr	r0, [sp, #20]
 800c7fe:	f7ff f9cb 	bl	800bb98 <__lshift>
 800c802:	901a      	str	r0, [sp, #104]	@ 0x68
 800c804:	2800      	cmp	r0, #0
 800c806:	d1d9      	bne.n	800c7bc <_strtod_l+0x73c>
 800c808:	e655      	b.n	800c4b6 <_strtod_l+0x436>
 800c80a:	2e00      	cmp	r6, #0
 800c80c:	dd07      	ble.n	800c81e <_strtod_l+0x79e>
 800c80e:	4649      	mov	r1, r9
 800c810:	4632      	mov	r2, r6
 800c812:	9805      	ldr	r0, [sp, #20]
 800c814:	f7ff f9c0 	bl	800bb98 <__lshift>
 800c818:	4681      	mov	r9, r0
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d0d8      	beq.n	800c7d0 <_strtod_l+0x750>
 800c81e:	2f00      	cmp	r7, #0
 800c820:	dd08      	ble.n	800c834 <_strtod_l+0x7b4>
 800c822:	4641      	mov	r1, r8
 800c824:	463a      	mov	r2, r7
 800c826:	9805      	ldr	r0, [sp, #20]
 800c828:	f7ff f9b6 	bl	800bb98 <__lshift>
 800c82c:	4680      	mov	r8, r0
 800c82e:	2800      	cmp	r0, #0
 800c830:	f43f ae41 	beq.w	800c4b6 <_strtod_l+0x436>
 800c834:	464a      	mov	r2, r9
 800c836:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c838:	9805      	ldr	r0, [sp, #20]
 800c83a:	f7ff fa35 	bl	800bca8 <__mdiff>
 800c83e:	4604      	mov	r4, r0
 800c840:	2800      	cmp	r0, #0
 800c842:	f43f ae38 	beq.w	800c4b6 <_strtod_l+0x436>
 800c846:	68c3      	ldr	r3, [r0, #12]
 800c848:	4641      	mov	r1, r8
 800c84a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c84c:	2300      	movs	r3, #0
 800c84e:	60c3      	str	r3, [r0, #12]
 800c850:	f7ff fa0e 	bl	800bc70 <__mcmp>
 800c854:	2800      	cmp	r0, #0
 800c856:	da45      	bge.n	800c8e4 <_strtod_l+0x864>
 800c858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c85a:	ea53 030a 	orrs.w	r3, r3, sl
 800c85e:	d16b      	bne.n	800c938 <_strtod_l+0x8b8>
 800c860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c864:	2b00      	cmp	r3, #0
 800c866:	d167      	bne.n	800c938 <_strtod_l+0x8b8>
 800c868:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c86c:	0d1b      	lsrs	r3, r3, #20
 800c86e:	051b      	lsls	r3, r3, #20
 800c870:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c874:	d960      	bls.n	800c938 <_strtod_l+0x8b8>
 800c876:	6963      	ldr	r3, [r4, #20]
 800c878:	b913      	cbnz	r3, 800c880 <_strtod_l+0x800>
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	dd5b      	ble.n	800c938 <_strtod_l+0x8b8>
 800c880:	4621      	mov	r1, r4
 800c882:	2201      	movs	r2, #1
 800c884:	9805      	ldr	r0, [sp, #20]
 800c886:	f7ff f987 	bl	800bb98 <__lshift>
 800c88a:	4641      	mov	r1, r8
 800c88c:	4604      	mov	r4, r0
 800c88e:	f7ff f9ef 	bl	800bc70 <__mcmp>
 800c892:	2800      	cmp	r0, #0
 800c894:	dd50      	ble.n	800c938 <_strtod_l+0x8b8>
 800c896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c89a:	9a08      	ldr	r2, [sp, #32]
 800c89c:	0d1b      	lsrs	r3, r3, #20
 800c89e:	051b      	lsls	r3, r3, #20
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	d06a      	beq.n	800c97a <_strtod_l+0x8fa>
 800c8a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8a8:	d867      	bhi.n	800c97a <_strtod_l+0x8fa>
 800c8aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c8ae:	f67f ae98 	bls.w	800c5e2 <_strtod_l+0x562>
 800c8b2:	4650      	mov	r0, sl
 800c8b4:	4659      	mov	r1, fp
 800c8b6:	4b09      	ldr	r3, [pc, #36]	@ (800c8dc <_strtod_l+0x85c>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f7f3 fe0d 	bl	80004d8 <__aeabi_dmul>
 800c8be:	4b08      	ldr	r3, [pc, #32]	@ (800c8e0 <_strtod_l+0x860>)
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	400b      	ands	r3, r1
 800c8c4:	468b      	mov	fp, r1
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f47f ae00 	bne.w	800c4cc <_strtod_l+0x44c>
 800c8cc:	2322      	movs	r3, #34	@ 0x22
 800c8ce:	9a05      	ldr	r2, [sp, #20]
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	e5fb      	b.n	800c4cc <_strtod_l+0x44c>
 800c8d4:	0800ead0 	.word	0x0800ead0
 800c8d8:	fffffc02 	.word	0xfffffc02
 800c8dc:	39500000 	.word	0x39500000
 800c8e0:	7ff00000 	.word	0x7ff00000
 800c8e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c8e8:	d165      	bne.n	800c9b6 <_strtod_l+0x936>
 800c8ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8f0:	b35a      	cbz	r2, 800c94a <_strtod_l+0x8ca>
 800c8f2:	4a99      	ldr	r2, [pc, #612]	@ (800cb58 <_strtod_l+0xad8>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d12b      	bne.n	800c950 <_strtod_l+0x8d0>
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	4651      	mov	r1, sl
 800c8fc:	b303      	cbz	r3, 800c940 <_strtod_l+0x8c0>
 800c8fe:	465a      	mov	r2, fp
 800c900:	4b96      	ldr	r3, [pc, #600]	@ (800cb5c <_strtod_l+0xadc>)
 800c902:	4013      	ands	r3, r2
 800c904:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c90c:	d81b      	bhi.n	800c946 <_strtod_l+0x8c6>
 800c90e:	0d1b      	lsrs	r3, r3, #20
 800c910:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c914:	fa02 f303 	lsl.w	r3, r2, r3
 800c918:	4299      	cmp	r1, r3
 800c91a:	d119      	bne.n	800c950 <_strtod_l+0x8d0>
 800c91c:	4b90      	ldr	r3, [pc, #576]	@ (800cb60 <_strtod_l+0xae0>)
 800c91e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <_strtod_l+0x8aa>
 800c924:	3101      	adds	r1, #1
 800c926:	f43f adc6 	beq.w	800c4b6 <_strtod_l+0x436>
 800c92a:	f04f 0a00 	mov.w	sl, #0
 800c92e:	4b8b      	ldr	r3, [pc, #556]	@ (800cb5c <_strtod_l+0xadc>)
 800c930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c932:	401a      	ands	r2, r3
 800c934:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c938:	9b08      	ldr	r3, [sp, #32]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1b9      	bne.n	800c8b2 <_strtod_l+0x832>
 800c93e:	e5c5      	b.n	800c4cc <_strtod_l+0x44c>
 800c940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c944:	e7e8      	b.n	800c918 <_strtod_l+0x898>
 800c946:	4613      	mov	r3, r2
 800c948:	e7e6      	b.n	800c918 <_strtod_l+0x898>
 800c94a:	ea53 030a 	orrs.w	r3, r3, sl
 800c94e:	d0a2      	beq.n	800c896 <_strtod_l+0x816>
 800c950:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c952:	b1db      	cbz	r3, 800c98c <_strtod_l+0x90c>
 800c954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c956:	4213      	tst	r3, r2
 800c958:	d0ee      	beq.n	800c938 <_strtod_l+0x8b8>
 800c95a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c95c:	4650      	mov	r0, sl
 800c95e:	4659      	mov	r1, fp
 800c960:	9a08      	ldr	r2, [sp, #32]
 800c962:	b1bb      	cbz	r3, 800c994 <_strtod_l+0x914>
 800c964:	f7ff fb68 	bl	800c038 <sulp>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c970:	f7f3 fbfc 	bl	800016c <__adddf3>
 800c974:	4682      	mov	sl, r0
 800c976:	468b      	mov	fp, r1
 800c978:	e7de      	b.n	800c938 <_strtod_l+0x8b8>
 800c97a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c97e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c982:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c986:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c98a:	e7d5      	b.n	800c938 <_strtod_l+0x8b8>
 800c98c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c98e:	ea13 0f0a 	tst.w	r3, sl
 800c992:	e7e1      	b.n	800c958 <_strtod_l+0x8d8>
 800c994:	f7ff fb50 	bl	800c038 <sulp>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9a0:	f7f3 fbe2 	bl	8000168 <__aeabi_dsub>
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4682      	mov	sl, r0
 800c9aa:	468b      	mov	fp, r1
 800c9ac:	f7f3 fffc 	bl	80009a8 <__aeabi_dcmpeq>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d0c1      	beq.n	800c938 <_strtod_l+0x8b8>
 800c9b4:	e615      	b.n	800c5e2 <_strtod_l+0x562>
 800c9b6:	4641      	mov	r1, r8
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f7ff fac9 	bl	800bf50 <__ratio>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	f7f4 f802 	bl	80009d0 <__aeabi_dcmple>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d06d      	beq.n	800caac <_strtod_l+0xa2c>
 800c9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d178      	bne.n	800cac8 <_strtod_l+0xa48>
 800c9d6:	f1ba 0f00 	cmp.w	sl, #0
 800c9da:	d156      	bne.n	800ca8a <_strtod_l+0xa0a>
 800c9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d158      	bne.n	800ca98 <_strtod_l+0xa18>
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4b5d      	ldr	r3, [pc, #372]	@ (800cb64 <_strtod_l+0xae4>)
 800c9ee:	f7f3 ffe5 	bl	80009bc <__aeabi_dcmplt>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d157      	bne.n	800caa6 <_strtod_l+0xa26>
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	4b5a      	ldr	r3, [pc, #360]	@ (800cb68 <_strtod_l+0xae8>)
 800c9fe:	f7f3 fd6b 	bl	80004d8 <__aeabi_dmul>
 800ca02:	4606      	mov	r6, r0
 800ca04:	460f      	mov	r7, r1
 800ca06:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca0a:	9606      	str	r6, [sp, #24]
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca12:	4d52      	ldr	r5, [pc, #328]	@ (800cb5c <_strtod_l+0xadc>)
 800ca14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca1a:	401d      	ands	r5, r3
 800ca1c:	4b53      	ldr	r3, [pc, #332]	@ (800cb6c <_strtod_l+0xaec>)
 800ca1e:	429d      	cmp	r5, r3
 800ca20:	f040 80aa 	bne.w	800cb78 <_strtod_l+0xaf8>
 800ca24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca26:	4650      	mov	r0, sl
 800ca28:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca2c:	4659      	mov	r1, fp
 800ca2e:	f7ff f9cf 	bl	800bdd0 <__ulp>
 800ca32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca36:	f7f3 fd4f 	bl	80004d8 <__aeabi_dmul>
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	f7f3 fb95 	bl	800016c <__adddf3>
 800ca42:	460b      	mov	r3, r1
 800ca44:	4945      	ldr	r1, [pc, #276]	@ (800cb5c <_strtod_l+0xadc>)
 800ca46:	4a4a      	ldr	r2, [pc, #296]	@ (800cb70 <_strtod_l+0xaf0>)
 800ca48:	4019      	ands	r1, r3
 800ca4a:	4291      	cmp	r1, r2
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	d942      	bls.n	800cad6 <_strtod_l+0xa56>
 800ca50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca52:	4b43      	ldr	r3, [pc, #268]	@ (800cb60 <_strtod_l+0xae0>)
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d103      	bne.n	800ca60 <_strtod_l+0x9e0>
 800ca58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	f43f ad2b 	beq.w	800c4b6 <_strtod_l+0x436>
 800ca60:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ca64:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800cb60 <_strtod_l+0xae0>
 800ca68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca6a:	9805      	ldr	r0, [sp, #20]
 800ca6c:	f7fe fe7e 	bl	800b76c <_Bfree>
 800ca70:	4649      	mov	r1, r9
 800ca72:	9805      	ldr	r0, [sp, #20]
 800ca74:	f7fe fe7a 	bl	800b76c <_Bfree>
 800ca78:	4641      	mov	r1, r8
 800ca7a:	9805      	ldr	r0, [sp, #20]
 800ca7c:	f7fe fe76 	bl	800b76c <_Bfree>
 800ca80:	4621      	mov	r1, r4
 800ca82:	9805      	ldr	r0, [sp, #20]
 800ca84:	f7fe fe72 	bl	800b76c <_Bfree>
 800ca88:	e618      	b.n	800c6bc <_strtod_l+0x63c>
 800ca8a:	f1ba 0f01 	cmp.w	sl, #1
 800ca8e:	d103      	bne.n	800ca98 <_strtod_l+0xa18>
 800ca90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f43f ada5 	beq.w	800c5e2 <_strtod_l+0x562>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	4b36      	ldr	r3, [pc, #216]	@ (800cb74 <_strtod_l+0xaf4>)
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800caa2:	4f30      	ldr	r7, [pc, #192]	@ (800cb64 <_strtod_l+0xae4>)
 800caa4:	e7b3      	b.n	800ca0e <_strtod_l+0x98e>
 800caa6:	2600      	movs	r6, #0
 800caa8:	4f2f      	ldr	r7, [pc, #188]	@ (800cb68 <_strtod_l+0xae8>)
 800caaa:	e7ac      	b.n	800ca06 <_strtod_l+0x986>
 800caac:	4630      	mov	r0, r6
 800caae:	4639      	mov	r1, r7
 800cab0:	4b2d      	ldr	r3, [pc, #180]	@ (800cb68 <_strtod_l+0xae8>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	f7f3 fd10 	bl	80004d8 <__aeabi_dmul>
 800cab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caba:	4606      	mov	r6, r0
 800cabc:	460f      	mov	r7, r1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0a1      	beq.n	800ca06 <_strtod_l+0x986>
 800cac2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cac6:	e7a2      	b.n	800ca0e <_strtod_l+0x98e>
 800cac8:	2200      	movs	r2, #0
 800caca:	4b26      	ldr	r3, [pc, #152]	@ (800cb64 <_strtod_l+0xae4>)
 800cacc:	4616      	mov	r6, r2
 800cace:	461f      	mov	r7, r3
 800cad0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cad4:	e79b      	b.n	800ca0e <_strtod_l+0x98e>
 800cad6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cada:	9b08      	ldr	r3, [sp, #32]
 800cadc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1c1      	bne.n	800ca68 <_strtod_l+0x9e8>
 800cae4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cae8:	0d1b      	lsrs	r3, r3, #20
 800caea:	051b      	lsls	r3, r3, #20
 800caec:	429d      	cmp	r5, r3
 800caee:	d1bb      	bne.n	800ca68 <_strtod_l+0x9e8>
 800caf0:	4630      	mov	r0, r6
 800caf2:	4639      	mov	r1, r7
 800caf4:	f7f4 fabc 	bl	8001070 <__aeabi_d2lz>
 800caf8:	f7f3 fcc0 	bl	800047c <__aeabi_l2d>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f3 fb30 	bl	8000168 <__aeabi_dsub>
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb10:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	ea46 060a 	orr.w	r6, r6, sl
 800cb1a:	431e      	orrs	r6, r3
 800cb1c:	d069      	beq.n	800cbf2 <_strtod_l+0xb72>
 800cb1e:	a30a      	add	r3, pc, #40	@ (adr r3, 800cb48 <_strtod_l+0xac8>)
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	f7f3 ff4a 	bl	80009bc <__aeabi_dcmplt>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	f47f accf 	bne.w	800c4cc <_strtod_l+0x44c>
 800cb2e:	a308      	add	r3, pc, #32	@ (adr r3, 800cb50 <_strtod_l+0xad0>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb38:	f7f3 ff5e 	bl	80009f8 <__aeabi_dcmpgt>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d093      	beq.n	800ca68 <_strtod_l+0x9e8>
 800cb40:	e4c4      	b.n	800c4cc <_strtod_l+0x44c>
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
 800cb48:	94a03595 	.word	0x94a03595
 800cb4c:	3fdfffff 	.word	0x3fdfffff
 800cb50:	35afe535 	.word	0x35afe535
 800cb54:	3fe00000 	.word	0x3fe00000
 800cb58:	000fffff 	.word	0x000fffff
 800cb5c:	7ff00000 	.word	0x7ff00000
 800cb60:	7fefffff 	.word	0x7fefffff
 800cb64:	3ff00000 	.word	0x3ff00000
 800cb68:	3fe00000 	.word	0x3fe00000
 800cb6c:	7fe00000 	.word	0x7fe00000
 800cb70:	7c9fffff 	.word	0x7c9fffff
 800cb74:	bff00000 	.word	0xbff00000
 800cb78:	9b08      	ldr	r3, [sp, #32]
 800cb7a:	b323      	cbz	r3, 800cbc6 <_strtod_l+0xb46>
 800cb7c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cb80:	d821      	bhi.n	800cbc6 <_strtod_l+0xb46>
 800cb82:	a327      	add	r3, pc, #156	@ (adr r3, 800cc20 <_strtod_l+0xba0>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 ff20 	bl	80009d0 <__aeabi_dcmple>
 800cb90:	b1a0      	cbz	r0, 800cbbc <_strtod_l+0xb3c>
 800cb92:	4639      	mov	r1, r7
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7f3 ff77 	bl	8000a88 <__aeabi_d2uiz>
 800cb9a:	2801      	cmp	r0, #1
 800cb9c:	bf38      	it	cc
 800cb9e:	2001      	movcc	r0, #1
 800cba0:	f7f3 fc20 	bl	80003e4 <__aeabi_ui2d>
 800cba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cba6:	4606      	mov	r6, r0
 800cba8:	460f      	mov	r7, r1
 800cbaa:	b9fb      	cbnz	r3, 800cbec <_strtod_l+0xb6c>
 800cbac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbb0:	9014      	str	r0, [sp, #80]	@ 0x50
 800cbb2:	9315      	str	r3, [sp, #84]	@ 0x54
 800cbb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cbb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbbe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cbc2:	1b5b      	subs	r3, r3, r5
 800cbc4:	9311      	str	r3, [sp, #68]	@ 0x44
 800cbc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cbce:	f7ff f8ff 	bl	800bdd0 <__ulp>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	f7f3 fc7d 	bl	80004d8 <__aeabi_dmul>
 800cbde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cbe2:	f7f3 fac3 	bl	800016c <__adddf3>
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	468b      	mov	fp, r1
 800cbea:	e776      	b.n	800cada <_strtod_l+0xa5a>
 800cbec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cbf0:	e7e0      	b.n	800cbb4 <_strtod_l+0xb34>
 800cbf2:	a30d      	add	r3, pc, #52	@ (adr r3, 800cc28 <_strtod_l+0xba8>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fee0 	bl	80009bc <__aeabi_dcmplt>
 800cbfc:	e79e      	b.n	800cb3c <_strtod_l+0xabc>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc04:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	f7ff ba77 	b.w	800c0fa <_strtod_l+0x7a>
 800cc0c:	2a65      	cmp	r2, #101	@ 0x65
 800cc0e:	f43f ab6e 	beq.w	800c2ee <_strtod_l+0x26e>
 800cc12:	2a45      	cmp	r2, #69	@ 0x45
 800cc14:	f43f ab6b 	beq.w	800c2ee <_strtod_l+0x26e>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f7ff bba6 	b.w	800c36a <_strtod_l+0x2ea>
 800cc1e:	bf00      	nop
 800cc20:	ffc00000 	.word	0xffc00000
 800cc24:	41dfffff 	.word	0x41dfffff
 800cc28:	94a03595 	.word	0x94a03595
 800cc2c:	3fcfffff 	.word	0x3fcfffff

0800cc30 <_strtod_r>:
 800cc30:	4b01      	ldr	r3, [pc, #4]	@ (800cc38 <_strtod_r+0x8>)
 800cc32:	f7ff ba25 	b.w	800c080 <_strtod_l>
 800cc36:	bf00      	nop
 800cc38:	200001b0 	.word	0x200001b0

0800cc3c <_strtol_l.constprop.0>:
 800cc3c:	2b24      	cmp	r3, #36	@ 0x24
 800cc3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc42:	4686      	mov	lr, r0
 800cc44:	4690      	mov	r8, r2
 800cc46:	d801      	bhi.n	800cc4c <_strtol_l.constprop.0+0x10>
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d106      	bne.n	800cc5a <_strtol_l.constprop.0+0x1e>
 800cc4c:	f7fd fdb6 	bl	800a7bc <__errno>
 800cc50:	2316      	movs	r3, #22
 800cc52:	6003      	str	r3, [r0, #0]
 800cc54:	2000      	movs	r0, #0
 800cc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	4833      	ldr	r0, [pc, #204]	@ (800cd2c <_strtol_l.constprop.0+0xf0>)
 800cc5e:	462a      	mov	r2, r5
 800cc60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc64:	5d06      	ldrb	r6, [r0, r4]
 800cc66:	f016 0608 	ands.w	r6, r6, #8
 800cc6a:	d1f8      	bne.n	800cc5e <_strtol_l.constprop.0+0x22>
 800cc6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800cc6e:	d12d      	bne.n	800cccc <_strtol_l.constprop.0+0x90>
 800cc70:	2601      	movs	r6, #1
 800cc72:	782c      	ldrb	r4, [r5, #0]
 800cc74:	1c95      	adds	r5, r2, #2
 800cc76:	f033 0210 	bics.w	r2, r3, #16
 800cc7a:	d109      	bne.n	800cc90 <_strtol_l.constprop.0+0x54>
 800cc7c:	2c30      	cmp	r4, #48	@ 0x30
 800cc7e:	d12a      	bne.n	800ccd6 <_strtol_l.constprop.0+0x9a>
 800cc80:	782a      	ldrb	r2, [r5, #0]
 800cc82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc86:	2a58      	cmp	r2, #88	@ 0x58
 800cc88:	d125      	bne.n	800ccd6 <_strtol_l.constprop.0+0x9a>
 800cc8a:	2310      	movs	r3, #16
 800cc8c:	786c      	ldrb	r4, [r5, #1]
 800cc8e:	3502      	adds	r5, #2
 800cc90:	2200      	movs	r2, #0
 800cc92:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cc96:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800cc9a:	fbbc f9f3 	udiv	r9, ip, r3
 800cc9e:	4610      	mov	r0, r2
 800cca0:	fb03 ca19 	mls	sl, r3, r9, ip
 800cca4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cca8:	2f09      	cmp	r7, #9
 800ccaa:	d81b      	bhi.n	800cce4 <_strtol_l.constprop.0+0xa8>
 800ccac:	463c      	mov	r4, r7
 800ccae:	42a3      	cmp	r3, r4
 800ccb0:	dd27      	ble.n	800cd02 <_strtol_l.constprop.0+0xc6>
 800ccb2:	1c57      	adds	r7, r2, #1
 800ccb4:	d007      	beq.n	800ccc6 <_strtol_l.constprop.0+0x8a>
 800ccb6:	4581      	cmp	r9, r0
 800ccb8:	d320      	bcc.n	800ccfc <_strtol_l.constprop.0+0xc0>
 800ccba:	d101      	bne.n	800ccc0 <_strtol_l.constprop.0+0x84>
 800ccbc:	45a2      	cmp	sl, r4
 800ccbe:	db1d      	blt.n	800ccfc <_strtol_l.constprop.0+0xc0>
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	fb00 4003 	mla	r0, r0, r3, r4
 800ccc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccca:	e7eb      	b.n	800cca4 <_strtol_l.constprop.0+0x68>
 800cccc:	2c2b      	cmp	r4, #43	@ 0x2b
 800ccce:	bf04      	itt	eq
 800ccd0:	782c      	ldrbeq	r4, [r5, #0]
 800ccd2:	1c95      	addeq	r5, r2, #2
 800ccd4:	e7cf      	b.n	800cc76 <_strtol_l.constprop.0+0x3a>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1da      	bne.n	800cc90 <_strtol_l.constprop.0+0x54>
 800ccda:	2c30      	cmp	r4, #48	@ 0x30
 800ccdc:	bf0c      	ite	eq
 800ccde:	2308      	moveq	r3, #8
 800cce0:	230a      	movne	r3, #10
 800cce2:	e7d5      	b.n	800cc90 <_strtol_l.constprop.0+0x54>
 800cce4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cce8:	2f19      	cmp	r7, #25
 800ccea:	d801      	bhi.n	800ccf0 <_strtol_l.constprop.0+0xb4>
 800ccec:	3c37      	subs	r4, #55	@ 0x37
 800ccee:	e7de      	b.n	800ccae <_strtol_l.constprop.0+0x72>
 800ccf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ccf4:	2f19      	cmp	r7, #25
 800ccf6:	d804      	bhi.n	800cd02 <_strtol_l.constprop.0+0xc6>
 800ccf8:	3c57      	subs	r4, #87	@ 0x57
 800ccfa:	e7d8      	b.n	800ccae <_strtol_l.constprop.0+0x72>
 800ccfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd00:	e7e1      	b.n	800ccc6 <_strtol_l.constprop.0+0x8a>
 800cd02:	1c53      	adds	r3, r2, #1
 800cd04:	d108      	bne.n	800cd18 <_strtol_l.constprop.0+0xdc>
 800cd06:	2322      	movs	r3, #34	@ 0x22
 800cd08:	4660      	mov	r0, ip
 800cd0a:	f8ce 3000 	str.w	r3, [lr]
 800cd0e:	f1b8 0f00 	cmp.w	r8, #0
 800cd12:	d0a0      	beq.n	800cc56 <_strtol_l.constprop.0+0x1a>
 800cd14:	1e69      	subs	r1, r5, #1
 800cd16:	e006      	b.n	800cd26 <_strtol_l.constprop.0+0xea>
 800cd18:	b106      	cbz	r6, 800cd1c <_strtol_l.constprop.0+0xe0>
 800cd1a:	4240      	negs	r0, r0
 800cd1c:	f1b8 0f00 	cmp.w	r8, #0
 800cd20:	d099      	beq.n	800cc56 <_strtol_l.constprop.0+0x1a>
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	d1f6      	bne.n	800cd14 <_strtol_l.constprop.0+0xd8>
 800cd26:	f8c8 1000 	str.w	r1, [r8]
 800cd2a:	e794      	b.n	800cc56 <_strtol_l.constprop.0+0x1a>
 800cd2c:	0800eaf9 	.word	0x0800eaf9

0800cd30 <_strtol_r>:
 800cd30:	f7ff bf84 	b.w	800cc3c <_strtol_l.constprop.0>

0800cd34 <__ssputs_r>:
 800cd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	461f      	mov	r7, r3
 800cd3a:	688e      	ldr	r6, [r1, #8]
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	42be      	cmp	r6, r7
 800cd40:	460c      	mov	r4, r1
 800cd42:	4690      	mov	r8, r2
 800cd44:	680b      	ldr	r3, [r1, #0]
 800cd46:	d82d      	bhi.n	800cda4 <__ssputs_r+0x70>
 800cd48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd50:	d026      	beq.n	800cda0 <__ssputs_r+0x6c>
 800cd52:	6965      	ldr	r5, [r4, #20]
 800cd54:	6909      	ldr	r1, [r1, #16]
 800cd56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd5a:	eba3 0901 	sub.w	r9, r3, r1
 800cd5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd62:	1c7b      	adds	r3, r7, #1
 800cd64:	444b      	add	r3, r9
 800cd66:	106d      	asrs	r5, r5, #1
 800cd68:	429d      	cmp	r5, r3
 800cd6a:	bf38      	it	cc
 800cd6c:	461d      	movcc	r5, r3
 800cd6e:	0553      	lsls	r3, r2, #21
 800cd70:	d527      	bpl.n	800cdc2 <__ssputs_r+0x8e>
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7fe fc2e 	bl	800b5d4 <_malloc_r>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	b360      	cbz	r0, 800cdd6 <__ssputs_r+0xa2>
 800cd7c:	464a      	mov	r2, r9
 800cd7e:	6921      	ldr	r1, [r4, #16]
 800cd80:	f000 fc2c 	bl	800d5dc <memcpy>
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	6126      	str	r6, [r4, #16]
 800cd92:	444e      	add	r6, r9
 800cd94:	6026      	str	r6, [r4, #0]
 800cd96:	463e      	mov	r6, r7
 800cd98:	6165      	str	r5, [r4, #20]
 800cd9a:	eba5 0509 	sub.w	r5, r5, r9
 800cd9e:	60a5      	str	r5, [r4, #8]
 800cda0:	42be      	cmp	r6, r7
 800cda2:	d900      	bls.n	800cda6 <__ssputs_r+0x72>
 800cda4:	463e      	mov	r6, r7
 800cda6:	4632      	mov	r2, r6
 800cda8:	4641      	mov	r1, r8
 800cdaa:	6820      	ldr	r0, [r4, #0]
 800cdac:	f000 fb96 	bl	800d4dc <memmove>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	68a3      	ldr	r3, [r4, #8]
 800cdb4:	1b9b      	subs	r3, r3, r6
 800cdb6:	60a3      	str	r3, [r4, #8]
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	4433      	add	r3, r6
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc2:	462a      	mov	r2, r5
 800cdc4:	f000 ff7d 	bl	800dcc2 <_realloc_r>
 800cdc8:	4606      	mov	r6, r0
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d1e0      	bne.n	800cd90 <__ssputs_r+0x5c>
 800cdce:	4650      	mov	r0, sl
 800cdd0:	6921      	ldr	r1, [r4, #16]
 800cdd2:	f7fe fb8d 	bl	800b4f0 <_free_r>
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	f8ca 3000 	str.w	r3, [sl]
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cde6:	81a3      	strh	r3, [r4, #12]
 800cde8:	e7e9      	b.n	800cdbe <__ssputs_r+0x8a>
	...

0800cdec <_svfiprintf_r>:
 800cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf0:	4698      	mov	r8, r3
 800cdf2:	898b      	ldrh	r3, [r1, #12]
 800cdf4:	4607      	mov	r7, r0
 800cdf6:	061b      	lsls	r3, r3, #24
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	4614      	mov	r4, r2
 800cdfc:	b09d      	sub	sp, #116	@ 0x74
 800cdfe:	d510      	bpl.n	800ce22 <_svfiprintf_r+0x36>
 800ce00:	690b      	ldr	r3, [r1, #16]
 800ce02:	b973      	cbnz	r3, 800ce22 <_svfiprintf_r+0x36>
 800ce04:	2140      	movs	r1, #64	@ 0x40
 800ce06:	f7fe fbe5 	bl	800b5d4 <_malloc_r>
 800ce0a:	6028      	str	r0, [r5, #0]
 800ce0c:	6128      	str	r0, [r5, #16]
 800ce0e:	b930      	cbnz	r0, 800ce1e <_svfiprintf_r+0x32>
 800ce10:	230c      	movs	r3, #12
 800ce12:	603b      	str	r3, [r7, #0]
 800ce14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce18:	b01d      	add	sp, #116	@ 0x74
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	2340      	movs	r3, #64	@ 0x40
 800ce20:	616b      	str	r3, [r5, #20]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce26:	2320      	movs	r3, #32
 800ce28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce2c:	2330      	movs	r3, #48	@ 0x30
 800ce2e:	f04f 0901 	mov.w	r9, #1
 800ce32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cfd0 <_svfiprintf_r+0x1e4>
 800ce3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce3e:	4623      	mov	r3, r4
 800ce40:	469a      	mov	sl, r3
 800ce42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce46:	b10a      	cbz	r2, 800ce4c <_svfiprintf_r+0x60>
 800ce48:	2a25      	cmp	r2, #37	@ 0x25
 800ce4a:	d1f9      	bne.n	800ce40 <_svfiprintf_r+0x54>
 800ce4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce50:	d00b      	beq.n	800ce6a <_svfiprintf_r+0x7e>
 800ce52:	465b      	mov	r3, fp
 800ce54:	4622      	mov	r2, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff ff6b 	bl	800cd34 <__ssputs_r>
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f000 80a7 	beq.w	800cfb2 <_svfiprintf_r+0x1c6>
 800ce64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce66:	445a      	add	r2, fp
 800ce68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 809f 	beq.w	800cfb2 <_svfiprintf_r+0x1c6>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce7e:	f10a 0a01 	add.w	sl, sl, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	9307      	str	r3, [sp, #28]
 800ce86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce8c:	4654      	mov	r4, sl
 800ce8e:	2205      	movs	r2, #5
 800ce90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce94:	484e      	ldr	r0, [pc, #312]	@ (800cfd0 <_svfiprintf_r+0x1e4>)
 800ce96:	f7fd fcbe 	bl	800a816 <memchr>
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	b9d8      	cbnz	r0, 800ced6 <_svfiprintf_r+0xea>
 800ce9e:	06d0      	lsls	r0, r2, #27
 800cea0:	bf44      	itt	mi
 800cea2:	2320      	movmi	r3, #32
 800cea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cea8:	0711      	lsls	r1, r2, #28
 800ceaa:	bf44      	itt	mi
 800ceac:	232b      	movmi	r3, #43	@ 0x2b
 800ceae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ceb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceb8:	d015      	beq.n	800cee6 <_svfiprintf_r+0xfa>
 800ceba:	4654      	mov	r4, sl
 800cebc:	2000      	movs	r0, #0
 800cebe:	f04f 0c0a 	mov.w	ip, #10
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4621      	mov	r1, r4
 800cec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceca:	3b30      	subs	r3, #48	@ 0x30
 800cecc:	2b09      	cmp	r3, #9
 800cece:	d94b      	bls.n	800cf68 <_svfiprintf_r+0x17c>
 800ced0:	b1b0      	cbz	r0, 800cf00 <_svfiprintf_r+0x114>
 800ced2:	9207      	str	r2, [sp, #28]
 800ced4:	e014      	b.n	800cf00 <_svfiprintf_r+0x114>
 800ced6:	eba0 0308 	sub.w	r3, r0, r8
 800ceda:	fa09 f303 	lsl.w	r3, r9, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	46a2      	mov	sl, r4
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	e7d2      	b.n	800ce8c <_svfiprintf_r+0xa0>
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	1d19      	adds	r1, r3, #4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	9103      	str	r1, [sp, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bfbb      	ittet	lt
 800cef2:	425b      	neglt	r3, r3
 800cef4:	f042 0202 	orrlt.w	r2, r2, #2
 800cef8:	9307      	strge	r3, [sp, #28]
 800cefa:	9307      	strlt	r3, [sp, #28]
 800cefc:	bfb8      	it	lt
 800cefe:	9204      	strlt	r2, [sp, #16]
 800cf00:	7823      	ldrb	r3, [r4, #0]
 800cf02:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf04:	d10a      	bne.n	800cf1c <_svfiprintf_r+0x130>
 800cf06:	7863      	ldrb	r3, [r4, #1]
 800cf08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf0a:	d132      	bne.n	800cf72 <_svfiprintf_r+0x186>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	3402      	adds	r4, #2
 800cf10:	1d1a      	adds	r2, r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9203      	str	r2, [sp, #12]
 800cf16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf1a:	9305      	str	r3, [sp, #20]
 800cf1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cfd4 <_svfiprintf_r+0x1e8>
 800cf20:	2203      	movs	r2, #3
 800cf22:	4650      	mov	r0, sl
 800cf24:	7821      	ldrb	r1, [r4, #0]
 800cf26:	f7fd fc76 	bl	800a816 <memchr>
 800cf2a:	b138      	cbz	r0, 800cf3c <_svfiprintf_r+0x150>
 800cf2c:	2240      	movs	r2, #64	@ 0x40
 800cf2e:	9b04      	ldr	r3, [sp, #16]
 800cf30:	eba0 000a 	sub.w	r0, r0, sl
 800cf34:	4082      	lsls	r2, r0
 800cf36:	4313      	orrs	r3, r2
 800cf38:	3401      	adds	r4, #1
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf40:	2206      	movs	r2, #6
 800cf42:	4825      	ldr	r0, [pc, #148]	@ (800cfd8 <_svfiprintf_r+0x1ec>)
 800cf44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf48:	f7fd fc65 	bl	800a816 <memchr>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d036      	beq.n	800cfbe <_svfiprintf_r+0x1d2>
 800cf50:	4b22      	ldr	r3, [pc, #136]	@ (800cfdc <_svfiprintf_r+0x1f0>)
 800cf52:	bb1b      	cbnz	r3, 800cf9c <_svfiprintf_r+0x1b0>
 800cf54:	9b03      	ldr	r3, [sp, #12]
 800cf56:	3307      	adds	r3, #7
 800cf58:	f023 0307 	bic.w	r3, r3, #7
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	9303      	str	r3, [sp, #12]
 800cf60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf62:	4433      	add	r3, r6
 800cf64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf66:	e76a      	b.n	800ce3e <_svfiprintf_r+0x52>
 800cf68:	460c      	mov	r4, r1
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf70:	e7a8      	b.n	800cec4 <_svfiprintf_r+0xd8>
 800cf72:	2300      	movs	r3, #0
 800cf74:	f04f 0c0a 	mov.w	ip, #10
 800cf78:	4619      	mov	r1, r3
 800cf7a:	3401      	adds	r4, #1
 800cf7c:	9305      	str	r3, [sp, #20]
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf84:	3a30      	subs	r2, #48	@ 0x30
 800cf86:	2a09      	cmp	r2, #9
 800cf88:	d903      	bls.n	800cf92 <_svfiprintf_r+0x1a6>
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d0c6      	beq.n	800cf1c <_svfiprintf_r+0x130>
 800cf8e:	9105      	str	r1, [sp, #20]
 800cf90:	e7c4      	b.n	800cf1c <_svfiprintf_r+0x130>
 800cf92:	4604      	mov	r4, r0
 800cf94:	2301      	movs	r3, #1
 800cf96:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9a:	e7f0      	b.n	800cf7e <_svfiprintf_r+0x192>
 800cf9c:	ab03      	add	r3, sp, #12
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe0 <_svfiprintf_r+0x1f4>)
 800cfa6:	a904      	add	r1, sp, #16
 800cfa8:	f7fc fca0 	bl	80098ec <_printf_float>
 800cfac:	1c42      	adds	r2, r0, #1
 800cfae:	4606      	mov	r6, r0
 800cfb0:	d1d6      	bne.n	800cf60 <_svfiprintf_r+0x174>
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	065b      	lsls	r3, r3, #25
 800cfb6:	f53f af2d 	bmi.w	800ce14 <_svfiprintf_r+0x28>
 800cfba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfbc:	e72c      	b.n	800ce18 <_svfiprintf_r+0x2c>
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	4b06      	ldr	r3, [pc, #24]	@ (800cfe0 <_svfiprintf_r+0x1f4>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	f7fc ff2d 	bl	8009e28 <_printf_i>
 800cfce:	e7ed      	b.n	800cfac <_svfiprintf_r+0x1c0>
 800cfd0:	0800ebf9 	.word	0x0800ebf9
 800cfd4:	0800ebff 	.word	0x0800ebff
 800cfd8:	0800ec03 	.word	0x0800ec03
 800cfdc:	080098ed 	.word	0x080098ed
 800cfe0:	0800cd35 	.word	0x0800cd35

0800cfe4 <__sfputc_r>:
 800cfe4:	6893      	ldr	r3, [r2, #8]
 800cfe6:	b410      	push	{r4}
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	6093      	str	r3, [r2, #8]
 800cfee:	da07      	bge.n	800d000 <__sfputc_r+0x1c>
 800cff0:	6994      	ldr	r4, [r2, #24]
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	db01      	blt.n	800cffa <__sfputc_r+0x16>
 800cff6:	290a      	cmp	r1, #10
 800cff8:	d102      	bne.n	800d000 <__sfputc_r+0x1c>
 800cffa:	bc10      	pop	{r4}
 800cffc:	f000 b9da 	b.w	800d3b4 <__swbuf_r>
 800d000:	6813      	ldr	r3, [r2, #0]
 800d002:	1c58      	adds	r0, r3, #1
 800d004:	6010      	str	r0, [r2, #0]
 800d006:	7019      	strb	r1, [r3, #0]
 800d008:	4608      	mov	r0, r1
 800d00a:	bc10      	pop	{r4}
 800d00c:	4770      	bx	lr

0800d00e <__sfputs_r>:
 800d00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d010:	4606      	mov	r6, r0
 800d012:	460f      	mov	r7, r1
 800d014:	4614      	mov	r4, r2
 800d016:	18d5      	adds	r5, r2, r3
 800d018:	42ac      	cmp	r4, r5
 800d01a:	d101      	bne.n	800d020 <__sfputs_r+0x12>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e007      	b.n	800d030 <__sfputs_r+0x22>
 800d020:	463a      	mov	r2, r7
 800d022:	4630      	mov	r0, r6
 800d024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d028:	f7ff ffdc 	bl	800cfe4 <__sfputc_r>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d1f3      	bne.n	800d018 <__sfputs_r+0xa>
 800d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d034 <_vfiprintf_r>:
 800d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d038:	460d      	mov	r5, r1
 800d03a:	4614      	mov	r4, r2
 800d03c:	4698      	mov	r8, r3
 800d03e:	4606      	mov	r6, r0
 800d040:	b09d      	sub	sp, #116	@ 0x74
 800d042:	b118      	cbz	r0, 800d04c <_vfiprintf_r+0x18>
 800d044:	6a03      	ldr	r3, [r0, #32]
 800d046:	b90b      	cbnz	r3, 800d04c <_vfiprintf_r+0x18>
 800d048:	f7fd faaa 	bl	800a5a0 <__sinit>
 800d04c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d04e:	07d9      	lsls	r1, r3, #31
 800d050:	d405      	bmi.n	800d05e <_vfiprintf_r+0x2a>
 800d052:	89ab      	ldrh	r3, [r5, #12]
 800d054:	059a      	lsls	r2, r3, #22
 800d056:	d402      	bmi.n	800d05e <_vfiprintf_r+0x2a>
 800d058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d05a:	f7fd fbda 	bl	800a812 <__retarget_lock_acquire_recursive>
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	071b      	lsls	r3, r3, #28
 800d062:	d501      	bpl.n	800d068 <_vfiprintf_r+0x34>
 800d064:	692b      	ldr	r3, [r5, #16]
 800d066:	b99b      	cbnz	r3, 800d090 <_vfiprintf_r+0x5c>
 800d068:	4629      	mov	r1, r5
 800d06a:	4630      	mov	r0, r6
 800d06c:	f000 f9e0 	bl	800d430 <__swsetup_r>
 800d070:	b170      	cbz	r0, 800d090 <_vfiprintf_r+0x5c>
 800d072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d074:	07dc      	lsls	r4, r3, #31
 800d076:	d504      	bpl.n	800d082 <_vfiprintf_r+0x4e>
 800d078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d07c:	b01d      	add	sp, #116	@ 0x74
 800d07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	0598      	lsls	r0, r3, #22
 800d086:	d4f7      	bmi.n	800d078 <_vfiprintf_r+0x44>
 800d088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d08a:	f7fd fbc3 	bl	800a814 <__retarget_lock_release_recursive>
 800d08e:	e7f3      	b.n	800d078 <_vfiprintf_r+0x44>
 800d090:	2300      	movs	r3, #0
 800d092:	9309      	str	r3, [sp, #36]	@ 0x24
 800d094:	2320      	movs	r3, #32
 800d096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d09a:	2330      	movs	r3, #48	@ 0x30
 800d09c:	f04f 0901 	mov.w	r9, #1
 800d0a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d250 <_vfiprintf_r+0x21c>
 800d0a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0ac:	4623      	mov	r3, r4
 800d0ae:	469a      	mov	sl, r3
 800d0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0b4:	b10a      	cbz	r2, 800d0ba <_vfiprintf_r+0x86>
 800d0b6:	2a25      	cmp	r2, #37	@ 0x25
 800d0b8:	d1f9      	bne.n	800d0ae <_vfiprintf_r+0x7a>
 800d0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d0be:	d00b      	beq.n	800d0d8 <_vfiprintf_r+0xa4>
 800d0c0:	465b      	mov	r3, fp
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f7ff ffa1 	bl	800d00e <__sfputs_r>
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	f000 80a7 	beq.w	800d220 <_vfiprintf_r+0x1ec>
 800d0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0d4:	445a      	add	r2, fp
 800d0d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f000 809f 	beq.w	800d220 <_vfiprintf_r+0x1ec>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ec:	f10a 0a01 	add.w	sl, sl, #1
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	9307      	str	r3, [sp, #28]
 800d0f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0fa:	4654      	mov	r4, sl
 800d0fc:	2205      	movs	r2, #5
 800d0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d102:	4853      	ldr	r0, [pc, #332]	@ (800d250 <_vfiprintf_r+0x21c>)
 800d104:	f7fd fb87 	bl	800a816 <memchr>
 800d108:	9a04      	ldr	r2, [sp, #16]
 800d10a:	b9d8      	cbnz	r0, 800d144 <_vfiprintf_r+0x110>
 800d10c:	06d1      	lsls	r1, r2, #27
 800d10e:	bf44      	itt	mi
 800d110:	2320      	movmi	r3, #32
 800d112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d116:	0713      	lsls	r3, r2, #28
 800d118:	bf44      	itt	mi
 800d11a:	232b      	movmi	r3, #43	@ 0x2b
 800d11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d120:	f89a 3000 	ldrb.w	r3, [sl]
 800d124:	2b2a      	cmp	r3, #42	@ 0x2a
 800d126:	d015      	beq.n	800d154 <_vfiprintf_r+0x120>
 800d128:	4654      	mov	r4, sl
 800d12a:	2000      	movs	r0, #0
 800d12c:	f04f 0c0a 	mov.w	ip, #10
 800d130:	9a07      	ldr	r2, [sp, #28]
 800d132:	4621      	mov	r1, r4
 800d134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d138:	3b30      	subs	r3, #48	@ 0x30
 800d13a:	2b09      	cmp	r3, #9
 800d13c:	d94b      	bls.n	800d1d6 <_vfiprintf_r+0x1a2>
 800d13e:	b1b0      	cbz	r0, 800d16e <_vfiprintf_r+0x13a>
 800d140:	9207      	str	r2, [sp, #28]
 800d142:	e014      	b.n	800d16e <_vfiprintf_r+0x13a>
 800d144:	eba0 0308 	sub.w	r3, r0, r8
 800d148:	fa09 f303 	lsl.w	r3, r9, r3
 800d14c:	4313      	orrs	r3, r2
 800d14e:	46a2      	mov	sl, r4
 800d150:	9304      	str	r3, [sp, #16]
 800d152:	e7d2      	b.n	800d0fa <_vfiprintf_r+0xc6>
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	1d19      	adds	r1, r3, #4
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	9103      	str	r1, [sp, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	bfbb      	ittet	lt
 800d160:	425b      	neglt	r3, r3
 800d162:	f042 0202 	orrlt.w	r2, r2, #2
 800d166:	9307      	strge	r3, [sp, #28]
 800d168:	9307      	strlt	r3, [sp, #28]
 800d16a:	bfb8      	it	lt
 800d16c:	9204      	strlt	r2, [sp, #16]
 800d16e:	7823      	ldrb	r3, [r4, #0]
 800d170:	2b2e      	cmp	r3, #46	@ 0x2e
 800d172:	d10a      	bne.n	800d18a <_vfiprintf_r+0x156>
 800d174:	7863      	ldrb	r3, [r4, #1]
 800d176:	2b2a      	cmp	r3, #42	@ 0x2a
 800d178:	d132      	bne.n	800d1e0 <_vfiprintf_r+0x1ac>
 800d17a:	9b03      	ldr	r3, [sp, #12]
 800d17c:	3402      	adds	r4, #2
 800d17e:	1d1a      	adds	r2, r3, #4
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	9203      	str	r2, [sp, #12]
 800d184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d254 <_vfiprintf_r+0x220>
 800d18e:	2203      	movs	r2, #3
 800d190:	4650      	mov	r0, sl
 800d192:	7821      	ldrb	r1, [r4, #0]
 800d194:	f7fd fb3f 	bl	800a816 <memchr>
 800d198:	b138      	cbz	r0, 800d1aa <_vfiprintf_r+0x176>
 800d19a:	2240      	movs	r2, #64	@ 0x40
 800d19c:	9b04      	ldr	r3, [sp, #16]
 800d19e:	eba0 000a 	sub.w	r0, r0, sl
 800d1a2:	4082      	lsls	r2, r0
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	3401      	adds	r4, #1
 800d1a8:	9304      	str	r3, [sp, #16]
 800d1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ae:	2206      	movs	r2, #6
 800d1b0:	4829      	ldr	r0, [pc, #164]	@ (800d258 <_vfiprintf_r+0x224>)
 800d1b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1b6:	f7fd fb2e 	bl	800a816 <memchr>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d03f      	beq.n	800d23e <_vfiprintf_r+0x20a>
 800d1be:	4b27      	ldr	r3, [pc, #156]	@ (800d25c <_vfiprintf_r+0x228>)
 800d1c0:	bb1b      	cbnz	r3, 800d20a <_vfiprintf_r+0x1d6>
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	3307      	adds	r3, #7
 800d1c6:	f023 0307 	bic.w	r3, r3, #7
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d0:	443b      	add	r3, r7
 800d1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d4:	e76a      	b.n	800d0ac <_vfiprintf_r+0x78>
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	2001      	movs	r0, #1
 800d1da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1de:	e7a8      	b.n	800d132 <_vfiprintf_r+0xfe>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f04f 0c0a 	mov.w	ip, #10
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	3401      	adds	r4, #1
 800d1ea:	9305      	str	r3, [sp, #20]
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1f2:	3a30      	subs	r2, #48	@ 0x30
 800d1f4:	2a09      	cmp	r2, #9
 800d1f6:	d903      	bls.n	800d200 <_vfiprintf_r+0x1cc>
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d0c6      	beq.n	800d18a <_vfiprintf_r+0x156>
 800d1fc:	9105      	str	r1, [sp, #20]
 800d1fe:	e7c4      	b.n	800d18a <_vfiprintf_r+0x156>
 800d200:	4604      	mov	r4, r0
 800d202:	2301      	movs	r3, #1
 800d204:	fb0c 2101 	mla	r1, ip, r1, r2
 800d208:	e7f0      	b.n	800d1ec <_vfiprintf_r+0x1b8>
 800d20a:	ab03      	add	r3, sp, #12
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	462a      	mov	r2, r5
 800d210:	4630      	mov	r0, r6
 800d212:	4b13      	ldr	r3, [pc, #76]	@ (800d260 <_vfiprintf_r+0x22c>)
 800d214:	a904      	add	r1, sp, #16
 800d216:	f7fc fb69 	bl	80098ec <_printf_float>
 800d21a:	4607      	mov	r7, r0
 800d21c:	1c78      	adds	r0, r7, #1
 800d21e:	d1d6      	bne.n	800d1ce <_vfiprintf_r+0x19a>
 800d220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d222:	07d9      	lsls	r1, r3, #31
 800d224:	d405      	bmi.n	800d232 <_vfiprintf_r+0x1fe>
 800d226:	89ab      	ldrh	r3, [r5, #12]
 800d228:	059a      	lsls	r2, r3, #22
 800d22a:	d402      	bmi.n	800d232 <_vfiprintf_r+0x1fe>
 800d22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d22e:	f7fd faf1 	bl	800a814 <__retarget_lock_release_recursive>
 800d232:	89ab      	ldrh	r3, [r5, #12]
 800d234:	065b      	lsls	r3, r3, #25
 800d236:	f53f af1f 	bmi.w	800d078 <_vfiprintf_r+0x44>
 800d23a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d23c:	e71e      	b.n	800d07c <_vfiprintf_r+0x48>
 800d23e:	ab03      	add	r3, sp, #12
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	462a      	mov	r2, r5
 800d244:	4630      	mov	r0, r6
 800d246:	4b06      	ldr	r3, [pc, #24]	@ (800d260 <_vfiprintf_r+0x22c>)
 800d248:	a904      	add	r1, sp, #16
 800d24a:	f7fc fded 	bl	8009e28 <_printf_i>
 800d24e:	e7e4      	b.n	800d21a <_vfiprintf_r+0x1e6>
 800d250:	0800ebf9 	.word	0x0800ebf9
 800d254:	0800ebff 	.word	0x0800ebff
 800d258:	0800ec03 	.word	0x0800ec03
 800d25c:	080098ed 	.word	0x080098ed
 800d260:	0800d00f 	.word	0x0800d00f

0800d264 <__sflush_r>:
 800d264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	0716      	lsls	r6, r2, #28
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	d454      	bmi.n	800d31c <__sflush_r+0xb8>
 800d272:	684b      	ldr	r3, [r1, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	dc02      	bgt.n	800d27e <__sflush_r+0x1a>
 800d278:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	dd48      	ble.n	800d310 <__sflush_r+0xac>
 800d27e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d280:	2e00      	cmp	r6, #0
 800d282:	d045      	beq.n	800d310 <__sflush_r+0xac>
 800d284:	2300      	movs	r3, #0
 800d286:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d28a:	682f      	ldr	r7, [r5, #0]
 800d28c:	6a21      	ldr	r1, [r4, #32]
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	d030      	beq.n	800d2f4 <__sflush_r+0x90>
 800d292:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	0759      	lsls	r1, r3, #29
 800d298:	d505      	bpl.n	800d2a6 <__sflush_r+0x42>
 800d29a:	6863      	ldr	r3, [r4, #4]
 800d29c:	1ad2      	subs	r2, r2, r3
 800d29e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2a0:	b10b      	cbz	r3, 800d2a6 <__sflush_r+0x42>
 800d2a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2a4:	1ad2      	subs	r2, r2, r3
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2ac:	6a21      	ldr	r1, [r4, #32]
 800d2ae:	47b0      	blx	r6
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	d106      	bne.n	800d2c4 <__sflush_r+0x60>
 800d2b6:	6829      	ldr	r1, [r5, #0]
 800d2b8:	291d      	cmp	r1, #29
 800d2ba:	d82b      	bhi.n	800d314 <__sflush_r+0xb0>
 800d2bc:	4a28      	ldr	r2, [pc, #160]	@ (800d360 <__sflush_r+0xfc>)
 800d2be:	410a      	asrs	r2, r1
 800d2c0:	07d6      	lsls	r6, r2, #31
 800d2c2:	d427      	bmi.n	800d314 <__sflush_r+0xb0>
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	6062      	str	r2, [r4, #4]
 800d2c8:	6922      	ldr	r2, [r4, #16]
 800d2ca:	04d9      	lsls	r1, r3, #19
 800d2cc:	6022      	str	r2, [r4, #0]
 800d2ce:	d504      	bpl.n	800d2da <__sflush_r+0x76>
 800d2d0:	1c42      	adds	r2, r0, #1
 800d2d2:	d101      	bne.n	800d2d8 <__sflush_r+0x74>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b903      	cbnz	r3, 800d2da <__sflush_r+0x76>
 800d2d8:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2dc:	602f      	str	r7, [r5, #0]
 800d2de:	b1b9      	cbz	r1, 800d310 <__sflush_r+0xac>
 800d2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2e4:	4299      	cmp	r1, r3
 800d2e6:	d002      	beq.n	800d2ee <__sflush_r+0x8a>
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f7fe f901 	bl	800b4f0 <_free_r>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2f2:	e00d      	b.n	800d310 <__sflush_r+0xac>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	47b0      	blx	r6
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	1c50      	adds	r0, r2, #1
 800d2fe:	d1c9      	bne.n	800d294 <__sflush_r+0x30>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0c6      	beq.n	800d294 <__sflush_r+0x30>
 800d306:	2b1d      	cmp	r3, #29
 800d308:	d001      	beq.n	800d30e <__sflush_r+0xaa>
 800d30a:	2b16      	cmp	r3, #22
 800d30c:	d11d      	bne.n	800d34a <__sflush_r+0xe6>
 800d30e:	602f      	str	r7, [r5, #0]
 800d310:	2000      	movs	r0, #0
 800d312:	e021      	b.n	800d358 <__sflush_r+0xf4>
 800d314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d318:	b21b      	sxth	r3, r3
 800d31a:	e01a      	b.n	800d352 <__sflush_r+0xee>
 800d31c:	690f      	ldr	r7, [r1, #16]
 800d31e:	2f00      	cmp	r7, #0
 800d320:	d0f6      	beq.n	800d310 <__sflush_r+0xac>
 800d322:	0793      	lsls	r3, r2, #30
 800d324:	bf18      	it	ne
 800d326:	2300      	movne	r3, #0
 800d328:	680e      	ldr	r6, [r1, #0]
 800d32a:	bf08      	it	eq
 800d32c:	694b      	ldreq	r3, [r1, #20]
 800d32e:	1bf6      	subs	r6, r6, r7
 800d330:	600f      	str	r7, [r1, #0]
 800d332:	608b      	str	r3, [r1, #8]
 800d334:	2e00      	cmp	r6, #0
 800d336:	ddeb      	ble.n	800d310 <__sflush_r+0xac>
 800d338:	4633      	mov	r3, r6
 800d33a:	463a      	mov	r2, r7
 800d33c:	4628      	mov	r0, r5
 800d33e:	6a21      	ldr	r1, [r4, #32]
 800d340:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d344:	47e0      	blx	ip
 800d346:	2800      	cmp	r0, #0
 800d348:	dc07      	bgt.n	800d35a <__sflush_r+0xf6>
 800d34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d35a:	4407      	add	r7, r0
 800d35c:	1a36      	subs	r6, r6, r0
 800d35e:	e7e9      	b.n	800d334 <__sflush_r+0xd0>
 800d360:	dfbffffe 	.word	0xdfbffffe

0800d364 <_fflush_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	690b      	ldr	r3, [r1, #16]
 800d368:	4605      	mov	r5, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	b913      	cbnz	r3, 800d374 <_fflush_r+0x10>
 800d36e:	2500      	movs	r5, #0
 800d370:	4628      	mov	r0, r5
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	b118      	cbz	r0, 800d37e <_fflush_r+0x1a>
 800d376:	6a03      	ldr	r3, [r0, #32]
 800d378:	b90b      	cbnz	r3, 800d37e <_fflush_r+0x1a>
 800d37a:	f7fd f911 	bl	800a5a0 <__sinit>
 800d37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0f3      	beq.n	800d36e <_fflush_r+0xa>
 800d386:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d388:	07d0      	lsls	r0, r2, #31
 800d38a:	d404      	bmi.n	800d396 <_fflush_r+0x32>
 800d38c:	0599      	lsls	r1, r3, #22
 800d38e:	d402      	bmi.n	800d396 <_fflush_r+0x32>
 800d390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d392:	f7fd fa3e 	bl	800a812 <__retarget_lock_acquire_recursive>
 800d396:	4628      	mov	r0, r5
 800d398:	4621      	mov	r1, r4
 800d39a:	f7ff ff63 	bl	800d264 <__sflush_r>
 800d39e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	07da      	lsls	r2, r3, #31
 800d3a4:	d4e4      	bmi.n	800d370 <_fflush_r+0xc>
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	059b      	lsls	r3, r3, #22
 800d3aa:	d4e1      	bmi.n	800d370 <_fflush_r+0xc>
 800d3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3ae:	f7fd fa31 	bl	800a814 <__retarget_lock_release_recursive>
 800d3b2:	e7dd      	b.n	800d370 <_fflush_r+0xc>

0800d3b4 <__swbuf_r>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	460e      	mov	r6, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	b118      	cbz	r0, 800d3c6 <__swbuf_r+0x12>
 800d3be:	6a03      	ldr	r3, [r0, #32]
 800d3c0:	b90b      	cbnz	r3, 800d3c6 <__swbuf_r+0x12>
 800d3c2:	f7fd f8ed 	bl	800a5a0 <__sinit>
 800d3c6:	69a3      	ldr	r3, [r4, #24]
 800d3c8:	60a3      	str	r3, [r4, #8]
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	071a      	lsls	r2, r3, #28
 800d3ce:	d501      	bpl.n	800d3d4 <__swbuf_r+0x20>
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	b943      	cbnz	r3, 800d3e6 <__swbuf_r+0x32>
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f000 f82a 	bl	800d430 <__swsetup_r>
 800d3dc:	b118      	cbz	r0, 800d3e6 <__swbuf_r+0x32>
 800d3de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	6922      	ldr	r2, [r4, #16]
 800d3ea:	b2f6      	uxtb	r6, r6
 800d3ec:	1a98      	subs	r0, r3, r2
 800d3ee:	6963      	ldr	r3, [r4, #20]
 800d3f0:	4637      	mov	r7, r6
 800d3f2:	4283      	cmp	r3, r0
 800d3f4:	dc05      	bgt.n	800d402 <__swbuf_r+0x4e>
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f7ff ffb3 	bl	800d364 <_fflush_r>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d1ed      	bne.n	800d3de <__swbuf_r+0x2a>
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	3b01      	subs	r3, #1
 800d406:	60a3      	str	r3, [r4, #8]
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	6022      	str	r2, [r4, #0]
 800d40e:	701e      	strb	r6, [r3, #0]
 800d410:	6962      	ldr	r2, [r4, #20]
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	429a      	cmp	r2, r3
 800d416:	d004      	beq.n	800d422 <__swbuf_r+0x6e>
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	07db      	lsls	r3, r3, #31
 800d41c:	d5e1      	bpl.n	800d3e2 <__swbuf_r+0x2e>
 800d41e:	2e0a      	cmp	r6, #10
 800d420:	d1df      	bne.n	800d3e2 <__swbuf_r+0x2e>
 800d422:	4621      	mov	r1, r4
 800d424:	4628      	mov	r0, r5
 800d426:	f7ff ff9d 	bl	800d364 <_fflush_r>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0d9      	beq.n	800d3e2 <__swbuf_r+0x2e>
 800d42e:	e7d6      	b.n	800d3de <__swbuf_r+0x2a>

0800d430 <__swsetup_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4b29      	ldr	r3, [pc, #164]	@ (800d4d8 <__swsetup_r+0xa8>)
 800d434:	4605      	mov	r5, r0
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	460c      	mov	r4, r1
 800d43a:	b118      	cbz	r0, 800d444 <__swsetup_r+0x14>
 800d43c:	6a03      	ldr	r3, [r0, #32]
 800d43e:	b90b      	cbnz	r3, 800d444 <__swsetup_r+0x14>
 800d440:	f7fd f8ae 	bl	800a5a0 <__sinit>
 800d444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d448:	0719      	lsls	r1, r3, #28
 800d44a:	d422      	bmi.n	800d492 <__swsetup_r+0x62>
 800d44c:	06da      	lsls	r2, r3, #27
 800d44e:	d407      	bmi.n	800d460 <__swsetup_r+0x30>
 800d450:	2209      	movs	r2, #9
 800d452:	602a      	str	r2, [r5, #0]
 800d454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d45c:	81a3      	strh	r3, [r4, #12]
 800d45e:	e033      	b.n	800d4c8 <__swsetup_r+0x98>
 800d460:	0758      	lsls	r0, r3, #29
 800d462:	d512      	bpl.n	800d48a <__swsetup_r+0x5a>
 800d464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d466:	b141      	cbz	r1, 800d47a <__swsetup_r+0x4a>
 800d468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d46c:	4299      	cmp	r1, r3
 800d46e:	d002      	beq.n	800d476 <__swsetup_r+0x46>
 800d470:	4628      	mov	r0, r5
 800d472:	f7fe f83d 	bl	800b4f0 <_free_r>
 800d476:	2300      	movs	r3, #0
 800d478:	6363      	str	r3, [r4, #52]	@ 0x34
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d480:	81a3      	strh	r3, [r4, #12]
 800d482:	2300      	movs	r3, #0
 800d484:	6063      	str	r3, [r4, #4]
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	f043 0308 	orr.w	r3, r3, #8
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	6923      	ldr	r3, [r4, #16]
 800d494:	b94b      	cbnz	r3, 800d4aa <__swsetup_r+0x7a>
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4a0:	d003      	beq.n	800d4aa <__swsetup_r+0x7a>
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f000 fc6c 	bl	800dd82 <__smakebuf_r>
 800d4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ae:	f013 0201 	ands.w	r2, r3, #1
 800d4b2:	d00a      	beq.n	800d4ca <__swsetup_r+0x9a>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	60a2      	str	r2, [r4, #8]
 800d4b8:	6962      	ldr	r2, [r4, #20]
 800d4ba:	4252      	negs	r2, r2
 800d4bc:	61a2      	str	r2, [r4, #24]
 800d4be:	6922      	ldr	r2, [r4, #16]
 800d4c0:	b942      	cbnz	r2, 800d4d4 <__swsetup_r+0xa4>
 800d4c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4c6:	d1c5      	bne.n	800d454 <__swsetup_r+0x24>
 800d4c8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ca:	0799      	lsls	r1, r3, #30
 800d4cc:	bf58      	it	pl
 800d4ce:	6962      	ldrpl	r2, [r4, #20]
 800d4d0:	60a2      	str	r2, [r4, #8]
 800d4d2:	e7f4      	b.n	800d4be <__swsetup_r+0x8e>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	e7f7      	b.n	800d4c8 <__swsetup_r+0x98>
 800d4d8:	20000160 	.word	0x20000160

0800d4dc <memmove>:
 800d4dc:	4288      	cmp	r0, r1
 800d4de:	b510      	push	{r4, lr}
 800d4e0:	eb01 0402 	add.w	r4, r1, r2
 800d4e4:	d902      	bls.n	800d4ec <memmove+0x10>
 800d4e6:	4284      	cmp	r4, r0
 800d4e8:	4623      	mov	r3, r4
 800d4ea:	d807      	bhi.n	800d4fc <memmove+0x20>
 800d4ec:	1e43      	subs	r3, r0, #1
 800d4ee:	42a1      	cmp	r1, r4
 800d4f0:	d008      	beq.n	800d504 <memmove+0x28>
 800d4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4fa:	e7f8      	b.n	800d4ee <memmove+0x12>
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	4402      	add	r2, r0
 800d500:	428a      	cmp	r2, r1
 800d502:	d100      	bne.n	800d506 <memmove+0x2a>
 800d504:	bd10      	pop	{r4, pc}
 800d506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d50e:	e7f7      	b.n	800d500 <memmove+0x24>

0800d510 <strncmp>:
 800d510:	b510      	push	{r4, lr}
 800d512:	b16a      	cbz	r2, 800d530 <strncmp+0x20>
 800d514:	3901      	subs	r1, #1
 800d516:	1884      	adds	r4, r0, r2
 800d518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d520:	429a      	cmp	r2, r3
 800d522:	d103      	bne.n	800d52c <strncmp+0x1c>
 800d524:	42a0      	cmp	r0, r4
 800d526:	d001      	beq.n	800d52c <strncmp+0x1c>
 800d528:	2a00      	cmp	r2, #0
 800d52a:	d1f5      	bne.n	800d518 <strncmp+0x8>
 800d52c:	1ad0      	subs	r0, r2, r3
 800d52e:	bd10      	pop	{r4, pc}
 800d530:	4610      	mov	r0, r2
 800d532:	e7fc      	b.n	800d52e <strncmp+0x1e>

0800d534 <_raise_r>:
 800d534:	291f      	cmp	r1, #31
 800d536:	b538      	push	{r3, r4, r5, lr}
 800d538:	4605      	mov	r5, r0
 800d53a:	460c      	mov	r4, r1
 800d53c:	d904      	bls.n	800d548 <_raise_r+0x14>
 800d53e:	2316      	movs	r3, #22
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d54a:	b112      	cbz	r2, 800d552 <_raise_r+0x1e>
 800d54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d550:	b94b      	cbnz	r3, 800d566 <_raise_r+0x32>
 800d552:	4628      	mov	r0, r5
 800d554:	f000 f830 	bl	800d5b8 <_getpid_r>
 800d558:	4622      	mov	r2, r4
 800d55a:	4601      	mov	r1, r0
 800d55c:	4628      	mov	r0, r5
 800d55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d562:	f000 b817 	b.w	800d594 <_kill_r>
 800d566:	2b01      	cmp	r3, #1
 800d568:	d00a      	beq.n	800d580 <_raise_r+0x4c>
 800d56a:	1c59      	adds	r1, r3, #1
 800d56c:	d103      	bne.n	800d576 <_raise_r+0x42>
 800d56e:	2316      	movs	r3, #22
 800d570:	6003      	str	r3, [r0, #0]
 800d572:	2001      	movs	r0, #1
 800d574:	e7e7      	b.n	800d546 <_raise_r+0x12>
 800d576:	2100      	movs	r1, #0
 800d578:	4620      	mov	r0, r4
 800d57a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d57e:	4798      	blx	r3
 800d580:	2000      	movs	r0, #0
 800d582:	e7e0      	b.n	800d546 <_raise_r+0x12>

0800d584 <raise>:
 800d584:	4b02      	ldr	r3, [pc, #8]	@ (800d590 <raise+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f7ff bfd3 	b.w	800d534 <_raise_r>
 800d58e:	bf00      	nop
 800d590:	20000160 	.word	0x20000160

0800d594 <_kill_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	2300      	movs	r3, #0
 800d598:	4d06      	ldr	r5, [pc, #24]	@ (800d5b4 <_kill_r+0x20>)
 800d59a:	4604      	mov	r4, r0
 800d59c:	4608      	mov	r0, r1
 800d59e:	4611      	mov	r1, r2
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	f7f8 fd48 	bl	8006036 <_kill>
 800d5a6:	1c43      	adds	r3, r0, #1
 800d5a8:	d102      	bne.n	800d5b0 <_kill_r+0x1c>
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	b103      	cbz	r3, 800d5b0 <_kill_r+0x1c>
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20000b38 	.word	0x20000b38

0800d5b8 <_getpid_r>:
 800d5b8:	f7f8 bd36 	b.w	8006028 <_getpid>

0800d5bc <_sbrk_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4d05      	ldr	r5, [pc, #20]	@ (800d5d8 <_sbrk_r+0x1c>)
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	f7f8 fdba 	bl	8006140 <_sbrk>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_sbrk_r+0x1a>
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_sbrk_r+0x1a>
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	20000b38 	.word	0x20000b38

0800d5dc <memcpy>:
 800d5dc:	440a      	add	r2, r1
 800d5de:	4291      	cmp	r1, r2
 800d5e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d5e4:	d100      	bne.n	800d5e8 <memcpy+0xc>
 800d5e6:	4770      	bx	lr
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ee:	4291      	cmp	r1, r2
 800d5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5f4:	d1f9      	bne.n	800d5ea <memcpy+0xe>
 800d5f6:	bd10      	pop	{r4, pc}

0800d5f8 <nan>:
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	4901      	ldr	r1, [pc, #4]	@ (800d600 <nan+0x8>)
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	7ff80000 	.word	0x7ff80000

0800d604 <_calloc_r>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	fba1 5402 	umull	r5, r4, r1, r2
 800d60a:	b93c      	cbnz	r4, 800d61c <_calloc_r+0x18>
 800d60c:	4629      	mov	r1, r5
 800d60e:	f7fd ffe1 	bl	800b5d4 <_malloc_r>
 800d612:	4606      	mov	r6, r0
 800d614:	b928      	cbnz	r0, 800d622 <_calloc_r+0x1e>
 800d616:	2600      	movs	r6, #0
 800d618:	4630      	mov	r0, r6
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	220c      	movs	r2, #12
 800d61e:	6002      	str	r2, [r0, #0]
 800d620:	e7f9      	b.n	800d616 <_calloc_r+0x12>
 800d622:	462a      	mov	r2, r5
 800d624:	4621      	mov	r1, r4
 800d626:	f7fd f876 	bl	800a716 <memset>
 800d62a:	e7f5      	b.n	800d618 <_calloc_r+0x14>

0800d62c <rshift>:
 800d62c:	6903      	ldr	r3, [r0, #16]
 800d62e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d632:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d636:	f100 0414 	add.w	r4, r0, #20
 800d63a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d63e:	dd46      	ble.n	800d6ce <rshift+0xa2>
 800d640:	f011 011f 	ands.w	r1, r1, #31
 800d644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d64c:	d10c      	bne.n	800d668 <rshift+0x3c>
 800d64e:	4629      	mov	r1, r5
 800d650:	f100 0710 	add.w	r7, r0, #16
 800d654:	42b1      	cmp	r1, r6
 800d656:	d335      	bcc.n	800d6c4 <rshift+0x98>
 800d658:	1a9b      	subs	r3, r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	1eea      	subs	r2, r5, #3
 800d65e:	4296      	cmp	r6, r2
 800d660:	bf38      	it	cc
 800d662:	2300      	movcc	r3, #0
 800d664:	4423      	add	r3, r4
 800d666:	e015      	b.n	800d694 <rshift+0x68>
 800d668:	46a1      	mov	r9, r4
 800d66a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d66e:	f1c1 0820 	rsb	r8, r1, #32
 800d672:	40cf      	lsrs	r7, r1
 800d674:	f105 0e04 	add.w	lr, r5, #4
 800d678:	4576      	cmp	r6, lr
 800d67a:	46f4      	mov	ip, lr
 800d67c:	d816      	bhi.n	800d6ac <rshift+0x80>
 800d67e:	1a9a      	subs	r2, r3, r2
 800d680:	0092      	lsls	r2, r2, #2
 800d682:	3a04      	subs	r2, #4
 800d684:	3501      	adds	r5, #1
 800d686:	42ae      	cmp	r6, r5
 800d688:	bf38      	it	cc
 800d68a:	2200      	movcc	r2, #0
 800d68c:	18a3      	adds	r3, r4, r2
 800d68e:	50a7      	str	r7, [r4, r2]
 800d690:	b107      	cbz	r7, 800d694 <rshift+0x68>
 800d692:	3304      	adds	r3, #4
 800d694:	42a3      	cmp	r3, r4
 800d696:	eba3 0204 	sub.w	r2, r3, r4
 800d69a:	bf08      	it	eq
 800d69c:	2300      	moveq	r3, #0
 800d69e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6a2:	6102      	str	r2, [r0, #16]
 800d6a4:	bf08      	it	eq
 800d6a6:	6143      	streq	r3, [r0, #20]
 800d6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ac:	f8dc c000 	ldr.w	ip, [ip]
 800d6b0:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6b4:	ea4c 0707 	orr.w	r7, ip, r7
 800d6b8:	f849 7b04 	str.w	r7, [r9], #4
 800d6bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6c0:	40cf      	lsrs	r7, r1
 800d6c2:	e7d9      	b.n	800d678 <rshift+0x4c>
 800d6c4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d6c8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d6cc:	e7c2      	b.n	800d654 <rshift+0x28>
 800d6ce:	4623      	mov	r3, r4
 800d6d0:	e7e0      	b.n	800d694 <rshift+0x68>

0800d6d2 <__hexdig_fun>:
 800d6d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d802      	bhi.n	800d6e0 <__hexdig_fun+0xe>
 800d6da:	3820      	subs	r0, #32
 800d6dc:	b2c0      	uxtb	r0, r0
 800d6de:	4770      	bx	lr
 800d6e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d6e4:	2b05      	cmp	r3, #5
 800d6e6:	d801      	bhi.n	800d6ec <__hexdig_fun+0x1a>
 800d6e8:	3847      	subs	r0, #71	@ 0x47
 800d6ea:	e7f7      	b.n	800d6dc <__hexdig_fun+0xa>
 800d6ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d6f0:	2b05      	cmp	r3, #5
 800d6f2:	d801      	bhi.n	800d6f8 <__hexdig_fun+0x26>
 800d6f4:	3827      	subs	r0, #39	@ 0x27
 800d6f6:	e7f1      	b.n	800d6dc <__hexdig_fun+0xa>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	4770      	bx	lr

0800d6fc <__gethex>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	468a      	mov	sl, r1
 800d702:	4690      	mov	r8, r2
 800d704:	b085      	sub	sp, #20
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	680b      	ldr	r3, [r1, #0]
 800d70a:	9001      	str	r0, [sp, #4]
 800d70c:	1c9c      	adds	r4, r3, #2
 800d70e:	46a1      	mov	r9, r4
 800d710:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d714:	2830      	cmp	r0, #48	@ 0x30
 800d716:	d0fa      	beq.n	800d70e <__gethex+0x12>
 800d718:	eba9 0303 	sub.w	r3, r9, r3
 800d71c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d720:	f7ff ffd7 	bl	800d6d2 <__hexdig_fun>
 800d724:	4605      	mov	r5, r0
 800d726:	2800      	cmp	r0, #0
 800d728:	d168      	bne.n	800d7fc <__gethex+0x100>
 800d72a:	2201      	movs	r2, #1
 800d72c:	4648      	mov	r0, r9
 800d72e:	499f      	ldr	r1, [pc, #636]	@ (800d9ac <__gethex+0x2b0>)
 800d730:	f7ff feee 	bl	800d510 <strncmp>
 800d734:	4607      	mov	r7, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	d167      	bne.n	800d80a <__gethex+0x10e>
 800d73a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d73e:	4626      	mov	r6, r4
 800d740:	f7ff ffc7 	bl	800d6d2 <__hexdig_fun>
 800d744:	2800      	cmp	r0, #0
 800d746:	d062      	beq.n	800d80e <__gethex+0x112>
 800d748:	4623      	mov	r3, r4
 800d74a:	7818      	ldrb	r0, [r3, #0]
 800d74c:	4699      	mov	r9, r3
 800d74e:	2830      	cmp	r0, #48	@ 0x30
 800d750:	f103 0301 	add.w	r3, r3, #1
 800d754:	d0f9      	beq.n	800d74a <__gethex+0x4e>
 800d756:	f7ff ffbc 	bl	800d6d2 <__hexdig_fun>
 800d75a:	fab0 f580 	clz	r5, r0
 800d75e:	f04f 0b01 	mov.w	fp, #1
 800d762:	096d      	lsrs	r5, r5, #5
 800d764:	464a      	mov	r2, r9
 800d766:	4616      	mov	r6, r2
 800d768:	7830      	ldrb	r0, [r6, #0]
 800d76a:	3201      	adds	r2, #1
 800d76c:	f7ff ffb1 	bl	800d6d2 <__hexdig_fun>
 800d770:	2800      	cmp	r0, #0
 800d772:	d1f8      	bne.n	800d766 <__gethex+0x6a>
 800d774:	2201      	movs	r2, #1
 800d776:	4630      	mov	r0, r6
 800d778:	498c      	ldr	r1, [pc, #560]	@ (800d9ac <__gethex+0x2b0>)
 800d77a:	f7ff fec9 	bl	800d510 <strncmp>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d13f      	bne.n	800d802 <__gethex+0x106>
 800d782:	b944      	cbnz	r4, 800d796 <__gethex+0x9a>
 800d784:	1c74      	adds	r4, r6, #1
 800d786:	4622      	mov	r2, r4
 800d788:	4616      	mov	r6, r2
 800d78a:	7830      	ldrb	r0, [r6, #0]
 800d78c:	3201      	adds	r2, #1
 800d78e:	f7ff ffa0 	bl	800d6d2 <__hexdig_fun>
 800d792:	2800      	cmp	r0, #0
 800d794:	d1f8      	bne.n	800d788 <__gethex+0x8c>
 800d796:	1ba4      	subs	r4, r4, r6
 800d798:	00a7      	lsls	r7, r4, #2
 800d79a:	7833      	ldrb	r3, [r6, #0]
 800d79c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d7a0:	2b50      	cmp	r3, #80	@ 0x50
 800d7a2:	d13e      	bne.n	800d822 <__gethex+0x126>
 800d7a4:	7873      	ldrb	r3, [r6, #1]
 800d7a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d7a8:	d033      	beq.n	800d812 <__gethex+0x116>
 800d7aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800d7ac:	d034      	beq.n	800d818 <__gethex+0x11c>
 800d7ae:	2400      	movs	r4, #0
 800d7b0:	1c71      	adds	r1, r6, #1
 800d7b2:	7808      	ldrb	r0, [r1, #0]
 800d7b4:	f7ff ff8d 	bl	800d6d2 <__hexdig_fun>
 800d7b8:	1e43      	subs	r3, r0, #1
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b18      	cmp	r3, #24
 800d7be:	d830      	bhi.n	800d822 <__gethex+0x126>
 800d7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800d7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7c8:	f7ff ff83 	bl	800d6d2 <__hexdig_fun>
 800d7cc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d7d0:	fa5f fc8c 	uxtb.w	ip, ip
 800d7d4:	f1bc 0f18 	cmp.w	ip, #24
 800d7d8:	f04f 030a 	mov.w	r3, #10
 800d7dc:	d91e      	bls.n	800d81c <__gethex+0x120>
 800d7de:	b104      	cbz	r4, 800d7e2 <__gethex+0xe6>
 800d7e0:	4252      	negs	r2, r2
 800d7e2:	4417      	add	r7, r2
 800d7e4:	f8ca 1000 	str.w	r1, [sl]
 800d7e8:	b1ed      	cbz	r5, 800d826 <__gethex+0x12a>
 800d7ea:	f1bb 0f00 	cmp.w	fp, #0
 800d7ee:	bf0c      	ite	eq
 800d7f0:	2506      	moveq	r5, #6
 800d7f2:	2500      	movne	r5, #0
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	b005      	add	sp, #20
 800d7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7fc:	2500      	movs	r5, #0
 800d7fe:	462c      	mov	r4, r5
 800d800:	e7b0      	b.n	800d764 <__gethex+0x68>
 800d802:	2c00      	cmp	r4, #0
 800d804:	d1c7      	bne.n	800d796 <__gethex+0x9a>
 800d806:	4627      	mov	r7, r4
 800d808:	e7c7      	b.n	800d79a <__gethex+0x9e>
 800d80a:	464e      	mov	r6, r9
 800d80c:	462f      	mov	r7, r5
 800d80e:	2501      	movs	r5, #1
 800d810:	e7c3      	b.n	800d79a <__gethex+0x9e>
 800d812:	2400      	movs	r4, #0
 800d814:	1cb1      	adds	r1, r6, #2
 800d816:	e7cc      	b.n	800d7b2 <__gethex+0xb6>
 800d818:	2401      	movs	r4, #1
 800d81a:	e7fb      	b.n	800d814 <__gethex+0x118>
 800d81c:	fb03 0002 	mla	r0, r3, r2, r0
 800d820:	e7ce      	b.n	800d7c0 <__gethex+0xc4>
 800d822:	4631      	mov	r1, r6
 800d824:	e7de      	b.n	800d7e4 <__gethex+0xe8>
 800d826:	4629      	mov	r1, r5
 800d828:	eba6 0309 	sub.w	r3, r6, r9
 800d82c:	3b01      	subs	r3, #1
 800d82e:	2b07      	cmp	r3, #7
 800d830:	dc0a      	bgt.n	800d848 <__gethex+0x14c>
 800d832:	9801      	ldr	r0, [sp, #4]
 800d834:	f7fd ff5a 	bl	800b6ec <_Balloc>
 800d838:	4604      	mov	r4, r0
 800d83a:	b940      	cbnz	r0, 800d84e <__gethex+0x152>
 800d83c:	4602      	mov	r2, r0
 800d83e:	21e4      	movs	r1, #228	@ 0xe4
 800d840:	4b5b      	ldr	r3, [pc, #364]	@ (800d9b0 <__gethex+0x2b4>)
 800d842:	485c      	ldr	r0, [pc, #368]	@ (800d9b4 <__gethex+0x2b8>)
 800d844:	f7fb ff96 	bl	8009774 <__assert_func>
 800d848:	3101      	adds	r1, #1
 800d84a:	105b      	asrs	r3, r3, #1
 800d84c:	e7ef      	b.n	800d82e <__gethex+0x132>
 800d84e:	2300      	movs	r3, #0
 800d850:	f100 0a14 	add.w	sl, r0, #20
 800d854:	4655      	mov	r5, sl
 800d856:	469b      	mov	fp, r3
 800d858:	45b1      	cmp	r9, r6
 800d85a:	d337      	bcc.n	800d8cc <__gethex+0x1d0>
 800d85c:	f845 bb04 	str.w	fp, [r5], #4
 800d860:	eba5 050a 	sub.w	r5, r5, sl
 800d864:	10ad      	asrs	r5, r5, #2
 800d866:	6125      	str	r5, [r4, #16]
 800d868:	4658      	mov	r0, fp
 800d86a:	f7fe f831 	bl	800b8d0 <__hi0bits>
 800d86e:	016d      	lsls	r5, r5, #5
 800d870:	f8d8 6000 	ldr.w	r6, [r8]
 800d874:	1a2d      	subs	r5, r5, r0
 800d876:	42b5      	cmp	r5, r6
 800d878:	dd54      	ble.n	800d924 <__gethex+0x228>
 800d87a:	1bad      	subs	r5, r5, r6
 800d87c:	4629      	mov	r1, r5
 800d87e:	4620      	mov	r0, r4
 800d880:	f7fe fbb9 	bl	800bff6 <__any_on>
 800d884:	4681      	mov	r9, r0
 800d886:	b178      	cbz	r0, 800d8a8 <__gethex+0x1ac>
 800d888:	f04f 0901 	mov.w	r9, #1
 800d88c:	1e6b      	subs	r3, r5, #1
 800d88e:	1159      	asrs	r1, r3, #5
 800d890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d894:	f003 021f 	and.w	r2, r3, #31
 800d898:	fa09 f202 	lsl.w	r2, r9, r2
 800d89c:	420a      	tst	r2, r1
 800d89e:	d003      	beq.n	800d8a8 <__gethex+0x1ac>
 800d8a0:	454b      	cmp	r3, r9
 800d8a2:	dc36      	bgt.n	800d912 <__gethex+0x216>
 800d8a4:	f04f 0902 	mov.w	r9, #2
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f7ff febe 	bl	800d62c <rshift>
 800d8b0:	442f      	add	r7, r5
 800d8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8b6:	42bb      	cmp	r3, r7
 800d8b8:	da42      	bge.n	800d940 <__gethex+0x244>
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	9801      	ldr	r0, [sp, #4]
 800d8be:	f7fd ff55 	bl	800b76c <_Bfree>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8c6:	25a3      	movs	r5, #163	@ 0xa3
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	e793      	b.n	800d7f4 <__gethex+0xf8>
 800d8cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d8d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d8d2:	d012      	beq.n	800d8fa <__gethex+0x1fe>
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	d104      	bne.n	800d8e2 <__gethex+0x1e6>
 800d8d8:	f845 bb04 	str.w	fp, [r5], #4
 800d8dc:	f04f 0b00 	mov.w	fp, #0
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	7830      	ldrb	r0, [r6, #0]
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	f7ff fef4 	bl	800d6d2 <__hexdig_fun>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	f000 000f 	and.w	r0, r0, #15
 800d8f0:	4098      	lsls	r0, r3
 800d8f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	e7ae      	b.n	800d858 <__gethex+0x15c>
 800d8fa:	45b1      	cmp	r9, r6
 800d8fc:	d8ea      	bhi.n	800d8d4 <__gethex+0x1d8>
 800d8fe:	2201      	movs	r2, #1
 800d900:	4630      	mov	r0, r6
 800d902:	492a      	ldr	r1, [pc, #168]	@ (800d9ac <__gethex+0x2b0>)
 800d904:	9303      	str	r3, [sp, #12]
 800d906:	f7ff fe03 	bl	800d510 <strncmp>
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d1e1      	bne.n	800d8d4 <__gethex+0x1d8>
 800d910:	e7a2      	b.n	800d858 <__gethex+0x15c>
 800d912:	4620      	mov	r0, r4
 800d914:	1ea9      	subs	r1, r5, #2
 800d916:	f7fe fb6e 	bl	800bff6 <__any_on>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d0c2      	beq.n	800d8a4 <__gethex+0x1a8>
 800d91e:	f04f 0903 	mov.w	r9, #3
 800d922:	e7c1      	b.n	800d8a8 <__gethex+0x1ac>
 800d924:	da09      	bge.n	800d93a <__gethex+0x23e>
 800d926:	1b75      	subs	r5, r6, r5
 800d928:	4621      	mov	r1, r4
 800d92a:	462a      	mov	r2, r5
 800d92c:	9801      	ldr	r0, [sp, #4]
 800d92e:	f7fe f933 	bl	800bb98 <__lshift>
 800d932:	4604      	mov	r4, r0
 800d934:	1b7f      	subs	r7, r7, r5
 800d936:	f100 0a14 	add.w	sl, r0, #20
 800d93a:	f04f 0900 	mov.w	r9, #0
 800d93e:	e7b8      	b.n	800d8b2 <__gethex+0x1b6>
 800d940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d944:	42bd      	cmp	r5, r7
 800d946:	dd6f      	ble.n	800da28 <__gethex+0x32c>
 800d948:	1bed      	subs	r5, r5, r7
 800d94a:	42ae      	cmp	r6, r5
 800d94c:	dc34      	bgt.n	800d9b8 <__gethex+0x2bc>
 800d94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d952:	2b02      	cmp	r3, #2
 800d954:	d022      	beq.n	800d99c <__gethex+0x2a0>
 800d956:	2b03      	cmp	r3, #3
 800d958:	d024      	beq.n	800d9a4 <__gethex+0x2a8>
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d115      	bne.n	800d98a <__gethex+0x28e>
 800d95e:	42ae      	cmp	r6, r5
 800d960:	d113      	bne.n	800d98a <__gethex+0x28e>
 800d962:	2e01      	cmp	r6, #1
 800d964:	d10b      	bne.n	800d97e <__gethex+0x282>
 800d966:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d96a:	9a02      	ldr	r2, [sp, #8]
 800d96c:	2562      	movs	r5, #98	@ 0x62
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	2301      	movs	r3, #1
 800d972:	6123      	str	r3, [r4, #16]
 800d974:	f8ca 3000 	str.w	r3, [sl]
 800d978:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d97a:	601c      	str	r4, [r3, #0]
 800d97c:	e73a      	b.n	800d7f4 <__gethex+0xf8>
 800d97e:	4620      	mov	r0, r4
 800d980:	1e71      	subs	r1, r6, #1
 800d982:	f7fe fb38 	bl	800bff6 <__any_on>
 800d986:	2800      	cmp	r0, #0
 800d988:	d1ed      	bne.n	800d966 <__gethex+0x26a>
 800d98a:	4621      	mov	r1, r4
 800d98c:	9801      	ldr	r0, [sp, #4]
 800d98e:	f7fd feed 	bl	800b76c <_Bfree>
 800d992:	2300      	movs	r3, #0
 800d994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d996:	2550      	movs	r5, #80	@ 0x50
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	e72b      	b.n	800d7f4 <__gethex+0xf8>
 800d99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1f3      	bne.n	800d98a <__gethex+0x28e>
 800d9a2:	e7e0      	b.n	800d966 <__gethex+0x26a>
 800d9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1dd      	bne.n	800d966 <__gethex+0x26a>
 800d9aa:	e7ee      	b.n	800d98a <__gethex+0x28e>
 800d9ac:	0800eaa0 	.word	0x0800eaa0
 800d9b0:	0800e933 	.word	0x0800e933
 800d9b4:	0800ec12 	.word	0x0800ec12
 800d9b8:	1e6f      	subs	r7, r5, #1
 800d9ba:	f1b9 0f00 	cmp.w	r9, #0
 800d9be:	d130      	bne.n	800da22 <__gethex+0x326>
 800d9c0:	b127      	cbz	r7, 800d9cc <__gethex+0x2d0>
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f7fe fb16 	bl	800bff6 <__any_on>
 800d9ca:	4681      	mov	r9, r0
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	1b76      	subs	r6, r6, r5
 800d9d2:	2502      	movs	r5, #2
 800d9d4:	117a      	asrs	r2, r7, #5
 800d9d6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d9da:	f007 071f 	and.w	r7, r7, #31
 800d9de:	40bb      	lsls	r3, r7
 800d9e0:	4213      	tst	r3, r2
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	bf18      	it	ne
 800d9e6:	f049 0902 	orrne.w	r9, r9, #2
 800d9ea:	f7ff fe1f 	bl	800d62c <rshift>
 800d9ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d9f2:	f1b9 0f00 	cmp.w	r9, #0
 800d9f6:	d047      	beq.n	800da88 <__gethex+0x38c>
 800d9f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d015      	beq.n	800da2c <__gethex+0x330>
 800da00:	2b03      	cmp	r3, #3
 800da02:	d017      	beq.n	800da34 <__gethex+0x338>
 800da04:	2b01      	cmp	r3, #1
 800da06:	d109      	bne.n	800da1c <__gethex+0x320>
 800da08:	f019 0f02 	tst.w	r9, #2
 800da0c:	d006      	beq.n	800da1c <__gethex+0x320>
 800da0e:	f8da 3000 	ldr.w	r3, [sl]
 800da12:	ea49 0903 	orr.w	r9, r9, r3
 800da16:	f019 0f01 	tst.w	r9, #1
 800da1a:	d10e      	bne.n	800da3a <__gethex+0x33e>
 800da1c:	f045 0510 	orr.w	r5, r5, #16
 800da20:	e032      	b.n	800da88 <__gethex+0x38c>
 800da22:	f04f 0901 	mov.w	r9, #1
 800da26:	e7d1      	b.n	800d9cc <__gethex+0x2d0>
 800da28:	2501      	movs	r5, #1
 800da2a:	e7e2      	b.n	800d9f2 <__gethex+0x2f6>
 800da2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2e:	f1c3 0301 	rsb	r3, r3, #1
 800da32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0f0      	beq.n	800da1c <__gethex+0x320>
 800da3a:	f04f 0c00 	mov.w	ip, #0
 800da3e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da42:	f104 0314 	add.w	r3, r4, #20
 800da46:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da4a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da4e:	4618      	mov	r0, r3
 800da50:	f853 2b04 	ldr.w	r2, [r3], #4
 800da54:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800da58:	d01b      	beq.n	800da92 <__gethex+0x396>
 800da5a:	3201      	adds	r2, #1
 800da5c:	6002      	str	r2, [r0, #0]
 800da5e:	2d02      	cmp	r5, #2
 800da60:	f104 0314 	add.w	r3, r4, #20
 800da64:	d13c      	bne.n	800dae0 <__gethex+0x3e4>
 800da66:	f8d8 2000 	ldr.w	r2, [r8]
 800da6a:	3a01      	subs	r2, #1
 800da6c:	42b2      	cmp	r2, r6
 800da6e:	d109      	bne.n	800da84 <__gethex+0x388>
 800da70:	2201      	movs	r2, #1
 800da72:	1171      	asrs	r1, r6, #5
 800da74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da78:	f006 061f 	and.w	r6, r6, #31
 800da7c:	fa02 f606 	lsl.w	r6, r2, r6
 800da80:	421e      	tst	r6, r3
 800da82:	d13a      	bne.n	800dafa <__gethex+0x3fe>
 800da84:	f045 0520 	orr.w	r5, r5, #32
 800da88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da8a:	601c      	str	r4, [r3, #0]
 800da8c:	9b02      	ldr	r3, [sp, #8]
 800da8e:	601f      	str	r7, [r3, #0]
 800da90:	e6b0      	b.n	800d7f4 <__gethex+0xf8>
 800da92:	4299      	cmp	r1, r3
 800da94:	f843 cc04 	str.w	ip, [r3, #-4]
 800da98:	d8d9      	bhi.n	800da4e <__gethex+0x352>
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	459b      	cmp	fp, r3
 800da9e:	db17      	blt.n	800dad0 <__gethex+0x3d4>
 800daa0:	6861      	ldr	r1, [r4, #4]
 800daa2:	9801      	ldr	r0, [sp, #4]
 800daa4:	3101      	adds	r1, #1
 800daa6:	f7fd fe21 	bl	800b6ec <_Balloc>
 800daaa:	4681      	mov	r9, r0
 800daac:	b918      	cbnz	r0, 800dab6 <__gethex+0x3ba>
 800daae:	4602      	mov	r2, r0
 800dab0:	2184      	movs	r1, #132	@ 0x84
 800dab2:	4b19      	ldr	r3, [pc, #100]	@ (800db18 <__gethex+0x41c>)
 800dab4:	e6c5      	b.n	800d842 <__gethex+0x146>
 800dab6:	6922      	ldr	r2, [r4, #16]
 800dab8:	f104 010c 	add.w	r1, r4, #12
 800dabc:	3202      	adds	r2, #2
 800dabe:	0092      	lsls	r2, r2, #2
 800dac0:	300c      	adds	r0, #12
 800dac2:	f7ff fd8b 	bl	800d5dc <memcpy>
 800dac6:	4621      	mov	r1, r4
 800dac8:	9801      	ldr	r0, [sp, #4]
 800daca:	f7fd fe4f 	bl	800b76c <_Bfree>
 800dace:	464c      	mov	r4, r9
 800dad0:	6923      	ldr	r3, [r4, #16]
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	6122      	str	r2, [r4, #16]
 800dad6:	2201      	movs	r2, #1
 800dad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dadc:	615a      	str	r2, [r3, #20]
 800dade:	e7be      	b.n	800da5e <__gethex+0x362>
 800dae0:	6922      	ldr	r2, [r4, #16]
 800dae2:	455a      	cmp	r2, fp
 800dae4:	dd0b      	ble.n	800dafe <__gethex+0x402>
 800dae6:	2101      	movs	r1, #1
 800dae8:	4620      	mov	r0, r4
 800daea:	f7ff fd9f 	bl	800d62c <rshift>
 800daee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daf2:	3701      	adds	r7, #1
 800daf4:	42bb      	cmp	r3, r7
 800daf6:	f6ff aee0 	blt.w	800d8ba <__gethex+0x1be>
 800dafa:	2501      	movs	r5, #1
 800dafc:	e7c2      	b.n	800da84 <__gethex+0x388>
 800dafe:	f016 061f 	ands.w	r6, r6, #31
 800db02:	d0fa      	beq.n	800dafa <__gethex+0x3fe>
 800db04:	4453      	add	r3, sl
 800db06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db0a:	f7fd fee1 	bl	800b8d0 <__hi0bits>
 800db0e:	f1c6 0620 	rsb	r6, r6, #32
 800db12:	42b0      	cmp	r0, r6
 800db14:	dbe7      	blt.n	800dae6 <__gethex+0x3ea>
 800db16:	e7f0      	b.n	800dafa <__gethex+0x3fe>
 800db18:	0800e933 	.word	0x0800e933

0800db1c <L_shift>:
 800db1c:	f1c2 0208 	rsb	r2, r2, #8
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	b570      	push	{r4, r5, r6, lr}
 800db24:	f1c2 0620 	rsb	r6, r2, #32
 800db28:	6843      	ldr	r3, [r0, #4]
 800db2a:	6804      	ldr	r4, [r0, #0]
 800db2c:	fa03 f506 	lsl.w	r5, r3, r6
 800db30:	432c      	orrs	r4, r5
 800db32:	40d3      	lsrs	r3, r2
 800db34:	6004      	str	r4, [r0, #0]
 800db36:	f840 3f04 	str.w	r3, [r0, #4]!
 800db3a:	4288      	cmp	r0, r1
 800db3c:	d3f4      	bcc.n	800db28 <L_shift+0xc>
 800db3e:	bd70      	pop	{r4, r5, r6, pc}

0800db40 <__match>:
 800db40:	b530      	push	{r4, r5, lr}
 800db42:	6803      	ldr	r3, [r0, #0]
 800db44:	3301      	adds	r3, #1
 800db46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db4a:	b914      	cbnz	r4, 800db52 <__match+0x12>
 800db4c:	6003      	str	r3, [r0, #0]
 800db4e:	2001      	movs	r0, #1
 800db50:	bd30      	pop	{r4, r5, pc}
 800db52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db5a:	2d19      	cmp	r5, #25
 800db5c:	bf98      	it	ls
 800db5e:	3220      	addls	r2, #32
 800db60:	42a2      	cmp	r2, r4
 800db62:	d0f0      	beq.n	800db46 <__match+0x6>
 800db64:	2000      	movs	r0, #0
 800db66:	e7f3      	b.n	800db50 <__match+0x10>

0800db68 <__hexnan>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	2500      	movs	r5, #0
 800db6e:	680b      	ldr	r3, [r1, #0]
 800db70:	4682      	mov	sl, r0
 800db72:	115e      	asrs	r6, r3, #5
 800db74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db78:	f013 031f 	ands.w	r3, r3, #31
 800db7c:	bf18      	it	ne
 800db7e:	3604      	addne	r6, #4
 800db80:	1f37      	subs	r7, r6, #4
 800db82:	4690      	mov	r8, r2
 800db84:	46b9      	mov	r9, r7
 800db86:	463c      	mov	r4, r7
 800db88:	46ab      	mov	fp, r5
 800db8a:	b087      	sub	sp, #28
 800db8c:	6801      	ldr	r1, [r0, #0]
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	f846 5c04 	str.w	r5, [r6, #-4]
 800db94:	9502      	str	r5, [sp, #8]
 800db96:	784a      	ldrb	r2, [r1, #1]
 800db98:	1c4b      	adds	r3, r1, #1
 800db9a:	9303      	str	r3, [sp, #12]
 800db9c:	b342      	cbz	r2, 800dbf0 <__hexnan+0x88>
 800db9e:	4610      	mov	r0, r2
 800dba0:	9105      	str	r1, [sp, #20]
 800dba2:	9204      	str	r2, [sp, #16]
 800dba4:	f7ff fd95 	bl	800d6d2 <__hexdig_fun>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d151      	bne.n	800dc50 <__hexnan+0xe8>
 800dbac:	9a04      	ldr	r2, [sp, #16]
 800dbae:	9905      	ldr	r1, [sp, #20]
 800dbb0:	2a20      	cmp	r2, #32
 800dbb2:	d818      	bhi.n	800dbe6 <__hexnan+0x7e>
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	459b      	cmp	fp, r3
 800dbb8:	dd13      	ble.n	800dbe2 <__hexnan+0x7a>
 800dbba:	454c      	cmp	r4, r9
 800dbbc:	d206      	bcs.n	800dbcc <__hexnan+0x64>
 800dbbe:	2d07      	cmp	r5, #7
 800dbc0:	dc04      	bgt.n	800dbcc <__hexnan+0x64>
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f7ff ffa8 	bl	800db1c <L_shift>
 800dbcc:	4544      	cmp	r4, r8
 800dbce:	d952      	bls.n	800dc76 <__hexnan+0x10e>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f1a4 0904 	sub.w	r9, r4, #4
 800dbd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbda:	461d      	mov	r5, r3
 800dbdc:	464c      	mov	r4, r9
 800dbde:	f8cd b008 	str.w	fp, [sp, #8]
 800dbe2:	9903      	ldr	r1, [sp, #12]
 800dbe4:	e7d7      	b.n	800db96 <__hexnan+0x2e>
 800dbe6:	2a29      	cmp	r2, #41	@ 0x29
 800dbe8:	d157      	bne.n	800dc9a <__hexnan+0x132>
 800dbea:	3102      	adds	r1, #2
 800dbec:	f8ca 1000 	str.w	r1, [sl]
 800dbf0:	f1bb 0f00 	cmp.w	fp, #0
 800dbf4:	d051      	beq.n	800dc9a <__hexnan+0x132>
 800dbf6:	454c      	cmp	r4, r9
 800dbf8:	d206      	bcs.n	800dc08 <__hexnan+0xa0>
 800dbfa:	2d07      	cmp	r5, #7
 800dbfc:	dc04      	bgt.n	800dc08 <__hexnan+0xa0>
 800dbfe:	462a      	mov	r2, r5
 800dc00:	4649      	mov	r1, r9
 800dc02:	4620      	mov	r0, r4
 800dc04:	f7ff ff8a 	bl	800db1c <L_shift>
 800dc08:	4544      	cmp	r4, r8
 800dc0a:	d936      	bls.n	800dc7a <__hexnan+0x112>
 800dc0c:	4623      	mov	r3, r4
 800dc0e:	f1a8 0204 	sub.w	r2, r8, #4
 800dc12:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc16:	429f      	cmp	r7, r3
 800dc18:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc1c:	d2f9      	bcs.n	800dc12 <__hexnan+0xaa>
 800dc1e:	1b3b      	subs	r3, r7, r4
 800dc20:	f023 0303 	bic.w	r3, r3, #3
 800dc24:	3304      	adds	r3, #4
 800dc26:	3401      	adds	r4, #1
 800dc28:	3e03      	subs	r6, #3
 800dc2a:	42b4      	cmp	r4, r6
 800dc2c:	bf88      	it	hi
 800dc2e:	2304      	movhi	r3, #4
 800dc30:	2200      	movs	r2, #0
 800dc32:	4443      	add	r3, r8
 800dc34:	f843 2b04 	str.w	r2, [r3], #4
 800dc38:	429f      	cmp	r7, r3
 800dc3a:	d2fb      	bcs.n	800dc34 <__hexnan+0xcc>
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	b91b      	cbnz	r3, 800dc48 <__hexnan+0xe0>
 800dc40:	4547      	cmp	r7, r8
 800dc42:	d128      	bne.n	800dc96 <__hexnan+0x12e>
 800dc44:	2301      	movs	r3, #1
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	2005      	movs	r0, #5
 800dc4a:	b007      	add	sp, #28
 800dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc50:	3501      	adds	r5, #1
 800dc52:	2d08      	cmp	r5, #8
 800dc54:	f10b 0b01 	add.w	fp, fp, #1
 800dc58:	dd06      	ble.n	800dc68 <__hexnan+0x100>
 800dc5a:	4544      	cmp	r4, r8
 800dc5c:	d9c1      	bls.n	800dbe2 <__hexnan+0x7a>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2501      	movs	r5, #1
 800dc62:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc66:	3c04      	subs	r4, #4
 800dc68:	6822      	ldr	r2, [r4, #0]
 800dc6a:	f000 000f 	and.w	r0, r0, #15
 800dc6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc72:	6020      	str	r0, [r4, #0]
 800dc74:	e7b5      	b.n	800dbe2 <__hexnan+0x7a>
 800dc76:	2508      	movs	r5, #8
 800dc78:	e7b3      	b.n	800dbe2 <__hexnan+0x7a>
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0dd      	beq.n	800dc3c <__hexnan+0xd4>
 800dc80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc84:	f1c3 0320 	rsb	r3, r3, #32
 800dc88:	40da      	lsrs	r2, r3
 800dc8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dc8e:	4013      	ands	r3, r2
 800dc90:	f846 3c04 	str.w	r3, [r6, #-4]
 800dc94:	e7d2      	b.n	800dc3c <__hexnan+0xd4>
 800dc96:	3f04      	subs	r7, #4
 800dc98:	e7d0      	b.n	800dc3c <__hexnan+0xd4>
 800dc9a:	2004      	movs	r0, #4
 800dc9c:	e7d5      	b.n	800dc4a <__hexnan+0xe2>

0800dc9e <__ascii_mbtowc>:
 800dc9e:	b082      	sub	sp, #8
 800dca0:	b901      	cbnz	r1, 800dca4 <__ascii_mbtowc+0x6>
 800dca2:	a901      	add	r1, sp, #4
 800dca4:	b142      	cbz	r2, 800dcb8 <__ascii_mbtowc+0x1a>
 800dca6:	b14b      	cbz	r3, 800dcbc <__ascii_mbtowc+0x1e>
 800dca8:	7813      	ldrb	r3, [r2, #0]
 800dcaa:	600b      	str	r3, [r1, #0]
 800dcac:	7812      	ldrb	r2, [r2, #0]
 800dcae:	1e10      	subs	r0, r2, #0
 800dcb0:	bf18      	it	ne
 800dcb2:	2001      	movne	r0, #1
 800dcb4:	b002      	add	sp, #8
 800dcb6:	4770      	bx	lr
 800dcb8:	4610      	mov	r0, r2
 800dcba:	e7fb      	b.n	800dcb4 <__ascii_mbtowc+0x16>
 800dcbc:	f06f 0001 	mvn.w	r0, #1
 800dcc0:	e7f8      	b.n	800dcb4 <__ascii_mbtowc+0x16>

0800dcc2 <_realloc_r>:
 800dcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc6:	4680      	mov	r8, r0
 800dcc8:	4615      	mov	r5, r2
 800dcca:	460c      	mov	r4, r1
 800dccc:	b921      	cbnz	r1, 800dcd8 <_realloc_r+0x16>
 800dcce:	4611      	mov	r1, r2
 800dcd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd4:	f7fd bc7e 	b.w	800b5d4 <_malloc_r>
 800dcd8:	b92a      	cbnz	r2, 800dce6 <_realloc_r+0x24>
 800dcda:	f7fd fc09 	bl	800b4f0 <_free_r>
 800dcde:	2400      	movs	r4, #0
 800dce0:	4620      	mov	r0, r4
 800dce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce6:	f000 f8ab 	bl	800de40 <_malloc_usable_size_r>
 800dcea:	4285      	cmp	r5, r0
 800dcec:	4606      	mov	r6, r0
 800dcee:	d802      	bhi.n	800dcf6 <_realloc_r+0x34>
 800dcf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dcf4:	d8f4      	bhi.n	800dce0 <_realloc_r+0x1e>
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	f7fd fc6b 	bl	800b5d4 <_malloc_r>
 800dcfe:	4607      	mov	r7, r0
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d0ec      	beq.n	800dcde <_realloc_r+0x1c>
 800dd04:	42b5      	cmp	r5, r6
 800dd06:	462a      	mov	r2, r5
 800dd08:	4621      	mov	r1, r4
 800dd0a:	bf28      	it	cs
 800dd0c:	4632      	movcs	r2, r6
 800dd0e:	f7ff fc65 	bl	800d5dc <memcpy>
 800dd12:	4621      	mov	r1, r4
 800dd14:	4640      	mov	r0, r8
 800dd16:	f7fd fbeb 	bl	800b4f0 <_free_r>
 800dd1a:	463c      	mov	r4, r7
 800dd1c:	e7e0      	b.n	800dce0 <_realloc_r+0x1e>

0800dd1e <__ascii_wctomb>:
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	b141      	cbz	r1, 800dd36 <__ascii_wctomb+0x18>
 800dd24:	2aff      	cmp	r2, #255	@ 0xff
 800dd26:	d904      	bls.n	800dd32 <__ascii_wctomb+0x14>
 800dd28:	228a      	movs	r2, #138	@ 0x8a
 800dd2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	4770      	bx	lr
 800dd32:	2001      	movs	r0, #1
 800dd34:	700a      	strb	r2, [r1, #0]
 800dd36:	4770      	bx	lr

0800dd38 <__swhatbuf_r>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd40:	4615      	mov	r5, r2
 800dd42:	2900      	cmp	r1, #0
 800dd44:	461e      	mov	r6, r3
 800dd46:	b096      	sub	sp, #88	@ 0x58
 800dd48:	da0c      	bge.n	800dd64 <__swhatbuf_r+0x2c>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd52:	bf14      	ite	ne
 800dd54:	2340      	movne	r3, #64	@ 0x40
 800dd56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	6031      	str	r1, [r6, #0]
 800dd5e:	602b      	str	r3, [r5, #0]
 800dd60:	b016      	add	sp, #88	@ 0x58
 800dd62:	bd70      	pop	{r4, r5, r6, pc}
 800dd64:	466a      	mov	r2, sp
 800dd66:	f000 f849 	bl	800ddfc <_fstat_r>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	dbed      	blt.n	800dd4a <__swhatbuf_r+0x12>
 800dd6e:	9901      	ldr	r1, [sp, #4]
 800dd70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd78:	4259      	negs	r1, r3
 800dd7a:	4159      	adcs	r1, r3
 800dd7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd80:	e7eb      	b.n	800dd5a <__swhatbuf_r+0x22>

0800dd82 <__smakebuf_r>:
 800dd82:	898b      	ldrh	r3, [r1, #12]
 800dd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd86:	079d      	lsls	r5, r3, #30
 800dd88:	4606      	mov	r6, r0
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	d507      	bpl.n	800dd9e <__smakebuf_r+0x1c>
 800dd8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd92:	6023      	str	r3, [r4, #0]
 800dd94:	6123      	str	r3, [r4, #16]
 800dd96:	2301      	movs	r3, #1
 800dd98:	6163      	str	r3, [r4, #20]
 800dd9a:	b003      	add	sp, #12
 800dd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9e:	466a      	mov	r2, sp
 800dda0:	ab01      	add	r3, sp, #4
 800dda2:	f7ff ffc9 	bl	800dd38 <__swhatbuf_r>
 800dda6:	9f00      	ldr	r7, [sp, #0]
 800dda8:	4605      	mov	r5, r0
 800ddaa:	4639      	mov	r1, r7
 800ddac:	4630      	mov	r0, r6
 800ddae:	f7fd fc11 	bl	800b5d4 <_malloc_r>
 800ddb2:	b948      	cbnz	r0, 800ddc8 <__smakebuf_r+0x46>
 800ddb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb8:	059a      	lsls	r2, r3, #22
 800ddba:	d4ee      	bmi.n	800dd9a <__smakebuf_r+0x18>
 800ddbc:	f023 0303 	bic.w	r3, r3, #3
 800ddc0:	f043 0302 	orr.w	r3, r3, #2
 800ddc4:	81a3      	strh	r3, [r4, #12]
 800ddc6:	e7e2      	b.n	800dd8e <__smakebuf_r+0xc>
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddd2:	81a3      	strh	r3, [r4, #12]
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	6020      	str	r0, [r4, #0]
 800ddd8:	b15b      	cbz	r3, 800ddf2 <__smakebuf_r+0x70>
 800ddda:	4630      	mov	r0, r6
 800dddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dde0:	f000 f81e 	bl	800de20 <_isatty_r>
 800dde4:	b128      	cbz	r0, 800ddf2 <__smakebuf_r+0x70>
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	f023 0303 	bic.w	r3, r3, #3
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	89a3      	ldrh	r3, [r4, #12]
 800ddf4:	431d      	orrs	r5, r3
 800ddf6:	81a5      	strh	r5, [r4, #12]
 800ddf8:	e7cf      	b.n	800dd9a <__smakebuf_r+0x18>
	...

0800ddfc <_fstat_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	2300      	movs	r3, #0
 800de00:	4d06      	ldr	r5, [pc, #24]	@ (800de1c <_fstat_r+0x20>)
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	4611      	mov	r1, r2
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	f7f8 f973 	bl	80060f4 <_fstat>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	d102      	bne.n	800de18 <_fstat_r+0x1c>
 800de12:	682b      	ldr	r3, [r5, #0]
 800de14:	b103      	cbz	r3, 800de18 <_fstat_r+0x1c>
 800de16:	6023      	str	r3, [r4, #0]
 800de18:	bd38      	pop	{r3, r4, r5, pc}
 800de1a:	bf00      	nop
 800de1c:	20000b38 	.word	0x20000b38

0800de20 <_isatty_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	2300      	movs	r3, #0
 800de24:	4d05      	ldr	r5, [pc, #20]	@ (800de3c <_isatty_r+0x1c>)
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	602b      	str	r3, [r5, #0]
 800de2c:	f7f8 f971 	bl	8006112 <_isatty>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_isatty_r+0x1a>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_isatty_r+0x1a>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	20000b38 	.word	0x20000b38

0800de40 <_malloc_usable_size_r>:
 800de40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de44:	1f18      	subs	r0, r3, #4
 800de46:	2b00      	cmp	r3, #0
 800de48:	bfbc      	itt	lt
 800de4a:	580b      	ldrlt	r3, [r1, r0]
 800de4c:	18c0      	addlt	r0, r0, r3
 800de4e:	4770      	bx	lr

0800de50 <_init>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr

0800de5c <_fini>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	bf00      	nop
 800de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de62:	bc08      	pop	{r3}
 800de64:	469e      	mov	lr, r3
 800de66:	4770      	bx	lr
